ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32wlxx_hal_uart_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c"
  18              		.section	.text.UARTEx_Wakeup_AddressConfig,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	UARTEx_Wakeup_AddressConfig:
  25              	.LVL0:
  26              	.LFB867:
   1:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
   2:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ******************************************************************************
   3:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @file    stm32wlxx_hal_uart_ex.c
   4:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief   Extended UART HAL module driver.
   6:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          This file provides firmware functions to manage the following extended
   7:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           + Peripheral Control functions
  10:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
  11:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
  12:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ******************************************************************************
  13:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @attention
  14:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
  15:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * Copyright (c) 2020 STMicroelectronics.
  16:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * All rights reserved.
  17:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
  18:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  19:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * in the root directory of this software component.
  20:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  21:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
  22:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ******************************************************************************
  23:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   @verbatim
  24:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ==============================================================================
  25:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                ##### UART peripheral extended features  #####
  26:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ==============================================================================
  27:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  28:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  29:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  30:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) For the UART RS485 Driver Enable mode, initialize the UART registers
  31:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         by calling the HAL_RS485Ex_Init() API.
  32:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 2


  33:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) FIFO mode enabling/disabling and RX/TX FIFO threshold programming.
  34:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  35:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         -@- When UART operates in FIFO mode, FIFO mode must be enabled prior
  36:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****             starting RX/TX transfers. Also RX/TX FIFO thresholds must be
  37:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****             configured prior starting RX/TX transfers.
  38:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  39:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   @endverbatim
  40:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ******************************************************************************
  41:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  42:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  43:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Includes ------------------------------------------------------------------*/
  44:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #include "stm32wlxx_hal.h"
  45:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  46:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @addtogroup STM32WLxx_HAL_Driver
  47:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
  48:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  49:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  50:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEx UARTEx
  51:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief UART Extended HAL module driver
  52:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
  53:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  54:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  55:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #ifdef HAL_UART_MODULE_ENABLED
  56:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  57:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Private typedef -----------------------------------------------------------*/
  58:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Private define ------------------------------------------------------------*/
  59:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEX_Private_Constants UARTEx Private Constants
  60:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
  61:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  62:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* UART RX FIFO depth */
  63:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #define RX_FIFO_DEPTH 8U
  64:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  65:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* UART TX FIFO depth */
  66:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #define TX_FIFO_DEPTH 8U
  67:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
  68:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @}
  69:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  70:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  71:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Private macros ------------------------------------------------------------*/
  72:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Private variables ---------------------------------------------------------*/
  73:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Private function prototypes -----------------------------------------------*/
  74:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEx_Private_Functions UARTEx Private Functions
  75:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
  76:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  77:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
  78:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart);
  79:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
  80:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @}
  81:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  82:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  83:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /* Exported functions --------------------------------------------------------*/
  84:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  85:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions  UARTEx Exported Functions
  86:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
  87:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
  88:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
  89:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group1 Initialization and de-initialization functions
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 3


  90:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief    Extended Initialization and Configuration Functions
  91:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
  92:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** @verbatim
  93:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** ===============================================================================
  94:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****             ##### Initialization and Configuration functions #####
  95:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****  ===============================================================================
  96:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     [..]
  97:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
  98:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     in asynchronous mode.
  99:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       (+) For the asynchronous mode the parameters below can be configured:
 100:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Baud Rate
 101:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Word Length
 102:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Stop Bit
 103:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 104:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****              in the data register is transmitted but is changed by the parity bit.
 105:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Hardware flow control
 106:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Receiver/transmitter modes
 107:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) Over Sampling Method
 108:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) One-Bit Sampling Method
 109:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 110:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) TX and/or RX pin level inversion
 111:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) data logical level inversion
 112:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) RX and TX pins swap
 113:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) RX overrun detection disabling
 114:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) DMA disabling on RX error
 115:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) MSB first on communication line
 116:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (++) auto Baud rate detection
 117:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     [..]
 118:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     The HAL_RS485Ex_Init() API follows the UART RS485 mode configuration
 119:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      procedures (details for the procedures are available in reference manual).
 120:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 121:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** @endverbatim
 122:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 123:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 124:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 125:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   following table.
 126:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 127:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     Table 1. UART frame format.
 128:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 129:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 130:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 131:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 132:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 133:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 134:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 135:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 136:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 137:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 138:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 139:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 140:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 141:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 142:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 143:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 144:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
 145:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 146:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 4


 147:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 148:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Initialize the RS485 Driver enable feature according to the specified
 149:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         parameters in the UART_InitTypeDef and creates the associated handle.
 150:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart            UART handle.
 151:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Polarity         Select the driver enable polarity.
 152:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 153:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_HIGH DE signal is active high
 154:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_LOW  DE signal is active low
 155:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param AssertionTime    Driver Enable assertion time:
 156:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       5-bit value defining the time between the activation of the DE (Driver Enable)
 157:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       signal and the beginning of the start bit. It is expressed in sample time
 158:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       units (1/8 or 1/16 bit time, depending on the oversampling rate)
 159:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param DeassertionTime  Driver Enable deassertion time:
 160:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       5-bit value defining the time between the end of the last stop bit, in a
 161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       transmitted message, and the de-activation of the DE (Driver Enable) signal.
 162:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
 163:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       oversampling rate).
 164:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 165:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 166:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t Assertion
 167:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                                    uint32_t DeassertionTime)
 168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 169:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t temp;
 170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 171:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart == NULL)
 173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 174:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_ERROR;
 175:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the Driver Enable UART instance */
 177:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 178:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the Driver Enable polarity */
 180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_DE_POLARITY(Polarity));
 181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the Driver Enable assertion time */
 183:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 184:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 185:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the Driver Enable deassertion time */
 186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 190:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Allocate lock resource and initialize it */
 191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->Lock = HAL_UNLOCKED;
 192:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 193:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 194:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     UART_InitCallbacksToDefault(huart);
 195:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if (huart->MspInitCallback == NULL)
 197:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 198:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 199:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 200:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Init the low level hardware */
 202:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->MspInitCallback(huart);
 203:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #else
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 5


 204:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX */
 205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     HAL_UART_MspInit(huart);
 206:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 208:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 210:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 211:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable the Peripheral */
 212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 213:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 214:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the UART Communication parameters */
 215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 217:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_ERROR;
 218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 219:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 221:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 222:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     UART_AdvFeatureConfig(huart);
 223:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 224:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 225:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
 226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 227:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the Driver Enable polarity */
 229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 230:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 231:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the Driver Enable assertion and deassertion times */
 232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 235:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 236:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Enable the Peripheral */
 237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 238:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 242:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 244:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @}
 245:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group2 IO operation functions
 248:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *  @brief Extended functions
 249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
 250:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** @verbatim
 251:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****  ===============================================================================
 252:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                       ##### IO operation functions #####
 253:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****  ===============================================================================
 254:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     This subsection provides a set of Wakeup and FIFO mode related callback functions.
 255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 256:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) Wakeup from Stop mode Callback:
 257:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (+) HAL_UARTEx_WakeupCallback()
 258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 259:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) TX/RX Fifos Callbacks:
 260:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (+) HAL_UARTEx_RxFifoFullCallback()
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 6


 261:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (+) HAL_UARTEx_TxFifoEmptyCallback()
 262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 263:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** @endverbatim
 264:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
 265:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 266:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 267:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief UART wakeup from Stop mode callback.
 269:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart UART handle.
 270:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval None
 271:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 272:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
 273:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 274:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 275:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   UNUSED(huart);
 276:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 277:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 278:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****             the HAL_UARTEx_WakeupCallback can be implemented in the user file.
 279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****    */
 280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 281:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 283:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief  UART RX Fifo full callback.
 284:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param  huart UART handle.
 285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval None
 286:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 287:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** __weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 288:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 289:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   UNUSED(huart);
 291:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 292:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 293:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****             the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
 294:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****    */
 295:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 296:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 297:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 298:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief  UART TX Fifo empty callback.
 299:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param  huart UART handle.
 300:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval None
 301:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 302:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** __weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 304:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   UNUSED(huart);
 306:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 307:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 308:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****             the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
 309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****    */
 310:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 311:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 312:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 313:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @}
 314:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 315:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 316:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group3 Peripheral Control functions
 317:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief    Extended Peripheral Control functions
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 7


 318:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *
 319:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** @verbatim
 320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****  ===============================================================================
 321:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                       ##### Peripheral Control functions #####
 322:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****  ===============================================================================
 323:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     [..] This section provides the following functions:
 324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_MultiProcessorEx_AddressLength_Set() API optionally sets the UART node address
 325:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****          detection length to more than 4 bits for multiprocessor address mark wake up.
 326:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_StopModeWakeUpSourceConfig() API defines the wake-up from stop mode
 327:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****          trigger: address match, Start Bit detection or RXNE bit status.
 328:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableStopMode() API enables the UART to wake up the MCU from stop mode
 329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableStopMode() API disables the above functionality
 330:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableFifoMode() API enables the FIFO mode
 331:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableFifoMode() API disables the FIFO mode
 332:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_SetTxFifoThreshold() API sets the TX FIFO threshold
 333:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****      (+) HAL_UARTEx_SetRxFifoThreshold() API sets the RX FIFO threshold
 334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 335:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 336:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     services to user. (For example, these functions allow application to handle use cases
 337:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     where number of data to be received is unknown).
 338:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 339:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) Compared to standard reception services which only consider number of received
 340:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         data elements as reception completion criteria, these functions also consider additional ev
 341:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         as triggers for updating reception status to caller :
 342:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 343:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 344:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                for 1 frame time, after last received byte.
 345:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           (++) RX inactivity detected by RTO, i.e. line has been in idle state
 346:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                for a programmable time, after last received byte.
 347:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        (+) Detection that a specific character has been received.
 348:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 349:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) There are two mode of transfer:
 350:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 351:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 352:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 353:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            are returned by function after finishing transfer.
 354:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            These API's return the HAL status.
 356:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            The end of the data processing will be indicated through the
 357:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 359:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 360:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 361:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) Blocking mode API:
 362:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 363:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 364:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) Non-Blocking mode API with Interrupt:
 365:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 366:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 367:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     (#) Non-Blocking mode API with DMA:
 368:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 369:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 370:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** @endverbatim
 371:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
 372:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 373:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 374:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 8


 375:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief By default in multiprocessor mode, when the wake up method is set
 376:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        to address mark, the UART handles only 4-bit long addresses detection;
 377:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        this API allows to enable longer addresses detection (6-, 7- or 8-bit
 378:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        long).
 379:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note  Addresses detection lengths are: 6-bit address detection in 7-bit data mode,
 380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        7-bit address detection in 8-bit data mode, 8-bit address detection in 9-bit data mode.
 381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart         UART handle.
 382:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param AddressLength This parameter can be one of the following values:
 383:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
 384:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
 385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t Addres
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 389:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart == NULL)
 391:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 392:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_ERROR;
 393:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the address length parameter */
 396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
 397:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 399:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable the Peripheral */
 401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 402:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 403:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the address length */
 404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 405:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 406:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Enable the Peripheral */
 407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 408:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 409:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState to Ready */
 410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 412:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 413:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 414:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Set Wakeup from Stop mode interrupt flag selection.
 415:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note It is the application responsibility to enable the interrupt used as
 416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       usart_wkup interrupt source before entering low-power mode.
 417:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart           UART handle.
 418:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param WakeUpSelection Address match, Start Bit detection or RXNE/RXFNE bit status.
 419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 420:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_ADDRESS
 421:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_STARTBIT
 422:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
 423:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 424:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeD
 426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 427:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tickstart;
 429:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 430:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* check the wake-up from stop mode UART instance */
 431:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 9


 432:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 433:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));
 434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 437:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 439:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 440:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable the Peripheral */
 441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 442:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 443:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the wake-up selection scheme */
 444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 445:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 447:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 450:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 451:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Enable the Peripheral */
 452:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 453:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 454:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Init tickstart for timeout management */
 455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   tickstart = HAL_GetTick();
 456:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Wait until REACK flag is set */
 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE)
 459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 460:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     status = HAL_TIMEOUT;
 461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   else
 463:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 464:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Initialize the UART State */
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->gState = HAL_UART_STATE_READY;
 466:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 467:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 468:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
 469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 470:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 471:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return status;
 472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 473:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 474:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Enable UART Stop Mode.
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
 477:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart UART handle.
 478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 479:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
 481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 482:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 484:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set UESM bit */
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 10


 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return HAL_OK;
 492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 495:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Disable UART Stop Mode.
 496:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart UART handle.
 497:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 499:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
 500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 501:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 504:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Clear UESM bit */
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 506:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 509:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return HAL_OK;
 511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 512:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 513:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 514:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief  Enable the FIFO mode.
 515:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart      UART handle.
 516:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 518:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
 519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 521:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 522:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check parameters */
 523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 524:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 525:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 527:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 529:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 530:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Save actual UART configuration */
 531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 532:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 533:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable UART */
 534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 535:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 536:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Enable FIFO mode */
 537:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->FifoMode = UART_FIFOMODE_ENABLE;
 539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 540:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Restore UART configuration */
 541:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 542:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 543:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Determine the number of data to process during RX/TX ISR execution */
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   UARTEx_SetNbDataToProcess(huart);
 545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 11


 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return HAL_OK;
 552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 553:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 555:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief  Disable the FIFO mode.
 556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart      UART handle.
 557:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 558:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
 560:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 561:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 562:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 563:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check parameters */
 564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 566:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 568:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 570:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 571:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Save actual UART configuration */
 572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable UART */
 575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 576:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 577:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Enable FIFO mode */
 578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->FifoMode = UART_FIFOMODE_DISABLE;
 580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Restore UART configuration */
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 585:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 586:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 588:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return HAL_OK;
 590:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 591:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 592:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 593:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief  Set the TXFIFO threshold.
 594:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart      UART handle.
 595:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Threshold  TX FIFO threshold value
 596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 597:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_1_8
 598:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_1_4
 599:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_1_2
 600:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_3_4
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
 602:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 12


 603:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 604:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
 606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 608:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check parameters */
 610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 612:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 613:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 615:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 617:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 618:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Save actual UART configuration */
 619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 621:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable UART */
 622:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 623:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Update TX threshold configuration */
 625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Determine the number of data to process during RX/TX ISR execution */
 628:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   UARTEx_SetNbDataToProcess(huart);
 629:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Restore UART configuration */
 631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 632:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 634:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 635:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
 636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return HAL_OK;
 639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 640:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 641:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief  Set the RXFIFO threshold.
 643:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart      UART handle.
 644:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Threshold  RX FIFO threshold value
 645:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 646:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_1_8
 647:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_1_4
 648:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_1_2
 649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_3_4
 650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
 651:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
 652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 653:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
 655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 656:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 658:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the parameters */
 659:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 13


 660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 662:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 667:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Save actual UART configuration */
 668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   tmpcr1 = READ_REG(huart->Instance->CR1);
 669:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 670:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Disable UART */
 671:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 672:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Update RX threshold configuration */
 674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 675:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 676:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Determine the number of data to process during RX/TX ISR execution */
 677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   UARTEx_SetNbDataToProcess(huart);
 678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 679:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Restore UART configuration */
 680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   WRITE_REG(huart->Instance->CR1, tmpcr1);
 681:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_READY;
 683:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Unlocked */
 685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return HAL_OK;
 688:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 689:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 690:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
 692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
 693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
 694:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
 695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 696:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
 697:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         of uint16_t available through pData.
 698:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note When FIFO mode is enabled, the RXFNE flag is set as long as the RXFIFO
 699:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       is not empty. Read operations from the RDR register are performed when
 700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       RXFNE flag is set. From hardware perspective, RXFNE flag and
 701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       RXNE are mapped on the same bit-field.
 702:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   Dual core specific: there is no support for unaligned accesses on the Cortex-M0+ proces
 703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 705:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         (as received data will be handled using uint16_t pointer cast). Depending on compilatio
 706:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart   UART handle.
 708:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
 709:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
 710:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
 711:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
 712:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 713:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
 715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 14


 717:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint16_t uhMask;
 719:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tickstart;
 720:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 723:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       return  HAL_ERROR;
 727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 728:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #if defined(CORE_CM0PLUS)
 730:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data to be received from RDR will be
 732:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        handled through a uint16_t cast. */
 733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 734:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 735:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 736:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 737:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         return  HAL_ERROR;
 738:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 740:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #endif /* CORE_CM0PLUS */
 742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Init tickstart for timeout management */
 748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     tickstart = HAL_GetTick();
 749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxXferSize  = Size;
 751:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 752:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 753:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Computation of UART mask to apply to RDR register */
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     UART_MASK_COMPUTATION(huart);
 755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 756:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 757:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
 758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 759:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       pdata8bits  = NULL;
 761:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 762:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 763:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     else
 764:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 765:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       pdata8bits  = pData;
 766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       pdata16bits = NULL;
 767:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 768:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 769:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Initialize output number of received elements */
 770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     *RxLen = 0U;
 771:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* as long as data have to be received */
 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     while (huart->RxXferCount > 0U)
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 15


 774:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       /* Check if IDLE flag is set */
 776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 777:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         /* Clear IDLE flag in ISR */
 779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 780:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
 782:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
 783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         if (*RxLen > 0U)
 784:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 787:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 788:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           return HAL_OK;
 789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 790:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 791:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 792:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       /* Check if RXNE flag is set */
 793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         if (pdata8bits == NULL)
 796:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 798:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata16bits++;
 799:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 800:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         else
 801:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 803:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata8bits++;
 804:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 805:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         /* Increment number of received elements */
 806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         *RxLen += 1U;
 807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         huart->RxXferCount--;
 808:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 809:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 810:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       /* Check for the Timeout */
 811:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if (Timeout != HAL_MAX_DELAY)
 812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 814:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 815:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 816:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           return HAL_TIMEOUT;
 818:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 819:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 821:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 822:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Set number of received elements in output parameter : RxLen */
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 824:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 825:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_READY;
 826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 827:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_OK;
 828:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   else
 830:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 16


 831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_BUSY;
 832:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 833:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 834:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 835:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
 837:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
 838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
 839:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         number of received data elements.
 840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 841:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
 842:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         of uint16_t available through pData.
 843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   Dual core specific: there is no support for unaligned accesses on the Cortex-M0+ proces
 844:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 845:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 846:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         (as received data will be handled using uint16_t pointer cast). Depending on compilatio
 847:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 848:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart UART handle.
 849:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 850:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 851:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 852:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 853:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
 854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 855:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 856:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 857:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 859:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 861:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       return HAL_ERROR;
 863:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 864:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 865:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #if defined(CORE_CM0PLUS)
 866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 867:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data to be received from RDR will be
 868:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        handled through a uint16_t cast. */
 869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 870:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 871:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         return  HAL_ERROR;
 874:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 875:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 876:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 877:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #endif /* CORE_CM0PLUS */
 878:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 879:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 882:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 883:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if (status == HAL_OK)
 886:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 17


 888:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 889:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 891:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 892:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       else
 893:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 894:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 895:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 896:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            (Overrun error for instance).
 897:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         status = HAL_ERROR;
 899:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 900:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 901:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return status;
 903:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 904:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   else
 905:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_BUSY;
 907:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 909:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 910:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 911:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
 912:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
 913:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
 914:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
 915:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
 916:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
 917:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         the parity bit (MSB position).
 918:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 919:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
 920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         of uint16_t available through pData.
 921:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note   Dual core specific: there is no support for unaligned accesses on the Cortex-M0+ proces
 922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 923:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 924:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         (as received data will be handled by DMA from halfword frontier). Depending on compilat
 925:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 926:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart UART handle.
 927:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 928:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 929:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval HAL status
 930:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
 931:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
 932:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
 933:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 935:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 937:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 939:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       return HAL_ERROR;
 941:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 942:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 943:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #if defined(CORE_CM0PLUS)
 944:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 18


 945:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data copy from RDR will be
 946:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****        handled by DMA from a uint16_t frontier. */
 947:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 948:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 949:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 950:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 951:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         return  HAL_ERROR;
 952:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 953:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 954:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 955:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #endif /* CORE_CM0PLUS */
 956:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 957:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 958:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 959:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 960:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 961:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 962:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 963:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     if (status == HAL_OK)
 964:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 966:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 967:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 969:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 970:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       else
 971:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 972:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 973:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 974:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            (Overrun error for instance).
 975:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 976:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         status = HAL_ERROR;
 977:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 978:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 979:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 980:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return status;
 981:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 982:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   else
 983:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 984:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     return HAL_BUSY;
 985:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 986:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 987:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 988:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
 989:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Provide Rx Event type that has lead to RxEvent callback execution.
 990:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note  When HAL_UARTEx_ReceiveToIdle_IT() or HAL_UARTEx_ReceiveToIdle_DMA() API are called, pro
 991:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        of reception process is provided to application through calls of Rx Event callback (eith
 992:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        HAL_UARTEx_RxEventCallback() or user registered one). As several types of events could o
 993:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        Half Transfer, or Transfer Complete), this function allows to retrieve the Rx Event type
 994:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        to Rx Event callback execution.
 995:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note  This function is expected to be called within the user implementation of Rx Event Callba
 996:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        in order to provide the accurate value :
 997:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        In Interrupt Mode :
 998:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
 999:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1000:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *             received data is lower than expected one)
1001:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        In DMA Mode :
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 19


1002:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
1003:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_HT : when half of expected nb of data has been received
1004:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1005:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *             received data is lower than expected one).
1006:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        In DMA mode, RxEvent callback could be called several times;
1007:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        When DMA is configured in Normal Mode, HT event does not stop Reception process;
1008:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception proc
1009:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param  huart UART handle.
1010:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval Rx Event Type (return vale will be a value of @ref UART_RxEvent_Type_Values)
1011:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
1012:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
1013:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
1014:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Return Rx Event type value, as stored in UART handle */
1015:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   return(huart->RxEventType);
1016:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
1017:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1018:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
1019:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @}
1020:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
1021:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1022:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
1023:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @}
1024:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
1025:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1026:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /** @addtogroup UARTEx_Private_Functions
1027:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @{
1028:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
1029:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1030:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
1031:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Initialize the UART wake-up from stop mode parameters when triggered by address detectio
1032:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart           UART handle.
1033:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param WakeUpSelection UART wake up from stop mode parameters.
1034:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval None
1035:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
1036:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
1037:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
  27              		.loc 1 1037 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 1037 1 is_stmt 0 view .LVU1
  33 0000 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 8
  35 0002 02AB     		add	r3, sp, #8
  36 0004 03E90600 		stmdb	r3, {r1, r2}
1038:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));
  37              		.loc 1 1038 3 is_stmt 1 view .LVU2
1039:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1040:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the USART address length */
1041:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
  38              		.loc 1 1041 3 view .LVU3
  39 0008 0268     		ldr	r2, [r0]
  40 000a 5368     		ldr	r3, [r2, #4]
  41 000c 23F01003 		bic	r3, r3, #16
  42 0010 BDF80410 		ldrh	r1, [sp, #4]
  43 0014 0B43     		orrs	r3, r3, r1
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 20


  44 0016 5360     		str	r3, [r2, #4]
1042:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1043:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Set the USART address node */
1044:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_AD
  45              		.loc 1 1044 3 view .LVU4
  46 0018 0268     		ldr	r2, [r0]
  47 001a 5368     		ldr	r3, [r2, #4]
  48 001c 23F07F43 		bic	r3, r3, #-16777216
  49 0020 9DF80610 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
  50 0024 43EA0163 		orr	r3, r3, r1, lsl #24
  51 0028 5360     		str	r3, [r2, #4]
1045:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
  52              		.loc 1 1045 1 is_stmt 0 view .LVU5
  53 002a 02B0     		add	sp, sp, #8
  54              		.cfi_def_cfa_offset 0
  55              		@ sp needed
  56 002c 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE867:
  60              		.section	.text.UARTEx_SetNbDataToProcess,"ax",%progbits
  61              		.align	1
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	UARTEx_SetNbDataToProcess:
  67              	.LVL1:
  68              	.LFB868:
1046:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1047:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** /**
1048:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @brief Calculate the number of data to process in RX/TX ISR.
1049:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @note The RX FIFO depth and the TX FIFO depth is extracted from
1050:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   *       the UART configuration registers.
1051:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @param huart UART handle.
1052:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   * @retval None
1053:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   */
1054:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
1055:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** {
  69              		.loc 1 1055 1 is_stmt 1 view -0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
1056:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t rx_fifo_depth;
  74              		.loc 1 1056 3 view .LVU7
1057:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t tx_fifo_depth;
  75              		.loc 1 1057 3 view .LVU8
1058:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t rx_fifo_threshold;
  76              		.loc 1 1058 3 view .LVU9
1059:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t tx_fifo_threshold;
  77              		.loc 1 1059 3 view .LVU10
1060:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  78              		.loc 1 1060 3 view .LVU11
1061:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
  79              		.loc 1 1061 3 view .LVU12
1062:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
1063:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   if (huart->FifoMode == UART_FIFOMODE_DISABLE)
  80              		.loc 1 1063 3 view .LVU13
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 21


  81              		.loc 1 1063 12 is_stmt 0 view .LVU14
  82 0000 436E     		ldr	r3, [r0, #100]
  83              		.loc 1 1063 6 view .LVU15
  84 0002 2BB9     		cbnz	r3, .L4
1064:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
1065:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbTxDataToProcess = 1U;
  85              		.loc 1 1065 5 is_stmt 1 view .LVU16
  86              		.loc 1 1065 30 is_stmt 0 view .LVU17
  87 0004 0123     		movs	r3, #1
  88 0006 A0F86A30 		strh	r3, [r0, #106]	@ movhi
1066:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbRxDataToProcess = 1U;
  89              		.loc 1 1066 5 is_stmt 1 view .LVU18
  90              		.loc 1 1066 30 is_stmt 0 view .LVU19
  91 000a A0F86830 		strh	r3, [r0, #104]	@ movhi
  92 000e 7047     		bx	lr
  93              	.L4:
1055:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t rx_fifo_depth;
  94              		.loc 1 1055 1 view .LVU20
  95 0010 30B4     		push	{r4, r5}
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 4, -8
  98              		.cfi_offset 5, -4
1067:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
1068:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   else
1069:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
1070:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     rx_fifo_depth = RX_FIFO_DEPTH;
  99              		.loc 1 1070 5 is_stmt 1 view .LVU21
 100              	.LVL2:
1071:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     tx_fifo_depth = TX_FIFO_DEPTH;
 101              		.loc 1 1071 5 view .LVU22
1072:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RX
 102              		.loc 1 1072 5 view .LVU23
 103              		.loc 1 1072 35 is_stmt 0 view .LVU24
 104 0012 0368     		ldr	r3, [r0]
 105 0014 9A68     		ldr	r2, [r3, #8]
 106              		.loc 1 1072 23 view .LVU25
 107 0016 C2F34262 		ubfx	r2, r2, #25, #3
 108              	.LVL3:
1073:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TX
 109              		.loc 1 1073 5 is_stmt 1 view .LVU26
 110              		.loc 1 1073 35 is_stmt 0 view .LVU27
 111 001a 9968     		ldr	r1, [r3, #8]
 112              		.loc 1 1073 23 view .LVU28
 113 001c 490F     		lsrs	r1, r1, #29
 114              	.LVL4:
1074:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 115              		.loc 1 1074 5 is_stmt 1 view .LVU29
 116              		.loc 1 1074 68 is_stmt 0 view .LVU30
 117 001e 094D     		ldr	r5, .L9
 118 0020 6B5C     		ldrb	r3, [r5, r1]	@ zero_extendqisi2
 119              		.loc 1 1074 57 view .LVU31
 120 0022 DB00     		lsls	r3, r3, #3
1075:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                                (uint16_t)denominator[tx_fifo_threshold];
 121              		.loc 1 1075 53 view .LVU32
 122 0024 084C     		ldr	r4, .L9+4
 123 0026 615C     		ldrb	r1, [r4, r1]	@ zero_extendqisi2
 124              	.LVL5:
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 22


1074:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 125              		.loc 1 1074 89 view .LVU33
 126 0028 93FBF1F3 		sdiv	r3, r3, r1
1074:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 127              		.loc 1 1074 30 view .LVU34
 128 002c A0F86A30 		strh	r3, [r0, #106]	@ movhi
1076:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 129              		.loc 1 1076 5 is_stmt 1 view .LVU35
 130              		.loc 1 1076 68 is_stmt 0 view .LVU36
 131 0030 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 132              		.loc 1 1076 57 view .LVU37
 133 0032 DB00     		lsls	r3, r3, #3
1077:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****                                (uint16_t)denominator[rx_fifo_threshold];
 134              		.loc 1 1077 53 view .LVU38
 135 0034 A25C     		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 136              	.LVL6:
1076:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 137              		.loc 1 1076 89 view .LVU39
 138 0036 93FBF2F3 		sdiv	r3, r3, r2
1076:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 139              		.loc 1 1076 30 view .LVU40
 140 003a A0F86830 		strh	r3, [r0, #104]	@ movhi
1078:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
1079:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 141              		.loc 1 1079 1 view .LVU41
 142 003e 30BC     		pop	{r4, r5}
 143              		.cfi_restore 5
 144              		.cfi_restore 4
 145              		.cfi_def_cfa_offset 0
 146 0040 7047     		bx	lr
 147              	.L10:
 148 0042 00BF     		.align	2
 149              	.L9:
 150 0044 00000000 		.word	numerator.1
 151 0048 00000000 		.word	denominator.0
 152              		.cfi_endproc
 153              	.LFE868:
 155              		.section	.text.HAL_RS485Ex_Init,"ax",%progbits
 156              		.align	1
 157              		.global	HAL_RS485Ex_Init
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 162              	HAL_RS485Ex_Init:
 163              	.LVL7:
 164              	.LFB851:
 168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t temp;
 165              		.loc 1 168 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 169              		.loc 1 169 3 view .LVU43
 172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 170              		.loc 1 172 3 view .LVU44
 172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 171              		.loc 1 172 6 is_stmt 0 view .LVU45
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 23


 172 0000 0028     		cmp	r0, #0
 173 0002 3ED0     		beq	.L15
 168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t temp;
 174              		.loc 1 168 1 view .LVU46
 175 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 176              		.cfi_def_cfa_offset 24
 177              		.cfi_offset 3, -24
 178              		.cfi_offset 4, -20
 179              		.cfi_offset 5, -16
 180              		.cfi_offset 6, -12
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0006 0F46     		mov	r7, r1
 184 0008 1646     		mov	r6, r2
 185 000a 1D46     		mov	r5, r3
 186 000c 0446     		mov	r4, r0
 177:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 187              		.loc 1 177 3 is_stmt 1 view .LVU47
 180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 188              		.loc 1 180 3 view .LVU48
 183:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 189              		.loc 1 183 3 view .LVU49
 186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 190              		.loc 1 186 3 view .LVU50
 188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 191              		.loc 1 188 3 view .LVU51
 188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 192              		.loc 1 188 12 is_stmt 0 view .LVU52
 193 000e D0F88830 		ldr	r3, [r0, #136]
 194              	.LVL8:
 188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 195              		.loc 1 188 6 view .LVU53
 196 0012 6BB3     		cbz	r3, .L20
 197              	.LVL9:
 198              	.L13:
 209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 199              		.loc 1 209 3 is_stmt 1 view .LVU54
 209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 200              		.loc 1 209 17 is_stmt 0 view .LVU55
 201 0014 2423     		movs	r3, #36
 202 0016 C4F88830 		str	r3, [r4, #136]
 212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 203              		.loc 1 212 3 is_stmt 1 view .LVU56
 204 001a 2268     		ldr	r2, [r4]
 205 001c 1368     		ldr	r3, [r2]
 206 001e 23F00103 		bic	r3, r3, #1
 207 0022 1360     		str	r3, [r2]
 215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 208              		.loc 1 215 3 view .LVU57
 215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 209              		.loc 1 215 7 is_stmt 0 view .LVU58
 210 0024 2046     		mov	r0, r4
 211 0026 FFF7FEFF 		bl	UART_SetConfig
 212              	.LVL10:
 215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 213              		.loc 1 215 6 view .LVU59
 214 002a 0128     		cmp	r0, #1
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 24


 215 002c 1FD0     		beq	.L12
 220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 216              		.loc 1 220 3 is_stmt 1 view .LVU60
 220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 217              		.loc 1 220 26 is_stmt 0 view .LVU61
 218 002e A36A     		ldr	r3, [r4, #40]
 220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 219              		.loc 1 220 6 view .LVU62
 220 0030 1BBB     		cbnz	r3, .L21
 221              	.L14:
 226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 222              		.loc 1 226 3 is_stmt 1 view .LVU63
 223 0032 2268     		ldr	r2, [r4]
 224 0034 9368     		ldr	r3, [r2, #8]
 225 0036 43F48043 		orr	r3, r3, #16384
 226 003a 9360     		str	r3, [r2, #8]
 229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 227              		.loc 1 229 3 view .LVU64
 228 003c 2268     		ldr	r2, [r4]
 229 003e 9368     		ldr	r3, [r2, #8]
 230 0040 23F40043 		bic	r3, r3, #32768
 231 0044 3B43     		orrs	r3, r3, r7
 232 0046 9360     		str	r3, [r2, #8]
 232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 233              		.loc 1 232 3 view .LVU65
 234              	.LVL11:
 233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 235              		.loc 1 233 3 view .LVU66
 233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 236              		.loc 1 233 28 is_stmt 0 view .LVU67
 237 0048 2D04     		lsls	r5, r5, #16
 238              	.LVL12:
 233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 239              		.loc 1 233 8 view .LVU68
 240 004a 45EA4652 		orr	r2, r5, r6, lsl #21
 241              	.LVL13:
 234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 242              		.loc 1 234 3 is_stmt 1 view .LVU69
 243 004e 2168     		ldr	r1, [r4]
 244 0050 0B68     		ldr	r3, [r1]
 245 0052 23F07F73 		bic	r3, r3, #66846720
 246 0056 23F44033 		bic	r3, r3, #196608
 247 005a 1343     		orrs	r3, r3, r2
 248 005c 0B60     		str	r3, [r1]
 237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 249              		.loc 1 237 3 view .LVU70
 250 005e 2268     		ldr	r2, [r4]
 251              	.LVL14:
 237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 252              		.loc 1 237 3 is_stmt 0 view .LVU71
 253 0060 1368     		ldr	r3, [r2]
 254 0062 43F00103 		orr	r3, r3, #1
 255 0066 1360     		str	r3, [r2]
 240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 256              		.loc 1 240 3 is_stmt 1 view .LVU72
 240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 257              		.loc 1 240 11 is_stmt 0 view .LVU73
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 25


 258 0068 2046     		mov	r0, r4
 259 006a FFF7FEFF 		bl	UART_CheckIdleState
 260              	.LVL15:
 261              	.L12:
 241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 262              		.loc 1 241 1 view .LVU74
 263 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 264              	.LVL16:
 265              	.L20:
 191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 266              		.loc 1 191 5 is_stmt 1 view .LVU75
 191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 267              		.loc 1 191 17 is_stmt 0 view .LVU76
 268 0070 80F88430 		strb	r3, [r0, #132]
 205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 269              		.loc 1 205 5 is_stmt 1 view .LVU77
 270 0074 FFF7FEFF 		bl	HAL_UART_MspInit
 271              	.LVL17:
 205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 272              		.loc 1 205 5 is_stmt 0 view .LVU78
 273 0078 CCE7     		b	.L13
 274              	.L21:
 222:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 275              		.loc 1 222 5 is_stmt 1 view .LVU79
 276 007a 2046     		mov	r0, r4
 277 007c FFF7FEFF 		bl	UART_AdvFeatureConfig
 278              	.LVL18:
 279 0080 D7E7     		b	.L14
 280              	.LVL19:
 281              	.L15:
 282              		.cfi_def_cfa_offset 0
 283              		.cfi_restore 3
 284              		.cfi_restore 4
 285              		.cfi_restore 5
 286              		.cfi_restore 6
 287              		.cfi_restore 7
 288              		.cfi_restore 14
 174:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 289              		.loc 1 174 12 is_stmt 0 view .LVU80
 290 0082 0120     		movs	r0, #1
 291              	.LVL20:
 241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 292              		.loc 1 241 1 view .LVU81
 293 0084 7047     		bx	lr
 294              		.cfi_endproc
 295              	.LFE851:
 297              		.section	.text.HAL_UARTEx_WakeupCallback,"ax",%progbits
 298              		.align	1
 299              		.weak	HAL_UARTEx_WakeupCallback
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 304              	HAL_UARTEx_WakeupCallback:
 305              	.LVL21:
 306              	.LFB852:
 273:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 307              		.loc 1 273 1 is_stmt 1 view -0
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 26


 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 275:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 312              		.loc 1 275 3 view .LVU83
 280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 313              		.loc 1 280 1 is_stmt 0 view .LVU84
 314 0000 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE852:
 318              		.section	.text.HAL_UARTEx_RxFifoFullCallback,"ax",%progbits
 319              		.align	1
 320              		.weak	HAL_UARTEx_RxFifoFullCallback
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	HAL_UARTEx_RxFifoFullCallback:
 326              	.LVL22:
 327              	.LFB853:
 288:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 328              		.loc 1 288 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 333              		.loc 1 290 3 view .LVU86
 295:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 334              		.loc 1 295 1 is_stmt 0 view .LVU87
 335 0000 7047     		bx	lr
 336              		.cfi_endproc
 337              	.LFE853:
 339              		.section	.text.HAL_UARTEx_TxFifoEmptyCallback,"ax",%progbits
 340              		.align	1
 341              		.weak	HAL_UARTEx_TxFifoEmptyCallback
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	HAL_UARTEx_TxFifoEmptyCallback:
 347              	.LVL23:
 348              	.LFB854:
 303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 349              		.loc 1 303 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 354              		.loc 1 305 3 view .LVU89
 310:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 355              		.loc 1 310 1 is_stmt 0 view .LVU90
 356 0000 7047     		bx	lr
 357              		.cfi_endproc
 358              	.LFE854:
 360              		.section	.text.HAL_MultiProcessorEx_AddressLength_Set,"ax",%progbits
 361              		.align	1
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 27


 362              		.global	HAL_MultiProcessorEx_AddressLength_Set
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 367              	HAL_MultiProcessorEx_AddressLength_Set:
 368              	.LVL24:
 369              	.LFB855:
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 370              		.loc 1 388 1 is_stmt 1 view -0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 374              		.loc 1 390 3 view .LVU92
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 375              		.loc 1 390 6 is_stmt 0 view .LVU93
 376 0000 C0B1     		cbz	r0, .L27
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 377              		.loc 1 388 1 view .LVU94
 378 0002 08B5     		push	{r3, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 3, -8
 381              		.cfi_offset 14, -4
 382 0004 0346     		mov	r3, r0
 396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 383              		.loc 1 396 3 is_stmt 1 view .LVU95
 398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 384              		.loc 1 398 3 view .LVU96
 398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 385              		.loc 1 398 17 is_stmt 0 view .LVU97
 386 0006 2422     		movs	r2, #36
 387 0008 C0F88820 		str	r2, [r0, #136]
 401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 388              		.loc 1 401 3 is_stmt 1 view .LVU98
 389 000c 0068     		ldr	r0, [r0]
 390              	.LVL25:
 401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 391              		.loc 1 401 3 is_stmt 0 view .LVU99
 392 000e 0268     		ldr	r2, [r0]
 393 0010 22F00102 		bic	r2, r2, #1
 394 0014 0260     		str	r2, [r0]
 404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 395              		.loc 1 404 3 is_stmt 1 view .LVU100
 396 0016 1868     		ldr	r0, [r3]
 397 0018 4268     		ldr	r2, [r0, #4]
 398 001a 22F01002 		bic	r2, r2, #16
 399 001e 1143     		orrs	r1, r1, r2
 400              	.LVL26:
 404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 401              		.loc 1 404 3 is_stmt 0 view .LVU101
 402 0020 4160     		str	r1, [r0, #4]
 407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 403              		.loc 1 407 3 is_stmt 1 view .LVU102
 404 0022 1968     		ldr	r1, [r3]
 405 0024 0A68     		ldr	r2, [r1]
 406 0026 42F00102 		orr	r2, r2, #1
 407 002a 0A60     		str	r2, [r1]
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 28


 410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 408              		.loc 1 410 3 view .LVU103
 410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 409              		.loc 1 410 11 is_stmt 0 view .LVU104
 410 002c 1846     		mov	r0, r3
 411 002e FFF7FEFF 		bl	UART_CheckIdleState
 412              	.LVL27:
 411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 413              		.loc 1 411 1 view .LVU105
 414 0032 08BD     		pop	{r3, pc}
 415              	.LVL28:
 416              	.L27:
 417              		.cfi_def_cfa_offset 0
 418              		.cfi_restore 3
 419              		.cfi_restore 14
 392:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 420              		.loc 1 392 12 view .LVU106
 421 0034 0120     		movs	r0, #1
 422              	.LVL29:
 411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 423              		.loc 1 411 1 view .LVU107
 424 0036 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE855:
 428              		.section	.text.HAL_UARTEx_StopModeWakeUpSourceConfig,"ax",%progbits
 429              		.align	1
 430              		.global	HAL_UARTEx_StopModeWakeUpSourceConfig
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 435              	HAL_UARTEx_StopModeWakeUpSourceConfig:
 436              	.LVL30:
 437              	.LFB856:
 426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 438              		.loc 1 426 1 is_stmt 1 view -0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 8
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 442              		.loc 1 426 1 is_stmt 0 view .LVU109
 443 0000 10B5     		push	{r4, lr}
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 4, -8
 446              		.cfi_offset 14, -4
 447 0002 84B0     		sub	sp, sp, #16
 448              		.cfi_def_cfa_offset 24
 449 0004 04AB     		add	r3, sp, #16
 450 0006 03E90600 		stmdb	r3, {r1, r2}
 427:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tickstart;
 451              		.loc 1 427 3 is_stmt 1 view .LVU110
 452              	.LVL31:
 428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 453              		.loc 1 428 3 view .LVU111
 431:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 454              		.loc 1 431 3 view .LVU112
 433:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 455              		.loc 1 433 3 view .LVU113
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 29


 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 456              		.loc 1 436 3 view .LVU114
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 457              		.loc 1 436 3 view .LVU115
 458 000a 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 459 000e 012B     		cmp	r3, #1
 460 0010 35D0     		beq	.L36
 461 0012 0446     		mov	r4, r0
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 462              		.loc 1 436 3 discriminator 2 view .LVU116
 463 0014 0123     		movs	r3, #1
 464 0016 80F88430 		strb	r3, [r0, #132]
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 465              		.loc 1 436 3 discriminator 2 view .LVU117
 438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 466              		.loc 1 438 3 discriminator 2 view .LVU118
 438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 467              		.loc 1 438 17 is_stmt 0 discriminator 2 view .LVU119
 468 001a 2423     		movs	r3, #36
 469 001c C0F88830 		str	r3, [r0, #136]
 441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 470              		.loc 1 441 3 is_stmt 1 discriminator 2 view .LVU120
 471 0020 0268     		ldr	r2, [r0]
 472 0022 1368     		ldr	r3, [r2]
 473 0024 23F00103 		bic	r3, r3, #1
 474 0028 1360     		str	r3, [r2]
 444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 475              		.loc 1 444 3 discriminator 2 view .LVU121
 476 002a 0168     		ldr	r1, [r0]
 477 002c 8B68     		ldr	r3, [r1, #8]
 478 002e 23F44013 		bic	r3, r3, #3145728
 479 0032 029A     		ldr	r2, [sp, #8]
 480 0034 1343     		orrs	r3, r3, r2
 481 0036 8B60     		str	r3, [r1, #8]
 446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 482              		.loc 1 446 3 discriminator 2 view .LVU122
 446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 483              		.loc 1 446 6 is_stmt 0 discriminator 2 view .LVU123
 484 0038 AAB1     		cbz	r2, .L39
 485              	.LVL32:
 486              	.L34:
 452:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 487              		.loc 1 452 3 is_stmt 1 view .LVU124
 488 003a 2268     		ldr	r2, [r4]
 489 003c 1368     		ldr	r3, [r2]
 490 003e 43F00103 		orr	r3, r3, #1
 491 0042 1360     		str	r3, [r2]
 455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 492              		.loc 1 455 3 view .LVU125
 455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 493              		.loc 1 455 15 is_stmt 0 view .LVU126
 494 0044 FFF7FEFF 		bl	HAL_GetTick
 495              	.LVL33:
 496 0048 0346     		mov	r3, r0
 497              	.LVL34:
 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 498              		.loc 1 458 3 is_stmt 1 view .LVU127
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 30


 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 499              		.loc 1 458 7 is_stmt 0 view .LVU128
 500 004a 6FF07E42 		mvn	r2, #-33554432
 501 004e 0092     		str	r2, [sp]
 502 0050 0022     		movs	r2, #0
 503 0052 4FF48001 		mov	r1, #4194304
 504 0056 2046     		mov	r0, r4
 505              	.LVL35:
 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 506              		.loc 1 458 7 view .LVU129
 507 0058 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 508              	.LVL36:
 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 509              		.loc 1 458 6 view .LVU130
 510 005c 48B9     		cbnz	r0, .L37
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 511              		.loc 1 465 5 is_stmt 1 view .LVU131
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 512              		.loc 1 465 19 is_stmt 0 view .LVU132
 513 005e 2023     		movs	r3, #32
 514 0060 C4F88830 		str	r3, [r4, #136]
 515 0064 06E0     		b	.L35
 516              	.LVL37:
 517              	.L39:
 448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 518              		.loc 1 448 5 is_stmt 1 view .LVU133
 519 0066 04AB     		add	r3, sp, #16
 520 0068 13E90600 		ldmdb	r3, {r1, r2}
 521 006c FFF7FEFF 		bl	UARTEx_Wakeup_AddressConfig
 522              	.LVL38:
 448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 523              		.loc 1 448 5 is_stmt 0 view .LVU134
 524 0070 E3E7     		b	.L34
 525              	.LVL39:
 526              	.L37:
 460:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 527              		.loc 1 460 12 view .LVU135
 528 0072 0320     		movs	r0, #3
 529              	.L35:
 530              	.LVL40:
 469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 531              		.loc 1 469 3 is_stmt 1 view .LVU136
 469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 532              		.loc 1 469 3 view .LVU137
 533 0074 0023     		movs	r3, #0
 534 0076 84F88430 		strb	r3, [r4, #132]
 469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 535              		.loc 1 469 3 view .LVU138
 471:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 536              		.loc 1 471 3 view .LVU139
 537              	.LVL41:
 538              	.L33:
 472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 539              		.loc 1 472 1 is_stmt 0 view .LVU140
 540 007a 04B0     		add	sp, sp, #16
 541              		.cfi_remember_state
 542              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 31


 543              		@ sp needed
 544 007c 10BD     		pop	{r4, pc}
 545              	.LVL42:
 546              	.L36:
 547              		.cfi_restore_state
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 548              		.loc 1 436 3 view .LVU141
 549 007e 0220     		movs	r0, #2
 550              	.LVL43:
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 551              		.loc 1 436 3 view .LVU142
 552 0080 FBE7     		b	.L33
 553              		.cfi_endproc
 554              	.LFE856:
 556              		.section	.text.HAL_UARTEx_EnableStopMode,"ax",%progbits
 557              		.align	1
 558              		.global	HAL_UARTEx_EnableStopMode
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 563              	HAL_UARTEx_EnableStopMode:
 564              	.LVL44:
 565              	.LFB857:
 481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 566              		.loc 1 481 1 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 571              		.loc 1 483 3 view .LVU144
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 572              		.loc 1 483 3 view .LVU145
 573 0000 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 574 0004 012B     		cmp	r3, #1
 575 0006 10D0     		beq	.L43
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 576              		.loc 1 483 3 discriminator 2 view .LVU146
 577 0008 0123     		movs	r3, #1
 578 000a 80F88430 		strb	r3, [r0, #132]
 579              	.L42:
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 580              		.loc 1 483 3 discriminator 1 view .LVU147
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 581              		.loc 1 486 3 discriminator 1 view .LVU148
 582              	.LBB22:
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 583              		.loc 1 486 3 discriminator 1 view .LVU149
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 584              		.loc 1 486 3 discriminator 1 view .LVU150
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 585              		.loc 1 486 3 discriminator 1 view .LVU151
 586 000e 0268     		ldr	r2, [r0]
 587              	.LVL45:
 588              	.LBB23:
 589              	.LBI23:
 590              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 32


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 33


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 34


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 35


 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 36


 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 37


 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 38


 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 39


 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 40


 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 41


 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 42


 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 43


 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 44


 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 45


 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 46


 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 47


 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 48


 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 49


 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 50


1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 51


1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1095:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1096:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1097:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1101:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1105:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1107:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1109:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1113:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1119:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1127:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1131:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1132:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1133:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1134:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1135:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1136:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1137:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1138:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1139:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1140:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 52


1141:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1143:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1145:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 591              		.loc 2 1151 31 discriminator 1 view .LVU152
 592              	.LBB24:
1152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1153:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 593              		.loc 2 1153 5 discriminator 1 view .LVU153
1154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 594              		.loc 2 1155 4 discriminator 1 view .LVU154
 595              		.syntax unified
 596              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 597 0010 52E8003F 		ldrex r3, [r2]
 598              	@ 0 "" 2
 599              	.LVL46:
1156:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 600              		.loc 2 1156 4 discriminator 1 view .LVU155
 601              		.loc 2 1156 4 is_stmt 0 discriminator 1 view .LVU156
 602              		.thumb
 603              		.syntax unified
 604              	.LBE24:
 605              	.LBE23:
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 606              		.loc 1 486 3 discriminator 1 view .LVU157
 607 0014 43F00203 		orr	r3, r3, #2
 608              	.LVL47:
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 609              		.loc 1 486 3 is_stmt 1 discriminator 1 view .LVU158
 610              	.LBB25:
 611              	.LBI25:
1157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1160:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1161:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1165:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1166:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1167:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1168:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1169:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1170:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1171:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1172:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1173:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1174:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 53


1175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1177:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1180:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1181:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1182:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1184:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1185:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1186:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1187:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1188:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1189:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1190:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1200:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1201:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 612              		.loc 2 1202 31 discriminator 1 view .LVU159
 613              	.LBB26:
1203:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1204:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 614              		.loc 2 1204 4 discriminator 1 view .LVU160
1205:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 615              		.loc 2 1206 4 discriminator 1 view .LVU161
 616              		.syntax unified
 617              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 618 0018 42E80031 		strex r1, r3, [r2]
 619              	@ 0 "" 2
 620              	.LVL48:
1207:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 621              		.loc 2 1207 4 discriminator 1 view .LVU162
 622              		.loc 2 1207 4 is_stmt 0 discriminator 1 view .LVU163
 623              		.thumb
 624              		.syntax unified
 625              	.LBE26:
 626              	.LBE25:
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 627              		.loc 1 486 3 discriminator 1 view .LVU164
 628 001c 0029     		cmp	r1, #0
 629 001e F6D1     		bne	.L42
 630              	.LBE22:
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 631              		.loc 1 486 3 is_stmt 1 discriminator 2 view .LVU165
 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 632              		.loc 1 489 3 discriminator 2 view .LVU166
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 54


 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 633              		.loc 1 489 3 discriminator 2 view .LVU167
 634 0020 0023     		movs	r3, #0
 635              	.LVL49:
 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 636              		.loc 1 489 3 is_stmt 0 discriminator 2 view .LVU168
 637 0022 80F88430 		strb	r3, [r0, #132]
 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 638              		.loc 1 489 3 is_stmt 1 discriminator 2 view .LVU169
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 639              		.loc 1 491 3 discriminator 2 view .LVU170
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 640              		.loc 1 491 10 is_stmt 0 discriminator 2 view .LVU171
 641 0026 1846     		mov	r0, r3
 642              	.LVL50:
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 643              		.loc 1 491 10 discriminator 2 view .LVU172
 644 0028 7047     		bx	lr
 645              	.LVL51:
 646              	.L43:
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 647              		.loc 1 483 3 view .LVU173
 648 002a 0220     		movs	r0, #2
 649              	.LVL52:
 492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 650              		.loc 1 492 1 view .LVU174
 651 002c 7047     		bx	lr
 652              		.cfi_endproc
 653              	.LFE857:
 655              		.section	.text.HAL_UARTEx_DisableStopMode,"ax",%progbits
 656              		.align	1
 657              		.global	HAL_UARTEx_DisableStopMode
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 662              	HAL_UARTEx_DisableStopMode:
 663              	.LVL53:
 664              	.LFB858:
 500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Process Locked */
 665              		.loc 1 500 1 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 670              		.loc 1 502 3 view .LVU176
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 671              		.loc 1 502 3 view .LVU177
 672 0000 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 673 0004 012B     		cmp	r3, #1
 674 0006 10D0     		beq	.L47
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 675              		.loc 1 502 3 discriminator 2 view .LVU178
 676 0008 0123     		movs	r3, #1
 677 000a 80F88430 		strb	r3, [r0, #132]
 678              	.L46:
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 55


 679              		.loc 1 502 3 discriminator 1 view .LVU179
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 680              		.loc 1 505 3 discriminator 1 view .LVU180
 681              	.LBB27:
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 682              		.loc 1 505 3 discriminator 1 view .LVU181
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 683              		.loc 1 505 3 discriminator 1 view .LVU182
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 684              		.loc 1 505 3 discriminator 1 view .LVU183
 685 000e 0268     		ldr	r2, [r0]
 686              	.LVL54:
 687              	.LBB28:
 688              	.LBI28:
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 689              		.loc 2 1151 31 discriminator 1 view .LVU184
 690              	.LBB29:
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 691              		.loc 2 1153 5 discriminator 1 view .LVU185
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 692              		.loc 2 1155 4 discriminator 1 view .LVU186
 693              		.syntax unified
 694              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 695 0010 52E8003F 		ldrex r3, [r2]
 696              	@ 0 "" 2
 697              	.LVL55:
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 698              		.loc 2 1156 4 discriminator 1 view .LVU187
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 699              		.loc 2 1156 4 is_stmt 0 discriminator 1 view .LVU188
 700              		.thumb
 701              		.syntax unified
 702              	.LBE29:
 703              	.LBE28:
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 704              		.loc 1 505 3 discriminator 1 view .LVU189
 705 0014 23F00203 		bic	r3, r3, #2
 706              	.LVL56:
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 707              		.loc 1 505 3 is_stmt 1 discriminator 1 view .LVU190
 708              	.LBB30:
 709              	.LBI30:
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 710              		.loc 2 1202 31 discriminator 1 view .LVU191
 711              	.LBB31:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 712              		.loc 2 1204 4 discriminator 1 view .LVU192
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 713              		.loc 2 1206 4 discriminator 1 view .LVU193
 714              		.syntax unified
 715              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 716 0018 42E80031 		strex r1, r3, [r2]
 717              	@ 0 "" 2
 718              	.LVL57:
 719              		.loc 2 1207 4 discriminator 1 view .LVU194
 720              		.loc 2 1207 4 is_stmt 0 discriminator 1 view .LVU195
 721              		.thumb
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 56


 722              		.syntax unified
 723              	.LBE31:
 724              	.LBE30:
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 725              		.loc 1 505 3 discriminator 1 view .LVU196
 726 001c 0029     		cmp	r1, #0
 727 001e F6D1     		bne	.L46
 728              	.LBE27:
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 729              		.loc 1 505 3 is_stmt 1 discriminator 2 view .LVU197
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 730              		.loc 1 508 3 discriminator 2 view .LVU198
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 731              		.loc 1 508 3 discriminator 2 view .LVU199
 732 0020 0023     		movs	r3, #0
 733              	.LVL58:
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 734              		.loc 1 508 3 is_stmt 0 discriminator 2 view .LVU200
 735 0022 80F88430 		strb	r3, [r0, #132]
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 736              		.loc 1 508 3 is_stmt 1 discriminator 2 view .LVU201
 510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 737              		.loc 1 510 3 discriminator 2 view .LVU202
 510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 738              		.loc 1 510 10 is_stmt 0 discriminator 2 view .LVU203
 739 0026 1846     		mov	r0, r3
 740              	.LVL59:
 510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 741              		.loc 1 510 10 discriminator 2 view .LVU204
 742 0028 7047     		bx	lr
 743              	.LVL60:
 744              	.L47:
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 745              		.loc 1 502 3 view .LVU205
 746 002a 0220     		movs	r0, #2
 747              	.LVL61:
 511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 748              		.loc 1 511 1 view .LVU206
 749 002c 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE858:
 753              		.section	.text.HAL_UARTEx_EnableFifoMode,"ax",%progbits
 754              		.align	1
 755              		.global	HAL_UARTEx_EnableFifoMode
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 760              	HAL_UARTEx_EnableFifoMode:
 761              	.LVL62:
 762              	.LFB859:
 519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 763              		.loc 1 519 1 is_stmt 1 view -0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 767              		.loc 1 520 3 view .LVU208
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 57


 523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 768              		.loc 1 523 3 view .LVU209
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 769              		.loc 1 526 3 view .LVU210
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 770              		.loc 1 526 3 view .LVU211
 771 0000 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 772 0004 012B     		cmp	r3, #1
 773 0006 1DD0     		beq	.L50
 519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 774              		.loc 1 519 1 is_stmt 0 discriminator 2 view .LVU212
 775 0008 10B5     		push	{r4, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 4, -8
 778              		.cfi_offset 14, -4
 779 000a 0446     		mov	r4, r0
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 780              		.loc 1 526 3 is_stmt 1 discriminator 2 view .LVU213
 781 000c 0123     		movs	r3, #1
 782 000e 80F88430 		strb	r3, [r0, #132]
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 783              		.loc 1 526 3 discriminator 2 view .LVU214
 528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 784              		.loc 1 528 3 discriminator 2 view .LVU215
 528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 785              		.loc 1 528 17 is_stmt 0 discriminator 2 view .LVU216
 786 0012 2423     		movs	r3, #36
 787 0014 C0F88830 		str	r3, [r0, #136]
 531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 788              		.loc 1 531 3 is_stmt 1 discriminator 2 view .LVU217
 531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 789              		.loc 1 531 12 is_stmt 0 discriminator 2 view .LVU218
 790 0018 0268     		ldr	r2, [r0]
 531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 791              		.loc 1 531 10 discriminator 2 view .LVU219
 792 001a 1368     		ldr	r3, [r2]
 793              	.LVL63:
 534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 794              		.loc 1 534 3 is_stmt 1 discriminator 2 view .LVU220
 795 001c 1168     		ldr	r1, [r2]
 796 001e 21F00101 		bic	r1, r1, #1
 797 0022 1160     		str	r1, [r2]
 537:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->FifoMode = UART_FIFOMODE_ENABLE;
 798              		.loc 1 537 3 discriminator 2 view .LVU221
 799 0024 43F00053 		orr	r3, r3, #536870912
 800              	.LVL64:
 538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 801              		.loc 1 538 3 discriminator 2 view .LVU222
 538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 802              		.loc 1 538 19 is_stmt 0 discriminator 2 view .LVU223
 803 0028 4FF00052 		mov	r2, #536870912
 804 002c 4266     		str	r2, [r0, #100]
 541:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 805              		.loc 1 541 3 is_stmt 1 discriminator 2 view .LVU224
 806 002e 0268     		ldr	r2, [r0]
 807 0030 1360     		str	r3, [r2]
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 58


 808              		.loc 1 544 3 discriminator 2 view .LVU225
 809 0032 FFF7FEFF 		bl	UARTEx_SetNbDataToProcess
 810              	.LVL65:
 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 811              		.loc 1 546 3 discriminator 2 view .LVU226
 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 812              		.loc 1 546 17 is_stmt 0 discriminator 2 view .LVU227
 813 0036 2023     		movs	r3, #32
 814 0038 C4F88830 		str	r3, [r4, #136]
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 815              		.loc 1 549 3 is_stmt 1 discriminator 2 view .LVU228
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 816              		.loc 1 549 3 discriminator 2 view .LVU229
 817 003c 0020     		movs	r0, #0
 818 003e 84F88400 		strb	r0, [r4, #132]
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 819              		.loc 1 549 3 discriminator 2 view .LVU230
 551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 820              		.loc 1 551 3 discriminator 2 view .LVU231
 552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 821              		.loc 1 552 1 is_stmt 0 discriminator 2 view .LVU232
 822 0042 10BD     		pop	{r4, pc}
 823              	.LVL66:
 824              	.L50:
 825              		.cfi_def_cfa_offset 0
 826              		.cfi_restore 4
 827              		.cfi_restore 14
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 828              		.loc 1 526 3 view .LVU233
 829 0044 0220     		movs	r0, #2
 830              	.LVL67:
 552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 831              		.loc 1 552 1 view .LVU234
 832 0046 7047     		bx	lr
 833              		.cfi_endproc
 834              	.LFE859:
 836              		.section	.text.HAL_UARTEx_DisableFifoMode,"ax",%progbits
 837              		.align	1
 838              		.global	HAL_UARTEx_DisableFifoMode
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 843              	HAL_UARTEx_DisableFifoMode:
 844              	.LVL68:
 845              	.LFB860:
 560:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 846              		.loc 1 560 1 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850              		@ link register save eliminated.
 561:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 851              		.loc 1 561 3 view .LVU236
 564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 852              		.loc 1 564 3 view .LVU237
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 853              		.loc 1 567 3 view .LVU238
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 59


 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 854              		.loc 1 567 3 view .LVU239
 855 0000 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 856 0004 012B     		cmp	r3, #1
 857 0006 18D0     		beq	.L57
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 858              		.loc 1 567 3 discriminator 2 view .LVU240
 859 0008 0123     		movs	r3, #1
 860 000a 80F88430 		strb	r3, [r0, #132]
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 861              		.loc 1 567 3 discriminator 2 view .LVU241
 569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 862              		.loc 1 569 3 discriminator 2 view .LVU242
 569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 863              		.loc 1 569 17 is_stmt 0 discriminator 2 view .LVU243
 864 000e 2423     		movs	r3, #36
 865 0010 C0F88830 		str	r3, [r0, #136]
 572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 866              		.loc 1 572 3 is_stmt 1 discriminator 2 view .LVU244
 572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 867              		.loc 1 572 12 is_stmt 0 discriminator 2 view .LVU245
 868 0014 0368     		ldr	r3, [r0]
 572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 869              		.loc 1 572 10 discriminator 2 view .LVU246
 870 0016 1A68     		ldr	r2, [r3]
 871              	.LVL69:
 575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 872              		.loc 1 575 3 is_stmt 1 discriminator 2 view .LVU247
 873 0018 1968     		ldr	r1, [r3]
 874 001a 21F00101 		bic	r1, r1, #1
 875 001e 1960     		str	r1, [r3]
 578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   huart->FifoMode = UART_FIFOMODE_DISABLE;
 876              		.loc 1 578 3 discriminator 2 view .LVU248
 877 0020 22F00052 		bic	r2, r2, #536870912
 878              	.LVL70:
 579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 879              		.loc 1 579 3 discriminator 2 view .LVU249
 579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 880              		.loc 1 579 19 is_stmt 0 discriminator 2 view .LVU250
 881 0024 0023     		movs	r3, #0
 882 0026 4366     		str	r3, [r0, #100]
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 883              		.loc 1 582 3 is_stmt 1 discriminator 2 view .LVU251
 884 0028 0168     		ldr	r1, [r0]
 885 002a 0A60     		str	r2, [r1]
 584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 886              		.loc 1 584 3 discriminator 2 view .LVU252
 584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 887              		.loc 1 584 17 is_stmt 0 discriminator 2 view .LVU253
 888 002c 2022     		movs	r2, #32
 889              	.LVL71:
 584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 890              		.loc 1 584 17 discriminator 2 view .LVU254
 891 002e C0F88820 		str	r2, [r0, #136]
 892              	.LVL72:
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 893              		.loc 1 587 3 is_stmt 1 discriminator 2 view .LVU255
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 60


 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 894              		.loc 1 587 3 discriminator 2 view .LVU256
 895 0032 80F88430 		strb	r3, [r0, #132]
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 896              		.loc 1 587 3 discriminator 2 view .LVU257
 589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 897              		.loc 1 589 3 discriminator 2 view .LVU258
 589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 898              		.loc 1 589 10 is_stmt 0 discriminator 2 view .LVU259
 899 0036 1846     		mov	r0, r3
 900              	.LVL73:
 589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 901              		.loc 1 589 10 discriminator 2 view .LVU260
 902 0038 7047     		bx	lr
 903              	.LVL74:
 904              	.L57:
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 905              		.loc 1 567 3 view .LVU261
 906 003a 0220     		movs	r0, #2
 907              	.LVL75:
 590:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 908              		.loc 1 590 1 view .LVU262
 909 003c 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE860:
 913              		.section	.text.HAL_UARTEx_SetTxFifoThreshold,"ax",%progbits
 914              		.align	1
 915              		.global	HAL_UARTEx_SetTxFifoThreshold
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 920              	HAL_UARTEx_SetTxFifoThreshold:
 921              	.LVL76:
 922              	.LFB861:
 606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 923              		.loc 1 606 1 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 927              		.loc 1 606 1 is_stmt 0 view .LVU264
 928 0000 38B5     		push	{r3, r4, r5, lr}
 929              		.cfi_def_cfa_offset 16
 930              		.cfi_offset 3, -16
 931              		.cfi_offset 4, -12
 932              		.cfi_offset 5, -8
 933              		.cfi_offset 14, -4
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 934              		.loc 1 607 3 is_stmt 1 view .LVU265
 610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 935              		.loc 1 610 3 view .LVU266
 611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 936              		.loc 1 611 3 view .LVU267
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 937              		.loc 1 614 3 view .LVU268
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 938              		.loc 1 614 3 view .LVU269
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 61


 939 0002 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 940 0006 012B     		cmp	r3, #1
 941 0008 1DD0     		beq	.L60
 942 000a 0446     		mov	r4, r0
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 943              		.loc 1 614 3 discriminator 2 view .LVU270
 944 000c 0123     		movs	r3, #1
 945 000e 80F88430 		strb	r3, [r0, #132]
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 946              		.loc 1 614 3 discriminator 2 view .LVU271
 616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 947              		.loc 1 616 3 discriminator 2 view .LVU272
 616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 948              		.loc 1 616 17 is_stmt 0 discriminator 2 view .LVU273
 949 0012 2423     		movs	r3, #36
 950 0014 C0F88830 		str	r3, [r0, #136]
 619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 951              		.loc 1 619 3 is_stmt 1 discriminator 2 view .LVU274
 619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 952              		.loc 1 619 12 is_stmt 0 discriminator 2 view .LVU275
 953 0018 0368     		ldr	r3, [r0]
 619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 954              		.loc 1 619 10 discriminator 2 view .LVU276
 955 001a 1D68     		ldr	r5, [r3]
 956              	.LVL77:
 622:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 957              		.loc 1 622 3 is_stmt 1 discriminator 2 view .LVU277
 958 001c 1A68     		ldr	r2, [r3]
 959 001e 22F00102 		bic	r2, r2, #1
 960 0022 1A60     		str	r2, [r3]
 625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 961              		.loc 1 625 3 discriminator 2 view .LVU278
 962 0024 0268     		ldr	r2, [r0]
 963 0026 9368     		ldr	r3, [r2, #8]
 964 0028 23F06043 		bic	r3, r3, #-536870912
 965 002c 1943     		orrs	r1, r1, r3
 966              	.LVL78:
 625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 967              		.loc 1 625 3 is_stmt 0 discriminator 2 view .LVU279
 968 002e 9160     		str	r1, [r2, #8]
 628:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 969              		.loc 1 628 3 is_stmt 1 discriminator 2 view .LVU280
 970 0030 FFF7FEFF 		bl	UARTEx_SetNbDataToProcess
 971              	.LVL79:
 631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 972              		.loc 1 631 3 discriminator 2 view .LVU281
 973 0034 2368     		ldr	r3, [r4]
 974 0036 1D60     		str	r5, [r3]
 633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 975              		.loc 1 633 3 discriminator 2 view .LVU282
 633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 976              		.loc 1 633 17 is_stmt 0 discriminator 2 view .LVU283
 977 0038 2023     		movs	r3, #32
 978 003a C4F88830 		str	r3, [r4, #136]
 636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 979              		.loc 1 636 3 is_stmt 1 discriminator 2 view .LVU284
 636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 62


 980              		.loc 1 636 3 discriminator 2 view .LVU285
 981 003e 0020     		movs	r0, #0
 982 0040 84F88400 		strb	r0, [r4, #132]
 636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 983              		.loc 1 636 3 discriminator 2 view .LVU286
 638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 984              		.loc 1 638 3 discriminator 2 view .LVU287
 985              	.LVL80:
 986              	.L59:
 639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 987              		.loc 1 639 1 is_stmt 0 view .LVU288
 988 0044 38BD     		pop	{r3, r4, r5, pc}
 989              	.LVL81:
 990              	.L60:
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 991              		.loc 1 614 3 view .LVU289
 992 0046 0220     		movs	r0, #2
 993              	.LVL82:
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 994              		.loc 1 614 3 view .LVU290
 995 0048 FCE7     		b	.L59
 996              		.cfi_endproc
 997              	.LFE861:
 999              		.section	.text.HAL_UARTEx_SetRxFifoThreshold,"ax",%progbits
 1000              		.align	1
 1001              		.global	HAL_UARTEx_SetRxFifoThreshold
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1006              	HAL_UARTEx_SetRxFifoThreshold:
 1007              	.LVL83:
 1008              	.LFB862:
 655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 1009              		.loc 1 655 1 is_stmt 1 view -0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tmpcr1;
 1013              		.loc 1 655 1 is_stmt 0 view .LVU292
 1014 0000 38B5     		push	{r3, r4, r5, lr}
 1015              		.cfi_def_cfa_offset 16
 1016              		.cfi_offset 3, -16
 1017              		.cfi_offset 4, -12
 1018              		.cfi_offset 5, -8
 1019              		.cfi_offset 14, -4
 656:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1020              		.loc 1 656 3 is_stmt 1 view .LVU293
 659:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 1021              		.loc 1 659 3 view .LVU294
 660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1022              		.loc 1 660 3 view .LVU295
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1023              		.loc 1 663 3 view .LVU296
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1024              		.loc 1 663 3 view .LVU297
 1025 0002 90F88430 		ldrb	r3, [r0, #132]	@ zero_extendqisi2
 1026 0006 012B     		cmp	r3, #1
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 63


 1027 0008 1DD0     		beq	.L64
 1028 000a 0446     		mov	r4, r0
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1029              		.loc 1 663 3 discriminator 2 view .LVU298
 1030 000c 0123     		movs	r3, #1
 1031 000e 80F88430 		strb	r3, [r0, #132]
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1032              		.loc 1 663 3 discriminator 2 view .LVU299
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1033              		.loc 1 665 3 discriminator 2 view .LVU300
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1034              		.loc 1 665 17 is_stmt 0 discriminator 2 view .LVU301
 1035 0012 2423     		movs	r3, #36
 1036 0014 C0F88830 		str	r3, [r0, #136]
 668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1037              		.loc 1 668 3 is_stmt 1 discriminator 2 view .LVU302
 668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1038              		.loc 1 668 12 is_stmt 0 discriminator 2 view .LVU303
 1039 0018 0368     		ldr	r3, [r0]
 668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1040              		.loc 1 668 10 discriminator 2 view .LVU304
 1041 001a 1D68     		ldr	r5, [r3]
 1042              	.LVL84:
 671:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1043              		.loc 1 671 3 is_stmt 1 discriminator 2 view .LVU305
 1044 001c 1A68     		ldr	r2, [r3]
 1045 001e 22F00102 		bic	r2, r2, #1
 1046 0022 1A60     		str	r2, [r3]
 674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1047              		.loc 1 674 3 discriminator 2 view .LVU306
 1048 0024 0268     		ldr	r2, [r0]
 1049 0026 9368     		ldr	r3, [r2, #8]
 1050 0028 23F06063 		bic	r3, r3, #234881024
 1051 002c 1943     		orrs	r1, r1, r3
 1052              	.LVL85:
 674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1053              		.loc 1 674 3 is_stmt 0 discriminator 2 view .LVU307
 1054 002e 9160     		str	r1, [r2, #8]
 677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1055              		.loc 1 677 3 is_stmt 1 discriminator 2 view .LVU308
 1056 0030 FFF7FEFF 		bl	UARTEx_SetNbDataToProcess
 1057              	.LVL86:
 680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1058              		.loc 1 680 3 discriminator 2 view .LVU309
 1059 0034 2368     		ldr	r3, [r4]
 1060 0036 1D60     		str	r5, [r3]
 682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1061              		.loc 1 682 3 discriminator 2 view .LVU310
 682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1062              		.loc 1 682 17 is_stmt 0 discriminator 2 view .LVU311
 1063 0038 2023     		movs	r3, #32
 1064 003a C4F88830 		str	r3, [r4, #136]
 685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1065              		.loc 1 685 3 is_stmt 1 discriminator 2 view .LVU312
 685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1066              		.loc 1 685 3 discriminator 2 view .LVU313
 1067 003e 0020     		movs	r0, #0
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 64


 1068 0040 84F88400 		strb	r0, [r4, #132]
 685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1069              		.loc 1 685 3 discriminator 2 view .LVU314
 687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 1070              		.loc 1 687 3 discriminator 2 view .LVU315
 1071              	.LVL87:
 1072              	.L63:
 688:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1073              		.loc 1 688 1 is_stmt 0 view .LVU316
 1074 0044 38BD     		pop	{r3, r4, r5, pc}
 1075              	.LVL88:
 1076              	.L64:
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1077              		.loc 1 663 3 view .LVU317
 1078 0046 0220     		movs	r0, #2
 1079              	.LVL89:
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1080              		.loc 1 663 3 view .LVU318
 1081 0048 FCE7     		b	.L63
 1082              		.cfi_endproc
 1083              	.LFE862:
 1085              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 1086              		.align	1
 1087              		.global	HAL_UARTEx_ReceiveToIdle
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1092              	HAL_UARTEx_ReceiveToIdle:
 1093              	.LVL90:
 1094              	.LFB863:
 715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 1095              		.loc 1 715 1 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 4, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
 1099              		.loc 1 715 1 is_stmt 0 view .LVU320
 1100 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1101              		.cfi_def_cfa_offset 32
 1102              		.cfi_offset 4, -32
 1103              		.cfi_offset 5, -28
 1104              		.cfi_offset 6, -24
 1105              		.cfi_offset 7, -20
 1106              		.cfi_offset 8, -16
 1107              		.cfi_offset 9, -12
 1108              		.cfi_offset 10, -8
 1109              		.cfi_offset 14, -4
 1110 0004 1D46     		mov	r5, r3
 1111 0006 089E     		ldr	r6, [sp, #32]
 716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 1112              		.loc 1 716 3 is_stmt 1 view .LVU321
 717:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint16_t uhMask;
 1113              		.loc 1 717 3 view .LVU322
 718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   uint32_t tickstart;
 1114              		.loc 1 718 3 view .LVU323
 719:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1115              		.loc 1 719 3 view .LVU324
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 65


 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1116              		.loc 1 722 3 view .LVU325
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1117              		.loc 1 722 12 is_stmt 0 view .LVU326
 1118 0008 D0F88C30 		ldr	r3, [r0, #140]
 1119              	.LVL91:
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1120              		.loc 1 722 6 view .LVU327
 1121 000c 202B     		cmp	r3, #32
 1122 000e 40F0A380 		bne	.L84
 1123 0012 0446     		mov	r4, r0
 1124 0014 0F46     		mov	r7, r1
 1125 0016 9146     		mov	r9, r2
 724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1126              		.loc 1 724 5 is_stmt 1 view .LVU328
 724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1127              		.loc 1 724 8 is_stmt 0 view .LVU329
 1128 0018 0029     		cmp	r1, #0
 1129 001a 00F0A080 		beq	.L85
 724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1130              		.loc 1 724 25 discriminator 1 view .LVU330
 1131 001e 0AB9     		cbnz	r2, .L90
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1132              		.loc 1 726 15 view .LVU331
 1133 0020 0120     		movs	r0, #1
 1134              	.LVL92:
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1135              		.loc 1 726 15 view .LVU332
 1136 0022 9AE0     		b	.L67
 1137              	.LVL93:
 1138              	.L90:
 742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1139              		.loc 1 742 5 is_stmt 1 view .LVU333
 742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1140              		.loc 1 742 22 is_stmt 0 view .LVU334
 1141 0024 0023     		movs	r3, #0
 1142 0026 C0F89030 		str	r3, [r0, #144]
 743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1143              		.loc 1 743 5 is_stmt 1 view .LVU335
 743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1144              		.loc 1 743 20 is_stmt 0 view .LVU336
 1145 002a 2222     		movs	r2, #34
 1146              	.LVL94:
 743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1147              		.loc 1 743 20 view .LVU337
 1148 002c C0F88C20 		str	r2, [r0, #140]
 744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1149              		.loc 1 744 5 is_stmt 1 view .LVU338
 744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1150              		.loc 1 744 26 is_stmt 0 view .LVU339
 1151 0030 0122     		movs	r2, #1
 1152 0032 C266     		str	r2, [r0, #108]
 745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1153              		.loc 1 745 5 is_stmt 1 view .LVU340
 745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1154              		.loc 1 745 24 is_stmt 0 view .LVU341
 1155 0034 0367     		str	r3, [r0, #112]
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 66


 748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1156              		.loc 1 748 5 is_stmt 1 view .LVU342
 748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1157              		.loc 1 748 17 is_stmt 0 view .LVU343
 1158 0036 FFF7FEFF 		bl	HAL_GetTick
 1159              	.LVL95:
 748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1160              		.loc 1 748 17 view .LVU344
 1161 003a 8046     		mov	r8, r0
 1162              	.LVL96:
 750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 1163              		.loc 1 750 5 is_stmt 1 view .LVU345
 750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 1164              		.loc 1 750 24 is_stmt 0 view .LVU346
 1165 003c A4F85C90 		strh	r9, [r4, #92]	@ movhi
 751:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1166              		.loc 1 751 5 is_stmt 1 view .LVU347
 751:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1167              		.loc 1 751 24 is_stmt 0 view .LVU348
 1168 0040 A4F85E90 		strh	r9, [r4, #94]	@ movhi
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1169              		.loc 1 754 5 is_stmt 1 view .LVU349
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1170              		.loc 1 754 5 view .LVU350
 1171 0044 A368     		ldr	r3, [r4, #8]
 1172 0046 B3F5805F 		cmp	r3, #4096
 1173 004a 06D0     		beq	.L91
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1174              		.loc 1 754 5 discriminator 2 view .LVU351
 1175 004c A3B9     		cbnz	r3, .L71
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1176              		.loc 1 754 5 discriminator 5 view .LVU352
 1177 004e 2269     		ldr	r2, [r4, #16]
 1178 0050 72B9     		cbnz	r2, .L72
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1179              		.loc 1 754 5 discriminator 7 view .LVU353
 1180 0052 FF22     		movs	r2, #255
 1181 0054 A4F86020 		strh	r2, [r4, #96]	@ movhi
 1182 0058 14E0     		b	.L70
 1183              	.L91:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1184              		.loc 1 754 5 discriminator 1 view .LVU354
 1185 005a 2269     		ldr	r2, [r4, #16]
 1186 005c 22B9     		cbnz	r2, .L69
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1187              		.loc 1 754 5 discriminator 3 view .LVU355
 1188 005e 40F2FF12 		movw	r2, #511
 1189 0062 A4F86020 		strh	r2, [r4, #96]	@ movhi
 1190 0066 0DE0     		b	.L70
 1191              	.L69:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1192              		.loc 1 754 5 discriminator 4 view .LVU356
 1193 0068 FF22     		movs	r2, #255
 1194 006a A4F86020 		strh	r2, [r4, #96]	@ movhi
 1195 006e 09E0     		b	.L70
 1196              	.L72:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 67


 1197              		.loc 1 754 5 discriminator 8 view .LVU357
 1198 0070 7F22     		movs	r2, #127
 1199 0072 A4F86020 		strh	r2, [r4, #96]	@ movhi
 1200 0076 05E0     		b	.L70
 1201              	.L71:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1202              		.loc 1 754 5 discriminator 6 view .LVU358
 1203 0078 B3F1805F 		cmp	r3, #268435456
 1204 007c 0CD0     		beq	.L92
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1205              		.loc 1 754 5 discriminator 10 view .LVU359
 1206 007e 0022     		movs	r2, #0
 1207 0080 A4F86020 		strh	r2, [r4, #96]	@ movhi
 1208              	.L70:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1209              		.loc 1 754 5 discriminator 13 view .LVU360
 755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1210              		.loc 1 755 5 discriminator 13 view .LVU361
 755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1211              		.loc 1 755 12 is_stmt 0 discriminator 13 view .LVU362
 1212 0084 B4F86090 		ldrh	r9, [r4, #96]
 1213              	.LVL97:
 758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1214              		.loc 1 758 5 is_stmt 1 discriminator 13 view .LVU363
 758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1215              		.loc 1 758 8 is_stmt 0 discriminator 13 view .LVU364
 1216 0088 B3F5805F 		cmp	r3, #4096
 1217 008c 0ED0     		beq	.L93
 766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1218              		.loc 1 766 19 view .LVU365
 1219 008e 4FF0000A 		mov	r10, #0
 1220              	.LVL98:
 1221              	.L75:
 770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1222              		.loc 1 770 5 is_stmt 1 view .LVU366
 770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1223              		.loc 1 770 12 is_stmt 0 view .LVU367
 1224 0092 0023     		movs	r3, #0
 1225 0094 2B80     		strh	r3, [r5]	@ movhi
 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1226              		.loc 1 773 5 is_stmt 1 view .LVU368
 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1227              		.loc 1 773 11 is_stmt 0 view .LVU369
 1228 0096 2AE0     		b	.L76
 1229              	.LVL99:
 1230              	.L92:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1231              		.loc 1 754 5 is_stmt 1 discriminator 9 view .LVU370
 1232 0098 2269     		ldr	r2, [r4, #16]
 1233 009a 1AB9     		cbnz	r2, .L74
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1234              		.loc 1 754 5 discriminator 11 view .LVU371
 1235 009c 7F22     		movs	r2, #127
 1236 009e A4F86020 		strh	r2, [r4, #96]	@ movhi
 1237 00a2 EFE7     		b	.L70
 1238              	.L74:
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     uhMask = huart->Mask;
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 68


 1239              		.loc 1 754 5 discriminator 12 view .LVU372
 1240 00a4 3F22     		movs	r2, #63
 1241 00a6 A4F86020 		strh	r2, [r4, #96]	@ movhi
 1242 00aa EBE7     		b	.L70
 1243              	.LVL100:
 1244              	.L93:
 758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1245              		.loc 1 758 71 is_stmt 0 discriminator 1 view .LVU373
 1246 00ac 2369     		ldr	r3, [r4, #16]
 758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1247              		.loc 1 758 56 discriminator 1 view .LVU374
 1248 00ae 13B1     		cbz	r3, .L88
 766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1249              		.loc 1 766 19 view .LVU375
 1250 00b0 4FF0000A 		mov	r10, #0
 1251 00b4 EDE7     		b	.L75
 1252              	.L88:
 761:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1253              		.loc 1 761 19 view .LVU376
 1254 00b6 BA46     		mov	r10, r7
 760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 1255              		.loc 1 760 19 view .LVU377
 1256 00b8 0027     		movs	r7, #0
 1257              	.LVL101:
 760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 1258              		.loc 1 760 19 view .LVU378
 1259 00ba EAE7     		b	.L75
 1260              	.LVL102:
 1261              	.L96:
 785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1262              		.loc 1 785 11 is_stmt 1 view .LVU379
 785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1263              		.loc 1 785 30 is_stmt 0 view .LVU380
 1264 00bc 0223     		movs	r3, #2
 1265 00be 2367     		str	r3, [r4, #112]
 786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1266              		.loc 1 786 11 is_stmt 1 view .LVU381
 786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1267              		.loc 1 786 26 is_stmt 0 view .LVU382
 1268 00c0 2023     		movs	r3, #32
 1269 00c2 C4F88C30 		str	r3, [r4, #140]
 788:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1270              		.loc 1 788 11 is_stmt 1 view .LVU383
 788:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1271              		.loc 1 788 18 is_stmt 0 view .LVU384
 1272 00c6 0020     		movs	r0, #0
 1273 00c8 47E0     		b	.L67
 1274              	.L97:
 797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata16bits++;
 1275              		.loc 1 797 11 is_stmt 1 view .LVU385
 797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata16bits++;
 1276              		.loc 1 797 52 is_stmt 0 view .LVU386
 1277 00ca 5B6A     		ldr	r3, [r3, #36]
 797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata16bits++;
 1278              		.loc 1 797 26 view .LVU387
 1279 00cc 09EA0303 		and	r3, r9, r3
 797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata16bits++;
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 69


 1280              		.loc 1 797 24 view .LVU388
 1281 00d0 2AF8023B 		strh	r3, [r10], #2	@ movhi
 1282              	.LVL103:
 798:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1283              		.loc 1 798 11 is_stmt 1 view .LVU389
 1284              	.L80:
 806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         huart->RxXferCount--;
 1285              		.loc 1 806 9 view .LVU390
 1286 00d4 2B88     		ldrh	r3, [r5]
 806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         huart->RxXferCount--;
 1287              		.loc 1 806 16 is_stmt 0 view .LVU391
 1288 00d6 0133     		adds	r3, r3, #1
 1289 00d8 2B80     		strh	r3, [r5]	@ movhi
 807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1290              		.loc 1 807 9 is_stmt 1 view .LVU392
 807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1291              		.loc 1 807 14 is_stmt 0 view .LVU393
 1292 00da B4F85E30 		ldrh	r3, [r4, #94]
 1293 00de 9BB2     		uxth	r3, r3
 807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1294              		.loc 1 807 27 view .LVU394
 1295 00e0 013B     		subs	r3, r3, #1
 1296 00e2 9BB2     		uxth	r3, r3
 1297 00e4 A4F85E30 		strh	r3, [r4, #94]	@ movhi
 1298              	.L78:
 811:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1299              		.loc 1 811 7 is_stmt 1 view .LVU395
 811:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1300              		.loc 1 811 10 is_stmt 0 view .LVU396
 1301 00e8 B6F1FF3F 		cmp	r6, #-1
 1302 00ec 1BD1     		bne	.L94
 1303              	.L76:
 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1304              		.loc 1 773 31 is_stmt 1 view .LVU397
 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1305              		.loc 1 773 17 is_stmt 0 view .LVU398
 1306 00ee B4F85E20 		ldrh	r2, [r4, #94]
 1307 00f2 92B2     		uxth	r2, r2
 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1308              		.loc 1 773 31 view .LVU399
 1309 00f4 22B3     		cbz	r2, .L95
 776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1310              		.loc 1 776 7 is_stmt 1 view .LVU400
 776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1311              		.loc 1 776 11 is_stmt 0 view .LVU401
 1312 00f6 2368     		ldr	r3, [r4]
 1313 00f8 DA69     		ldr	r2, [r3, #28]
 776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1314              		.loc 1 776 10 view .LVU402
 1315 00fa 12F0100F 		tst	r2, #16
 1316 00fe 04D0     		beq	.L77
 779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1317              		.loc 1 779 9 is_stmt 1 view .LVU403
 1318 0100 1022     		movs	r2, #16
 1319 0102 1A62     		str	r2, [r3, #32]
 783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1320              		.loc 1 783 9 view .LVU404
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 70


 783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1321              		.loc 1 783 13 is_stmt 0 view .LVU405
 1322 0104 2B88     		ldrh	r3, [r5]
 783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1323              		.loc 1 783 12 view .LVU406
 1324 0106 002B     		cmp	r3, #0
 1325 0108 D8D1     		bne	.L96
 1326              	.L77:
 793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1327              		.loc 1 793 7 is_stmt 1 view .LVU407
 793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1328              		.loc 1 793 11 is_stmt 0 view .LVU408
 1329 010a 2368     		ldr	r3, [r4]
 1330 010c DA69     		ldr	r2, [r3, #28]
 793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1331              		.loc 1 793 10 view .LVU409
 1332 010e 12F0200F 		tst	r2, #32
 1333 0112 E9D0     		beq	.L78
 795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1334              		.loc 1 795 9 is_stmt 1 view .LVU410
 795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1335              		.loc 1 795 12 is_stmt 0 view .LVU411
 1336 0114 002F     		cmp	r7, #0
 1337 0116 D8D0     		beq	.L97
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata8bits++;
 1338              		.loc 1 802 11 is_stmt 1 view .LVU412
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata8bits++;
 1339              		.loc 1 802 50 is_stmt 0 view .LVU413
 1340 0118 5A6A     		ldr	r2, [r3, #36]
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata8bits++;
 1341              		.loc 1 802 58 view .LVU414
 1342 011a 5FFA89F3 		uxtb	r3, r9
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata8bits++;
 1343              		.loc 1 802 25 view .LVU415
 1344 011e 1340     		ands	r3, r3, r2
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****           pdata8bits++;
 1345              		.loc 1 802 23 view .LVU416
 1346 0120 07F8013B 		strb	r3, [r7], #1
 1347              	.LVL104:
 803:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1348              		.loc 1 803 11 is_stmt 1 view .LVU417
 803:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1349              		.loc 1 803 11 is_stmt 0 view .LVU418
 1350 0124 D6E7     		b	.L80
 1351              	.L94:
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1352              		.loc 1 813 9 is_stmt 1 view .LVU419
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1353              		.loc 1 813 15 is_stmt 0 view .LVU420
 1354 0126 FFF7FEFF 		bl	HAL_GetTick
 1355              	.LVL105:
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1356              		.loc 1 813 29 view .LVU421
 1357 012a A0EB0800 		sub	r0, r0, r8
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1358              		.loc 1 813 12 view .LVU422
 1359 012e B042     		cmp	r0, r6
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 71


 1360 0130 01D8     		bhi	.L82
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         {
 1361              		.loc 1 813 53 discriminator 1 view .LVU423
 1362 0132 002E     		cmp	r6, #0
 1363 0134 DBD1     		bne	.L76
 1364              	.L82:
 815:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1365              		.loc 1 815 11 is_stmt 1 view .LVU424
 815:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1366              		.loc 1 815 26 is_stmt 0 view .LVU425
 1367 0136 2023     		movs	r3, #32
 1368 0138 C4F88C30 		str	r3, [r4, #140]
 817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1369              		.loc 1 817 11 is_stmt 1 view .LVU426
 817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         }
 1370              		.loc 1 817 18 is_stmt 0 view .LVU427
 1371 013c 0320     		movs	r0, #3
 1372 013e 0CE0     		b	.L67
 1373              	.L95:
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1374              		.loc 1 823 5 is_stmt 1 view .LVU428
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1375              		.loc 1 823 19 is_stmt 0 view .LVU429
 1376 0140 B4F85C30 		ldrh	r3, [r4, #92]
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1377              		.loc 1 823 39 view .LVU430
 1378 0144 B4F85E20 		ldrh	r2, [r4, #94]
 1379 0148 92B2     		uxth	r2, r2
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1380              		.loc 1 823 32 view .LVU431
 1381 014a 9B1A     		subs	r3, r3, r2
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 1382              		.loc 1 823 12 view .LVU432
 1383 014c 2B80     		strh	r3, [r5]	@ movhi
 825:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1384              		.loc 1 825 5 is_stmt 1 view .LVU433
 825:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1385              		.loc 1 825 20 is_stmt 0 view .LVU434
 1386 014e 2023     		movs	r3, #32
 1387 0150 C4F88C30 		str	r3, [r4, #140]
 827:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1388              		.loc 1 827 5 is_stmt 1 view .LVU435
 827:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1389              		.loc 1 827 12 is_stmt 0 view .LVU436
 1390 0154 0020     		movs	r0, #0
 1391 0156 00E0     		b	.L67
 1392              	.LVL106:
 1393              	.L84:
 831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1394              		.loc 1 831 12 view .LVU437
 1395 0158 0220     		movs	r0, #2
 1396              	.LVL107:
 1397              	.L67:
 833:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1398              		.loc 1 833 1 view .LVU438
 1399 015a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1400              	.LVL108:
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 72


 1401              	.L85:
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1402              		.loc 1 726 15 view .LVU439
 1403 015e 0120     		movs	r0, #1
 1404              	.LVL109:
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1405              		.loc 1 726 15 view .LVU440
 1406 0160 FBE7     		b	.L67
 1407              		.cfi_endproc
 1408              	.LFE863:
 1410              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 1411              		.align	1
 1412              		.global	HAL_UARTEx_ReceiveToIdle_IT
 1413              		.syntax unified
 1414              		.thumb
 1415              		.thumb_func
 1417              	HAL_UARTEx_ReceiveToIdle_IT:
 1418              	.LVL110:
 1419              	.LFB864:
 854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1420              		.loc 1 854 1 is_stmt 1 view -0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 855:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1424              		.loc 1 855 3 view .LVU442
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1425              		.loc 1 858 3 view .LVU443
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1426              		.loc 1 858 12 is_stmt 0 view .LVU444
 1427 0000 D0F88C30 		ldr	r3, [r0, #140]
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1428              		.loc 1 858 6 view .LVU445
 1429 0004 202B     		cmp	r3, #32
 1430 0006 1FD1     		bne	.L102
 854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1431              		.loc 1 854 1 view .LVU446
 1432 0008 10B5     		push	{r4, lr}
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 4, -8
 1435              		.cfi_offset 14, -4
 1436 000a 0446     		mov	r4, r0
 860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1437              		.loc 1 860 5 is_stmt 1 view .LVU447
 860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1438              		.loc 1 860 8 is_stmt 0 view .LVU448
 1439 000c F1B1     		cbz	r1, .L103
 860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1440              		.loc 1 860 25 discriminator 1 view .LVU449
 1441 000e 0AB9     		cbnz	r2, .L110
 862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1442              		.loc 1 862 14 view .LVU450
 1443 0010 0120     		movs	r0, #1
 1444              	.LVL111:
 1445              	.L99:
 908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1446              		.loc 1 908 1 view .LVU451
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 73


 1447 0012 10BD     		pop	{r4, pc}
 1448              	.LVL112:
 1449              	.L110:
 879:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1450              		.loc 1 879 5 is_stmt 1 view .LVU452
 879:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1451              		.loc 1 879 26 is_stmt 0 view .LVU453
 1452 0014 0123     		movs	r3, #1
 1453 0016 C366     		str	r3, [r0, #108]
 880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1454              		.loc 1 880 5 is_stmt 1 view .LVU454
 880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1455              		.loc 1 880 24 is_stmt 0 view .LVU455
 1456 0018 0023     		movs	r3, #0
 1457 001a 0367     		str	r3, [r0, #112]
 882:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1458              		.loc 1 882 5 is_stmt 1 view .LVU456
 882:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1459              		.loc 1 882 15 is_stmt 0 view .LVU457
 1460 001c FFF7FEFF 		bl	UART_Start_Receive_IT
 1461              	.LVL113:
 885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1462              		.loc 1 885 5 is_stmt 1 view .LVU458
 885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1463              		.loc 1 885 8 is_stmt 0 view .LVU459
 1464 0020 0028     		cmp	r0, #0
 1465 0022 F6D1     		bne	.L99
 887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1466              		.loc 1 887 7 is_stmt 1 view .LVU460
 887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1467              		.loc 1 887 16 is_stmt 0 view .LVU461
 1468 0024 E36E     		ldr	r3, [r4, #108]
 887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1469              		.loc 1 887 10 view .LVU462
 1470 0026 012B     		cmp	r3, #1
 1471 0028 01D0     		beq	.L111
 898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1472              		.loc 1 898 16 view .LVU463
 1473 002a 0120     		movs	r0, #1
 1474              	.LVL114:
 902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1475              		.loc 1 902 5 is_stmt 1 view .LVU464
 902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1476              		.loc 1 902 12 is_stmt 0 view .LVU465
 1477 002c F1E7     		b	.L99
 1478              	.LVL115:
 1479              	.L111:
 889:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1480              		.loc 1 889 9 is_stmt 1 view .LVU466
 1481 002e 2368     		ldr	r3, [r4]
 1482 0030 1022     		movs	r2, #16
 1483 0032 1A62     		str	r2, [r3, #32]
 1484              	.L101:
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1485              		.loc 1 890 9 discriminator 1 view .LVU467
 1486              	.LBB32:
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 74


 1487              		.loc 1 890 9 discriminator 1 view .LVU468
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1488              		.loc 1 890 9 discriminator 1 view .LVU469
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1489              		.loc 1 890 9 discriminator 1 view .LVU470
 1490 0034 2268     		ldr	r2, [r4]
 1491              	.LVL116:
 1492              	.LBB33:
 1493              	.LBI33:
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1494              		.loc 2 1151 31 discriminator 1 view .LVU471
 1495              	.LBB34:
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1496              		.loc 2 1153 5 discriminator 1 view .LVU472
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1497              		.loc 2 1155 4 discriminator 1 view .LVU473
 1498              		.syntax unified
 1499              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1500 0036 52E8003F 		ldrex r3, [r2]
 1501              	@ 0 "" 2
 1502              	.LVL117:
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1503              		.loc 2 1156 4 discriminator 1 view .LVU474
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1504              		.loc 2 1156 4 is_stmt 0 discriminator 1 view .LVU475
 1505              		.thumb
 1506              		.syntax unified
 1507              	.LBE34:
 1508              	.LBE33:
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1509              		.loc 1 890 9 discriminator 1 view .LVU476
 1510 003a 43F01003 		orr	r3, r3, #16
 1511              	.LVL118:
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1512              		.loc 1 890 9 is_stmt 1 discriminator 1 view .LVU477
 1513              	.LBB35:
 1514              	.LBI35:
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1515              		.loc 2 1202 31 discriminator 1 view .LVU478
 1516              	.LBB36:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1517              		.loc 2 1204 4 discriminator 1 view .LVU479
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1518              		.loc 2 1206 4 discriminator 1 view .LVU480
 1519              		.syntax unified
 1520              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1521 003e 42E80031 		strex r1, r3, [r2]
 1522              	@ 0 "" 2
 1523              	.LVL119:
 1524              		.loc 2 1207 4 discriminator 1 view .LVU481
 1525              		.loc 2 1207 4 is_stmt 0 discriminator 1 view .LVU482
 1526              		.thumb
 1527              		.syntax unified
 1528              	.LBE36:
 1529              	.LBE35:
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1530              		.loc 1 890 9 discriminator 1 view .LVU483
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 75


 1531 0042 0029     		cmp	r1, #0
 1532 0044 F6D1     		bne	.L101
 1533 0046 E4E7     		b	.L99
 1534              	.LVL120:
 1535              	.L102:
 1536              		.cfi_def_cfa_offset 0
 1537              		.cfi_restore 4
 1538              		.cfi_restore 14
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1539              		.loc 1 890 9 discriminator 1 view .LVU484
 1540              	.LBE32:
 906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1541              		.loc 1 906 12 view .LVU485
 1542 0048 0220     		movs	r0, #2
 1543              	.LVL121:
 908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1544              		.loc 1 908 1 view .LVU486
 1545 004a 7047     		bx	lr
 1546              	.LVL122:
 1547              	.L103:
 1548              		.cfi_def_cfa_offset 8
 1549              		.cfi_offset 4, -8
 1550              		.cfi_offset 14, -4
 862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1551              		.loc 1 862 14 view .LVU487
 1552 004c 0120     		movs	r0, #1
 1553              	.LVL123:
 862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1554              		.loc 1 862 14 view .LVU488
 1555 004e E0E7     		b	.L99
 1556              		.cfi_endproc
 1557              	.LFE864:
 1559              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 1560              		.align	1
 1561              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1566              	HAL_UARTEx_ReceiveToIdle_DMA:
 1567              	.LVL124:
 1568              	.LFB865:
 932:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1569              		.loc 1 932 1 is_stmt 1 view -0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 0
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 933:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1573              		.loc 1 933 3 view .LVU490
 936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1574              		.loc 1 936 3 view .LVU491
 936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1575              		.loc 1 936 12 is_stmt 0 view .LVU492
 1576 0000 D0F88C30 		ldr	r3, [r0, #140]
 936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   {
 1577              		.loc 1 936 6 view .LVU493
 1578 0004 202B     		cmp	r3, #32
 1579 0006 1FD1     		bne	.L116
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 76


 932:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 1580              		.loc 1 932 1 view .LVU494
 1581 0008 10B5     		push	{r4, lr}
 1582              		.cfi_def_cfa_offset 8
 1583              		.cfi_offset 4, -8
 1584              		.cfi_offset 14, -4
 1585 000a 0446     		mov	r4, r0
 938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1586              		.loc 1 938 5 is_stmt 1 view .LVU495
 938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1587              		.loc 1 938 8 is_stmt 0 view .LVU496
 1588 000c F1B1     		cbz	r1, .L117
 938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1589              		.loc 1 938 25 discriminator 1 view .LVU497
 1590 000e 0AB9     		cbnz	r2, .L124
 940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1591              		.loc 1 940 14 view .LVU498
 1592 0010 0120     		movs	r0, #1
 1593              	.LVL125:
 1594              	.L113:
 986:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1595              		.loc 1 986 1 view .LVU499
 1596 0012 10BD     		pop	{r4, pc}
 1597              	.LVL126:
 1598              	.L124:
 957:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1599              		.loc 1 957 5 is_stmt 1 view .LVU500
 957:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 1600              		.loc 1 957 26 is_stmt 0 view .LVU501
 1601 0014 0123     		movs	r3, #1
 1602 0016 C366     		str	r3, [r0, #108]
 958:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1603              		.loc 1 958 5 is_stmt 1 view .LVU502
 958:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1604              		.loc 1 958 24 is_stmt 0 view .LVU503
 1605 0018 0023     		movs	r3, #0
 1606 001a 0367     		str	r3, [r0, #112]
 960:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1607              		.loc 1 960 5 is_stmt 1 view .LVU504
 960:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1608              		.loc 1 960 15 is_stmt 0 view .LVU505
 1609 001c FFF7FEFF 		bl	UART_Start_Receive_DMA
 1610              	.LVL127:
 963:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1611              		.loc 1 963 5 is_stmt 1 view .LVU506
 963:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     {
 1612              		.loc 1 963 8 is_stmt 0 view .LVU507
 1613 0020 0028     		cmp	r0, #0
 1614 0022 F6D1     		bne	.L113
 965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1615              		.loc 1 965 7 is_stmt 1 view .LVU508
 965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1616              		.loc 1 965 16 is_stmt 0 view .LVU509
 1617 0024 E36E     		ldr	r3, [r4, #108]
 965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       {
 1618              		.loc 1 965 10 view .LVU510
 1619 0026 012B     		cmp	r3, #1
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 77


 1620 0028 01D0     		beq	.L125
 976:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1621              		.loc 1 976 16 view .LVU511
 1622 002a 0120     		movs	r0, #1
 1623              	.LVL128:
 980:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1624              		.loc 1 980 5 is_stmt 1 view .LVU512
 980:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1625              		.loc 1 980 12 is_stmt 0 view .LVU513
 1626 002c F1E7     		b	.L113
 1627              	.LVL129:
 1628              	.L125:
 967:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1629              		.loc 1 967 9 is_stmt 1 view .LVU514
 1630 002e 2368     		ldr	r3, [r4]
 1631 0030 1022     		movs	r2, #16
 1632 0032 1A62     		str	r2, [r3, #32]
 1633              	.L115:
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1634              		.loc 1 968 9 discriminator 1 view .LVU515
 1635              	.LBB37:
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1636              		.loc 1 968 9 discriminator 1 view .LVU516
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1637              		.loc 1 968 9 discriminator 1 view .LVU517
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1638              		.loc 1 968 9 discriminator 1 view .LVU518
 1639 0034 2268     		ldr	r2, [r4]
 1640              	.LVL130:
 1641              	.LBB38:
 1642              	.LBI38:
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1643              		.loc 2 1151 31 discriminator 1 view .LVU519
 1644              	.LBB39:
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1645              		.loc 2 1153 5 discriminator 1 view .LVU520
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1646              		.loc 2 1155 4 discriminator 1 view .LVU521
 1647              		.syntax unified
 1648              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1649 0036 52E8003F 		ldrex r3, [r2]
 1650              	@ 0 "" 2
 1651              	.LVL131:
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1652              		.loc 2 1156 4 discriminator 1 view .LVU522
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1653              		.loc 2 1156 4 is_stmt 0 discriminator 1 view .LVU523
 1654              		.thumb
 1655              		.syntax unified
 1656              	.LBE39:
 1657              	.LBE38:
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1658              		.loc 1 968 9 discriminator 1 view .LVU524
 1659 003a 43F01003 		orr	r3, r3, #16
 1660              	.LVL132:
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1661              		.loc 1 968 9 is_stmt 1 discriminator 1 view .LVU525
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 78


 1662              	.LBB40:
 1663              	.LBI40:
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1664              		.loc 2 1202 31 discriminator 1 view .LVU526
 1665              	.LBB41:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1666              		.loc 2 1204 4 discriminator 1 view .LVU527
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1667              		.loc 2 1206 4 discriminator 1 view .LVU528
 1668              		.syntax unified
 1669              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1670 003e 42E80031 		strex r1, r3, [r2]
 1671              	@ 0 "" 2
 1672              	.LVL133:
 1673              		.loc 2 1207 4 discriminator 1 view .LVU529
 1674              		.loc 2 1207 4 is_stmt 0 discriminator 1 view .LVU530
 1675              		.thumb
 1676              		.syntax unified
 1677              	.LBE41:
 1678              	.LBE40:
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1679              		.loc 1 968 9 discriminator 1 view .LVU531
 1680 0042 0029     		cmp	r1, #0
 1681 0044 F6D1     		bne	.L115
 1682 0046 E4E7     		b	.L113
 1683              	.LVL134:
 1684              	.L116:
 1685              		.cfi_def_cfa_offset 0
 1686              		.cfi_restore 4
 1687              		.cfi_restore 14
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****       }
 1688              		.loc 1 968 9 discriminator 1 view .LVU532
 1689              	.LBE37:
 984:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   }
 1690              		.loc 1 984 12 view .LVU533
 1691 0048 0220     		movs	r0, #2
 1692              	.LVL135:
 986:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1693              		.loc 1 986 1 view .LVU534
 1694 004a 7047     		bx	lr
 1695              	.LVL136:
 1696              	.L117:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 4, -8
 1699              		.cfi_offset 14, -4
 940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1700              		.loc 1 940 14 view .LVU535
 1701 004c 0120     		movs	r0, #1
 1702              	.LVL137:
 940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****     }
 1703              		.loc 1 940 14 view .LVU536
 1704 004e E0E7     		b	.L113
 1705              		.cfi_endproc
 1706              	.LFE865:
 1708              		.section	.text.HAL_UARTEx_GetRxEventType,"ax",%progbits
 1709              		.align	1
 1710              		.global	HAL_UARTEx_GetRxEventType
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 79


 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1715              	HAL_UARTEx_GetRxEventType:
 1716              	.LVL138:
 1717              	.LFB866:
1013:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c ****   /* Return Rx Event type value, as stored in UART handle */
 1718              		.loc 1 1013 1 is_stmt 1 view -0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
1015:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 1723              		.loc 1 1015 3 view .LVU538
1015:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** }
 1724              		.loc 1 1015 15 is_stmt 0 view .LVU539
 1725 0000 006F     		ldr	r0, [r0, #112]
 1726              	.LVL139:
1016:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_uart_ex.c **** 
 1727              		.loc 1 1016 1 view .LVU540
 1728 0002 7047     		bx	lr
 1729              		.cfi_endproc
 1730              	.LFE866:
 1732              		.section	.rodata.denominator.0,"a"
 1733              		.align	2
 1736              	denominator.0:
 1737 0000 08040204 		.ascii	"\010\004\002\004\010\001\001\001"
 1737      08010101 
 1738              		.section	.rodata.numerator.1,"a"
 1739              		.align	2
 1742              	numerator.1:
 1743 0000 01010103 		.ascii	"\001\001\001\003\007\001\000\000"
 1743      07010000 
 1744              		.text
 1745              	.Letext0:
 1746              		.file 3 "c:\\users\\david.fobar\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode
 1747              		.file 4 "c:\\users\\david.fobar\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode
 1748              		.file 5 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wle5xx.h"
 1749              		.file 6 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wlxx.h"
 1750              		.file 7 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_def.h"
 1751              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_dma.h"
 1752              		.file 9 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_uart.h"
 1753              		.file 10 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_uart_ex.h"
 1754              		.file 11 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
 1755              		.file 12 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal.h"
ARM GAS  C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s 			page 80


DEFINED SYMBOLS
                            *ABS*:00000000 stm32wlxx_hal_uart_ex.c
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:19     .text.UARTEx_Wakeup_AddressConfig:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:24     .text.UARTEx_Wakeup_AddressConfig:00000000 UARTEx_Wakeup_AddressConfig
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:61     .text.UARTEx_SetNbDataToProcess:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:66     .text.UARTEx_SetNbDataToProcess:00000000 UARTEx_SetNbDataToProcess
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:150    .text.UARTEx_SetNbDataToProcess:00000044 $d
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1742   .rodata.numerator.1:00000000 numerator.1
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1736   .rodata.denominator.0:00000000 denominator.0
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:156    .text.HAL_RS485Ex_Init:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:162    .text.HAL_RS485Ex_Init:00000000 HAL_RS485Ex_Init
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:298    .text.HAL_UARTEx_WakeupCallback:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:304    .text.HAL_UARTEx_WakeupCallback:00000000 HAL_UARTEx_WakeupCallback
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:319    .text.HAL_UARTEx_RxFifoFullCallback:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:325    .text.HAL_UARTEx_RxFifoFullCallback:00000000 HAL_UARTEx_RxFifoFullCallback
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:340    .text.HAL_UARTEx_TxFifoEmptyCallback:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:346    .text.HAL_UARTEx_TxFifoEmptyCallback:00000000 HAL_UARTEx_TxFifoEmptyCallback
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:361    .text.HAL_MultiProcessorEx_AddressLength_Set:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:367    .text.HAL_MultiProcessorEx_AddressLength_Set:00000000 HAL_MultiProcessorEx_AddressLength_Set
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:429    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:435    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:00000000 HAL_UARTEx_StopModeWakeUpSourceConfig
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:557    .text.HAL_UARTEx_EnableStopMode:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:563    .text.HAL_UARTEx_EnableStopMode:00000000 HAL_UARTEx_EnableStopMode
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:656    .text.HAL_UARTEx_DisableStopMode:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:662    .text.HAL_UARTEx_DisableStopMode:00000000 HAL_UARTEx_DisableStopMode
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:754    .text.HAL_UARTEx_EnableFifoMode:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:760    .text.HAL_UARTEx_EnableFifoMode:00000000 HAL_UARTEx_EnableFifoMode
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:837    .text.HAL_UARTEx_DisableFifoMode:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:843    .text.HAL_UARTEx_DisableFifoMode:00000000 HAL_UARTEx_DisableFifoMode
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:914    .text.HAL_UARTEx_SetTxFifoThreshold:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:920    .text.HAL_UARTEx_SetTxFifoThreshold:00000000 HAL_UARTEx_SetTxFifoThreshold
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1000   .text.HAL_UARTEx_SetRxFifoThreshold:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1006   .text.HAL_UARTEx_SetRxFifoThreshold:00000000 HAL_UARTEx_SetRxFifoThreshold
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1086   .text.HAL_UARTEx_ReceiveToIdle:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1092   .text.HAL_UARTEx_ReceiveToIdle:00000000 HAL_UARTEx_ReceiveToIdle
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1411   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1417   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 HAL_UARTEx_ReceiveToIdle_IT
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1560   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1566   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 HAL_UARTEx_ReceiveToIdle_DMA
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1709   .text.HAL_UARTEx_GetRxEventType:00000000 $t
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1715   .text.HAL_UARTEx_GetRxEventType:00000000 HAL_UARTEx_GetRxEventType
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1733   .rodata.denominator.0:00000000 $d
C:\Users\DAVID~1.FOB\AppData\Local\Temp\ccRGcyvS.s:1739   .rodata.numerator.1:00000000 $d

UNDEFINED SYMBOLS
UART_SetConfig
UART_CheckIdleState
HAL_UART_MspInit
UART_AdvFeatureConfig
HAL_GetTick
UART_WaitOnFlagUntilTimeout
UART_Start_Receive_IT
UART_Start_Receive_DMA
