
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be40  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  0801bf78  0801bf78  0002bf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801cd1c  0801cd1c  0002cd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801cdf4  0801cdf4  00030148  2**0
                  CONTENTS
  5 .ARM          00000008  0801cdf4  0801cdf4  0002cdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801cdfc  0801cdfc  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801cdfc  0801cdfc  0002cdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ce00  0801ce00  0002ce00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801ce04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000020c8  20000148  0801cf4c  00030148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002210  0801cf4c  00032210  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003fc30  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a27d  00000000  00000000  0006fde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003280  00000000  00000000  0007a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002636  00000000  00000000  0007d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028996  00000000  00000000  0007f91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bc0f  00000000  00000000  000a82b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbafe  00000000  00000000  000e3ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000cf54  00000000  00000000  001af9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001bc918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801bf60 	.word	0x0801bf60

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801bf60 	.word	0x0801bf60

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811b 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8118 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8106 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8103 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f7 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 808f 	bne.w	8000de6 <__udivmoddi4+0x20e>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80ba 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d90:	fb00 4413 	mls	r4, r0, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000db6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46c6      	mov	lr, r8
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	d355      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc6:	d052      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb9 030e 	subs.w	r3, r9, lr
 8000dce:	eb64 0405 	sbc.w	r4, r4, r5
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c3 0120 	rsb	r1, r3, #32
 8000dea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dee:	fa20 f201 	lsr.w	r2, r0, r1
 8000df2:	fa25 f101 	lsr.w	r1, r5, r1
 8000df6:	409d      	lsls	r5, r3
 8000df8:	432a      	orrs	r2, r5
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e06:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0a:	0c11      	lsrs	r1, r2, #16
 8000e0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e10:	fb00 f50e 	mul.w	r5, r0, lr
 8000e14:	428d      	cmp	r5, r1
 8000e16:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428d      	cmp	r5, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1b49      	subs	r1, r1, r5
 8000e30:	b292      	uxth	r2, r2
 8000e32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e36:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x280>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d216      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d914      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	1a52      	subs	r2, r2, r1
 8000e5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5e:	e739      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e60:	4631      	mov	r1, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e66:	4639      	mov	r1, r7
 8000e68:	e6e7      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	e6fc      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e6e:	45c1      	cmp	r9, r8
 8000e70:	d2aa      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb63 050c 	sbc.w	r5, r3, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	e7ea      	b.n	8000e58 <__udivmoddi4+0x280>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4640      	mov	r0, r8
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	46d0      	mov	r8, sl
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e743      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	4013      	ands	r3, r2
 8000eec:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_ADC_Init+0x94>)
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <MX_ADC_Init+0x98>)
 8000f00:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f08:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_ADC_Init+0x94>)
 8000f7a:	f001 ff81 	bl	8002e80 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f84:	f000 fc20 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000164 	.word	0x20000164
 8000f90:	40012400 	.word	0x40012400

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0x24>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d103      	bne.n	8000fae <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000faa:	f7ff ff7b 	bl	8000ea4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40012400 	.word	0x40012400

08000fbc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <HAL_ADC_MspDeInit+0x24>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d103      	bne.n	8000fd6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fd2:	f7ff ff7f 	bl	8000ed4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012400 	.word	0x40012400

08000fe4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <SYS_InitMeasurement+0x14>)
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <SYS_InitMeasurement+0x18>)
 8000fec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000164 	.word	0x20000164
 8000ffc:	40012400 	.word	0x40012400

08001000 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <SYS_GetBatteryLevel+0x5c>)
 8001010:	f000 f82a 	bl	8001068 <ADC_ReadChannels>
 8001014:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	e016      	b.n	8001050 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SYS_GetBatteryLevel+0x60>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102a:	4293      	cmp	r3, r2
 800102c:	d00b      	beq.n	8001046 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <SYS_GetBatteryLevel+0x60>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	80fb      	strh	r3, [r7, #6]
 8001044:	e004      	b.n	8001050 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <SYS_GetBatteryLevel+0x64>)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001050:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	b4002000 	.word	0xb4002000
 8001060:	1fff75aa 	.word	0x1fff75aa
 8001064:	004c08d8 	.word	0x004c08d8

08001068 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001080:	f7ff ff3a 	bl	8000ef8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001084:	481a      	ldr	r0, [pc, #104]	; (80010f0 <ADC_ReadChannels+0x88>)
 8001086:	f002 fd1a 	bl	8003abe <HAL_ADCEx_Calibration_Start>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001090:	f000 fb9a 	bl	80017c8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010a8:	f002 fa26 	bl	80034f8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010b2:	f000 fb89 	bl	80017c8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010b8:	f002 f902 	bl	80032c0 <HAL_ADC_Start>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010c2:	f000 fb81 	bl	80017c8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010cc:	f002 f970 	bl	80033b0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010d2:	f002 f93b 	bl	800334c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010d8:	f002 fa01 	bl	80034de <HAL_ADC_GetValue>
 80010dc:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <ADC_ReadChannels+0x88>)
 80010e0:	f002 f862 	bl	80031a8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000164 	.word	0x20000164

080010f4 <LL_AHB1_GRP1_EnableClock>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001128:	2004      	movs	r0, #4
 800112a:	f7ff ffe3 	bl	80010f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ffe0 	bl	80010f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	200b      	movs	r0, #11
 800113a:	f002 fe66 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800113e:	200b      	movs	r0, #11
 8001140:	f002 fe7d 	bl	8003e3e <HAL_NVIC_EnableIRQ>

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001154:	23ff      	movs	r3, #255	; 0xff
 8001156:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800115e:	d311      	bcc.n	8001184 <FLASH_IF_Write+0x3c>
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <FLASH_IF_Write+0x48>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	029a      	lsls	r2, r3, #10
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <FLASH_IF_Write+0x4c>)
 8001168:	4013      	ands	r3, r2
 800116a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800116e:	3b01      	subs	r3, #1
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4293      	cmp	r3, r2
 8001174:	d306      	bcc.n	8001184 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f85a 	bl	8001234 <FLASH_IF_INT_Write>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	1fff75e0 	.word	0x1fff75e0
 8001194:	03fffc00 	.word	0x03fffc00

08001198 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011a4:	23ff      	movs	r3, #255	; 0xff
 80011a6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011ae:	d311      	bcc.n	80011d4 <FLASH_IF_Read+0x3c>
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <FLASH_IF_Read+0x48>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	029a      	lsls	r2, r3, #10
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <FLASH_IF_Read+0x4c>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011be:	3b01      	subs	r3, #1
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d306      	bcc.n	80011d4 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f93a 	bl	8001444 <FLASH_IF_INT_Read>
 80011d0:	4603      	mov	r3, r0
 80011d2:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80011d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	1fff75e0 	.word	0x1fff75e0
 80011e4:	03fffc00 	.word	0x03fffc00

080011e8 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011f2:	23ff      	movs	r3, #255	; 0xff
 80011f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011fc:	d310      	bcc.n	8001220 <FLASH_IF_Erase+0x38>
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <FLASH_IF_Erase+0x44>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	029a      	lsls	r2, r3, #10
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <FLASH_IF_Erase+0x48>)
 8001206:	4013      	ands	r3, r2
 8001208:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800120c:	3b01      	subs	r3, #1
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4293      	cmp	r3, r2
 8001212:	d305      	bcc.n	8001220 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f932 	bl	8001480 <FLASH_IF_INT_Erase>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	1fff75e0 	.word	0x1fff75e0
 8001230:	03fffc00 	.word	0x03fffc00

08001234 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b090      	sub	sp, #64	; 0x40
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <FLASH_IF_INT_Write+0x3e>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <FLASH_IF_INT_Write+0x3e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b00      	cmp	r3, #0
 8001266:	d104      	bne.n	8001272 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001272:	f06f 0305 	mvn.w	r3, #5
 8001276:	e0da      	b.n	800142e <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001278:	f000 f992 	bl	80015a0 <FLASH_IF_INT_Clear_Error>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001282:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80cf 	bne.w	800142a <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800128c:	f003 fa22 	bl	80046d4 <HAL_FLASH_Unlock>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 80c6 	bne.w	8001424 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <FLASH_IF_INT_Write+0x204>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0299      	lsls	r1, r3, #10
 80012a4:	4b65      	ldr	r3, [pc, #404]	; (800143c <FLASH_IF_INT_Write+0x208>)
 80012a6:	400b      	ands	r3, r1
 80012a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	0adb      	lsrs	r3, r3, #11
 80012b4:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80012b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a5d      	ldr	r2, [pc, #372]	; (8001438 <FLASH_IF_INT_Write+0x204>)
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	0291      	lsls	r1, r2, #10
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <FLASH_IF_INT_Write+0x208>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80012d0:	fb01 f202 	mul.w	r2, r1, r2
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	0ada      	lsrs	r2, r3, #11
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d905      	bls.n	80012f2 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ec:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f6:	e089      	b.n	800140c <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012fe:	02db      	lsls	r3, r3, #11
 8001300:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f925 	bl	8001554 <FLASH_IF_INT_IsEmpty>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d031      	beq.n	8001374 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001310:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <FLASH_IF_INT_Write+0x20c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001318:	23fa      	movs	r3, #250	; 0xfa
 800131a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800131e:	e07e      	b.n	800141e <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <FLASH_IF_INT_Write+0x20c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f88a 	bl	8001444 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001330:	4b43      	ldr	r3, [pc, #268]	; (8001440 <FLASH_IF_INT_Write+0x20c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133a:	4413      	add	r3, r2
 800133c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001340:	b292      	uxth	r2, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f019 fa9c 	bl	801a880 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f896 	bl	8001480 <FLASH_IF_INT_Erase>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800135a:	23fe      	movs	r3, #254	; 0xfe
 800135c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001360:	e05d      	b.n	800141e <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <FLASH_IF_INT_Write+0x20c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 800136c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e005      	b.n	8001380 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137a:	623b      	str	r3, [r7, #32]
          current_length = length;
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
 8001384:	e026      	b.n	80013d4 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001392:	2001      	movs	r0, #1
 8001394:	f003 f95a 	bl	800464c <HAL_FLASH_Program>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d113      	bne.n	80013c6 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a4:	6a3a      	ldr	r2, [r7, #32]
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	4413      	add	r3, r2
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	4299      	cmp	r1, r3
 80013b0:	bf08      	it	eq
 80013b2:	4290      	cmpeq	r0, r2
 80013b4:	d003      	beq.n	80013be <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80013b6:	23fc      	movs	r3, #252	; 0xfc
 80013b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80013bc:	e00e      	b.n	80013dc <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	3308      	adds	r3, #8
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
 80013c4:	e003      	b.n	80013ce <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80013c6:	23fc      	movs	r3, #252	; 0xfc
 80013c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80013cc:	e006      	b.n	80013dc <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	3308      	adds	r3, #8
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3d4      	bcc.n	8001386 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80013dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11b      	bne.n	800141c <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80013e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e8:	4413      	add	r3, r2
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80013ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	4413      	add	r3, r2
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013fe:	bf28      	it	cs
 8001400:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	3301      	adds	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4413      	add	r3, r2
 8001412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001414:	429a      	cmp	r2, r3
 8001416:	f4ff af6f 	bcc.w	80012f8 <FLASH_IF_INT_Write+0xc4>
 800141a:	e000      	b.n	800141e <FLASH_IF_INT_Write+0x1ea>
          break;
 800141c:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800141e:	f003 f97b 	bl	8004718 <HAL_FLASH_Lock>
 8001422:	e002      	b.n	800142a <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001424:	23fb      	movs	r3, #251	; 0xfb
 8001426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800142a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800142e:	4618      	mov	r0, r3
 8001430:	3740      	adds	r7, #64	; 0x40
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	1fff75e0 	.word	0x1fff75e0
 800143c:	03fffc00 	.word	0x03fffc00
 8001440:	200001c8 	.word	0x200001c8

08001444 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <FLASH_IF_INT_Read+0x1c>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001460:	f06f 0305 	mvn.w	r3, #5
 8001464:	e008      	b.n	8001478 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	b29b      	uxth	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f019 fa06 	bl	801a880 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80014a0:	f06f 0305 	mvn.w	r3, #5
 80014a4:	e04e      	b.n	8001544 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80014a6:	f000 f87b 	bl	80015a0 <FLASH_IF_INT_Clear_Error>
 80014aa:	4603      	mov	r3, r0
 80014ac:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80014ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d144      	bne.n	8001540 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80014b6:	f003 f90d 	bl	80046d4 <HAL_FLASH_Unlock>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d13d      	bne.n	800153c <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80014c0:	2302      	movs	r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <FLASH_IF_INT_Erase+0xcc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0299      	lsls	r1, r3, #10
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <FLASH_IF_INT_Erase+0xd0>)
 80014d2:	400b      	ands	r3, r1
 80014d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	0adb      	lsrs	r3, r3, #11
 80014e0:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <FLASH_IF_INT_Erase+0xcc>)
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	0291      	lsls	r1, r2, #10
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <FLASH_IF_INT_Erase+0xd0>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80014fc:	fb01 f202 	mul.w	r2, r1, r2
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	0ada      	lsrs	r2, r3, #11
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	3301      	adds	r3, #1
 800150a:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800150c:	f107 0214 	add.w	r2, r7, #20
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f9de 	bl	80048d8 <HAL_FLASHEx_Erase>
 800151c:	4603      	mov	r3, r0
 800151e:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001520:	7fbb      	ldrb	r3, [r7, #30]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001526:	7fbb      	ldrb	r3, [r7, #30]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d101      	bne.n	8001530 <FLASH_IF_INT_Erase+0xb0>
 800152c:	2301      	movs	r3, #1
 800152e:	e001      	b.n	8001534 <FLASH_IF_INT_Erase+0xb4>
 8001530:	f06f 0301 	mvn.w	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001536:	f003 f8ef 	bl	8004718 <HAL_FLASH_Lock>
 800153a:	e001      	b.n	8001540 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800153c:	23fb      	movs	r3, #251	; 0xfb
 800153e:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001540:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	1fff75e0 	.word	0x1fff75e0
 8001550:	03fffc00 	.word	0x03fffc00

08001554 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	e011      	b.n	800158c <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001572:	bf08      	it	eq
 8001574:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001578:	d002      	beq.n	8001580 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800157a:	2301      	movs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
      break;
 800157e:	e009      	b.n	8001594 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3308      	adds	r3, #8
 8001584:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3308      	adds	r3, #8
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3e9      	bcc.n	8001568 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80015a6:	23fb      	movs	r3, #251	; 0xfb
 80015a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80015aa:	f003 f893 	bl	80046d4 <HAL_FLASH_Unlock>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d110      	bne.n	80015d6 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <FLASH_IF_INT_Clear_Error+0x44>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <FLASH_IF_INT_Clear_Error+0x44>)
 80015ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <FLASH_IF_INT_Clear_Error+0x44>)
 80015c2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80015c6:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80015c8:	f003 f8a6 	bl	8004718 <HAL_FLASH_Lock>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	58004000 	.word	0x58004000

080015e8 <LL_AHB2_GRP1_EnableClock>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	2004      	movs	r0, #4
 800162e:	f7ff ffdb 	bl	80015e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff ffd8 	bl	80015e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ffd5 	bl	80015e8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001644:	4821      	ldr	r0, [pc, #132]	; (80016cc <MX_GPIO_Init+0xb4>)
 8001646:	f003 fc49 	bl	8004edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2120      	movs	r1, #32
 800164e:	481f      	ldr	r0, [pc, #124]	; (80016cc <MX_GPIO_Init+0xb4>)
 8001650:	f003 fc44 	bl	8004edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2131      	movs	r1, #49	; 0x31
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f003 fc3e 	bl	8004edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001660:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001664:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4815      	ldr	r0, [pc, #84]	; (80016cc <MX_GPIO_Init+0xb4>)
 8001678:	f003 fa02 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800167c:	2331      	movs	r3, #49	; 0x31
 800167e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f003 f9f4 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <MX_GPIO_Init+0xb4>)
 80016ae:	f003 f9e7 	bl	8004a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2029      	movs	r0, #41	; 0x29
 80016b8:	f002 fba7 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016bc:	2029      	movs	r0, #41	; 0x29
 80016be:	f002 fbbe 	bl	8003e3e <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	48000400 	.word	0x48000400

080016d0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e0:	f023 0218 	bic.w	r2, r3, #24
 80016e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fe:	f001 f9d1 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001702:	f000 f807 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001706:	f7ff ff87 	bl	8001618 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 800170a:	f008 fa1f 	bl	8009b4c <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800170e:	f008 fa25 	bl	8009b5c <MX_LoRaWAN_Process>
 8001712:	e7fc      	b.n	800170e <main+0x14>

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09a      	sub	sp, #104	; 0x68
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2248      	movs	r2, #72	; 0x48
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f01a fb70 	bl	801be08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800173a:	f003 fbff 	bl	8004f3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ffc6 	bl	80016d0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <SystemClock_Config+0xb0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <SystemClock_Config+0xb0>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <SystemClock_Config+0xb0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001760:	2324      	movs	r3, #36	; 0x24
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001764:	2381      	movs	r3, #129	; 0x81
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800176c:	2300      	movs	r3, #0
 800176e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001770:	23b0      	movs	r3, #176	; 0xb0
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4618      	mov	r0, r3
 800177e:	f003 ff29 	bl	80055d4 <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001788:	f000 f81e 	bl	80017c8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800178c:	234f      	movs	r3, #79	; 0x4f
 800178e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2102      	movs	r1, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fa94 	bl	8005cd8 <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017b6:	f000 f807 	bl	80017c8 <Error_Handler>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3768      	adds	r7, #104	; 0x68
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	58000400 	.word	0x58000400

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <Error_Handler+0x8>

080017d2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <LL_APB1_GRP1_EnableClock>:
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4313      	orrs	r3, r2
 8001808:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4013      	ands	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
	...

08001824 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	222c      	movs	r2, #44	; 0x2c
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f01a fae9 	bl	801be08 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_RTC_Init+0x9c>)
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <MX_RTC_Init+0xa0>)
 800183a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_RTC_Init+0x9c>)
 800183e:	221f      	movs	r2, #31
 8001840:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_RTC_Init+0x9c>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_RTC_Init+0x9c>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_RTC_Init+0x9c>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_RTC_Init+0x9c>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_RTC_Init+0x9c>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_RTC_Init+0x9c>)
 8001864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_RTC_Init+0x9c>)
 800186c:	f004 fef0 	bl	8006650 <HAL_RTC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001876:	f7ff ffa7 	bl	80017c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800187a:	4811      	ldr	r0, [pc, #68]	; (80018c0 <MX_RTC_Init+0x9c>)
 800187c:	f005 f9e6 	bl	8006c4c <HAL_RTCEx_SetSSRU_IT>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001886:	f7ff ff9f 	bl	80017c8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001896:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800189a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800189c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_RTC_Init+0x9c>)
 80018aa:	f004 ff53 	bl	8006754 <HAL_RTC_SetAlarm_IT>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80018b4:	f7ff ff88 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200001cc 	.word	0x200001cc
 80018c4:	40002800 	.word	0x40002800

080018c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	; 0x40
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	2238      	movs	r2, #56	; 0x38
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f01a fa95 	bl	801be08 <memset>
  if(rtcHandle->Instance==RTC)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_RTC_MspInit+0x74>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d125      	bne.n	8001934 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fd8f 	bl	800641c <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001904:	f7ff ff60 	bl	80017c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001908:	f7ff ff63 	bl	80017d2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800190c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001910:	f7ff ff6f 	bl	80017f2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	2002      	movs	r0, #2
 800191a:	f002 fa76 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800191e:	2002      	movs	r0, #2
 8001920:	f002 fa8d 	bl	8003e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	202a      	movs	r0, #42	; 0x2a
 800192a:	f002 fa6e 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800192e:	202a      	movs	r0, #42	; 0x2a
 8001930:	f002 fa85 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3740      	adds	r7, #64	; 0x40
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40002800 	.word	0x40002800

08001940 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001946:	2201      	movs	r2, #1
 8001948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	58000400 	.word	0x58000400

08001958 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001974:	f001 f8b6 	bl	8002ae4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001978:	f7ff ffe2 	bl	8001940 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800197c:	2001      	movs	r0, #1
 800197e:	f003 fb6f 	bl	8005060 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}

08001986 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800198a:	f001 f8b9 	bl	8002b00 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800198e:	f000 ff39 	bl	8002804 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}

08001996 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800199a:	f001 f8a3 	bl	8002ae4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800199e:	2101      	movs	r1, #1
 80019a0:	2000      	movs	r0, #0
 80019a2:	f003 fad9 	bl	8004f58 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80019ae:	f001 f8a7 	bl	8002b00 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <HardFault_Handler+0x4>

080019ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <MemManage_Handler+0x4>

080019d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <BusFault_Handler+0x4>

080019da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001a16:	f005 f955 	bl	8006cc4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200001cc 	.word	0x200001cc

08001a24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <DMA1_Channel1_IRQHandler+0x10>)
 8001a2a:	f002 fc9f 	bl	800436c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002ac 	.word	0x200002ac

08001a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <USART1_IRQHandler+0x10>)
 8001a3e:	f005 ff8b 	bl	8007958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000218 	.word	0x20000218

08001a4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001a50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a54:	f003 fa5a 	bl	8004f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <RTC_Alarm_IRQHandler+0x10>)
 8001a62:	f004 ffdf 	bl	8006a24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001cc 	.word	0x200001cc

08001a70 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001a76:	f005 fc93 	bl	80073a0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000204 	.word	0x20000204

08001a84 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_SUBGHZ_Init+0x20>)
 8001aba:	2208      	movs	r2, #8
 8001abc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_SUBGHZ_Init+0x20>)
 8001ac0:	f005 f9ec 	bl	8006e9c <HAL_SUBGHZ_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001aca:	f7ff fe7d 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000204 	.word	0x20000204

08001ad8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff ffcf 	bl	8001a84 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2032      	movs	r0, #50	; 0x32
 8001aec:	f002 f98d 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001af0:	2032      	movs	r0, #50	; 0x32
 8001af2:	f002 f9a4 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <LL_FLASH_GetUDN+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	1fff7580 	.word	0x1fff7580

08001b38 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <LL_FLASH_GetDeviceID+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	1fff7584 	.word	0x1fff7584

08001b50 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <LL_FLASH_GetSTCompanyID+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0a1b      	lsrs	r3, r3, #8
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	1fff7584 	.word	0x1fff7584

08001b68 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff ffc6 	bl	8001afe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001b72:	f019 fc13 	bl	801b39c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <SystemApp_Init+0x48>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001b7c:	f000 f98c 	bl	8001e98 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001b80:	f019 fe9c 	bl	801b8bc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <SystemApp_Init+0x4c>)
 8001b86:	f019 ff47 	bl	801ba18 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <SystemApp_Init+0x50>)
 8001b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b90:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001b92:	2002      	movs	r0, #2
 8001b94:	f019 ff4e 	bl	801ba34 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001b98:	f7ff fa24 	bl	8000fe4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001b9c:	f000 fa02 	bl	8001fa4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001ba0:	f018 fdc8 	bl	801a734 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f018 fe04 	bl	801a7b4 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000210 	.word	0x20000210
 8001bb4:	08001d89 	.word	0x08001d89
 8001bb8:	58004000 	.word	0x58004000

08001bbc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001bc0:	f018 fe28 	bl	801a814 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001bd2:	f7ff fa15 	bl	8001000 <SYS_GetBatteryLevel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d902      	bls.n	8001bea <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001be4:	23fe      	movs	r3, #254	; 0xfe
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	e014      	b.n	8001c14 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001bf0:	d202      	bcs.n	8001bf8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	e00d      	b.n	8001c14 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4613      	mov	r3, r2
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <GetBatteryLevel+0x58>)
 8001c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c10:	09db      	lsrs	r3, r3, #7
 8001c12:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001c14:	79fb      	ldrb	r3, [r7, #7]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	1b4e81b5 	.word	0x1b4e81b5

08001c24 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f98d 	bl	8001f50 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ff6f 	bl	8000b1c <__aeabi_f2iz>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001c42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001c4e:	b590      	push	{r4, r7, lr}
 8001c50:	b087      	sub	sp, #28
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001c5a:	f7ff ff63 	bl	8001b24 <LL_FLASH_GetUDN>
 8001c5e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c66:	d138      	bne.n	8001cda <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001c68:	f000 ff58 	bl	8002b1c <HAL_GetUIDw0>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	f000 ff69 	bl	8002b44 <HAL_GetUIDw2>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4423      	add	r3, r4
 8001c76:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001c78:	f000 ff5a 	bl	8002b30 <HAL_GetUIDw1>
 8001c7c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	0e1a      	lsrs	r2, r3, #24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3307      	adds	r3, #7
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	0c1a      	lsrs	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3306      	adds	r3, #6
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	0a1a      	lsrs	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0e1a      	lsrs	r2, r3, #24
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0c1a      	lsrs	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	0a1a      	lsrs	r2, r3, #8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001cd8:	e031      	b.n	8001d3e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3307      	adds	r3, #7
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	0a1a      	lsrs	r2, r3, #8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3306      	adds	r3, #6
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	0c1a      	lsrs	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	0e1a      	lsrs	r2, r3, #24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001d08:	f7ff ff16 	bl	8001b38 <LL_FLASH_GetDeviceID>
 8001d0c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3303      	adds	r3, #3
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001d18:	f7ff ff1a 	bl	8001b50 <LL_FLASH_GetSTCompanyID>
 8001d1c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3302      	adds	r3, #2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	0a1a      	lsrs	r2, r3, #8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}

08001d46 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8001d46:	b590      	push	{r4, r7, lr}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8001d4e:	f7ff fee9 	bl	8001b24 <LL_FLASH_GetUDN>
 8001d52:	4602      	mov	r2, r0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d60:	d10d      	bne.n	8001d7e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001d62:	f000 fedb 	bl	8002b1c <HAL_GetUIDw0>
 8001d66:	4604      	mov	r4, r0
 8001d68:	f000 fee2 	bl	8002b30 <HAL_GetUIDw1>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	405c      	eors	r4, r3
 8001d70:	f000 fee8 	bl	8002b44 <HAL_GetUIDw2>
 8001d74:	4603      	mov	r3, r0
 8001d76:	ea84 0203 	eor.w	r2, r4, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
	...

08001d88 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	4618      	mov	r0, r3
 8001d98:	f018 fe4c 	bl	801aa34 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001da2:	9200      	str	r2, [sp, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <TimestampNow+0x3c>)
 8001da6:	2110      	movs	r1, #16
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f81d 	bl	8001de8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe f9e2 	bl	8000178 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0801bf78 	.word	0x0801bf78

08001dc8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f018 fcc0 	bl	801a754 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2002      	movs	r0, #2
 8001de0:	f018 fcb8 	bl	801a754 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001de8:	b40c      	push	{r2, r3}
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f018 ffe9 	bl	801add8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e10:	b002      	add	sp, #8
 8001e12:	4770      	bx	lr

08001e14 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_GetTick+0x24>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001e3a:	f000 f97f 	bl	800213c <TIMER_IF_GetTimerValue>
 8001e3e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001e40:	687b      	ldr	r3, [r7, #4]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000210 	.word	0x20000210

08001e50 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f9f5 	bl	800224a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <LL_AHB2_GRP1_EnableClock>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001e9e:	f000 fe5b 	bl	8002b58 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001ea2:	f000 fe5f 	bl	8002b64 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001ea6:	f000 fe63 	bl	8002b70 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff ffcf 	bl	8001e68 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f7ff ffcc 	bl	8001e68 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7ff ffc9 	bl	8001e68 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f7ff ffc6 	bl	8001e68 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001edc:	2301      	movs	r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f002 fdca 	bl	8004a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4815      	ldr	r0, [pc, #84]	; (8001f4c <DBG_Init+0xb4>)
 8001ef8:	f002 fdc2 	bl	8004a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001efc:	2308      	movs	r3, #8
 8001efe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4811      	ldr	r0, [pc, #68]	; (8001f4c <DBG_Init+0xb4>)
 8001f06:	f002 fdbb 	bl	8004a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	480e      	ldr	r0, [pc, #56]	; (8001f4c <DBG_Init+0xb4>)
 8001f14:	f002 fdb4 	bl	8004a80 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f002 ffdc 	bl	8004edc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2a:	4808      	ldr	r0, [pc, #32]	; (8001f4c <DBG_Init+0xb4>)
 8001f2c:	f002 ffd6 	bl	8004edc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2108      	movs	r1, #8
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <DBG_Init+0xb4>)
 8001f36:	f002 ffd1 	bl	8004edc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <DBG_Init+0xb4>)
 8001f40:	f002 ffcc 	bl	8004edc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	48000400 	.word	0x48000400

08001f50 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <EnvSensors_Read+0x40>)
 8001f5a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <EnvSensors_Read+0x44>)
 8001f5e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <EnvSensors_Read+0x48>)
 8001f62:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <EnvSensors_Read+0x4c>)
 8001f7a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <EnvSensors_Read+0x50>)
 8001f80:	611a      	str	r2, [r3, #16]

  return 0;
 8001f82:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	42480000 	.word	0x42480000
 8001f94:	41900000 	.word	0x41900000
 8001f98:	447a0000 	.word	0x447a0000
 8001f9c:	003e090d 	.word	0x003e090d
 8001fa0:	000503ab 	.word	0x000503ab

08001fa4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001fae:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <TIMER_IF_Init+0x5c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <TIMER_IF_Init+0x60>)
 8001ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001ffc:	f7ff fc12 	bl	8001824 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002000:	f000 f856 	bl	80020b0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <TIMER_IF_Init+0x60>)
 800200a:	f004 fcaf 	bl	800696c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <TIMER_IF_Init+0x60>)
 8002010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002014:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002016:	4809      	ldr	r0, [pc, #36]	; (800203c <TIMER_IF_Init+0x60>)
 8002018:	f004 fde6 	bl	8006be8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f9d3 	bl	80023c8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002022:	f000 f85f 	bl	80020e4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <TIMER_IF_Init+0x5c>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800202c:	79fb      	ldrb	r3, [r7, #7]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000211 	.word	0x20000211
 800203c:	200001cc 	.word	0x200001cc

08002040 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08e      	sub	sp, #56	; 0x38
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	222c      	movs	r2, #44	; 0x2c
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f019 fed6 	bl	801be08 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800205c:	f000 f828 	bl	80020b0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <TIMER_IF_StartTimer+0x68>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	43db      	mvns	r3, r3
 8002072:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002078:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800207c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800207e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	2201      	movs	r2, #1
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	; (80020ac <TIMER_IF_StartTimer+0x6c>)
 800208e:	f004 fb61 	bl	8006754 <HAL_RTC_SetAlarm_IT>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002098:	f7ff fb96 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800209c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3738      	adds	r7, #56	; 0x38
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000214 	.word	0x20000214
 80020ac:	200001cc 	.word	0x200001cc

080020b0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <TIMER_IF_StopTimer+0x2c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <TIMER_IF_StopTimer+0x30>)
 80020c6:	f004 fc51 	bl	800696c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <TIMER_IF_StopTimer+0x30>)
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80020d2:	79fb      	ldrb	r3, [r7, #7]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40002800 	.word	0x40002800
 80020e0:	200001cc 	.word	0x200001cc

080020e4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80020e8:	f000 f98e 	bl	8002408 <GetTimerTicks>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a03      	ldr	r2, [pc, #12]	; (80020fc <TIMER_IF_SetTimerContext+0x18>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80020f2:	4b02      	ldr	r3, [pc, #8]	; (80020fc <TIMER_IF_SetTimerContext+0x18>)
 80020f4:	681b      	ldr	r3, [r3, #0]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000214 	.word	0x20000214

08002100 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <TIMER_IF_GetTimerContext+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000214 	.word	0x20000214

08002114 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800211e:	f000 f973 	bl	8002408 <GetTimerTicks>
 8002122:	4602      	mov	r2, r0
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000214 	.word	0x20000214

0800213c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <TIMER_IF_GetTimerValue+0x24>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800214e:	f000 f95b 	bl	8002408 <GetTimerTicks>
 8002152:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000211 	.word	0x20000211

08002164 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800216e:	2303      	movs	r3, #3
 8002170:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002172:	687b      	ldr	r3, [r7, #4]
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800217e:	b5b0      	push	{r4, r5, r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002186:	2100      	movs	r1, #0
 8002188:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	2000      	movs	r0, #0
 800218e:	460a      	mov	r2, r1
 8002190:	4603      	mov	r3, r0
 8002192:	0d95      	lsrs	r5, r2, #22
 8002194:	0294      	lsls	r4, r2, #10
 8002196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe fd01 	bl	8000ba8 <__aeabi_uldivmod>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4613      	mov	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bdb0      	pop	{r4, r5, r7, pc}

080021b8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80021b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80021c2:	2100      	movs	r1, #0
 80021c4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	2000      	movs	r0, #0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4605      	mov	r5, r0
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f04f 0a00 	mov.w	sl, #0
 80021d6:	f04f 0b00 	mov.w	fp, #0
 80021da:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80021de:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80021e2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80021e6:	4650      	mov	r0, sl
 80021e8:	4659      	mov	r1, fp
 80021ea:	1b02      	subs	r2, r0, r4
 80021ec:	eb61 0305 	sbc.w	r3, r1, r5
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	0099      	lsls	r1, r3, #2
 80021fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80021fe:	0090      	lsls	r0, r2, #2
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	eb12 0804 	adds.w	r8, r2, r4
 8002208:	eb43 0905 	adc.w	r9, r3, r5
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002218:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800221c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002220:	4690      	mov	r8, r2
 8002222:	4699      	mov	r9, r3
 8002224:	4640      	mov	r0, r8
 8002226:	4649      	mov	r1, r9
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	0a82      	lsrs	r2, r0, #10
 8002232:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002236:	0a8b      	lsrs	r3, r1, #10
 8002238:	4613      	mov	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800223c:	68fb      	ldr	r3, [r7, #12]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002248:	4770      	bx	lr

0800224a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ff93 	bl	800217e <TIMER_IF_Convert_ms2Tick>
 8002258:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800225a:	f000 f8d5 	bl	8002408 <GetTimerTicks>
 800225e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002260:	e000      	b.n	8002264 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002262:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002264:	f000 f8d0 	bl	8002408 <GetTimerTicks>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f6      	bhi.n	8002262 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002286:	f019 f9d7 	bl	801b638 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800229a:	f000 f8a5 	bl	80023e8 <TIMER_IF_BkUp_Read_MSBticks>
 800229e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f88f 	bl	80023c8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80022b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80022c0:	f000 f8a2 	bl	8002408 <GetTimerTicks>
 80022c4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80022c6:	f000 f88f 	bl	80023e8 <TIMER_IF_BkUp_Read_MSBticks>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	2200      	movs	r2, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	000b      	movs	r3, r1
 80022e0:	2200      	movs	r2, #0
 80022e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022e4:	2000      	movs	r0, #0
 80022e6:	460c      	mov	r4, r1
 80022e8:	4605      	mov	r5, r0
 80022ea:	eb12 0804 	adds.w	r8, r2, r4
 80022ee:	eb43 0905 	adc.w	r9, r3, r5
 80022f2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80022f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	0a82      	lsrs	r2, r0, #10
 8002304:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002308:	0a8b      	lsrs	r3, r1, #10
 800230a:	4613      	mov	r3, r2
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2200      	movs	r2, #0
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800231c:	f04f 0b00 	mov.w	fp, #0
 8002320:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff46 	bl	80021b8 <TIMER_IF_Convert_Tick2ms>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002336:	4618      	mov	r0, r3
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002340 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	2100      	movs	r1, #0
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800234e:	f004 fcdd 	bl	8006d0c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200001cc 	.word	0x200001cc

08002360 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	2101      	movs	r1, #1
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800236e:	f004 fccd 	bl	8006d0c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200001cc 	.word	0x200001cc

08002380 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800238a:	2100      	movs	r1, #0
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800238e:	f004 fcd5 	bl	8006d3c <HAL_RTCEx_BKUPRead>
 8002392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001cc 	.word	0x200001cc

080023a4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80023ae:	2101      	movs	r1, #1
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80023b2:	f004 fcc3 	bl	8006d3c <HAL_RTCEx_BKUPRead>
 80023b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200001cc 	.word	0x200001cc

080023c8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	2102      	movs	r1, #2
 80023d4:	4803      	ldr	r0, [pc, #12]	; (80023e4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80023d6:	f004 fc99 	bl	8006d0c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200001cc 	.word	0x200001cc

080023e8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80023ee:	2102      	movs	r1, #2
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80023f2:	f004 fca3 	bl	8006d3c <HAL_RTCEx_BKUPRead>
 80023f6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80023f8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001cc 	.word	0x200001cc

08002408 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800240e:	480b      	ldr	r0, [pc, #44]	; (800243c <GetTimerTicks+0x34>)
 8002410:	f7ff fdd9 	bl	8001fc6 <LL_RTC_TIME_GetSubSecond>
 8002414:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002416:	e003      	b.n	8002420 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002418:	4808      	ldr	r0, [pc, #32]	; (800243c <GetTimerTicks+0x34>)
 800241a:	f7ff fdd4 	bl	8001fc6 <LL_RTC_TIME_GetSubSecond>
 800241e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002420:	4806      	ldr	r0, [pc, #24]	; (800243c <GetTimerTicks+0x34>)
 8002422:	f7ff fdd0 	bl	8001fc6 <LL_RTC_TIME_GetSubSecond>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4293      	cmp	r3, r2
 800242c:	d1f4      	bne.n	8002418 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40002800 	.word	0x40002800

08002440 <LL_AHB2_GRP1_EnableClock>:
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800244e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002464:	68fb      	ldr	r3, [r7, #12]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <LL_APB2_GRP1_EnableClock>:
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4313      	orrs	r3, r2
 8002486:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <LL_APB2_GRP1_DisableClock>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b6:	4013      	ands	r3, r2
 80024b8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <MX_USART1_UART_Init+0x94>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_USART1_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_USART1_UART_Init+0x90>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <MX_USART1_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_USART1_UART_Init+0x90>)
 800250e:	f005 f906 	bl	800771e <HAL_UART_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002518:	f7ff f956 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	480d      	ldr	r0, [pc, #52]	; (8002554 <MX_USART1_UART_Init+0x90>)
 8002520:	f007 fa29 	bl	8009976 <HAL_UARTEx_SetTxFifoThreshold>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800252a:	f7ff f94d 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800252e:	2100      	movs	r1, #0
 8002530:	4808      	ldr	r0, [pc, #32]	; (8002554 <MX_USART1_UART_Init+0x90>)
 8002532:	f007 fa5e 	bl	80099f2 <HAL_UARTEx_SetRxFifoThreshold>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800253c:	f7ff f944 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_USART1_UART_Init+0x90>)
 8002542:	f007 f9dd 	bl	8009900 <HAL_UARTEx_EnableFifoMode>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800254c:	f7ff f93c 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000218 	.word	0x20000218
 8002558:	40013800 	.word	0x40013800

0800255c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b096      	sub	sp, #88	; 0x58
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2238      	movs	r2, #56	; 0x38
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f019 fc43 	bl	801be08 <memset>
  if(uartHandle->Instance==USART1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <HAL_UART_MspInit+0xe8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d156      	bne.n	800263a <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800258c:	2301      	movs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002590:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002594:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	4618      	mov	r0, r3
 800259c:	f003 ff3e 	bl	800641c <HAL_RCCEx_PeriphCLKConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025a6:	f7ff f90f 	bl	80017c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025ae:	f7ff ff5f 	bl	8002470 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2002      	movs	r0, #2
 80025b4:	f7ff ff44 	bl	8002440 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80025b8:	23c0      	movs	r3, #192	; 0xc0
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025c8:	2307      	movs	r3, #7
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025d0:	4619      	mov	r1, r3
 80025d2:	481d      	ldr	r0, [pc, #116]	; (8002648 <HAL_UART_MspInit+0xec>)
 80025d4:	f002 fa54 	bl	8004a80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_UART_MspInit+0xf4>)
 80025dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025e0:	2212      	movs	r2, #18
 80025e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025e6:	2210      	movs	r2, #16
 80025e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_UART_MspInit+0xf0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_UART_MspInit+0xf0>)
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_UART_MspInit+0xf0>)
 800260a:	2200      	movs	r2, #0
 800260c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800260e:	480f      	ldr	r0, [pc, #60]	; (800264c <HAL_UART_MspInit+0xf0>)
 8002610:	f001 fc32 	bl	8003e78 <HAL_DMA_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800261a:	f7ff f8d5 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_UART_MspInit+0xf0>)
 8002622:	67da      	str	r2, [r3, #124]	; 0x7c
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_UART_MspInit+0xf0>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2102      	movs	r1, #2
 800262e:	2024      	movs	r0, #36	; 0x24
 8002630:	f001 fbeb 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002634:	2024      	movs	r0, #36	; 0x24
 8002636:	f001 fc02 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800263a:	bf00      	nop
 800263c:	3758      	adds	r7, #88	; 0x58
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40013800 	.word	0x40013800
 8002648:	48000400 	.word	0x48000400
 800264c:	200002ac 	.word	0x200002ac
 8002650:	40020008 	.word	0x40020008

08002654 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_UART_MspDeInit+0x3c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10f      	bne.n	8002686 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002666:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800266a:	f7ff ff19 	bl	80024a0 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800266e:	21c0      	movs	r1, #192	; 0xc0
 8002670:	4808      	ldr	r0, [pc, #32]	; (8002694 <HAL_UART_MspDeInit+0x40>)
 8002672:	f002 fb65 	bl	8004d40 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800267a:	4618      	mov	r0, r3
 800267c:	f001 fca4 	bl	8003fc8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002680:	2024      	movs	r0, #36	; 0x24
 8002682:	f001 fbea 	bl	8003e5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40013800 	.word	0x40013800
 8002694:	48000400 	.word	0x48000400

08002698 <LL_APB2_GRP1_ForceReset>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	640b      	str	r3, [r1, #64]	; 0x40
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <LL_APB2_GRP1_ReleaseReset>:
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d0:	4013      	ands	r3, r2
 80026d2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <LL_EXTI_EnableIT_0_31+0x24>)
 80026ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80026ee:	4905      	ldr	r1, [pc, #20]	; (8002704 <LL_EXTI_EnableIT_0_31+0x24>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	58000800 	.word	0x58000800

08002708 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <vcom_Init+0x28>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002716:	f7fe fd05 	bl	8001124 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800271a:	f7ff fed3 	bl	80024c4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800271e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002722:	f7ff ffdd 	bl	80026e0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002726:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000310 	.word	0x20000310

08002734 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002738:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800273c:	f7ff ffac 	bl	8002698 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002740:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002744:	f7ff ffb9 	bl	80026ba <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002748:	4804      	ldr	r0, [pc, #16]	; (800275c <vcom_DeInit+0x28>)
 800274a:	f7ff ff83 	bl	8002654 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800274e:	200f      	movs	r0, #15
 8002750:	f001 fb83 	bl	8003e5a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002754:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000218 	.word	0x20000218

08002760 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	461a      	mov	r2, r3
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4804      	ldr	r0, [pc, #16]	; (8002784 <vcom_Trace_DMA+0x24>)
 8002774:	f005 f870 	bl	8007858 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002778:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000218 	.word	0x20000218

08002788 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <vcom_ReceiveInit+0x70>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002796:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800279a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027a4:	4815      	ldr	r0, [pc, #84]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027a6:	f007 f81e 	bl	80097e6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80027aa:	bf00      	nop
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ba:	d0f7      	beq.n	80027ac <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80027bc:	bf00      	nop
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027cc:	d1f7      	bne.n	80027be <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027dc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80027de:	4807      	ldr	r0, [pc, #28]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027e0:	f007 f85c 	bl	800989c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80027e4:	2201      	movs	r2, #1
 80027e6:	4906      	ldr	r1, [pc, #24]	; (8002800 <vcom_ReceiveInit+0x78>)
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <vcom_ReceiveInit+0x74>)
 80027ea:	f004 ffe9 	bl	80077c0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80027ee:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000314 	.word	0x20000314
 80027fc:	20000218 	.word	0x20000218
 8002800:	2000030c 	.word	0x2000030c

08002804 <vcom_Resume>:

void vcom_Resume(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002808:	4808      	ldr	r0, [pc, #32]	; (800282c <vcom_Resume+0x28>)
 800280a:	f004 ff88 	bl	800771e <HAL_UART_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002814:	f7fe ffd8 	bl	80017c8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <vcom_Resume+0x2c>)
 800281a:	f001 fb2d 	bl	8003e78 <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002824:	f7fe ffd0 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000218 	.word	0x20000218
 8002830:	200002ac 	.word	0x200002ac

08002834 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a05      	ldr	r2, [pc, #20]	; (8002858 <HAL_UART_TxCpltCallback+0x24>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d103      	bne.n	800284e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_UART_TxCpltCallback+0x28>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2000      	movs	r0, #0
 800284c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40013800 	.word	0x40013800
 800285c:	20000310 	.word	0x20000310

08002860 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <HAL_UART_RxCpltCallback+0x44>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d113      	bne.n	800289a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_UART_RxCpltCallback+0x48>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_UART_RxCpltCallback+0x30>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_UART_RxCpltCallback+0x48>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2200      	movs	r2, #0
 800288a:	2101      	movs	r1, #1
 800288c:	4807      	ldr	r0, [pc, #28]	; (80028ac <HAL_UART_RxCpltCallback+0x4c>)
 800288e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002890:	2201      	movs	r2, #1
 8002892:	4906      	ldr	r1, [pc, #24]	; (80028ac <HAL_UART_RxCpltCallback+0x4c>)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f004 ff93 	bl	80077c0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40013800 	.word	0x40013800
 80028a8:	20000314 	.word	0x20000314
 80028ac:	2000030c 	.word	0x2000030c

080028b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028b4:	f7ff fb81 	bl	8001fba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b8:	480c      	ldr	r0, [pc, #48]	; (80028ec <LoopForever+0x6>)
  ldr r1, =_edata
 80028ba:	490d      	ldr	r1, [pc, #52]	; (80028f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <LoopForever+0xe>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028d0:	4c0a      	ldr	r4, [pc, #40]	; (80028fc <LoopForever+0x16>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028de:	f019 fa9b 	bl	801be18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028e2:	f7fe ff0a 	bl	80016fa <main>

080028e6 <LoopForever>:

LoopForever:
    b LoopForever
 80028e6:	e7fe      	b.n	80028e6 <LoopForever>
  ldr   r0, =_estack
 80028e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80028f4:	0801ce04 	.word	0x0801ce04
  ldr r2, =_sbss
 80028f8:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80028fc:	20002210 	.word	0x20002210

08002900 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>

08002902 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002916:	2310      	movs	r3, #16
 8002918:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800291a:	2301      	movs	r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	4619      	mov	r1, r3
 800292a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292e:	f002 f8a7 	bl	8004a80 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002932:	2320      	movs	r3, #32
 8002934:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293e:	f002 f89f 	bl	8004a80 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002942:	2200      	movs	r2, #0
 8002944:	2120      	movs	r1, #32
 8002946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294a:	f002 fac7 	bl	8004edc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800294e:	2200      	movs	r2, #0
 8002950:	2110      	movs	r1, #16
 8002952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002956:	f002 fac1 	bl	8004edc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d83f      	bhi.n	80029f4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	080029a7 	.word	0x080029a7
 8002984:	080029c1 	.word	0x080029c1
 8002988:	080029db 	.word	0x080029db
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	2110      	movs	r1, #16
 8002990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002994:	f002 faa2 	bl	8004edc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2120      	movs	r1, #32
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a0:	f002 fa9c 	bl	8004edc <HAL_GPIO_WritePin>
      break;      
 80029a4:	e027      	b.n	80029f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029a6:	2201      	movs	r2, #1
 80029a8:	2110      	movs	r1, #16
 80029aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ae:	f002 fa95 	bl	8004edc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029b2:	2200      	movs	r2, #0
 80029b4:	2120      	movs	r1, #32
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ba:	f002 fa8f 	bl	8004edc <HAL_GPIO_WritePin>
      break;
 80029be:	e01a      	b.n	80029f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029c0:	2201      	movs	r2, #1
 80029c2:	2110      	movs	r1, #16
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c8:	f002 fa88 	bl	8004edc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029cc:	2201      	movs	r2, #1
 80029ce:	2120      	movs	r1, #32
 80029d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d4:	f002 fa82 	bl	8004edc <HAL_GPIO_WritePin>
      break;
 80029d8:	e00d      	b.n	80029f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029da:	2200      	movs	r2, #0
 80029dc:	2110      	movs	r1, #16
 80029de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e2:	f002 fa7b 	bl	8004edc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029e6:	2201      	movs	r2, #1
 80029e8:	2120      	movs	r1, #32
 80029ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ee:	f002 fa75 	bl	8004edc <HAL_GPIO_WritePin>
      break;
 80029f2:	e000      	b.n	80029f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80029f4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002a04:	2302      	movs	r3, #2
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002a3a:	230f      	movs	r3, #15
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e001      	b.n	8002a44 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002a40:	2316      	movs	r3, #22
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a44:	68fb      	ldr	r3, [r7, #12]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6053      	str	r3, [r2, #4]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	e0042000 	.word	0xe0042000

08002a6c <LL_DBGMCU_DisableDBGStopMode>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a76:	f023 0302 	bic.w	r3, r3, #2
 8002a7a:	6053      	str	r3, [r2, #4]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	e0042000 	.word	0xe0042000

08002a88 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6053      	str	r3, [r2, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	e0042000 	.word	0xe0042000

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aae:	2003      	movs	r0, #3
 8002ab0:	f001 f9a0 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ab4:	f003 fad4 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_Init+0x3c>)
 8002abc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002abe:	200f      	movs	r0, #15
 8002ac0:	f7ff f9a8 	bl	8001e14 <HAL_InitTick>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	e001      	b.n	8002ad4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ad0:	f7fe ff71 	bl	80019b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_SuspendTick+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_SuspendTick+0x18>)
 8002aee:	f023 0302 	bic.w	r3, r3, #2
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <HAL_ResumeTick+0x18>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a03      	ldr	r2, [pc, #12]	; (8002b18 <HAL_ResumeTick+0x18>)
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <HAL_GetUIDw0+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	1fff7590 	.word	0x1fff7590

08002b30 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b34:	4b02      	ldr	r3, [pc, #8]	; (8002b40 <HAL_GetUIDw1+0x10>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	1fff7594 	.word	0x1fff7594

08002b44 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <HAL_GetUIDw2+0x10>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	1fff7598 	.word	0x1fff7598

08002b58 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002b5c:	f7ff ff78 	bl	8002a50 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002b68:	f7ff ff80 	bl	8002a6c <LL_DBGMCU_DisableDBGStopMode>
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002b74:	f7ff ff88 	bl	8002a88 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2107      	movs	r1, #7
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	401a      	ands	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	431a      	orrs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2107      	movs	r1, #7
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	210f      	movs	r1, #15
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0e9b      	lsrs	r3, r3, #26
 8002c6e:	f003 010f 	and.w	r1, r3, #15
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	43db      	mvns	r3, r3
 8002cec:	401a      	ands	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	0219      	lsls	r1, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	400b      	ands	r3, r1
 8002cf6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d1e:	f023 0317 	bic.w	r3, r3, #23
 8002d22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d44:	f023 0317 	bic.w	r3, r3, #23
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6093      	str	r3, [r2, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	f023 0317 	bic.w	r3, r3, #23
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db2:	f023 0317 	bic.w	r3, r3, #23
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_IsEnabled+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_IsEnabled+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d101      	bne.n	8002e04 <LL_ADC_IsDisableOngoing+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_ADC_IsDisableOngoing+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e20:	f023 0317 	bic.w	r3, r3, #23
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e46:	f023 0317 	bic.w	r3, r3, #23
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e17e      	b.n	80031a0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fe f86f 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff44 	bl	8002d56 <LL_ADC_IsInternalRegulatorEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d115      	bne.n	8002f00 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff18 	bl	8002d0e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ede:	4b9e      	ldr	r3, [pc, #632]	; (8003158 <HAL_ADC_Init+0x2d8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	4a9d      	ldr	r2, [pc, #628]	; (800315c <HAL_ADC_Init+0x2dc>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	3301      	adds	r3, #1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ef2:	e002      	b.n	8002efa <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff26 	bl	8002d56 <LL_ADC_IsInternalRegulatorEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f043 0210 	orr.w	r2, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff93 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8002f36:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 8124 	bne.w	800318e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 8120 	bne.w	800318e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff30 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 80a7 	bne.w	80030be <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7e1b      	ldrb	r3, [r3, #24]
 8002f78:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e5b      	ldrb	r3, [r3, #25]
 8002f80:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f82:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7e9b      	ldrb	r3, [r3, #26]
 8002f88:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f8a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_Init+0x11a>
 8002f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f98:	e000      	b.n	8002f9c <HAL_ADC_Init+0x11c>
 8002f9a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f9c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fa2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da04      	bge.n	8002fb6 <HAL_ADC_Init+0x136>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb4:	e001      	b.n	8002fba <HAL_ADC_Init+0x13a>
 8002fb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002fba:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fc2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fc4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d114      	bne.n	8003000 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7e9b      	ldrb	r3, [r3, #26]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e00b      	b.n	8003000 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003014:	4313      	orrs	r3, r2
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003026:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	430b      	orrs	r3, r1
 8003032:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d111      	bne.n	8003076 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800305e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003064:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800306a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_ADC_Init+0x2e0>)
 800307e:	4013      	ands	r3, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	6979      	ldr	r1, [r7, #20]
 8003086:	430b      	orrs	r3, r1
 8003088:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003092:	d014      	beq.n	80030be <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d00f      	beq.n	80030be <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a6:	d00a      	beq.n	80030be <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80030a8:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_ADC_Init+0x2e4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030b8:	492a      	ldr	r1, [pc, #168]	; (8003164 <HAL_ADC_Init+0x2e4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	461a      	mov	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	f7ff fd76 	bl	8002bba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	461a      	mov	r2, r3
 80030d8:	4923      	ldr	r1, [pc, #140]	; (8003168 <HAL_ADC_Init+0x2e8>)
 80030da:	f7ff fd6e 	bl	8002bba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f062 020f 	orn	r2, r2, #15
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
 80030f6:	e017      	b.n	8003128 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003100:	d112      	bne.n	8003128 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	3b01      	subs	r3, #1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	f003 031c 	and.w	r3, r3, #28
 8003114:	f06f 020f 	mvn.w	r2, #15
 8003118:	fa02 f103 	lsl.w	r1, r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fd61 	bl	8002bf6 <LL_ADC_GetSamplingTimeCommonChannels>
 8003134:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800313a:	429a      	cmp	r2, r3
 800313c:	d116      	bne.n	800316c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f023 0303 	bic.w	r3, r3, #3
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003154:	e023      	b.n	800319e <HAL_ADC_Init+0x31e>
 8003156:	bf00      	nop
 8003158:	20000000 	.word	0x20000000
 800315c:	053e2d63 	.word	0x053e2d63
 8003160:	1ffffc02 	.word	0x1ffffc02
 8003164:	40012708 	.word	0x40012708
 8003168:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f023 0312 	bic.w	r3, r3, #18
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800318c:	e007      	b.n	800319e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f043 0210 	orr.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800319e:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07a      	b.n	80032b0 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 face 	bl	8003768 <ADC_ConversionStop>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fb92 	bl	8003900 <ADC_Disable>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fd9f 	bl	8002d34 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003204:	f023 0303 	bic.w	r3, r3, #3
 8003208:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f240 329f 	movw	r2, #927	; 0x39f
 8003212:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_ADC_DeInit+0x110>)
 8003220:	400b      	ands	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003232:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0207 	bic.w	r2, r2, #7
 8003242:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003252:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_ADC_DeInit+0x114>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <HAL_ADC_DeInit+0x114>)
 8003288:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800328c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fe94 	bl	8000fbc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	833e0200 	.word	0x833e0200
 80032bc:	40012708 	.word	0x40012708

080032c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fdc5 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d132      	bne.n	800333e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_Start+0x26>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e02e      	b.n	8003344 <HAL_ADC_Start+0x84>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa80 	bl	80037f4 <ADC_Enable>
 80032f4:	4603      	mov	r3, r0
 80032f6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11a      	bne.n	8003334 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	221c      	movs	r2, #28
 800331e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fd6f 	bl	8002e10 <LL_ADC_REG_StartConversion>
 8003332:	e006      	b.n	8003342 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800333c:	e001      	b.n	8003342 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800333e:	2302      	movs	r3, #2
 8003340:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Stop+0x16>
 800335e:	2302      	movs	r3, #2
 8003360:	e022      	b.n	80033a8 <HAL_ADC_Stop+0x5c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9fc 	bl	8003768 <ADC_ConversionStop>
 8003370:	4603      	mov	r3, r0
 8003372:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d111      	bne.n	800339e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fac0 	bl	8003900 <ADC_Disable>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d102      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80033c2:	2308      	movs	r3, #8
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e010      	b.n	80033ea <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e077      	b.n	80034d6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033e6:	2304      	movs	r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033ea:	f7fe fd1d 	bl	8001e28 <HAL_GetTick>
 80033ee:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033f0:	e021      	b.n	8003436 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f8:	d01d      	beq.n	8003436 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033fa:	f7fe fd15 	bl	8001e28 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <HAL_ADC_PollForConversion+0x60>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d112      	bne.n	8003436 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04f      	b.n	80034d6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0d6      	beq.n	80033f2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fbe6 	bl	8002c26 <LL_ADC_REG_IsTriggerSourceSWStart>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d031      	beq.n	80034c4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7e9b      	ldrb	r3, [r3, #26]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d12d      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b08      	cmp	r3, #8
 8003474:	d126      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fcee 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d112      	bne.n	80034ac <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 020c 	bic.w	r2, r2, #12
 8003494:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	659a      	str	r2, [r3, #88]	; 0x58
 80034aa:	e00b      	b.n	80034c4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7e1b      	ldrb	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	220c      	movs	r2, #12
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x28>
 800351c:	2302      	movs	r3, #2
 800351e:	e110      	b.n	8003742 <HAL_ADC_ConfigChannel+0x24a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fc95 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 80f7 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	f000 80b1 	beq.w	80036a6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800354c:	d004      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003552:	4a7e      	ldr	r2, [pc, #504]	; (800374c <HAL_ADC_ConfigChannel+0x254>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d108      	bne.n	800356a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f7ff fb92 	bl	8002c8c <LL_ADC_REG_SetSequencerChAdd>
 8003568:	e041      	b.n	80035ee <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	210f      	movs	r1, #15
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xa0>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	e011      	b.n	80035bc <HAL_ADC_ConfigChannel+0xc4>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	6849      	ldr	r1, [r1, #4]
 80035c0:	f001 011f 	and.w	r1, r1, #31
 80035c4:	408b      	lsls	r3, r1
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d808      	bhi.n	80035ee <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f7ff fb2e 	bl	8002c4a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6819      	ldr	r1, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f7ff fb6b 	bl	8002cd6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f280 8097 	bge.w	8003738 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800360a:	4851      	ldr	r0, [pc, #324]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 800360c:	f7ff fac8 	bl	8002ba0 <LL_ADC_GetCommonPathInternalCh>
 8003610:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <HAL_ADC_ConfigChannel+0x25c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d120      	bne.n	800365e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11b      	bne.n	800365e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800362c:	4619      	mov	r1, r3
 800362e:	4848      	ldr	r0, [pc, #288]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 8003630:	f7ff faa4 	bl	8002b7c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003634:	4b48      	ldr	r3, [pc, #288]	; (8003758 <HAL_ADC_ConfigChannel+0x260>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	4a48      	ldr	r2, [pc, #288]	; (800375c <HAL_ADC_ConfigChannel+0x264>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800364e:	e002      	b.n	8003656 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3b01      	subs	r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f9      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800365c:	e06c      	b.n	8003738 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3f      	ldr	r2, [pc, #252]	; (8003760 <HAL_ADC_ConfigChannel+0x268>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10c      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003678:	4619      	mov	r1, r3
 800367a:	4835      	ldr	r0, [pc, #212]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 800367c:	f7ff fa7e 	bl	8002b7c <LL_ADC_SetCommonPathInternalCh>
 8003680:	e05a      	b.n	8003738 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_ADC_ConfigChannel+0x26c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d155      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d150      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800369c:	4619      	mov	r1, r3
 800369e:	482c      	ldr	r0, [pc, #176]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 80036a0:	f7ff fa6c 	bl	8002b7c <LL_ADC_SetCommonPathInternalCh>
 80036a4:	e048      	b.n	8003738 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ae:	d004      	beq.n	80036ba <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036b4:	4a25      	ldr	r2, [pc, #148]	; (800374c <HAL_ADC_ConfigChannel+0x254>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d107      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7ff faf3 	bl	8002cb0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da32      	bge.n	8003738 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036d2:	481f      	ldr	r0, [pc, #124]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 80036d4:	f7ff fa64 	bl	8002ba0 <LL_ADC_GetCommonPathInternalCh>
 80036d8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_ADC_ConfigChannel+0x25c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d107      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036ea:	4619      	mov	r1, r3
 80036ec:	4818      	ldr	r0, [pc, #96]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 80036ee:	f7ff fa45 	bl	8002b7c <LL_ADC_SetCommonPathInternalCh>
 80036f2:	e021      	b.n	8003738 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_ADC_ConfigChannel+0x268>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d107      	bne.n	800370e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003704:	4619      	mov	r1, r3
 8003706:	4812      	ldr	r0, [pc, #72]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 8003708:	f7ff fa38 	bl	8002b7c <LL_ADC_SetCommonPathInternalCh>
 800370c:	e014      	b.n	8003738 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_ADC_ConfigChannel+0x26c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10f      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800371e:	4619      	mov	r1, r3
 8003720:	480b      	ldr	r0, [pc, #44]	; (8003750 <HAL_ADC_ConfigChannel+0x258>)
 8003722:	f7ff fa2b 	bl	8002b7c <LL_ADC_SetCommonPathInternalCh>
 8003726:	e007      	b.n	8003738 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003740:	7ffb      	ldrb	r3, [r7, #31]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	80000004 	.word	0x80000004
 8003750:	40012708 	.word	0x40012708
 8003754:	b0001000 	.word	0xb0001000
 8003758:	20000000 	.word	0x20000000
 800375c:	053e2d63 	.word	0x053e2d63
 8003760:	b8004000 	.word	0xb8004000
 8003764:	b4002000 	.word	0xb4002000

08003768 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fb71 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d033      	beq.n	80037e8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fb31 	bl	8002dec <LL_ADC_IsDisableOngoing>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb4e 	bl	8002e36 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800379a:	f7fe fb45 	bl	8001e28 <HAL_GetTick>
 800379e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037a0:	e01b      	b.n	80037da <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037a2:	f7fe fb41 	bl	8001e28 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d914      	bls.n	80037da <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f043 0210 	orr.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e007      	b.n	80037ea <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1dc      	bne.n	80037a2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fadf 	bl	8002dc8 <LL_ADC_IsEnabled>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d169      	bne.n	80038e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <ADC_Enable+0xfc>)
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f043 0210 	orr.w	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e055      	b.n	80038e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fa9c 	bl	8002d7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003844:	482b      	ldr	r0, [pc, #172]	; (80038f4 <ADC_Enable+0x100>)
 8003846:	f7ff f9ab 	bl	8002ba0 <LL_ADC_GetCommonPathInternalCh>
 800384a:	4603      	mov	r3, r0
 800384c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00f      	beq.n	8003874 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003854:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <ADC_Enable+0x104>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	4a28      	ldr	r2, [pc, #160]	; (80038fc <ADC_Enable+0x108>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003864:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003866:	e002      	b.n	800386e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	3b01      	subs	r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7e5b      	ldrb	r3, [r3, #25]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d033      	beq.n	80038e4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800387c:	f7fe fad4 	bl	8001e28 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003882:	e028      	b.n	80038d6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fa9d 	bl	8002dc8 <LL_ADC_IsEnabled>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fa6f 	bl	8002d7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800389e:	f7fe fac3 	bl	8001e28 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d914      	bls.n	80038d6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d00d      	beq.n	80038d6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	f043 0210 	orr.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e007      	b.n	80038e6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d1cf      	bne.n	8003884 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	80000017 	.word	0x80000017
 80038f4:	40012708 	.word	0x40012708
 80038f8:	20000000 	.word	0x20000000
 80038fc:	053e2d63 	.word	0x053e2d63

08003900 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fa6d 	bl	8002dec <LL_ADC_IsDisableOngoing>
 8003912:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fa55 	bl	8002dc8 <LL_ADC_IsEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d047      	beq.n	80039b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d144      	bne.n	80039b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0305 	and.w	r3, r3, #5
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10c      	bne.n	8003952 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fa30 	bl	8002da2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2203      	movs	r2, #3
 8003948:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800394a:	f7fe fa6d 	bl	8001e28 <HAL_GetTick>
 800394e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003950:	e029      	b.n	80039a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e023      	b.n	80039b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800396e:	f7fe fa5b 	bl	8001e28 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d914      	bls.n	80039a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e007      	b.n	80039b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1dc      	bne.n	800396e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <LL_ADC_SetCalibrationFactor>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039ce:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <LL_ADC_GetCalibrationFactor>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <LL_ADC_Enable>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a12:	f023 0317 	bic.w	r3, r3, #23
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_Disable>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	f023 0317 	bic.w	r3, r3, #23
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <LL_ADC_IsEnabled>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <LL_ADC_IsEnabled+0x18>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <LL_ADC_IsEnabled+0x1a>
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <LL_ADC_StartCalibration>:
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	f023 0317 	bic.w	r3, r3, #23
 8003a86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aac:	d101      	bne.n	8003ab2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b088      	sub	sp, #32
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_ADCEx_Calibration_Start+0x1e>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e0b9      	b.n	8003c50 <HAL_ADCEx_Calibration_Start+0x192>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff0b 	bl	8003900 <ADC_Disable>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ffab 	bl	8003a4e <LL_ADC_IsEnabled>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 809d 	bne.w	8003c3a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b08:	f043 0202 	orr.w	r2, r3, #2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	f248 0303 	movw	r3, #32771	; 0x8003
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b2c:	f023 0303 	bic.w	r3, r3, #3
 8003b30:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e02e      	b.n	8003b96 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff98 	bl	8003a72 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b42:	e014      	b.n	8003b6e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003b50:	d30d      	bcc.n	8003b6e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	f023 0312 	bic.w	r3, r3, #18
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e070      	b.n	8003c50 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff90 	bl	8003a98 <LL_ADC_IsCalibrationOnGoing>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e2      	bne.n	8003b44 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff2f 	bl	80039e6 <LL_ADC_GetCalibrationFactor>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b07      	cmp	r3, #7
 8003b9a:	d9cd      	bls.n	8003b38 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff29 	bl	8003a02 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69b9      	ldr	r1, [r7, #24]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff01 	bl	80039be <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff31 	bl	8003a28 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bc6:	f7fe f92f 	bl	8001e28 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bcc:	e01c      	b.n	8003c08 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bce:	f7fe f92b 	bl	8001e28 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d915      	bls.n	8003c08 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff34 	bl	8003a4e <LL_ADC_IsEnabled>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f043 0210 	orr.w	r2, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e023      	b.n	8003c50 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff1e 	bl	8003a4e <LL_ADC_IsEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1da      	bne.n	8003bce <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68d9      	ldr	r1, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f023 0303 	bic.w	r3, r3, #3
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58
 8003c38:	e005      	b.n	8003c46 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	f043 0210 	orr.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c74:	4013      	ands	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <__NVIC_SetPriorityGrouping+0x44>)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	60d3      	str	r3, [r2, #12]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	f003 0307 	and.w	r3, r3, #7
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db0b      	blt.n	8003ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	f003 021f 	and.w	r2, r3, #31
 8003cd4:	4906      	ldr	r1, [pc, #24]	; (8003cf0 <__NVIC_EnableIRQ+0x34>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2001      	movs	r0, #1
 8003cde:	fa00 f202 	lsl.w	r2, r0, r2
 8003ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	db12      	blt.n	8003d2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	490a      	ldr	r1, [pc, #40]	; (8003d38 <__NVIC_DisableIRQ+0x44>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2001      	movs	r0, #1
 8003d16:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d20:	f3bf 8f4f 	dsb	sy
}
 8003d24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d26:	f3bf 8f6f 	isb	sy
}
 8003d2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	db0a      	blt.n	8003d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	490c      	ldr	r1, [pc, #48]	; (8003d88 <__NVIC_SetPriority+0x4c>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d64:	e00a      	b.n	8003d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4908      	ldr	r1, [pc, #32]	; (8003d8c <__NVIC_SetPriority+0x50>)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	3b04      	subs	r3, #4
 8003d74:	0112      	lsls	r2, r2, #4
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	440b      	add	r3, r1
 8003d7a:	761a      	strb	r2, [r3, #24]
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	e000e100 	.word	0xe000e100
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f1c3 0307 	rsb	r3, r3, #7
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	bf28      	it	cs
 8003dae:	2304      	movcs	r3, #4
 8003db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3304      	adds	r3, #4
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d902      	bls.n	8003dc0 <NVIC_EncodePriority+0x30>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3b03      	subs	r3, #3
 8003dbe:	e000      	b.n	8003dc2 <NVIC_EncodePriority+0x32>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43d9      	mvns	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	4313      	orrs	r3, r2
         );
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3724      	adds	r7, #36	; 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff2b 	bl	8003c58 <__NVIC_SetPriorityGrouping>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e18:	f7ff ff42 	bl	8003ca0 <__NVIC_GetPriorityGrouping>
 8003e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff ffb4 	bl	8003d90 <NVIC_EncodePriority>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff83 	bl	8003d3c <__NVIC_SetPriority>
}
 8003e36:	bf00      	nop
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff35 	bl	8003cbc <__NVIC_EnableIRQ>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff43 	bl	8003cf4 <__NVIC_DisableIRQ>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e08e      	b.n	8003fa8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_DMA_Init+0x138>)
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d80f      	bhi.n	8003eb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b45      	ldr	r3, [pc, #276]	; (8003fb4 <HAL_DMA_Init+0x13c>)
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4a45      	ldr	r2, [pc, #276]	; (8003fb8 <HAL_DMA_Init+0x140>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	009a      	lsls	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_DMA_Init+0x144>)
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8003eb4:	e00e      	b.n	8003ed4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_DMA_Init+0x148>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a3d      	ldr	r2, [pc, #244]	; (8003fb8 <HAL_DMA_Init+0x140>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	009a      	lsls	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a3c      	ldr	r2, [pc, #240]	; (8003fc4 <HAL_DMA_Init+0x14c>)
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fb24 	bl	8004574 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f34:	d102      	bne.n	8003f3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f52:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d010      	beq.n	8003f7e <HAL_DMA_Init+0x106>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d80c      	bhi.n	8003f7e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb4d 	bl	8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	e008      	b.n	8003f90 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40020407 	.word	0x40020407
 8003fb4:	bffdfff8 	.word	0xbffdfff8
 8003fb8:	cccccccd 	.word	0xcccccccd
 8003fbc:	40020000 	.word	0x40020000
 8003fc0:	bffdfbf8 	.word	0xbffdfbf8
 8003fc4:	40020400 	.word	0x40020400

08003fc8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07b      	b.n	80040d2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_DMA_DeInit+0x114>)
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d80f      	bhi.n	8004016 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_DMA_DeInit+0x118>)
 8003ffe:	4413      	add	r3, r2
 8004000:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <HAL_DMA_DeInit+0x11c>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	009a      	lsls	r2, r3, #2
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a35      	ldr	r2, [pc, #212]	; (80040e8 <HAL_DMA_DeInit+0x120>)
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
 8004014:	e00e      	b.n	8004034 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_DMA_DeInit+0x124>)
 800401e:	4413      	add	r3, r2
 8004020:	4a30      	ldr	r2, [pc, #192]	; (80040e4 <HAL_DMA_DeInit+0x11c>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	009a      	lsls	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <HAL_DMA_DeInit+0x128>)
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f003 021c 	and.w	r2, r3, #28
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fa8f 	bl	8004574 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004066:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <HAL_DMA_DeInit+0xc8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d80b      	bhi.n	8004090 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fac3 	bl	8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800408e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40020407 	.word	0x40020407
 80040e0:	bffdfff8 	.word	0xbffdfff8
 80040e4:	cccccccd 	.word	0xcccccccd
 80040e8:	40020000 	.word	0x40020000
 80040ec:	bffdfbf8 	.word	0xbffdfbf8
 80040f0:	40020400 	.word	0x40020400

080040f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_DMA_Start_IT+0x20>
 8004110:	2302      	movs	r3, #2
 8004112:	e069      	b.n	80041e8 <HAL_DMA_Start_IT+0xf4>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d155      	bne.n	80041d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f9d3 	bl	80044f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 020e 	orr.w	r2, r2, #14
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e00f      	b.n	800418c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0204 	bic.w	r2, r2, #4
 800417a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 020a 	orr.w	r2, r2, #10
 800418a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e008      	b.n	80041e6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e04f      	b.n	80042a2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d008      	beq.n	8004220 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e040      	b.n	80042a2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 020e 	bic.w	r2, r2, #14
 800422e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800423e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f003 021c 	and.w	r2, r3, #28
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2101      	movs	r1, #1
 800425e:	fa01 f202 	lsl.w	r2, r1, r2
 8004262:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800428e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d005      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e047      	b.n	8004360 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 020e 	bic.w	r2, r2, #14
 80042de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f003 021c 	and.w	r2, r3, #28
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2101      	movs	r1, #1
 800430e:	fa01 f202 	lsl.w	r2, r1, r2
 8004312:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800431c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800433e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
    }
  }
  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f003 031c 	and.w	r3, r3, #28
 800438c:	2204      	movs	r2, #4
 800438e:	409a      	lsls	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d027      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7c>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d022      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0204 	bic.w	r2, r2, #4
 80043be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 021c 	and.w	r2, r3, #28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2104      	movs	r1, #4
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8081 	beq.w	80044e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80043e6:	e07b      	b.n	80044e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f003 031c 	and.w	r3, r3, #28
 80043f0:	2202      	movs	r2, #2
 80043f2:	409a      	lsls	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d03d      	beq.n	8004478 <HAL_DMA_IRQHandler+0x10c>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d038      	beq.n	8004478 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020a 	bic.w	r2, r2, #10
 8004422:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_DMA_IRQHandler+0x180>)
 8004434:	429a      	cmp	r2, r3
 8004436:	d909      	bls.n	800444c <HAL_DMA_IRQHandler+0xe0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 031c 	and.w	r3, r3, #28
 8004440:	4a2b      	ldr	r2, [pc, #172]	; (80044f0 <HAL_DMA_IRQHandler+0x184>)
 8004442:	2102      	movs	r1, #2
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	6053      	str	r3, [r2, #4]
 800444a:	e008      	b.n	800445e <HAL_DMA_IRQHandler+0xf2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	f003 031c 	and.w	r3, r3, #28
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <HAL_DMA_IRQHandler+0x188>)
 8004456:	2102      	movs	r1, #2
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d038      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004476:	e033      	b.n	80044e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f003 031c 	and.w	r3, r3, #28
 8004480:	2208      	movs	r2, #8
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02a      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x176>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d025      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 020e 	bic.w	r2, r2, #14
 80044a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	f003 021c 	and.w	r2, r3, #28
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f202 	lsl.w	r2, r1, r2
 80044b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
}
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40020080 	.word	0x40020080
 80044f0:	40020400 	.word	0x40020400
 80044f4:	40020000 	.word	0x40020000

080044f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800450e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f003 021c 	and.w	r2, r3, #28
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2101      	movs	r1, #1
 8004530:	fa01 f202 	lsl.w	r2, r1, r2
 8004534:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b10      	cmp	r3, #16
 8004544:	d108      	bne.n	8004558 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004556:	e007      	b.n	8004568 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
	...

08004574 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004584:	429a      	cmp	r2, r3
 8004586:	d813      	bhi.n	80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004594:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	3b08      	subs	r3, #8
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e011      	b.n	80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	009a      	lsls	r2, r3, #2
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80045ba:	4413      	add	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	3b08      	subs	r3, #8
 80045c8:	4a0b      	ldr	r2, [pc, #44]	; (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	3307      	adds	r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80045d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40020407 	.word	0x40020407
 80045f8:	cccccccd 	.word	0xcccccccd
 80045fc:	4002081c 	.word	0x4002081c
 8004600:	40020880 	.word	0x40020880

08004604 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004614:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	461a      	mov	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004628:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b01      	subs	r3, #1
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	1000823f 	.word	0x1000823f
 8004648:	40020940 	.word	0x40020940

0800464c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <HAL_FLASH_Program+0x80>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_FLASH_Program+0x1a>
 8004662:	2302      	movs	r3, #2
 8004664:	e02d      	b.n	80046c2 <HAL_FLASH_Program+0x76>
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_FLASH_Program+0x80>)
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_FLASH_Program+0x80>)
 800466e:	2200      	movs	r2, #0
 8004670:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004676:	f000 f869 	bl	800474c <FLASH_WaitForLastOperation>
 800467a:	4603      	mov	r3, r0
 800467c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11a      	bne.n	80046ba <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800468a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f000 f8be 	bl	8004810 <FLASH_Program_DoubleWord>
 8004694:	e004      	b.n	80046a0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	4619      	mov	r1, r3
 800469a:	68b8      	ldr	r0, [r7, #8]
 800469c:	f000 f8de 	bl	800485c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046a4:	f000 f852 	bl	800474c <FLASH_WaitForLastOperation>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_FLASH_Program+0x84>)
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <HAL_FLASH_Program+0x84>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <HAL_FLASH_Program+0x80>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000318 	.word	0x20000318
 80046d0:	58004000 	.word	0x58004000

080046d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_FLASH_Unlock+0x38>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da0b      	bge.n	80046fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_FLASH_Unlock+0x38>)
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_FLASH_Unlock+0x3c>)
 80046ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_FLASH_Unlock+0x38>)
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <HAL_FLASH_Unlock+0x40>)
 80046f0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_FLASH_Unlock+0x38>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da01      	bge.n	80046fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	58004000 	.word	0x58004000
 8004710:	45670123 	.word	0x45670123
 8004714:	cdef89ab 	.word	0xcdef89ab

08004718 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_FLASH_Lock+0x30>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <HAL_FLASH_Lock+0x30>)
 8004728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800472c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_FLASH_Lock+0x30>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	db01      	blt.n	800473a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800473a:	79fb      	ldrb	r3, [r7, #7]
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	58004000 	.word	0x58004000

0800474c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7fd fb68 	bl	8001e28 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800475a:	e009      	b.n	8004770 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800475c:	f7fd fb64 	bl	8001e28 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d801      	bhi.n	8004770 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e047      	b.n	8004800 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d0ee      	beq.n	800475c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800478e:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 8004790:	2201      	movs	r2, #1
 8004792:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800479a:	4013      	ands	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <FLASH_WaitForLastOperation+0x6c>
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047b2:	4915      	ldr	r1, [pc, #84]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	618b      	str	r3, [r1, #24]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <FLASH_WaitForLastOperation+0x80>
 80047c2:	4a11      	ldr	r2, [pc, #68]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047ca:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80047d2:	4a0e      	ldr	r2, [pc, #56]	; (800480c <FLASH_WaitForLastOperation+0xc0>)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e011      	b.n	8004800 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80047dc:	f7fd fb24 	bl	8001e28 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d801      	bhi.n	80047f0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e007      	b.n	8004800 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <FLASH_WaitForLastOperation+0xbc>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047fc:	d0ee      	beq.n	80047dc <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	58004000 	.word	0x58004000
 800480c:	20000318 	.word	0x20000318

08004810 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <FLASH_Program_DoubleWord+0x48>)
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <FLASH_Program_DoubleWord+0x48>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800482e:	f3bf 8f6f 	isb	sy
}
 8004832:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	000a      	movs	r2, r1
 8004842:	2300      	movs	r3, #0
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	3104      	adds	r1, #4
 8004848:	4613      	mov	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	58004000 	.word	0x58004000

0800485c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004866:	2340      	movs	r3, #64	; 0x40
 8004868:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <FLASH_Program_Fast+0x78>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <FLASH_Program_Fast+0x78>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487e:	f3ef 8310 	mrs	r3, PRIMASK
 8004882:	60fb      	str	r3, [r7, #12]
  return(result);
 8004884:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004888:	b672      	cpsid	i
}
 800488a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	3304      	adds	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	3304      	adds	r3, #4
 800489e:	617b      	str	r3, [r7, #20]
    row_index--;
 80048a0:	7ffb      	ldrb	r3, [r7, #31]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80048a6:	7ffb      	ldrb	r3, [r7, #31]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ef      	bne.n	800488c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80048ac:	bf00      	nop
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <FLASH_Program_Fast+0x78>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ba:	d0f8      	beq.n	80048ae <FLASH_Program_Fast+0x52>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80048c8:	bf00      	nop
 80048ca:	3724      	adds	r7, #36	; 0x24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	58004000 	.word	0x58004000

080048d8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_FLASHEx_Erase+0xac>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_FLASHEx_Erase+0x16>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e046      	b.n	800497c <HAL_FLASHEx_Erase+0xa4>
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_FLASHEx_Erase+0xac>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048f4:	4b23      	ldr	r3, [pc, #140]	; (8004984 <HAL_FLASHEx_Erase+0xac>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048fe:	f7ff ff25 	bl	800474c <FLASH_WaitForLastOperation>
 8004902:	4603      	mov	r3, r0
 8004904:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d133      	bne.n	8004974 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d108      	bne.n	8004926 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004914:	f000 f838 	bl	8004988 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800491c:	f7ff ff16 	bl	800474c <FLASH_WaitForLastOperation>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e024      	b.n	8004970 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800492c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	e012      	b.n	800495c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004936:	68b8      	ldr	r0, [r7, #8]
 8004938:	f000 f836 	bl	80049a8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800493c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004940:	f7ff ff04 	bl	800474c <FLASH_WaitForLastOperation>
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	601a      	str	r2, [r3, #0]
          break;
 8004954:	e00a      	b.n	800496c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3301      	adds	r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4413      	add	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	d3e4      	bcc.n	8004936 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800496c:	f000 f878 	bl	8004a60 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004970:	f000 f832 	bl	80049d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_FLASHEx_Erase+0xac>)
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]

  return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000318 	.word	0x20000318

08004988 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <FLASH_MassErase+0x1c>)
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <FLASH_MassErase+0x1c>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6153      	str	r3, [r2, #20]
#endif
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	58004000 	.word	0x58004000

080049a8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <FLASH_PageErase+0x2c>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4313      	orrs	r3, r2
 80049be:	4a05      	ldr	r2, [pc, #20]	; (80049d4 <FLASH_PageErase+0x2c>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	6153      	str	r3, [r2, #20]
#endif
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	58004000 	.word	0x58004000

080049d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80049dc:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <FLASH_FlushCaches+0x84>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d117      	bne.n	8004a18 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <FLASH_FlushCaches+0x84>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <FLASH_FlushCaches+0x84>)
 80049ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <FLASH_FlushCaches+0x84>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <FLASH_FlushCaches+0x84>)
 80049fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a16:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d117      	bne.n	8004a54 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a2e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a06      	ldr	r2, [pc, #24]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a46:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <FLASH_FlushCaches+0x84>)
 8004a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a52:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	58004000 	.word	0x58004000

08004a60 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <FLASH_AcknowledgePageErase+0x1c>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <FLASH_AcknowledgePageErase+0x1c>)
 8004a6a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004a6e:	f023 0302 	bic.w	r3, r3, #2
 8004a72:	6153      	str	r3, [r2, #20]
#endif
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	58004000 	.word	0x58004000

08004a80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8e:	e140      	b.n	8004d12 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8132 	beq.w	8004d0c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d005      	beq.n	8004ac0 <HAL_GPIO_Init+0x40>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d130      	bne.n	8004b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004af6:	2201      	movs	r2, #1
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0201 	and.w	r2, r3, #1
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d017      	beq.n	8004b5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	2203      	movs	r2, #3
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d123      	bne.n	8004bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	08da      	lsrs	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3208      	adds	r2, #8
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	08da      	lsrs	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3208      	adds	r2, #8
 8004bac:	6939      	ldr	r1, [r7, #16]
 8004bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 808c 	beq.w	8004d0c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004bf4:	4a4e      	ldr	r2, [pc, #312]	; (8004d30 <HAL_GPIO_Init+0x2b0>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c1e:	d00d      	beq.n	8004c3c <HAL_GPIO_Init+0x1bc>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a44      	ldr	r2, [pc, #272]	; (8004d34 <HAL_GPIO_Init+0x2b4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <HAL_GPIO_Init+0x1b8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a43      	ldr	r2, [pc, #268]	; (8004d38 <HAL_GPIO_Init+0x2b8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_GPIO_Init+0x1b4>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e004      	b.n	8004c3e <HAL_GPIO_Init+0x1be>
 8004c34:	2307      	movs	r3, #7
 8004c36:	e002      	b.n	8004c3e <HAL_GPIO_Init+0x1be>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_GPIO_Init+0x1be>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	f002 0203 	and.w	r2, r2, #3
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	4093      	lsls	r3, r2
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c4e:	4938      	ldr	r1, [pc, #224]	; (8004d30 <HAL_GPIO_Init+0x2b0>)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	3302      	adds	r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c80:	4a2e      	ldr	r2, [pc, #184]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c86:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004caa:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004cb0:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004cd6:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004cde:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004d04:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <HAL_GPIO_Init+0x2bc>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f aeb7 	bne.w	8004a90 <HAL_GPIO_Init+0x10>
  }
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	48000400 	.word	0x48000400
 8004d38:	48000800 	.word	0x48000800
 8004d3c:	58000800 	.word	0x58000800

08004d40 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d4e:	e0af      	b.n	8004eb0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d50:	2201      	movs	r2, #1
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a2 	beq.w	8004eaa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d66:	4a59      	ldr	r2, [pc, #356]	; (8004ecc <HAL_GPIO_DeInit+0x18c>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	2207      	movs	r2, #7
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4013      	ands	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d8e:	d00d      	beq.n	8004dac <HAL_GPIO_DeInit+0x6c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a4f      	ldr	r2, [pc, #316]	; (8004ed0 <HAL_GPIO_DeInit+0x190>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <HAL_GPIO_DeInit+0x68>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a4e      	ldr	r2, [pc, #312]	; (8004ed4 <HAL_GPIO_DeInit+0x194>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_GPIO_DeInit+0x64>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e004      	b.n	8004dae <HAL_GPIO_DeInit+0x6e>
 8004da4:	2307      	movs	r3, #7
 8004da6:	e002      	b.n	8004dae <HAL_GPIO_DeInit+0x6e>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_GPIO_DeInit+0x6e>
 8004dac:	2300      	movs	r3, #0
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	f002 0203 	and.w	r2, r2, #3
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	4093      	lsls	r3, r2
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d136      	bne.n	8004e2c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004dbe:	4b46      	ldr	r3, [pc, #280]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004dc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	4943      	ldr	r1, [pc, #268]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004dd0:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004dd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	493f      	ldr	r1, [pc, #252]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	493b      	ldr	r1, [pc, #236]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004df0:	4b39      	ldr	r3, [pc, #228]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	43db      	mvns	r3, r3
 8004df8:	4937      	ldr	r1, [pc, #220]	; (8004ed8 <HAL_GPIO_DeInit+0x198>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	2207      	movs	r2, #7
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <HAL_GPIO_DeInit+0x18c>)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	3302      	adds	r3, #2
 8004e16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	482b      	ldr	r0, [pc, #172]	; (8004ecc <HAL_GPIO_DeInit+0x18c>)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	400a      	ands	r2, r1
 8004e26:	3302      	adds	r3, #2
 8004e28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2103      	movs	r1, #3
 8004e36:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	08da      	lsrs	r2, r3, #3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3208      	adds	r2, #8
 8004e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	220f      	movs	r2, #15
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	08d2      	lsrs	r2, r2, #3
 8004e60:	4019      	ands	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3208      	adds	r2, #8
 8004e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	2103      	movs	r1, #3
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	2101      	movs	r1, #1
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	401a      	ands	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3301      	adds	r3, #1
 8004eae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f47f af49 	bne.w	8004d50 <HAL_GPIO_DeInit+0x10>
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	48000400 	.word	0x48000400
 8004ed4:	48000800 	.word	0x48000800
 8004ed8:	58000800 	.word	0x58000800

08004edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eec:	787b      	ldrb	r3, [r7, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ef2:	887a      	ldrh	r2, [r7, #2]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f22:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f004 ff26 	bl	8009d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	58000800 	.word	0x58000800

08004f3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a03      	ldr	r2, [pc, #12]	; (8004f54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4a:	6013      	str	r3, [r2, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	58000400 	.word	0x58000400

08004f58 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f76:	d10d      	bne.n	8004f94 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004f78:	f000 f83c 	bl	8004ff4 <HAL_PWREx_DisableLowPowerRunMode>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004f82:	e015      	b.n	8004fb0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004f90:	f000 f822 	bl	8004fd8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004fa6:	bf30      	wfi
 8004fa8:	e002      	b.n	8004fb0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004faa:	bf40      	sev
    __WFE();
 8004fac:	bf20      	wfe
    __WFE();
 8004fae:	bf20      	wfe
  }
}
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	58000400 	.word	0x58000400
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_PWREx_GetVoltageRange+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	58000400 	.word	0x58000400

08004fd8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a03      	ldr	r2, [pc, #12]	; (8004ff0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	58000400 	.word	0x58000400

08004ff4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005004:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2232      	movs	r2, #50	; 0x32
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	0c9b      	lsrs	r3, r3, #18
 8005018:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800501a:	e002      	b.n	8005022 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502e:	d102      	bne.n	8005036 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f2      	bne.n	800501c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800503e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005042:	d101      	bne.n	8005048 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e000      	b.n	800504a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	58000400 	.word	0x58000400
 8005058:	20000000 	.word	0x20000000
 800505c:	431bde83 	.word	0x431bde83

08005060 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800508c:	bf30      	wfi
 800508e:	e002      	b.n	8005096 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005090:	bf40      	sev
    __WFE();
 8005092:	bf20      	wfe
    __WFE();
 8005094:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	4a05      	ldr	r2, [pc, #20]	; (80050b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	6113      	str	r3, [r2, #16]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	58000400 	.word	0x58000400
 80050b0:	e000ed00 	.word	0xe000ed00

080050b4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c4:	d101      	bne.n	80050ca <LL_PWR_IsEnabledBkUpAccess+0x16>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	58000400 	.word	0x58000400

080050d8 <LL_RCC_HSE_EnableTcxo>:
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80050dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_HSE_DisableTcxo>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005122:	d101      	bne.n	8005128 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <LL_RCC_HSE_Enable>:
{
 8005132:	b480      	push	{r7}
 8005134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
}
 8005146:	bf00      	nop
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <LL_RCC_HSE_Disable>:
{
 800514e:	b480      	push	{r7}
 8005150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800515c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]
}
 8005162:	bf00      	nop
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <LL_RCC_HSE_IsReady>:
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517c:	d101      	bne.n	8005182 <LL_RCC_HSE_IsReady+0x18>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <LL_RCC_HSE_IsReady+0x1a>
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <LL_RCC_HSI_Enable>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519e:	6013      	str	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <LL_RCC_HSI_Disable>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80051ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <LL_RCC_HSI_IsReady>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d101      	bne.n	80051dc <LL_RCC_HSI_IsReady+0x18>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <LL_RCC_HSI_IsReady+0x1a>
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr

0800520e <LL_RCC_LSE_IsReady>:
{
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d101      	bne.n	8005226 <LL_RCC_LSE_IsReady+0x18>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <LL_RCC_LSE_IsReady+0x1a>
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <LL_RCC_LSI_Enable>:
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <LL_RCC_LSI_Disable>:
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <LL_RCC_LSI_IsReady>:
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b02      	cmp	r3, #2
 8005282:	d101      	bne.n	8005288 <LL_RCC_LSI_IsReady+0x18>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <LL_RCC_LSI_IsReady+0x1a>
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr

08005292 <LL_RCC_MSI_Enable>:
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6013      	str	r3, [r2, #0]
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <LL_RCC_MSI_Disable>:
{
 80052ae:	b480      	push	{r7}
 80052b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6013      	str	r3, [r2, #0]
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <LL_RCC_MSI_IsReady>:
{
 80052ca:	b480      	push	{r7}
 80052cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d101      	bne.n	80052e0 <LL_RCC_MSI_IsReady+0x16>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <LL_RCC_MSI_IsReady+0x18>
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d101      	bne.n	8005300 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <LL_RCC_MSI_GetRange>:
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005352:	4313      	orrs	r3, r2
 8005354:	604b      	str	r3, [r1, #4]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <LL_RCC_SetSysClkSource>:
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <LL_RCC_GetSysClkSource>:
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <LL_RCC_SetAHBPrescaler>:
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <LL_RCC_SetAHB3Prescaler>:
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053d2:	f023 020f 	bic.w	r2, r3, #15
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <LL_RCC_SetAPB1Prescaler>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <LL_RCC_SetAPB2Prescaler>:
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <LL_RCC_GetAHBPrescaler>:
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <LL_RCC_GetAHB3Prescaler>:
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005458:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <LL_RCC_GetAPB1Prescaler>:
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800546e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005478:	4618      	mov	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <LL_RCC_GetAPB2Prescaler>:
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800548e:	4618      	mov	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr

08005496 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a8:	6013      	str	r3, [r2, #0]
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80054b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c4:	6013      	str	r3, [r2, #0]
}
 80054c6:	bf00      	nop
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80054ce:	b480      	push	{r7}
 80054d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054e0:	d101      	bne.n	80054e6 <LL_RCC_PLL_IsReady+0x18>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <LL_RCC_PLL_IsReady+0x1a>
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005516:	4618      	mov	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0303 	and.w	r3, r3, #3
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d101      	bne.n	8005562 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005574:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d101      	bne.n	8005586 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a2:	d101      	bne.n	80055a8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c4:	d101      	bne.n	80055ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e36f      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	f7ff fece 	bl	8005386 <LL_RCC_GetSysClkSource>
 80055ea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ec:	f7ff ffa2 	bl	8005534 <LL_RCC_PLL_GetMainSource>
 80055f0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80c4 	beq.w	8005788 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCC_OscConfig+0x3e>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d176      	bne.n	80056fa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d173      	bne.n	80056fa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e353      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_OscConfig+0x68>
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563a:	e006      	b.n	800564a <HAL_RCC_OscConfig+0x76>
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564a:	4293      	cmp	r3, r2
 800564c:	d222      	bcs.n	8005694 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fd3c 	bl	80060d0 <RCC_SetFlashLatencyFromMSIRange>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e331      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566c:	f043 0308 	orr.w	r3, r3, #8
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005684:	4313      	orrs	r3, r2
 8005686:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fe53 	bl	8005338 <LL_RCC_MSI_SetCalibTrimming>
 8005692:	e021      	b.n	80056d8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569e:	f043 0308 	orr.w	r3, r3, #8
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fe3a 	bl	8005338 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fd01 	bl	80060d0 <RCC_SetFlashLatencyFromMSIRange>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e2f6      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056d8:	f000 fcc2 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80056dc:	4603      	mov	r3, r0
 80056de:	4aa7      	ldr	r2, [pc, #668]	; (800597c <HAL_RCC_OscConfig+0x3a8>)
 80056e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80056e2:	4ba7      	ldr	r3, [pc, #668]	; (8005980 <HAL_RCC_OscConfig+0x3ac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fc fb94 	bl	8001e14 <HAL_InitTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d047      	beq.n	8005786 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	e2e5      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02c      	beq.n	800575c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005702:	f7ff fdc6 	bl	8005292 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005706:	f7fc fb8f 	bl	8001e28 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800570e:	f7fc fb8b 	bl	8001e28 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e2d2      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005720:	f7ff fdd3 	bl	80052ca <LL_RCC_MSI_IsReady>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f1      	beq.n	800570e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005734:	f043 0308 	orr.w	r3, r3, #8
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574c:	4313      	orrs	r3, r2
 800574e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fdef 	bl	8005338 <LL_RCC_MSI_SetCalibTrimming>
 800575a:	e015      	b.n	8005788 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800575c:	f7ff fda7 	bl	80052ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005760:	f7fc fb62 	bl	8001e28 <HAL_GetTick>
 8005764:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005768:	f7fc fb5e 	bl	8001e28 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e2a5      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800577a:	f7ff fda6 	bl	80052ca <LL_RCC_MSI_IsReady>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f1      	bne.n	8005768 <HAL_RCC_OscConfig+0x194>
 8005784:	e000      	b.n	8005788 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005786:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d058      	beq.n	8005846 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b08      	cmp	r3, #8
 8005798:	d005      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1d2>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d108      	bne.n	80057b2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d105      	bne.n	80057b2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d14b      	bne.n	8005846 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e289      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d102      	bne.n	80057d8 <HAL_RCC_OscConfig+0x204>
 80057d2:	f7ff fcae 	bl	8005132 <LL_RCC_HSE_Enable>
 80057d6:	e00d      	b.n	80057f4 <HAL_RCC_OscConfig+0x220>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80057e0:	d104      	bne.n	80057ec <HAL_RCC_OscConfig+0x218>
 80057e2:	f7ff fc79 	bl	80050d8 <LL_RCC_HSE_EnableTcxo>
 80057e6:	f7ff fca4 	bl	8005132 <LL_RCC_HSE_Enable>
 80057ea:	e003      	b.n	80057f4 <HAL_RCC_OscConfig+0x220>
 80057ec:	f7ff fcaf 	bl	800514e <LL_RCC_HSE_Disable>
 80057f0:	f7ff fc80 	bl	80050f4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d012      	beq.n	8005822 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fc fb14 	bl	8001e28 <HAL_GetTick>
 8005800:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005804:	f7fc fb10 	bl	8001e28 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e257      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005816:	f7ff fca8 	bl	800516a <LL_RCC_HSE_IsReady>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f1      	beq.n	8005804 <HAL_RCC_OscConfig+0x230>
 8005820:	e011      	b.n	8005846 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005822:	f7fc fb01 	bl	8001e28 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582a:	f7fc fafd 	bl	8001e28 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b64      	cmp	r3, #100	; 0x64
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e244      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800583c:	f7ff fc95 	bl	800516a <LL_RCC_HSE_IsReady>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f1      	bne.n	800582a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d046      	beq.n	80058e0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d005      	beq.n	8005864 <HAL_RCC_OscConfig+0x290>
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2b0c      	cmp	r3, #12
 800585c:	d10e      	bne.n	800587c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d10b      	bne.n	800587c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e22a      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fcb6 	bl	80051e6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800587a:	e031      	b.n	80058e0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d019      	beq.n	80058b8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005884:	f7ff fc82 	bl	800518c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc face 	bl	8001e28 <HAL_GetTick>
 800588c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005890:	f7fc faca 	bl	8001e28 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e211      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80058a2:	f7ff fc8f 	bl	80051c4 <LL_RCC_HSI_IsReady>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f1      	beq.n	8005890 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fc98 	bl	80051e6 <LL_RCC_HSI_SetCalibTrimming>
 80058b6:	e013      	b.n	80058e0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b8:	f7ff fc76 	bl	80051a8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fc fab4 	bl	8001e28 <HAL_GetTick>
 80058c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c4:	f7fc fab0 	bl	8001e28 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e1f7      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80058d6:	f7ff fc75 	bl	80051c4 <LL_RCC_HSI_IsReady>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f1      	bne.n	80058c4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d06e      	beq.n	80059ca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d056      	beq.n	80059a2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	429a      	cmp	r2, r3
 800590a:	d031      	beq.n	8005970 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d006      	beq.n	8005924 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e1d0      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d013      	beq.n	8005956 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800592e:	f7ff fc8f 	bl	8005250 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005932:	f7fc fa79 	bl	8001e28 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593a:	f7fc fa75 	bl	8001e28 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b11      	cmp	r3, #17
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e1bc      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800594c:	f7ff fc90 	bl	8005270 <LL_RCC_LSI_IsReady>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f1      	bne.n	800593a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595e:	f023 0210 	bic.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005970:	f7ff fc5e 	bl	8005230 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005974:	f7fc fa58 	bl	8001e28 <HAL_GetTick>
 8005978:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800597a:	e00c      	b.n	8005996 <HAL_RCC_OscConfig+0x3c2>
 800597c:	20000000 	.word	0x20000000
 8005980:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005984:	f7fc fa50 	bl	8001e28 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b11      	cmp	r3, #17
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e197      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005996:	f7ff fc6b 	bl	8005270 <LL_RCC_LSI_IsReady>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f1      	beq.n	8005984 <HAL_RCC_OscConfig+0x3b0>
 80059a0:	e013      	b.n	80059ca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a2:	f7ff fc55 	bl	8005250 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a6:	f7fc fa3f 	bl	8001e28 <HAL_GetTick>
 80059aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fc fa3b 	bl	8001e28 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b11      	cmp	r3, #17
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e182      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80059c0:	f7ff fc56 	bl	8005270 <LL_RCC_LSI_IsReady>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f1      	bne.n	80059ae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80d8 	beq.w	8005b88 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80059d8:	f7ff fb6c 	bl	80050b4 <LL_PWR_IsEnabledBkUpAccess>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d113      	bne.n	8005a0a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80059e2:	f7ff faab 	bl	8004f3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059e6:	f7fc fa1f 	bl	8001e28 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ee:	f7fc fa1b 	bl	8001e28 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e162      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a00:	f7ff fb58 	bl	80050b4 <LL_PWR_IsEnabledBkUpAccess>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f1      	beq.n	80059ee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d07b      	beq.n	8005b0a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b85      	cmp	r3, #133	; 0x85
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d109      	bne.n	8005a36 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2e:	f043 0304 	orr.w	r3, r3, #4
 8005a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a36:	f7fc f9f7 	bl	8001e28 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fc f9e9 	bl	8001e28 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e12e      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a68:	f7ff fbd1 	bl	800520e <LL_RCC_LSE_IsReady>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0ef      	beq.n	8005a52 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	2b81      	cmp	r3, #129	; 0x81
 8005a78:	d003      	beq.n	8005a82 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b85      	cmp	r3, #133	; 0x85
 8005a80:	d121      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fc f9d1 	bl	8001e28 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fc f9c3 	bl	8001e28 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e108      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ec      	beq.n	8005a9e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ac4:	e060      	b.n	8005b88 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fc f9af 	bl	8001e28 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ae0:	e00a      	b.n	8005af8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae2:	f7fc f9a1 	bl	8001e28 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e0e6      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ec      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x50e>
 8005b08:	e03e      	b.n	8005b88 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0a:	f7fc f98d 	bl	8001e28 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fc f97f 	bl	8001e28 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0c4      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ec      	bne.n	8005b26 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4c:	f7fc f96c 	bl	8001e28 <HAL_GetTick>
 8005b50:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b68:	f7fc f95e 	bl	8001e28 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0a3      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b7e:	f7ff fb46 	bl	800520e <LL_RCC_LSE_IsReady>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ef      	bne.n	8005b68 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8099 	beq.w	8005cc4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d06c      	beq.n	8005c72 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d14b      	bne.n	8005c38 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba0:	f7ff fc87 	bl	80054b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fc f940 	bl	8001e28 <HAL_GetTick>
 8005ba8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fc f93c 	bl	8001e28 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b0a      	cmp	r3, #10
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e083      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005bbe:	f7ff fc86 	bl	80054ce <LL_RCC_PLL_IsReady>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f1      	bne.n	8005bac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <HAL_RCC_OscConfig+0x6fc>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bda:	4311      	orrs	r1, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be0:	0212      	lsls	r2, r2, #8
 8005be2:	4311      	orrs	r1, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bee:	4311      	orrs	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bfe:	f7ff fc4a 	bl	8005496 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c10:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c12:	f7fc f909 	bl	8001e28 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c1a:	f7fc f905 	bl	8001e28 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b0a      	cmp	r3, #10
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e04c      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005c2c:	f7ff fc4f 	bl	80054ce <LL_RCC_PLL_IsReady>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f1      	beq.n	8005c1a <HAL_RCC_OscConfig+0x646>
 8005c36:	e045      	b.n	8005cc4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	f7ff fc3b 	bl	80054b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3c:	f7fc f8f4 	bl	8001e28 <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fc f8f0 	bl	8001e28 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b0a      	cmp	r3, #10
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e037      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c56:	f7ff fc3a 	bl	80054ce <LL_RCC_PLL_IsReady>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f1      	bne.n	8005c44 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <HAL_RCC_OscConfig+0x700>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60cb      	str	r3, [r1, #12]
 8005c70:	e028      	b.n	8005cc4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e023      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0203 	and.w	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d115      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d106      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	11c1808c 	.word	0x11c1808c
 8005cd4:	eefefffc 	.word	0xeefefffc

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e10f      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cec:	4b89      	ldr	r3, [pc, #548]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d91b      	bls.n	8005d32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b86      	ldr	r3, [pc, #536]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f023 0207 	bic.w	r2, r3, #7
 8005d02:	4984      	ldr	r1, [pc, #528]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d0a:	f7fc f88d 	bl	8001e28 <HAL_GetTick>
 8005d0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d12:	f7fc f889 	bl	8001e28 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e0f3      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d24:	4b7b      	ldr	r3, [pc, #492]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d1ef      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fb2a 	bl	800539c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d48:	f7fc f86e 	bl	8001e28 <HAL_GetTick>
 8005d4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d50:	f7fc f86a 	bl	8001e28 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e0d4      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005d62:	f7ff fbf2 	bl	800554a <LL_RCC_IsActiveFlag_HPRE>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f1      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d016      	beq.n	8005da6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fb20 	bl	80053c2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d82:	f7fc f851 	bl	8001e28 <HAL_GetTick>
 8005d86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d8a:	f7fc f84d 	bl	8001e28 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e0b7      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d9c:	f7ff fbe6 	bl	800556c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f1      	beq.n	8005d8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fb19 	bl	80053ee <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dbc:	f7fc f834 	bl	8001e28 <HAL_GetTick>
 8005dc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dc4:	f7fc f830 	bl	8001e28 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e09a      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005dd6:	f7ff fbdb 	bl	8005590 <LL_RCC_IsActiveFlag_PPRE1>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f1      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fb0e 	bl	8005414 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005df8:	f7fc f816 	bl	8001e28 <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e00:	f7fc f812 	bl	8001e28 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e07c      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e12:	f7ff fbce 	bl	80055b2 <LL_RCC_IsActiveFlag_PPRE2>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f1      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d043      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d106      	bne.n	8005e3e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005e30:	f7ff f99b 	bl	800516a <LL_RCC_HSE_IsReady>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11e      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e066      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005e46:	f7ff fb42 	bl	80054ce <LL_RCC_PLL_IsReady>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d113      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e05b      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005e5c:	f7ff fa35 	bl	80052ca <LL_RCC_MSI_IsReady>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e050      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005e6a:	f7ff f9ab 	bl	80051c4 <LL_RCC_HSI_IsReady>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e049      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fa6f 	bl	8005360 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e82:	f7fb ffd1 	bl	8001e28 <HAL_GetTick>
 8005e86:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e8a:	f7fb ffcd 	bl	8001e28 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e035      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea0:	f7ff fa71 	bl	8005386 <LL_RCC_GetSysClkSource>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d1ec      	bne.n	8005e8a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eb0:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d21b      	bcs.n	8005ef6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 0207 	bic.w	r2, r3, #7
 8005ec6:	4913      	ldr	r1, [pc, #76]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ece:	f7fb ffab 	bl	8001e28 <HAL_GetTick>
 8005ed2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ed6:	f7fb ffa7 	bl	8001e28 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e011      	b.n	8005f0c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <HAL_RCC_ClockConfig+0x23c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d1ef      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ef6:	f000 f8b3 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8005efa:	4603      	mov	r3, r0
 8005efc:	4a06      	ldr	r2, [pc, #24]	; (8005f18 <HAL_RCC_ClockConfig+0x240>)
 8005efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCC_ClockConfig+0x244>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fb ff85 	bl	8001e14 <HAL_InitTick>
 8005f0a:	4603      	mov	r3, r0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	58004000 	.word	0x58004000
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	20000004 	.word	0x20000004

08005f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f2e:	f7ff fa2a 	bl	8005386 <LL_RCC_GetSysClkSource>
 8005f32:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f34:	f7ff fafe 	bl	8005534 <LL_RCC_PLL_GetMainSource>
 8005f38:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_GetSysClockFreq+0x2c>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d139      	bne.n	8005fba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d136      	bne.n	8005fba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005f4c:	f7ff f9cd 	bl	80052ea <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d115      	bne.n	8005f82 <HAL_RCC_GetSysClockFreq+0x62>
 8005f56:	f7ff f9c8 	bl	80052ea <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x4e>
 8005f60:	f7ff f9d3 	bl	800530a <LL_RCC_MSI_GetRange>
 8005f64:	4603      	mov	r3, r0
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	e005      	b.n	8005f7a <HAL_RCC_GetSysClockFreq+0x5a>
 8005f6e:	f7ff f9d7 	bl	8005320 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f72:	4603      	mov	r3, r0
 8005f74:	0a1b      	lsrs	r3, r3, #8
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	4a36      	ldr	r2, [pc, #216]	; (8006054 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f80:	e014      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x8c>
 8005f82:	f7ff f9b2 	bl	80052ea <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d106      	bne.n	8005f9a <HAL_RCC_GetSysClockFreq+0x7a>
 8005f8c:	f7ff f9bd 	bl	800530a <LL_RCC_MSI_GetRange>
 8005f90:	4603      	mov	r3, r0
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	e005      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x86>
 8005f9a:	f7ff f9c1 	bl	8005320 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <HAL_RCC_GetSysClockFreq+0x134>)
 8005fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d115      	bne.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fb8:	e012      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <HAL_RCC_GetSysClockFreq+0x138>)
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e00c      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005fcc:	f7ff f8a0 	bl	8005110 <LL_RCC_HSE_IsEnabledDiv2>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_RCC_GetSysClockFreq+0x138>)
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e001      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005fdc:	4b1f      	ldr	r3, [pc, #124]	; (800605c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005fde:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fe0:	f7ff f9d1 	bl	8005386 <LL_RCC_GetSysClkSource>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b0c      	cmp	r3, #12
 8005fe8:	d12f      	bne.n	800604a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005fea:	f7ff faa3 	bl	8005534 <LL_RCC_PLL_GetMainSource>
 8005fee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0xde>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d003      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0xe4>
 8005ffc:	e00d      	b.n	800601a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005ffe:	4b16      	ldr	r3, [pc, #88]	; (8006058 <HAL_RCC_GetSysClockFreq+0x138>)
 8006000:	60fb      	str	r3, [r7, #12]
        break;
 8006002:	e00d      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006004:	f7ff f884 	bl	8005110 <LL_RCC_HSE_IsEnabledDiv2>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d102      	bne.n	8006014 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <HAL_RCC_GetSysClockFreq+0x138>)
 8006010:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006012:	e005      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006016:	60fb      	str	r3, [r7, #12]
        break;
 8006018:	e002      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	60fb      	str	r3, [r7, #12]
        break;
 800601e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006020:	f7ff fa66 	bl	80054f0 <LL_RCC_PLL_GetN>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	fb03 f402 	mul.w	r4, r3, r2
 800602c:	f7ff fa77 	bl	800551e <LL_RCC_PLL_GetDivider>
 8006030:	4603      	mov	r3, r0
 8006032:	091b      	lsrs	r3, r3, #4
 8006034:	3301      	adds	r3, #1
 8006036:	fbb4 f4f3 	udiv	r4, r4, r3
 800603a:	f7ff fa65 	bl	8005508 <LL_RCC_PLL_GetR>
 800603e:	4603      	mov	r3, r0
 8006040:	0f5b      	lsrs	r3, r3, #29
 8006042:	3301      	adds	r3, #1
 8006044:	fbb4 f3f3 	udiv	r3, r4, r3
 8006048:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800604a:	697b      	ldr	r3, [r7, #20]
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	bd90      	pop	{r4, r7, pc}
 8006054:	0801c780 	.word	0x0801c780
 8006058:	00f42400 	.word	0x00f42400
 800605c:	01e84800 	.word	0x01e84800

08006060 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006060:	b598      	push	{r3, r4, r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006064:	f7ff ff5c 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8006068:	4604      	mov	r4, r0
 800606a:	f7ff f9e6 	bl	800543a <LL_RCC_GetAHBPrescaler>
 800606e:	4603      	mov	r3, r0
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	4a03      	ldr	r2, [pc, #12]	; (8006084 <HAL_RCC_GetHCLKFreq+0x24>)
 8006078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd98      	pop	{r3, r4, r7, pc}
 8006084:	0801c720 	.word	0x0801c720

08006088 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006088:	b598      	push	{r3, r4, r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800608c:	f7ff ffe8 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8006090:	4604      	mov	r4, r0
 8006092:	f7ff f9ea 	bl	800546a <LL_RCC_GetAPB1Prescaler>
 8006096:	4603      	mov	r3, r0
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	4a03      	ldr	r2, [pc, #12]	; (80060a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800609c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd98      	pop	{r3, r4, r7, pc}
 80060a8:	0801c760 	.word	0x0801c760

080060ac <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060ac:	b598      	push	{r3, r4, r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80060b0:	f7ff ffd6 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060b4:	4604      	mov	r4, r0
 80060b6:	f7ff f9e3 	bl	8005480 <LL_RCC_GetAPB2Prescaler>
 80060ba:	4603      	mov	r3, r0
 80060bc:	0adb      	lsrs	r3, r3, #11
 80060be:	4a03      	ldr	r2, [pc, #12]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80060c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd98      	pop	{r3, r4, r7, pc}
 80060cc:	0801c760 	.word	0x0801c760

080060d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80060d0:	b590      	push	{r4, r7, lr}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	4a10      	ldr	r2, [pc, #64]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80060e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80060e8:	f7ff f9b2 	bl	8005450 <LL_RCC_GetAHB3Prescaler>
 80060ec:	4603      	mov	r3, r0
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	4a0c      	ldr	r2, [pc, #48]	; (8006128 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80060f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4a09      	ldr	r2, [pc, #36]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	0c9c      	lsrs	r4, r3, #18
 800610c:	f7fe ff58 	bl	8004fc0 <HAL_PWREx_GetVoltageRange>
 8006110:	4603      	mov	r3, r0
 8006112:	4619      	mov	r1, r3
 8006114:	4620      	mov	r0, r4
 8006116:	f000 f80b 	bl	8006130 <RCC_SetFlashLatency>
 800611a:	4603      	mov	r3, r0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	bd90      	pop	{r4, r7, pc}
 8006124:	0801c780 	.word	0x0801c780
 8006128:	0801c720 	.word	0x0801c720
 800612c:	431bde83 	.word	0x431bde83

08006130 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	; 0x38
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800613a:	4a3a      	ldr	r2, [pc, #232]	; (8006224 <RCC_SetFlashLatency+0xf4>)
 800613c:	f107 0320 	add.w	r3, r7, #32
 8006140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006144:	6018      	str	r0, [r3, #0]
 8006146:	3304      	adds	r3, #4
 8006148:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800614a:	4a37      	ldr	r2, [pc, #220]	; (8006228 <RCC_SetFlashLatency+0xf8>)
 800614c:	f107 0318 	add.w	r3, r7, #24
 8006150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006154:	6018      	str	r0, [r3, #0]
 8006156:	3304      	adds	r3, #4
 8006158:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800615a:	4a34      	ldr	r2, [pc, #208]	; (800622c <RCC_SetFlashLatency+0xfc>)
 800615c:	f107 030c 	add.w	r3, r7, #12
 8006160:	ca07      	ldmia	r2, {r0, r1, r2}
 8006162:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006170:	d11b      	bne.n	80061aa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006172:	2300      	movs	r3, #0
 8006174:	633b      	str	r3, [r7, #48]	; 0x30
 8006176:	e014      	b.n	80061a2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	3338      	adds	r3, #56	; 0x38
 800617e:	443b      	add	r3, r7
 8006180:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4293      	cmp	r3, r2
 800618a:	d807      	bhi.n	800619c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3338      	adds	r3, #56	; 0x38
 8006192:	443b      	add	r3, r7
 8006194:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800619a:	e021      	b.n	80061e0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	3301      	adds	r3, #1
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d9e7      	bls.n	8006178 <RCC_SetFlashLatency+0x48>
 80061a8:	e01a      	b.n	80061e0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80061aa:	2300      	movs	r3, #0
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ae:	e014      	b.n	80061da <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	3338      	adds	r3, #56	; 0x38
 80061b6:	443b      	add	r3, r7
 80061b8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d807      	bhi.n	80061d4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	3338      	adds	r3, #56	; 0x38
 80061ca:	443b      	add	r3, r7
 80061cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061d2:	e005      	b.n	80061e0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	3301      	adds	r3, #1
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d9e7      	bls.n	80061b0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <RCC_SetFlashLatency+0x100>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f023 0207 	bic.w	r2, r3, #7
 80061e8:	4911      	ldr	r1, [pc, #68]	; (8006230 <RCC_SetFlashLatency+0x100>)
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061f0:	f7fb fe1a 	bl	8001e28 <HAL_GetTick>
 80061f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80061f6:	e008      	b.n	800620a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061f8:	f7fb fe16 	bl	8001e28 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e007      	b.n	800621a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <RCC_SetFlashLatency+0x100>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006214:	429a      	cmp	r2, r3
 8006216:	d1ef      	bne.n	80061f8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3738      	adds	r7, #56	; 0x38
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	0801bf84 	.word	0x0801bf84
 8006228:	0801bf8c 	.word	0x0801bf8c
 800622c:	0801bf94 	.word	0x0801bf94
 8006230:	58004000 	.word	0x58004000

08006234 <LL_RCC_LSE_IsReady>:
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b02      	cmp	r3, #2
 8006246:	d101      	bne.n	800624c <LL_RCC_LSE_IsReady+0x18>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <LL_RCC_LSE_IsReady+0x1a>
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <LL_RCC_SetUSARTClockSource>:
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006262:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	43db      	mvns	r3, r3
 800626c:	401a      	ands	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <LL_RCC_SetI2SClockSource>:
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr

080062b0 <LL_RCC_SetLPUARTClockSource>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80062b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr

080062da <LL_RCC_SetI2CClockSource>:
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80062f2:	43db      	mvns	r3, r3
 80062f4:	401a      	ands	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80062fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <LL_RCC_SetLPTIMClockSource>:
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800631a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	43db      	mvns	r3, r3
 800632a:	401a      	ands	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <LL_RCC_SetRNGClockSource>:
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800634c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <LL_RCC_SetADCClockSource>:
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <LL_RCC_SetRTCClockSource>:
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr

080063c2 <LL_RCC_GetRTCClockSource>:
{
 80063c2:	b480      	push	{r7}
 80063c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80063c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr

080063da <LL_RCC_ForceBackupDomainReset>:
{
 80063da:	b480      	push	{r7}
 80063dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80063de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <LL_RCC_ReleaseBackupDomainReset>:
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800640a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006412:	bf00      	nop
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr
	...

0800641c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006428:	2300      	movs	r3, #0
 800642a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800642c:	2300      	movs	r3, #0
 800642e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d058      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800643c:	f7fe fd7e 	bl	8004f3c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006440:	f7fb fcf2 	bl	8001e28 <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006446:	e009      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006448:	f7fb fcee 	bl	8001e28 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d902      	bls.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	74fb      	strb	r3, [r7, #19]
        break;
 800645a:	e006      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800645c:	4b7b      	ldr	r3, [pc, #492]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006468:	d1ee      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800646a:	7cfb      	ldrb	r3, [r7, #19]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d13c      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006470:	f7ff ffa7 	bl	80063c2 <LL_RCC_GetRTCClockSource>
 8006474:	4602      	mov	r2, r0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	429a      	cmp	r2, r3
 800647c:	d00f      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800648c:	f7ff ffa5 	bl	80063da <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006490:	f7ff ffb3 	bl	80063fa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d014      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a8:	f7fb fcbe 	bl	8001e28 <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80064ae:	e00b      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b0:	f7fb fcba 	bl	8001e28 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80064be:	4293      	cmp	r3, r2
 80064c0:	d902      	bls.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	74fb      	strb	r3, [r7, #19]
            break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80064c8:	f7ff feb4 	bl	8006234 <LL_RCC_LSE_IsReady>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d1ee      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80064d2:	7cfb      	ldrb	r3, [r7, #19]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff ff5b 	bl	8006398 <LL_RCC_SetRTCClockSource>
 80064e2:	e004      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	74bb      	strb	r3, [r7, #18]
 80064e8:	e001      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fea9 	bl	8006256 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe9e 	bl	8006256 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fec0 	bl	80062b0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fee6 	bl	8006312 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fedb 	bl	8006312 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fed0 	bl	8006312 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fea9 	bl	80062da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fe9e 	bl	80062da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fe93 	bl	80062da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d011      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fe5e 	bl	8006286 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80065d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d010      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fea5 	bl	8006344 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006610:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d011      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fea3 	bl	800636e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006630:	d107      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006642:	7cbb      	ldrb	r3, [r7, #18]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	58000400 	.word	0x58000400

08006650 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d071      	beq.n	8006746 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb f926 	bl	80018c8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006684:	4b32      	ldr	r3, [pc, #200]	; (8006750 <HAL_RTC_Init+0x100>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b10      	cmp	r3, #16
 800668e:	d051      	beq.n	8006734 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006690:	4b2f      	ldr	r3, [pc, #188]	; (8006750 <HAL_RTC_Init+0x100>)
 8006692:	22ca      	movs	r2, #202	; 0xca
 8006694:	625a      	str	r2, [r3, #36]	; 0x24
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_RTC_Init+0x100>)
 8006698:	2253      	movs	r2, #83	; 0x53
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa11 	bl	8006ac4 <RTC_EnterInitMode>
 80066a2:	4603      	mov	r3, r0
 80066a4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d13f      	bne.n	800672c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80066ac:	4b28      	ldr	r3, [pc, #160]	; (8006750 <HAL_RTC_Init+0x100>)
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	4a27      	ldr	r2, [pc, #156]	; (8006750 <HAL_RTC_Init+0x100>)
 80066b2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80066b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ba:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_RTC_Init+0x100>)
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6859      	ldr	r1, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	4319      	orrs	r1, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	430b      	orrs	r3, r1
 80066d0:	491f      	ldr	r1, [pc, #124]	; (8006750 <HAL_RTC_Init+0x100>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	491b      	ldr	r1, [pc, #108]	; (8006750 <HAL_RTC_Init+0x100>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <HAL_RTC_Init+0x100>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	430b      	orrs	r3, r1
 80066f8:	4915      	ldr	r1, [pc, #84]	; (8006750 <HAL_RTC_Init+0x100>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa14 	bl	8006b2c <RTC_ExitInitMode>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10e      	bne.n	800672c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <HAL_RTC_Init+0x100>)
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a19      	ldr	r1, [r3, #32]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4319      	orrs	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	430b      	orrs	r3, r1
 8006726:	490a      	ldr	r1, [pc, #40]	; (8006750 <HAL_RTC_Init+0x100>)
 8006728:	4313      	orrs	r3, r2
 800672a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <HAL_RTC_Init+0x100>)
 800672e:	22ff      	movs	r2, #255	; 0xff
 8006730:	625a      	str	r2, [r3, #36]	; 0x24
 8006732:	e001      	b.n	8006738 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006746:	7bfb      	ldrb	r3, [r7, #15]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40002800 	.word	0x40002800

08006754 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_RTC_SetAlarm_IT+0x1e>
 800676e:	2302      	movs	r3, #2
 8006770:	e0f3      	b.n	800695a <HAL_RTC_SetAlarm_IT+0x206>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006782:	4b78      	ldr	r3, [pc, #480]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006792:	d06a      	beq.n	800686a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d13a      	bne.n	8006810 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800679a:	4b72      	ldr	r3, [pc, #456]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f9f5 	bl	8006ba8 <RTC_ByteToBcd2>
 80067be:	4603      	mov	r3, r0
 80067c0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f9ee 	bl	8006ba8 <RTC_ByteToBcd2>
 80067cc:	4603      	mov	r3, r0
 80067ce:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067d0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	789b      	ldrb	r3, [r3, #2]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f9e6 	bl	8006ba8 <RTC_ByteToBcd2>
 80067dc:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067de:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	78db      	ldrb	r3, [r3, #3]
 80067e6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067e8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f9d8 	bl	8006ba8 <RTC_ByteToBcd2>
 80067f8:	4603      	mov	r3, r0
 80067fa:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067fc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006804:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	e02c      	b.n	800686a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006818:	d00d      	beq.n	8006836 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006822:	d008      	beq.n	8006836 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006824:	4b4f      	ldr	r3, [pc, #316]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2200      	movs	r2, #0
 8006834:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006842:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006848:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	78db      	ldrb	r3, [r3, #3]
 800684e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006850:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006858:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800685a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006860:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800686a:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 800686c:	22ca      	movs	r2, #202	; 0xca
 800686e:	625a      	str	r2, [r3, #36]	; 0x24
 8006870:	4b3c      	ldr	r3, [pc, #240]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006872:	2253      	movs	r2, #83	; 0x53
 8006874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687e:	d12c      	bne.n	80068da <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006880:	4b38      	ldr	r3, [pc, #224]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	4a37      	ldr	r2, [pc, #220]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800688a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800688c:	4b35      	ldr	r3, [pc, #212]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 800688e:	2201      	movs	r2, #1
 8006890:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006898:	d107      	bne.n	80068aa <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	4930      	ldr	r1, [pc, #192]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	644b      	str	r3, [r1, #68]	; 0x44
 80068a8:	e006      	b.n	80068b8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80068aa:	4a2e      	ldr	r2, [pc, #184]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80068b0:	4a2c      	ldr	r2, [pc, #176]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	f043 0201 	orr.w	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068cc:	4b25      	ldr	r3, [pc, #148]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	4a24      	ldr	r2, [pc, #144]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80068d6:	6193      	str	r3, [r2, #24]
 80068d8:	e02b      	b.n	8006932 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068da:	4b22      	ldr	r3, [pc, #136]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	4a21      	ldr	r2, [pc, #132]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068e0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80068e4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068e6:	4b1f      	ldr	r3, [pc, #124]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068e8:	2202      	movs	r2, #2
 80068ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f2:	d107      	bne.n	8006904 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	4919      	ldr	r1, [pc, #100]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006902:	e006      	b.n	8006912 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006904:	4a17      	ldr	r2, [pc, #92]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800690a:	4a16      	ldr	r2, [pc, #88]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006912:	4a14      	ldr	r2, [pc, #80]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f043 0202 	orr.w	r2, r3, #2
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	4a0e      	ldr	r2, [pc, #56]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 800692c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006930:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <HAL_RTC_SetAlarm_IT+0x214>)
 8006934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006938:	4a0b      	ldr	r2, [pc, #44]	; (8006968 <HAL_RTC_SetAlarm_IT+0x214>)
 800693a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <HAL_RTC_SetAlarm_IT+0x210>)
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd90      	pop	{r4, r7, pc}
 8006962:	bf00      	nop
 8006964:	40002800 	.word	0x40002800
 8006968:	58000800 	.word	0x58000800

0800696c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_RTC_DeactivateAlarm+0x18>
 8006980:	2302      	movs	r3, #2
 8006982:	e048      	b.n	8006a16 <HAL_RTC_DeactivateAlarm+0xaa>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006994:	4b22      	ldr	r3, [pc, #136]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006996:	22ca      	movs	r2, #202	; 0xca
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
 800699a:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 800699c:	2253      	movs	r2, #83	; 0x53
 800699e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a6:	d115      	bne.n	80069d4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80069a8:	4b1d      	ldr	r3, [pc, #116]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069b2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069be:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	f023 0201 	bic.w	r2, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80069d2:	e014      	b.n	80069fe <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069da:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80069de:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80069e0:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e4:	4a0e      	ldr	r2, [pc, #56]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ea:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	f023 0202 	bic.w	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069fa:	2202      	movs	r2, #2
 80069fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a00:	22ff      	movs	r2, #255	; 0xff
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr
 8006a20:	40002800 	.word	0x40002800

08006a24 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fb fc18 	bl	800227e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f94a 	bl	8006cf8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40002800 	.word	0x40002800

08006a78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006a80:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <HAL_RTC_WaitForSynchro+0x48>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4a0e      	ldr	r2, [pc, #56]	; (8006ac0 <HAL_RTC_WaitForSynchro+0x48>)
 8006a86:	f023 0320 	bic.w	r3, r3, #32
 8006a8a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006a8c:	f7fb f9cc 	bl	8001e28 <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a92:	e009      	b.n	8006aa8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a94:	f7fb f9c8 	bl	8001e28 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e006      	b.n	8006ab6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RTC_WaitForSynchro+0x48>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ef      	beq.n	8006a94 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40002800 	.word	0x40002800

08006ac4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ad0:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <RTC_EnterInitMode+0x64>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d120      	bne.n	8006b1e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006adc:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <RTC_EnterInitMode+0x64>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	4a11      	ldr	r2, [pc, #68]	; (8006b28 <RTC_EnterInitMode+0x64>)
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006ae8:	f7fb f99e 	bl	8001e28 <HAL_GetTick>
 8006aec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006aee:	e00d      	b.n	8006b0c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006af0:	f7fb f99a 	bl	8001e28 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afe:	d905      	bls.n	8006b0c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2203      	movs	r2, #3
 8006b08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <RTC_EnterInitMode+0x64>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <RTC_EnterInitMode+0x5a>
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d1e8      	bne.n	8006af0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40002800 	.word	0x40002800

08006b2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b38:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b42:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b44:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10c      	bne.n	8006b6a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff91 	bl	8006a78 <HAL_RTC_WaitForSynchro>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01e      	beq.n	8006b9a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2203      	movs	r2, #3
 8006b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	73fb      	strb	r3, [r7, #15]
 8006b68:	e017      	b.n	8006b9a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	4a0d      	ldr	r2, [pc, #52]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b70:	f023 0320 	bic.w	r3, r3, #32
 8006b74:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff7e 	bl	8006a78 <HAL_RTC_WaitForSynchro>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2203      	movs	r2, #3
 8006b86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	4a04      	ldr	r2, [pc, #16]	; (8006ba4 <RTC_ExitInitMode+0x78>)
 8006b94:	f043 0320 	orr.w	r3, r3, #32
 8006b98:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40002800 	.word	0x40002800

08006ba8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006bba:	e005      	b.n	8006bc8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
 8006bc4:	3b0a      	subs	r3, #10
 8006bc6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	2b09      	cmp	r3, #9
 8006bcc:	d8f6      	bhi.n	8006bbc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	7afb      	ldrb	r3, [r7, #11]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	b2db      	uxtb	r3, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_RTCEx_EnableBypassShadow+0x16>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e01f      	b.n	8006c3e <HAL_RTCEx_EnableBypassShadow+0x56>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c10:	22ca      	movs	r2, #202	; 0xca
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c16:	2253      	movs	r2, #83	; 0x53
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	4a0a      	ldr	r2, [pc, #40]	; (8006c48 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c20:	f043 0320 	orr.w	r3, r3, #32
 8006c24:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c28:	22ff      	movs	r2, #255	; 0xff
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	40002800 	.word	0x40002800

08006c4c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e027      	b.n	8006cb2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c74:	22ca      	movs	r2, #202	; 0xca
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c7a:	2253      	movs	r2, #83	; 0x53
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	4a0e      	ldr	r2, [pc, #56]	; (8006cbc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c88:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c90:	4a0b      	ldr	r2, [pc, #44]	; (8006cc0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	40002800 	.word	0x40002800
 8006cc0:	58000800 	.word	0x58000800

08006cc4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006cda:	2240      	movs	r2, #64	; 0x40
 8006cdc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fb fad7 	bl	8002292 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40002800 	.word	0x40002800

08006cf8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006d1a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	4000b100 	.word	0x4000b100

08006d3c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d46:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <HAL_RTCEx_BKUPRead+0x28>)
 8006d48:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	4000b100 	.word	0x4000b100

08006d68 <LL_PWR_SetRadioBusyTrigger>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d78:	4904      	ldr	r1, [pc, #16]	; (8006d8c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	58000400 	.word	0x58000400

08006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr
 8006dac:	58000400 	.word	0x58000400

08006db0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dba:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr
 8006dcc:	58000400 	.word	0x58000400

08006dd0 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006dd4:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dda:	619a      	str	r2, [r3, #24]
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr
 8006de4:	58000400 	.word	0x58000400

08006de8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d101      	bne.n	8006dfc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	58000400 	.word	0x58000400

08006e0c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d101      	bne.n	8006e20 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58000400 	.word	0x58000400

08006e30 <LL_RCC_RF_DisableReset>:
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e48:	bf00      	nop
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <LL_RCC_IsRFUnderReset>:
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e64:	d101      	bne.n	8006e6a <LL_RCC_IsRFUnderReset+0x1a>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <LL_RCC_IsRFUnderReset+0x1c>
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8006e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e82:	4905      	ldr	r1, [pc, #20]	; (8006e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	58000800 	.word	0x58000800

08006e9c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	73fb      	strb	r3, [r7, #15]
    return status;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	e052      	b.n	8006f58 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	799b      	ldrb	r3, [r3, #6]
 8006eba:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_SUBGHZ_Init+0x2c>
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d109      	bne.n	8006edc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fa fe02 	bl	8001ad8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006ed4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ed8:	f7ff ffcc 	bl	8006e74 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d126      	bne.n	8006f30 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006ee8:	f7ff ffa2 	bl	8006e30 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006eec:	4b1c      	ldr	r3, [pc, #112]	; (8006f60 <HAL_SUBGHZ_Init+0xc4>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	0cdb      	lsrs	r3, r3, #19
 8006efa:	2264      	movs	r2, #100	; 0x64
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	609a      	str	r2, [r3, #8]
        break;
 8006f12:	e007      	b.n	8006f24 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006f1a:	f7ff ff99 	bl	8006e50 <LL_RCC_IsRFUnderReset>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1ee      	bne.n	8006f02 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f24:	f7ff ff34 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006f28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f2c:	f7ff ff1c 	bl	8006d68 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006f30:	f7ff ff4e 	bl	8006dd0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 faac 	bl	800749c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	719a      	strb	r2, [r3, #6]

  return status;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000000 	.word	0x20000000

08006f64 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	460b      	mov	r3, r1
 8006f72:	817b      	strh	r3, [r7, #10]
 8006f74:	4613      	mov	r3, r2
 8006f76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	799b      	ldrb	r3, [r3, #6]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d14a      	bne.n	8007018 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	795b      	ldrb	r3, [r3, #5]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e045      	b.n	800701a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2202      	movs	r2, #2
 8006f98:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fb4c 	bl	8007638 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006fa0:	f7ff ff06 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006fa4:	210d      	movs	r1, #13
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fa98 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006fac:	897b      	ldrh	r3, [r7, #10]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fa90 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006fbc:	897b      	ldrh	r3, [r7, #10]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fa8a 	bl	80074dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	82bb      	strh	r3, [r7, #20]
 8006fcc:	e00a      	b.n	8006fe4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fce:	8abb      	ldrh	r3, [r7, #20]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fa7f 	bl	80074dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fde:	8abb      	ldrh	r3, [r7, #20]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	82bb      	strh	r3, [r7, #20]
 8006fe4:	8aba      	ldrh	r2, [r7, #20]
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d3f0      	bcc.n	8006fce <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006fec:	f7ff fed0 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fb45 	bl	8007680 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]
 8007002:	e001      	b.n	8007008 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	715a      	strb	r2, [r3, #5]

    return status;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	e000      	b.n	800701a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b088      	sub	sp, #32
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	461a      	mov	r2, r3
 800702e:	460b      	mov	r3, r1
 8007030:	817b      	strh	r3, [r7, #10]
 8007032:	4613      	mov	r3, r2
 8007034:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	799b      	ldrb	r3, [r3, #6]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	d14a      	bne.n	80070da <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	795b      	ldrb	r3, [r3, #5]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800704c:	2302      	movs	r3, #2
 800704e:	e045      	b.n	80070dc <HAL_SUBGHZ_ReadRegisters+0xba>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 faee 	bl	8007638 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800705c:	f7ff fea8 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007060:	211d      	movs	r1, #29
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fa3a 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007068:	897b      	ldrh	r3, [r7, #10]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	b29b      	uxth	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4619      	mov	r1, r3
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fa32 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007078:	897b      	ldrh	r3, [r7, #10]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	4619      	mov	r1, r3
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 fa2c 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fa28 	bl	80074dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800708c:	2300      	movs	r3, #0
 800708e:	82fb      	strh	r3, [r7, #22]
 8007090:	e009      	b.n	80070a6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007092:	69b9      	ldr	r1, [r7, #24]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fa77 	bl	8007588 <SUBGHZSPI_Receive>
      pData++;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	3301      	adds	r3, #1
 800709e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80070a0:	8afb      	ldrh	r3, [r7, #22]
 80070a2:	3301      	adds	r3, #1
 80070a4:	82fb      	strh	r3, [r7, #22]
 80070a6:	8afa      	ldrh	r2, [r7, #22]
 80070a8:	893b      	ldrh	r3, [r7, #8]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d3f1      	bcc.n	8007092 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070ae:	f7ff fe6f 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fae4 	bl	8007680 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e001      	b.n	80070ca <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	715a      	strb	r2, [r3, #5]

    return status;
 80070d6:	7ffb      	ldrb	r3, [r7, #31]
 80070d8:	e000      	b.n	80070dc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	461a      	mov	r2, r3
 80070f0:	460b      	mov	r3, r1
 80070f2:	72fb      	strb	r3, [r7, #11]
 80070f4:	4613      	mov	r3, r2
 80070f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	799b      	ldrb	r3, [r3, #6]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d14a      	bne.n	8007198 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	795b      	ldrb	r3, [r3, #5]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800710a:	2302      	movs	r3, #2
 800710c:	e045      	b.n	800719a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fa8f 	bl	8007638 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	2b84      	cmp	r3, #132	; 0x84
 800711e:	d002      	beq.n	8007126 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	2b94      	cmp	r3, #148	; 0x94
 8007124:	d103      	bne.n	800712e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	711a      	strb	r2, [r3, #4]
 800712c:	e002      	b.n	8007134 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007134:	f7ff fe3c 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	4619      	mov	r1, r3
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f9cd 	bl	80074dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007142:	2300      	movs	r3, #0
 8007144:	82bb      	strh	r3, [r7, #20]
 8007146:	e00a      	b.n	800715e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007148:	8abb      	ldrh	r3, [r7, #20]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f9c2 	bl	80074dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007158:	8abb      	ldrh	r3, [r7, #20]
 800715a:	3301      	adds	r3, #1
 800715c:	82bb      	strh	r3, [r7, #20]
 800715e:	8aba      	ldrh	r2, [r7, #20]
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d3f0      	bcc.n	8007148 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007166:	f7ff fe13 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	2b84      	cmp	r3, #132	; 0x84
 800716e:	d002      	beq.n	8007176 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fa85 	bl	8007680 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
 8007182:	e001      	b.n	8007188 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	715a      	strb	r2, [r3, #5]

    return status;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	e000      	b.n	800719a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b088      	sub	sp, #32
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	461a      	mov	r2, r3
 80071ae:	460b      	mov	r3, r1
 80071b0:	72fb      	strb	r3, [r7, #11]
 80071b2:	4613      	mov	r3, r2
 80071b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	799b      	ldrb	r3, [r3, #6]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d13d      	bne.n	8007240 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	795b      	ldrb	r3, [r3, #5]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e038      	b.n	8007242 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fa2e 	bl	8007638 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80071dc:	f7ff fde8 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f979 	bl	80074dc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80071ea:	2100      	movs	r1, #0
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f975 	bl	80074dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	82fb      	strh	r3, [r7, #22]
 80071f6:	e009      	b.n	800720c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80071f8:	69b9      	ldr	r1, [r7, #24]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f9c4 	bl	8007588 <SUBGHZSPI_Receive>
      pData++;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	3301      	adds	r3, #1
 8007204:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007206:	8afb      	ldrh	r3, [r7, #22]
 8007208:	3301      	adds	r3, #1
 800720a:	82fb      	strh	r3, [r7, #22]
 800720c:	8afa      	ldrh	r2, [r7, #22]
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d3f1      	bcc.n	80071f8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007214:	f7ff fdbc 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fa31 	bl	8007680 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e001      	b.n	8007230 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	715a      	strb	r2, [r3, #5]

    return status;
 800723c:	7ffb      	ldrb	r3, [r7, #31]
 800723e:	e000      	b.n	8007242 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007240:	2302      	movs	r3, #2
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	461a      	mov	r2, r3
 8007256:	460b      	mov	r3, r1
 8007258:	72fb      	strb	r3, [r7, #11]
 800725a:	4613      	mov	r3, r2
 800725c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	799b      	ldrb	r3, [r3, #6]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d13e      	bne.n	80072e6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	795b      	ldrb	r3, [r3, #5]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007270:	2302      	movs	r3, #2
 8007272:	e039      	b.n	80072e8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f9dc 	bl	8007638 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007280:	f7ff fd96 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007284:	210e      	movs	r1, #14
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f928 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f923 	bl	80074dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	82bb      	strh	r3, [r7, #20]
 800729a:	e00a      	b.n	80072b2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800729c:	8abb      	ldrh	r3, [r7, #20]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	4413      	add	r3, r2
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f918 	bl	80074dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072ac:	8abb      	ldrh	r3, [r7, #20]
 80072ae:	3301      	adds	r3, #1
 80072b0:	82bb      	strh	r3, [r7, #20]
 80072b2:	8aba      	ldrh	r2, [r7, #20]
 80072b4:	893b      	ldrh	r3, [r7, #8]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3f0      	bcc.n	800729c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072ba:	f7ff fd69 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f9de 	bl	8007680 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	75fb      	strb	r3, [r7, #23]
 80072d0:	e001      	b.n	80072d6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	715a      	strb	r2, [r3, #5]

    return status;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	e000      	b.n	80072e8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	461a      	mov	r2, r3
 80072fc:	460b      	mov	r3, r1
 80072fe:	72fb      	strb	r3, [r7, #11]
 8007300:	4613      	mov	r3, r2
 8007302:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	799b      	ldrb	r3, [r3, #6]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b01      	cmp	r3, #1
 8007310:	d141      	bne.n	8007396 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	795b      	ldrb	r3, [r3, #5]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800731a:	2302      	movs	r3, #2
 800731c:	e03c      	b.n	8007398 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 f987 	bl	8007638 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800732a:	f7ff fd41 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800732e:	211e      	movs	r1, #30
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f8d3 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	4619      	mov	r1, r3
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f8ce 	bl	80074dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007340:	2100      	movs	r1, #0
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f8ca 	bl	80074dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007348:	2300      	movs	r3, #0
 800734a:	82fb      	strh	r3, [r7, #22]
 800734c:	e009      	b.n	8007362 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800734e:	69b9      	ldr	r1, [r7, #24]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f919 	bl	8007588 <SUBGHZSPI_Receive>
      pData++;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	3301      	adds	r3, #1
 800735a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800735c:	8afb      	ldrh	r3, [r7, #22]
 800735e:	3301      	adds	r3, #1
 8007360:	82fb      	strh	r3, [r7, #22]
 8007362:	8afa      	ldrh	r2, [r7, #22]
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d3f1      	bcc.n	800734e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800736a:	f7ff fd11 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f986 	bl	8007680 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e001      	b.n	8007386 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	715a      	strb	r2, [r3, #5]

    return status;
 8007392:	7ffb      	ldrb	r3, [r7, #31]
 8007394:	e000      	b.n	8007398 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007396:	2302      	movs	r3, #2
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	3720      	adds	r7, #32
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80073a8:	2300      	movs	r3, #0
 80073aa:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80073ac:	f107 020c 	add.w	r2, r7, #12
 80073b0:	2302      	movs	r3, #2
 80073b2:	2112      	movs	r1, #18
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff fef4 	bl	80071a2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80073ba:	7b3b      	ldrb	r3, [r7, #12]
 80073bc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80073be:	89fb      	ldrh	r3, [r7, #14]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b21a      	sxth	r2, r3
 80073c4:	7b7b      	ldrb	r3, [r7, #13]
 80073c6:	b21b      	sxth	r3, r3
 80073c8:	4313      	orrs	r3, r2
 80073ca:	b21b      	sxth	r3, r3
 80073cc:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80073ce:	f107 020c 	add.w	r2, r7, #12
 80073d2:	2302      	movs	r3, #2
 80073d4:	2102      	movs	r1, #2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fe84 	bl	80070e4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f012 ffc8 	bl	801a37c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80073ec:	89fb      	ldrh	r3, [r7, #14]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f012 ffce 	bl	801a398 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f013 f81e 	bl	801a448 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800740c:	89fb      	ldrh	r3, [r7, #14]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f013 f824 	bl	801a464 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f013 f82a 	bl	801a480 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800742c:	89fb      	ldrh	r3, [r7, #14]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f012 fff8 	bl	801a42c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f012 ffb4 	bl	801a3b4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800744c:	89fb      	ldrh	r3, [r7, #14]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00d      	beq.n	8007472 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007456:	89fb      	ldrh	r3, [r7, #14]
 8007458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007460:	2101      	movs	r1, #1
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f012 ffb4 	bl	801a3d0 <HAL_SUBGHZ_CADStatusCallback>
 8007468:	e003      	b.n	8007472 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800746a:	2100      	movs	r1, #0
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f012 ffaf 	bl	801a3d0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007472:	89fb      	ldrh	r3, [r7, #14]
 8007474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f012 ffc5 	bl	801a40c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007482:	89fb      	ldrh	r3, [r7, #14]
 8007484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f013 f805 	bl	801a49c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <SUBGHZSPI_Init+0x3c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a0b      	ldr	r2, [pc, #44]	; (80074d8 <SUBGHZSPI_Init+0x3c>)
 80074aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ae:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80074b0:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <SUBGHZSPI_Init+0x3c>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80074b8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80074ba:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <SUBGHZSPI_Init+0x3c>)
 80074bc:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80074c0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <SUBGHZSPI_Init+0x3c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <SUBGHZSPI_Init+0x3c>)
 80074c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074cc:	6013      	str	r3, [r2, #0]
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr
 80074d8:	58010000 	.word	0x58010000

080074dc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074ec:	4b23      	ldr	r3, [pc, #140]	; (800757c <SUBGHZSPI_Transmit+0xa0>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	0cdb      	lsrs	r3, r3, #19
 80074fa:	2264      	movs	r2, #100	; 0x64
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	609a      	str	r2, [r3, #8]
      break;
 8007512:	e008      	b.n	8007526 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800751a:	4b19      	ldr	r3, [pc, #100]	; (8007580 <SUBGHZSPI_Transmit+0xa4>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b02      	cmp	r3, #2
 8007524:	d1ed      	bne.n	8007502 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007526:	4b17      	ldr	r3, [pc, #92]	; (8007584 <SUBGHZSPI_Transmit+0xa8>)
 8007528:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007530:	4b12      	ldr	r3, [pc, #72]	; (800757c <SUBGHZSPI_Transmit+0xa0>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	0cdb      	lsrs	r3, r3, #19
 800753e:	2264      	movs	r2, #100	; 0x64
 8007540:	fb02 f303 	mul.w	r3, r2, r3
 8007544:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	609a      	str	r2, [r3, #8]
      break;
 8007556:	e008      	b.n	800756a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800755e:	4b08      	ldr	r3, [pc, #32]	; (8007580 <SUBGHZSPI_Transmit+0xa4>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b01      	cmp	r3, #1
 8007568:	d1ed      	bne.n	8007546 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <SUBGHZSPI_Transmit+0xa4>)
 800756c:	68db      	ldr	r3, [r3, #12]

  return status;
 800756e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007570:	4618      	mov	r0, r3
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000000 	.word	0x20000000
 8007580:	58010000 	.word	0x58010000
 8007584:	5801000c 	.word	0x5801000c

08007588 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007596:	4b25      	ldr	r3, [pc, #148]	; (800762c <SUBGHZSPI_Receive+0xa4>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	0cdb      	lsrs	r3, r3, #19
 80075a4:	2264      	movs	r2, #100	; 0x64
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	609a      	str	r2, [r3, #8]
      break;
 80075bc:	e008      	b.n	80075d0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80075c4:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <SUBGHZSPI_Receive+0xa8>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d1ed      	bne.n	80075ac <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80075d0:	4b18      	ldr	r3, [pc, #96]	; (8007634 <SUBGHZSPI_Receive+0xac>)
 80075d2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	22ff      	movs	r2, #255	; 0xff
 80075d8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075da:	4b14      	ldr	r3, [pc, #80]	; (800762c <SUBGHZSPI_Receive+0xa4>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	1a9b      	subs	r3, r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	0cdb      	lsrs	r3, r3, #19
 80075e8:	2264      	movs	r2, #100	; 0x64
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	609a      	str	r2, [r3, #8]
      break;
 8007600:	e008      	b.n	8007614 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b01      	subs	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007608:	4b09      	ldr	r3, [pc, #36]	; (8007630 <SUBGHZSPI_Receive+0xa8>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b01      	cmp	r3, #1
 8007612:	d1ed      	bne.n	80075f0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <SUBGHZSPI_Receive+0xa8>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	701a      	strb	r2, [r3, #0]

  return status;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000000 	.word	0x20000000
 8007630:	58010000 	.word	0x58010000
 8007634:	5801000c 	.word	0x5801000c

08007638 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	791b      	ldrb	r3, [r3, #4]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d111      	bne.n	800766c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <SUBGHZ_CheckDeviceReady+0x44>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	4413      	add	r3, r2
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	0c1b      	lsrs	r3, r3, #16
 8007656:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007658:	f7ff fbaa 	bl	8006db0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3b01      	subs	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f9      	bne.n	800765c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007668:	f7ff fb92 	bl	8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f807 	bl	8007680 <SUBGHZ_WaitOnBusy>
 8007672:	4603      	mov	r3, r0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000000 	.word	0x20000000

08007680 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800768c:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <SUBGHZ_WaitOnBusy+0x58>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	4413      	add	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	0d1b      	lsrs	r3, r3, #20
 800769a:	2264      	movs	r2, #100	; 0x64
 800769c:	fb02 f303 	mul.w	r3, r2, r3
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80076a2:	f7ff fbb3 	bl	8006e0c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80076a6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d105      	bne.n	80076ba <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	609a      	str	r2, [r3, #8]
      break;
 80076b8:	e009      	b.n	80076ce <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b01      	subs	r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80076c0:	f7ff fb92 	bl	8006de8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d0e9      	beq.n	80076a2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000000 	.word	0x20000000

080076dc <LL_RCC_GetUSARTClockSource>:
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80076e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	401a      	ands	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	4313      	orrs	r3, r2
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <LL_RCC_GetLPUARTClockSource>:
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4013      	ands	r3, r2
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e042      	b.n	80077b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fa ff0a 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	; 0x24
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0201 	bic.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc3b 	bl	8007fdc <UART_SetConfig>
 8007766:	4603      	mov	r3, r0
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e022      	b.n	80077b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fea3 	bl	80084c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800778c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800779c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ff29 	bl	8008606 <UART_CheckIdleState>
 80077b4:	4603      	mov	r3, r0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	; 0x28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d137      	bne.n	8007848 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_Receive_IT+0x24>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e030      	b.n	800784a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <HAL_UART_Receive_IT+0x94>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d01f      	beq.n	8007838 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d018      	beq.n	8007838 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	623b      	str	r3, [r7, #32]
 8007826:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	61bb      	str	r3, [r7, #24]
   return(result);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	461a      	mov	r2, r3
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fff8 	bl	8008834 <UART_Start_Receive_IT>
 8007844:	4603      	mov	r3, r0
 8007846:	e000      	b.n	800784a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
  }
}
 800784a:	4618      	mov	r0, r3
 800784c:	3728      	adds	r7, #40	; 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40008000 	.word	0x40008000

08007858 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786c:	2b20      	cmp	r3, #32
 800786e:	d167      	bne.n	8007940 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <HAL_UART_Transmit_DMA+0x24>
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e060      	b.n	8007942 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2221      	movs	r2, #33	; 0x21
 80078a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d028      	beq.n	8007900 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b2:	4a26      	ldr	r2, [pc, #152]	; (800794c <HAL_UART_Transmit_DMA+0xf4>)
 80078b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ba:	4a25      	ldr	r2, [pc, #148]	; (8007950 <HAL_UART_Transmit_DMA+0xf8>)
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c2:	4a24      	ldr	r2, [pc, #144]	; (8007954 <HAL_UART_Transmit_DMA+0xfc>)
 80078c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ca:	2200      	movs	r2, #0
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d6:	4619      	mov	r1, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3328      	adds	r3, #40	; 0x28
 80078de:	461a      	mov	r2, r3
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	f7fc fc07 	bl	80040f4 <HAL_DMA_Start_IT>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d009      	beq.n	8007900 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2210      	movs	r2, #16
 80078f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e020      	b.n	8007942 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2240      	movs	r2, #64	; 0x40
 8007906:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	613b      	str	r3, [r7, #16]
   return(result);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007928:	623a      	str	r2, [r7, #32]
 800792a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	69f9      	ldr	r1, [r7, #28]
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	61bb      	str	r3, [r7, #24]
   return(result);
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e5      	bne.n	8007908 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	3728      	adds	r7, #40	; 0x28
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	08008bbf 	.word	0x08008bbf
 8007950:	08008c59 	.word	0x08008c59
 8007954:	08008c75 	.word	0x08008c75

08007958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b0ba      	sub	sp, #232	; 0xe8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800797e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007982:	f640 030f 	movw	r3, #2063	; 0x80f
 8007986:	4013      	ands	r3, r2
 8007988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800798c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11b      	bne.n	80079cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d015      	beq.n	80079cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d105      	bne.n	80079b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 82e3 	beq.w	8007f88 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
      }
      return;
 80079ca:	e2dd      	b.n	8007f88 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8123 	beq.w	8007c1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079da:	4b8d      	ldr	r3, [pc, #564]	; (8007c10 <HAL_UART_IRQHandler+0x2b8>)
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079e6:	4b8b      	ldr	r3, [pc, #556]	; (8007c14 <HAL_UART_IRQHandler+0x2bc>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8116 	beq.w	8007c1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d011      	beq.n	8007a20 <HAL_UART_IRQHandler+0xc8>
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	f043 0201 	orr.w	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d011      	beq.n	8007a50 <HAL_UART_IRQHandler+0xf8>
 8007a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f043 0204 	orr.w	r2, r3, #4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d011      	beq.n	8007a80 <HAL_UART_IRQHandler+0x128>
 8007a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a76:	f043 0202 	orr.w	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d017      	beq.n	8007abc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a9c:	4b5c      	ldr	r3, [pc, #368]	; (8007c10 <HAL_UART_IRQHandler+0x2b8>)
 8007a9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab2:	f043 0208 	orr.w	r2, r3, #8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d012      	beq.n	8007aee <HAL_UART_IRQHandler+0x196>
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00c      	beq.n	8007aee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae4:	f043 0220 	orr.w	r2, r3, #32
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8249 	beq.w	8007f8c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d013      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d105      	bne.n	8007b1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d005      	beq.n	8007b52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d054      	beq.n	8007bfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 ffce 	bl	8008af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d146      	bne.n	8007bf4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1d9      	bne.n	8007b66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <HAL_UART_IRQHandler+0x2c0>)
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fc fb6d 	bl	80042ac <HAL_DMA_Abort_IT>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d019      	beq.n	8007c0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007be6:	4610      	mov	r0, r2
 8007be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	e00f      	b.n	8007c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9e0 	bl	8007fb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	e00b      	b.n	8007c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9dc 	bl	8007fb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfa:	e007      	b.n	8007c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f9d8 	bl	8007fb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007c0a:	e1bf      	b.n	8007f8c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	bf00      	nop
    return;
 8007c0e:	e1bd      	b.n	8007f8c <HAL_UART_IRQHandler+0x634>
 8007c10:	10000001 	.word	0x10000001
 8007c14:	04000120 	.word	0x04000120
 8007c18:	08008cf5 	.word	0x08008cf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	f040 8153 	bne.w	8007ecc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 814c 	beq.w	8007ecc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8145 	beq.w	8007ecc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2210      	movs	r2, #16
 8007c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	f040 80bb 	bne.w	8007dd0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 818f 	beq.w	8007f90 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f080 8187 	bcs.w	8007f90 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 8087 	bne.w	8007dae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1da      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e1      	bne.n	8007cea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e4      	bne.n	8007d6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fc fa21 	bl	80041f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8fb 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dce:	e0df      	b.n	8007f90 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80d1 	beq.w	8007f94 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80cc 	beq.w	8007f94 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e4      	bne.n	8007dfc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	623b      	str	r3, [r7, #32]
   return(result);
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e1      	bne.n	8007e32 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f87d 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007eca:	e063      	b.n	8007f94 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x59e>
 8007ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d008      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fc5e 	bl	80097b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ef4:	e051      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d014      	beq.n	8007f2c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d03a      	beq.n	8007f98 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
    }
    return;
 8007f2a:	e035      	b.n	8007f98 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d009      	beq.n	8007f4c <HAL_UART_IRQHandler+0x5f4>
 8007f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 feeb 	bl	8008d20 <UART_EndTransmit_IT>
    return;
 8007f4a:	e026      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <HAL_UART_IRQHandler+0x614>
 8007f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fc35 	bl	80097d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f6a:	e016      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d010      	beq.n	8007f9a <HAL_UART_IRQHandler+0x642>
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0c      	bge.n	8007f9a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fc1e 	bl	80097c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f86:	e008      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
      return;
 8007f88:	bf00      	nop
 8007f8a:	e006      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
    return;
 8007f8c:	bf00      	nop
 8007f8e:	e004      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
      return;
 8007f90:	bf00      	nop
 8007f92:	e002      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
      return;
 8007f94:	bf00      	nop
 8007f96:	e000      	b.n	8007f9a <HAL_UART_IRQHandler+0x642>
    return;
 8007f98:	bf00      	nop
  }
}
 8007f9a:	37e8      	adds	r7, #232	; 0xe8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr

08007fb2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr
	...

08007fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe0:	b08c      	sub	sp, #48	; 0x30
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	4313      	orrs	r3, r2
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b94      	ldr	r3, [pc, #592]	; (800825c <UART_SetConfig+0x280>)
 800800c:	4013      	ands	r3, r2
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008014:	430b      	orrs	r3, r1
 8008016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a89      	ldr	r2, [pc, #548]	; (8008260 <UART_SetConfig+0x284>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008044:	4313      	orrs	r3, r2
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008052:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800805c:	430b      	orrs	r3, r1
 800805e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	f023 010f 	bic.w	r1, r3, #15
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a7a      	ldr	r2, [pc, #488]	; (8008264 <UART_SetConfig+0x288>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d127      	bne.n	80080d0 <UART_SetConfig+0xf4>
 8008080:	2003      	movs	r0, #3
 8008082:	f7ff fb2b 	bl	80076dc <LL_RCC_GetUSARTClockSource>
 8008086:	4603      	mov	r3, r0
 8008088:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800808c:	2b03      	cmp	r3, #3
 800808e:	d81b      	bhi.n	80080c8 <UART_SetConfig+0xec>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0xbc>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e080      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e07c      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e078      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e074      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e070      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a64      	ldr	r2, [pc, #400]	; (8008268 <UART_SetConfig+0x28c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d138      	bne.n	800814c <UART_SetConfig+0x170>
 80080da:	200c      	movs	r0, #12
 80080dc:	f7ff fafe 	bl	80076dc <LL_RCC_GetUSARTClockSource>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80080e6:	2b0c      	cmp	r3, #12
 80080e8:	d82c      	bhi.n	8008144 <UART_SetConfig+0x168>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x114>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008125 	.word	0x08008125
 80080f4:	08008145 	.word	0x08008145
 80080f8:	08008145 	.word	0x08008145
 80080fc:	08008145 	.word	0x08008145
 8008100:	08008135 	.word	0x08008135
 8008104:	08008145 	.word	0x08008145
 8008108:	08008145 	.word	0x08008145
 800810c:	08008145 	.word	0x08008145
 8008110:	0800812d 	.word	0x0800812d
 8008114:	08008145 	.word	0x08008145
 8008118:	08008145 	.word	0x08008145
 800811c:	08008145 	.word	0x08008145
 8008120:	0800813d 	.word	0x0800813d
 8008124:	2300      	movs	r3, #0
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812a:	e042      	b.n	80081b2 <UART_SetConfig+0x1d6>
 800812c:	2302      	movs	r3, #2
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008132:	e03e      	b.n	80081b2 <UART_SetConfig+0x1d6>
 8008134:	2304      	movs	r3, #4
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e03a      	b.n	80081b2 <UART_SetConfig+0x1d6>
 800813c:	2308      	movs	r3, #8
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008142:	e036      	b.n	80081b2 <UART_SetConfig+0x1d6>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	e032      	b.n	80081b2 <UART_SetConfig+0x1d6>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a43      	ldr	r2, [pc, #268]	; (8008260 <UART_SetConfig+0x284>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d12a      	bne.n	80081ac <UART_SetConfig+0x1d0>
 8008156:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800815a:	f7ff fad1 	bl	8007700 <LL_RCC_GetLPUARTClockSource>
 800815e:	4603      	mov	r3, r0
 8008160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008164:	d01a      	beq.n	800819c <UART_SetConfig+0x1c0>
 8008166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800816a:	d81b      	bhi.n	80081a4 <UART_SetConfig+0x1c8>
 800816c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008170:	d00c      	beq.n	800818c <UART_SetConfig+0x1b0>
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d815      	bhi.n	80081a4 <UART_SetConfig+0x1c8>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <UART_SetConfig+0x1a8>
 800817c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008180:	d008      	beq.n	8008194 <UART_SetConfig+0x1b8>
 8008182:	e00f      	b.n	80081a4 <UART_SetConfig+0x1c8>
 8008184:	2300      	movs	r3, #0
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818a:	e012      	b.n	80081b2 <UART_SetConfig+0x1d6>
 800818c:	2302      	movs	r3, #2
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008192:	e00e      	b.n	80081b2 <UART_SetConfig+0x1d6>
 8008194:	2304      	movs	r3, #4
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819a:	e00a      	b.n	80081b2 <UART_SetConfig+0x1d6>
 800819c:	2308      	movs	r3, #8
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a2:	e006      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80081a4:	2310      	movs	r3, #16
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081aa:	e002      	b.n	80081b2 <UART_SetConfig+0x1d6>
 80081ac:	2310      	movs	r3, #16
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a2a      	ldr	r2, [pc, #168]	; (8008260 <UART_SetConfig+0x284>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	f040 80a4 	bne.w	8008306 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081c2:	2b08      	cmp	r3, #8
 80081c4:	d823      	bhi.n	800820e <UART_SetConfig+0x232>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <UART_SetConfig+0x1f0>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	0800820f 	.word	0x0800820f
 80081d4:	080081f9 	.word	0x080081f9
 80081d8:	0800820f 	.word	0x0800820f
 80081dc:	080081ff 	.word	0x080081ff
 80081e0:	0800820f 	.word	0x0800820f
 80081e4:	0800820f 	.word	0x0800820f
 80081e8:	0800820f 	.word	0x0800820f
 80081ec:	08008207 	.word	0x08008207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f0:	f7fd ff4a 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 80081f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081f6:	e010      	b.n	800821a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <UART_SetConfig+0x290>)
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081fc:	e00d      	b.n	800821a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081fe:	f7fd fe8f 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008204:	e009      	b.n	800821a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800820c:	e005      	b.n	800821a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008218:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8137 	beq.w	8008490 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	4a12      	ldr	r2, [pc, #72]	; (8008270 <UART_SetConfig+0x294>)
 8008228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800822c:	461a      	mov	r2, r3
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	fbb3 f3f2 	udiv	r3, r3, r2
 8008234:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	429a      	cmp	r2, r3
 8008244:	d305      	bcc.n	8008252 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	429a      	cmp	r2, r3
 8008250:	d910      	bls.n	8008274 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008258:	e11a      	b.n	8008490 <UART_SetConfig+0x4b4>
 800825a:	bf00      	nop
 800825c:	cfff69f3 	.word	0xcfff69f3
 8008260:	40008000 	.word	0x40008000
 8008264:	40013800 	.word	0x40013800
 8008268:	40004400 	.word	0x40004400
 800826c:	00f42400 	.word	0x00f42400
 8008270:	0801c810 	.word	0x0801c810
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2200      	movs	r2, #0
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	60fa      	str	r2, [r7, #12]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	4a8e      	ldr	r2, [pc, #568]	; (80084bc <UART_SetConfig+0x4e0>)
 8008282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008286:	b29b      	uxth	r3, r3
 8008288:	2200      	movs	r2, #0
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	607a      	str	r2, [r7, #4]
 800828e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008296:	f7f8 fc87 	bl	8000ba8 <__aeabi_uldivmod>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	f04f 0300 	mov.w	r3, #0
 80082aa:	020b      	lsls	r3, r1, #8
 80082ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082b0:	0202      	lsls	r2, r0, #8
 80082b2:	6979      	ldr	r1, [r7, #20]
 80082b4:	6849      	ldr	r1, [r1, #4]
 80082b6:	0849      	lsrs	r1, r1, #1
 80082b8:	2000      	movs	r0, #0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4605      	mov	r5, r0
 80082be:	eb12 0804 	adds.w	r8, r2, r4
 80082c2:	eb43 0905 	adc.w	r9, r3, r5
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	469a      	mov	sl, r3
 80082ce:	4693      	mov	fp, r2
 80082d0:	4652      	mov	r2, sl
 80082d2:	465b      	mov	r3, fp
 80082d4:	4640      	mov	r0, r8
 80082d6:	4649      	mov	r1, r9
 80082d8:	f7f8 fc66 	bl	8000ba8 <__aeabi_uldivmod>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4613      	mov	r3, r2
 80082e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ea:	d308      	bcc.n	80082fe <UART_SetConfig+0x322>
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082f2:	d204      	bcs.n	80082fe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6a3a      	ldr	r2, [r7, #32]
 80082fa:	60da      	str	r2, [r3, #12]
 80082fc:	e0c8      	b.n	8008490 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008304:	e0c4      	b.n	8008490 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830e:	d167      	bne.n	80083e0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008314:	2b08      	cmp	r3, #8
 8008316:	d828      	bhi.n	800836a <UART_SetConfig+0x38e>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x344>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008345 	.word	0x08008345
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008355 	.word	0x08008355
 800832c:	0800836b 	.word	0x0800836b
 8008330:	0800835b 	.word	0x0800835b
 8008334:	0800836b 	.word	0x0800836b
 8008338:	0800836b 	.word	0x0800836b
 800833c:	0800836b 	.word	0x0800836b
 8008340:	08008363 	.word	0x08008363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fd fea0 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800834a:	e014      	b.n	8008376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800834c:	f7fd feae 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 8008350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008352:	e010      	b.n	8008376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008354:	4b5a      	ldr	r3, [pc, #360]	; (80084c0 <UART_SetConfig+0x4e4>)
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008358:	e00d      	b.n	8008376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835a:	f7fd fde1 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800835e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008360:	e009      	b.n	8008376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008368:	e005      	b.n	8008376 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8089 	beq.w	8008490 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	4a4e      	ldr	r2, [pc, #312]	; (80084bc <UART_SetConfig+0x4e0>)
 8008384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008388:	461a      	mov	r2, r3
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008390:	005a      	lsls	r2, r3, #1
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	441a      	add	r2, r3
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d916      	bls.n	80083d8 <UART_SetConfig+0x3fc>
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b0:	d212      	bcs.n	80083d8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f023 030f 	bic.w	r3, r3, #15
 80083ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	8bfb      	ldrh	r3, [r7, #30]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	8bfa      	ldrh	r2, [r7, #30]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e05b      	b.n	8008490 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083de:	e057      	b.n	8008490 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d828      	bhi.n	800843a <UART_SetConfig+0x45e>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <UART_SetConfig+0x414>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008415 	.word	0x08008415
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	08008425 	.word	0x08008425
 80083fc:	0800843b 	.word	0x0800843b
 8008400:	0800842b 	.word	0x0800842b
 8008404:	0800843b 	.word	0x0800843b
 8008408:	0800843b 	.word	0x0800843b
 800840c:	0800843b 	.word	0x0800843b
 8008410:	08008433 	.word	0x08008433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008414:	f7fd fe38 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 8008418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800841a:	e014      	b.n	8008446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800841c:	f7fd fe46 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 8008420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008422:	e010      	b.n	8008446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008424:	4b26      	ldr	r3, [pc, #152]	; (80084c0 <UART_SetConfig+0x4e4>)
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008428:	e00d      	b.n	8008446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800842a:	f7fd fd79 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008430:	e009      	b.n	8008446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008438:	e005      	b.n	8008446 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008444:	bf00      	nop
    }

    if (pclk != 0U)
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d021      	beq.n	8008490 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <UART_SetConfig+0x4e0>)
 8008452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008456:	461a      	mov	r2, r3
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	fbb3 f2f2 	udiv	r2, r3, r2
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	441a      	add	r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	fbb2 f3f3 	udiv	r3, r2, r3
 800846e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	2b0f      	cmp	r3, #15
 8008474:	d909      	bls.n	800848a <UART_SetConfig+0x4ae>
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847c:	d205      	bcs.n	800848a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	b29a      	uxth	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60da      	str	r2, [r3, #12]
 8008488:	e002      	b.n	8008490 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2201      	movs	r2, #1
 8008494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2201      	movs	r2, #1
 800849c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2200      	movs	r2, #0
 80084a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2200      	movs	r2, #0
 80084aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80084ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3730      	adds	r7, #48	; 0x30
 80084b4:	46bd      	mov	sp, r7
 80084b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ba:	bf00      	nop
 80084bc:	0801c810 	.word	0x0801c810
 80084c0:	00f42400 	.word	0x00f42400

080084c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	f003 0310 	and.w	r3, r3, #16
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01a      	beq.n	80085da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c2:	d10a      	bne.n	80085da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	605a      	str	r2, [r3, #4]
  }
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr

08008606 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af02      	add	r7, sp, #8
 800860c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008616:	f7f9 fc07 	bl	8001e28 <HAL_GetTick>
 800861a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b08      	cmp	r3, #8
 8008628:	d10e      	bne.n	8008648 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800862a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f832 	bl	80086a2 <UART_WaitOnFlagUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e028      	b.n	800869a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b04      	cmp	r3, #4
 8008654:	d10e      	bne.n	8008674 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f81c 	bl	80086a2 <UART_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e012      	b.n	800869a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b09c      	sub	sp, #112	; 0x70
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b2:	e0a9      	b.n	8008808 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ba:	f000 80a5 	beq.w	8008808 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086be:	f7f9 fbb3 	bl	8001e28 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d302      	bcc.n	80086d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80086ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d140      	bne.n	8008756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086e8:	667b      	str	r3, [r7, #100]	; 0x64
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	663b      	str	r3, [r7, #96]	; 0x60
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008726:	64ba      	str	r2, [r7, #72]	; 0x48
 8008728:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800872c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e5      	bne.n	8008706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2220      	movs	r2, #32
 8008746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e069      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d051      	beq.n	8008808 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800876e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008772:	d149      	bne.n	8008808 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800877c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
 800879e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e6      	bne.n	800877e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	613b      	str	r3, [r7, #16]
   return(result);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087d0:	623a      	str	r2, [r7, #32]
 80087d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	69f9      	ldr	r1, [r7, #28]
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e5      	bne.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e010      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69da      	ldr	r2, [r3, #28]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4013      	ands	r3, r2
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	429a      	cmp	r2, r3
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	429a      	cmp	r2, r3
 8008824:	f43f af46 	beq.w	80086b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3770      	adds	r7, #112	; 0x70
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008834:	b480      	push	{r7}
 8008836:	b0a3      	sub	sp, #140	; 0x8c
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008866:	d10e      	bne.n	8008886 <UART_Start_Receive_IT+0x52>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <UART_Start_Receive_IT+0x48>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008876:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800887a:	e02d      	b.n	80088d8 <UART_Start_Receive_IT+0xa4>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	22ff      	movs	r2, #255	; 0xff
 8008880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008884:	e028      	b.n	80088d8 <UART_Start_Receive_IT+0xa4>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10d      	bne.n	80088aa <UART_Start_Receive_IT+0x76>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <UART_Start_Receive_IT+0x6c>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	22ff      	movs	r2, #255	; 0xff
 800889a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800889e:	e01b      	b.n	80088d8 <UART_Start_Receive_IT+0xa4>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	227f      	movs	r2, #127	; 0x7f
 80088a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088a8:	e016      	b.n	80088d8 <UART_Start_Receive_IT+0xa4>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088b2:	d10d      	bne.n	80088d0 <UART_Start_Receive_IT+0x9c>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d104      	bne.n	80088c6 <UART_Start_Receive_IT+0x92>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	227f      	movs	r2, #127	; 0x7f
 80088c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088c4:	e008      	b.n	80088d8 <UART_Start_Receive_IT+0xa4>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	223f      	movs	r2, #63	; 0x3f
 80088ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088ce:	e003      	b.n	80088d8 <UART_Start_Receive_IT+0xa4>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2222      	movs	r2, #34	; 0x22
 80088e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80088f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800890c:	673a      	str	r2, [r7, #112]	; 0x70
 800890e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008912:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800891a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e3      	bne.n	80088e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008928:	d14f      	bne.n	80089ca <UART_Start_Receive_IT+0x196>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008930:	88fa      	ldrh	r2, [r7, #6]
 8008932:	429a      	cmp	r2, r3
 8008934:	d349      	bcc.n	80089ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893e:	d107      	bne.n	8008950 <UART_Start_Receive_IT+0x11c>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a46      	ldr	r2, [pc, #280]	; (8008a64 <UART_Start_Receive_IT+0x230>)
 800894c:	675a      	str	r2, [r3, #116]	; 0x74
 800894e:	e002      	b.n	8008956 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a45      	ldr	r2, [pc, #276]	; (8008a68 <UART_Start_Receive_IT+0x234>)
 8008954:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01a      	beq.n	8008994 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800896c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008982:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008986:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e4      	bne.n	800895e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80089b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e5      	bne.n	8008994 <UART_Start_Receive_IT+0x160>
 80089c8:	e046      	b.n	8008a58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d107      	bne.n	80089e4 <UART_Start_Receive_IT+0x1b0>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a23      	ldr	r2, [pc, #140]	; (8008a6c <UART_Start_Receive_IT+0x238>)
 80089e0:	675a      	str	r2, [r3, #116]	; 0x74
 80089e2:	e002      	b.n	80089ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <UART_Start_Receive_IT+0x23c>)
 80089e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d019      	beq.n	8008a26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a06:	677b      	str	r3, [r7, #116]	; 0x74
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
 8008a12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e6      	bne.n	80089f2 <UART_Start_Receive_IT+0x1be>
 8008a24:	e018      	b.n	8008a58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	613b      	str	r3, [r7, #16]
   return(result);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f043 0320 	orr.w	r3, r3, #32
 8008a3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a44:	623b      	str	r3, [r7, #32]
 8008a46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	69f9      	ldr	r1, [r7, #28]
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e6      	bne.n	8008a26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	378c      	adds	r7, #140	; 0x8c
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr
 8008a64:	08009449 	.word	0x08009449
 8008a68:	080090e9 	.word	0x080090e9
 8008a6c:	08008f31 	.word	0x08008f31
 8008a70:	08008d79 	.word	0x08008d79

08008a74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b08f      	sub	sp, #60	; 0x3c
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e6      	bne.n	8008a7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	61ba      	str	r2, [r7, #24]
 8008ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6979      	ldr	r1, [r7, #20]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	613b      	str	r3, [r7, #16]
   return(result);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e5      	bne.n	8008aae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008aea:	bf00      	nop
 8008aec:	373c      	adds	r7, #60	; 0x3c
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b095      	sub	sp, #84	; 0x54
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e6      	bne.n	8008afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b44:	f023 0301 	bic.w	r3, r3, #1
 8008b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d118      	bne.n	8008ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f023 0310 	bic.w	r3, r3, #16
 8008b82:	647b      	str	r3, [r7, #68]	; 0x44
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6979      	ldr	r1, [r7, #20]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	613b      	str	r3, [r7, #16]
   return(result);
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e6      	bne.n	8008b6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008bb4:	bf00      	nop
 8008bb6:	3754      	adds	r7, #84	; 0x54
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b090      	sub	sp, #64	; 0x40
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d137      	bne.n	8008c4a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c02:	633a      	str	r2, [r7, #48]	; 0x30
 8008c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e5      	bne.n	8008be2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	617b      	str	r3, [r7, #20]
   return(result);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c48:	e002      	b.n	8008c50 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c4c:	f7f9 fdf2 	bl	8002834 <HAL_UART_TxCpltCallback>
}
 8008c50:	bf00      	nop
 8008c52:	3740      	adds	r7, #64	; 0x40
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7ff f99a 	bl	8007fa0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9c:	2b80      	cmp	r3, #128	; 0x80
 8008c9e:	d109      	bne.n	8008cb4 <UART_DMAError+0x40>
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b21      	cmp	r3, #33	; 0x21
 8008ca4:	d106      	bne.n	8008cb4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008cae:	6978      	ldr	r0, [r7, #20]
 8008cb0:	f7ff fee0 	bl	8008a74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d109      	bne.n	8008cd6 <UART_DMAError+0x62>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b22      	cmp	r3, #34	; 0x22
 8008cc6:	d106      	bne.n	8008cd6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008cd0:	6978      	ldr	r0, [r7, #20]
 8008cd2:	f7ff ff0f 	bl	8008af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cdc:	f043 0210 	orr.w	r2, r3, #16
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f7ff f963 	bl	8007fb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cec:	bf00      	nop
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff f94d 	bl	8007fb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	61bb      	str	r3, [r7, #24]
 8008d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6979      	ldr	r1, [r7, #20]
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	613b      	str	r3, [r7, #16]
   return(result);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e6      	bne.n	8008d28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7f9 fd63 	bl	8002834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d6e:	bf00      	nop
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b09c      	sub	sp, #112	; 0x70
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d90:	2b22      	cmp	r3, #34	; 0x22
 8008d92:	f040 80be 	bne.w	8008f12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008da0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008da4:	b2d9      	uxtb	r1, r3
 8008da6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db0:	400a      	ands	r2, r1
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f040 80a1 	bne.w	8008f22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e6      	bne.n	8008de0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	667b      	str	r3, [r7, #100]	; 0x64
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e32:	647a      	str	r2, [r7, #68]	; 0x44
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e5      	bne.n	8008e12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a33      	ldr	r2, [pc, #204]	; (8008f2c <UART_RxISR_8BIT+0x1b4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d01f      	beq.n	8008ea4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d018      	beq.n	8008ea4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e86:	663b      	str	r3, [r7, #96]	; 0x60
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e90:	633b      	str	r3, [r7, #48]	; 0x30
 8008e92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d12e      	bne.n	8008f0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0310 	bic.w	r3, r3, #16
 8008ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ed0:	61fb      	str	r3, [r7, #28]
 8008ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	69b9      	ldr	r1, [r7, #24]
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	e841 2300 	strex	r3, r2, [r1]
 8008edc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e6      	bne.n	8008eb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d103      	bne.n	8008efa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff f85e 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f08:	e00b      	b.n	8008f22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7f9 fca8 	bl	8002860 <HAL_UART_RxCpltCallback>
}
 8008f10:	e007      	b.n	8008f22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0208 	orr.w	r2, r2, #8
 8008f20:	619a      	str	r2, [r3, #24]
}
 8008f22:	bf00      	nop
 8008f24:	3770      	adds	r7, #112	; 0x70
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	40008000 	.word	0x40008000

08008f30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b09c      	sub	sp, #112	; 0x70
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f48:	2b22      	cmp	r3, #34	; 0x22
 8008f4a:	f040 80be 	bne.w	80090ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008f62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f66:	4013      	ands	r3, r2
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f72:	1c9a      	adds	r2, r3, #2
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	3b01      	subs	r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f040 80a1 	bne.w	80090da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fac:	667b      	str	r3, [r7, #100]	; 0x64
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8008fb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e6      	bne.n	8008f98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3308      	adds	r3, #8
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	f023 0301 	bic.w	r3, r3, #1
 8008fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fea:	643a      	str	r2, [r7, #64]	; 0x40
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e5      	bne.n	8008fca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a33      	ldr	r2, [pc, #204]	; (80090e4 <UART_RxISR_16BIT+0x1b4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d01f      	beq.n	800905c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d018      	beq.n	800905c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	61fb      	str	r3, [r7, #28]
   return(result);
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800903e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e6      	bne.n	800902a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d12e      	bne.n	80090c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	60bb      	str	r3, [r7, #8]
   return(result);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f023 0310 	bic.w	r3, r3, #16
 800907e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6979      	ldr	r1, [r7, #20]
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	613b      	str	r3, [r7, #16]
   return(result);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f003 0310 	and.w	r3, r3, #16
 80090a6:	2b10      	cmp	r3, #16
 80090a8:	d103      	bne.n	80090b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2210      	movs	r2, #16
 80090b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7fe ff82 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090c0:	e00b      	b.n	80090da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f9 fbcc 	bl	8002860 <HAL_UART_RxCpltCallback>
}
 80090c8:	e007      	b.n	80090da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f042 0208 	orr.w	r2, r2, #8
 80090d8:	619a      	str	r2, [r3, #24]
}
 80090da:	bf00      	nop
 80090dc:	3770      	adds	r7, #112	; 0x70
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	40008000 	.word	0x40008000

080090e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b0ac      	sub	sp, #176	; 0xb0
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800911e:	2b22      	cmp	r3, #34	; 0x22
 8009120:	f040 8182 	bne.w	8009428 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800912a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800912e:	e125      	b.n	800937c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800913a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800913e:	b2d9      	uxtb	r1, r3
 8009140:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009144:	b2da      	uxtb	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914a:	400a      	ands	r2, r1
 800914c:	b2d2      	uxtb	r2, r2
 800914e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	2b00      	cmp	r3, #0
 8009180:	d053      	beq.n	800922a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800918e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a8:	f043 0201 	orr.w	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80091be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2202      	movs	r2, #2
 80091d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d8:	f043 0204 	orr.w	r2, r3, #4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d011      	beq.n	8009212 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80091ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2204      	movs	r2, #4
 8009200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009208:	f043 0202 	orr.w	r2, r3, #2
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009218:	2b00      	cmp	r3, #0
 800921a:	d006      	beq.n	800922a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fe fec8 	bl	8007fb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009230:	b29b      	uxth	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 80a2 	bne.w	800937c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800924c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800925a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800925c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009260:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e4      	bne.n	8009238 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800927e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3308      	adds	r3, #8
 8009292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009296:	66ba      	str	r2, [r7, #104]	; 0x68
 8009298:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800929c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e1      	bne.n	800926e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a5f      	ldr	r2, [pc, #380]	; (8009440 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d021      	beq.n	800930c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01a      	beq.n	800930c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f8:	657b      	str	r3, [r7, #84]	; 0x54
 80092fa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e4      	bne.n	80092d6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d130      	bne.n	8009376 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800933c:	643b      	str	r3, [r7, #64]	; 0x40
 800933e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e4      	bne.n	800931a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b10      	cmp	r3, #16
 800935c:	d103      	bne.n	8009366 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2210      	movs	r2, #16
 8009364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7fe fe28 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
 8009374:	e002      	b.n	800937c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7f9 fa72 	bl	8002860 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800937c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009380:	2b00      	cmp	r3, #0
 8009382:	d006      	beq.n	8009392 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	f47f aecf 	bne.w	8009130 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009398:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800939c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d049      	beq.n	8009438 <UART_RxISR_8BIT_FIFOEN+0x350>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d242      	bcs.n	8009438 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3308      	adds	r3, #8
 80093b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80093d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e3      	bne.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a15      	ldr	r2, [pc, #84]	; (8009444 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80093ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f043 0320 	orr.w	r3, r3, #32
 8009404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009412:	61bb      	str	r3, [r7, #24]
 8009414:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6979      	ldr	r1, [r7, #20]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	613b      	str	r3, [r7, #16]
   return(result);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e4      	bne.n	80093f0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009426:	e007      	b.n	8009438 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f042 0208 	orr.w	r2, r2, #8
 8009436:	619a      	str	r2, [r3, #24]
}
 8009438:	bf00      	nop
 800943a:	37b0      	adds	r7, #176	; 0xb0
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	40008000 	.word	0x40008000
 8009444:	08008d79 	.word	0x08008d79

08009448 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b0ae      	sub	sp, #184	; 0xb8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009456:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800947e:	2b22      	cmp	r3, #34	; 0x22
 8009480:	f040 8186 	bne.w	8009790 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800948a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800948e:	e129      	b.n	80096e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80094a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80094a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80094aa:	4013      	ands	r3, r2
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d053      	beq.n	800958e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d011      	beq.n	8009516 <UART_RxISR_16BIT_FIFOEN+0xce>
 80094f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2201      	movs	r2, #1
 8009504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950c:	f043 0201 	orr.w	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d011      	beq.n	8009546 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2202      	movs	r2, #2
 8009534:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953c:	f043 0204 	orr.w	r2, r3, #4
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d011      	beq.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2204      	movs	r2, #4
 8009564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956c:	f043 0202 	orr.w	r2, r3, #2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800957c:	2b00      	cmp	r3, #0
 800957e:	d006      	beq.n	800958e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fe fd16 	bl	8007fb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	f040 80a4 	bne.w	80096e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095c2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e2      	bne.n	800959c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3308      	adds	r3, #8
 80095fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800960c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e1      	bne.n	80095d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a5f      	ldr	r2, [pc, #380]	; (80097a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d021      	beq.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01a      	beq.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800964c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800964e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009660:	65bb      	str	r3, [r7, #88]	; 0x58
 8009662:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800966e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e4      	bne.n	800963e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d130      	bne.n	80096de <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009692:	f023 0310 	bic.w	r3, r3, #16
 8009696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096a4:	647b      	str	r3, [r7, #68]	; 0x44
 80096a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e4      	bne.n	8009682 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b10      	cmp	r3, #16
 80096c4:	d103      	bne.n	80096ce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2210      	movs	r2, #16
 80096cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fe fc74 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
 80096dc:	e002      	b.n	80096e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7f9 f8be 	bl	8002860 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d006      	beq.n	80096fa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80096ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f47f aecb 	bne.w	8009490 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009700:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009704:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009708:	2b00      	cmp	r3, #0
 800970a:	d049      	beq.n	80097a0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009712:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009716:	429a      	cmp	r2, r3
 8009718:	d242      	bcs.n	80097a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	623b      	str	r3, [r7, #32]
   return(result);
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3308      	adds	r3, #8
 800973a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800973e:	633a      	str	r2, [r7, #48]	; 0x30
 8009740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e3      	bne.n	800971a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a15      	ldr	r2, [pc, #84]	; (80097ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009756:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	60fb      	str	r3, [r7, #12]
   return(result);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f043 0320 	orr.w	r3, r3, #32
 800976c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	69b9      	ldr	r1, [r7, #24]
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	617b      	str	r3, [r7, #20]
   return(result);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e4      	bne.n	8009758 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800978e:	e007      	b.n	80097a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0208 	orr.w	r2, r2, #8
 800979e:	619a      	str	r2, [r3, #24]
}
 80097a0:	bf00      	nop
 80097a2:	37b8      	adds	r7, #184	; 0xb8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40008000 	.word	0x40008000
 80097ac:	08008f31 	.word	0x08008f31

080097b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr

080097d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc80      	pop	{r7}
 80097e4:	4770      	bx	lr

080097e6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b088      	sub	sp, #32
 80097ea:	af02      	add	r7, sp, #8
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	1d3b      	adds	r3, r7, #4
 80097f0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009802:	2302      	movs	r3, #2
 8009804:	e046      	b.n	8009894 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2224      	movs	r2, #36	; 0x24
 8009812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0201 	bic.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d105      	bne.n	800984c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 f911 	bl	8009a6e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0201 	orr.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800985c:	f7f8 fae4 	bl	8001e28 <HAL_GetTick>
 8009860:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2200      	movs	r2, #0
 800986c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7fe ff16 	bl	80086a2 <UART_WaitOnFlagUntilTimeout>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	75fb      	strb	r3, [r7, #23]
 8009880:	e003      	b.n	800988a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2220      	movs	r2, #32
 8009886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b089      	sub	sp, #36	; 0x24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_UARTEx_EnableStopMode+0x16>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e021      	b.n	80098f6 <HAL_UARTEx_EnableStopMode+0x5a>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f043 0302 	orr.w	r3, r3, #2
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6979      	ldr	r1, [r7, #20]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	613b      	str	r3, [r7, #16]
   return(result);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e6      	bne.n	80098ba <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3724      	adds	r7, #36	; 0x24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_UARTEx_EnableFifoMode+0x16>
 8009912:	2302      	movs	r3, #2
 8009914:	e02b      	b.n	800996e <HAL_UARTEx_EnableFifoMode+0x6e>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2224      	movs	r2, #36	; 0x24
 8009922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0201 	bic.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800994c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f8ac 	bl	8009ab4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800998a:	2302      	movs	r3, #2
 800998c:	e02d      	b.n	80099ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2224      	movs	r2, #36	; 0x24
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f872 	bl	8009ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e02d      	b.n	8009a66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2224      	movs	r2, #36	; 0x24
 8009a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0201 	bic.w	r2, r2, #1
 8009a30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f834 	bl	8009ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b085      	sub	sp, #20
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	1d3b      	adds	r3, r7, #4
 8009a78:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f023 0210 	bic.w	r2, r3, #16
 8009a86:	893b      	ldrh	r3, [r7, #8]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009a9c:	7abb      	ldrb	r3, [r7, #10]
 8009a9e:	061a      	lsls	r2, r3, #24
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	605a      	str	r2, [r3, #4]
}
 8009aa8:	bf00      	nop
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bc80      	pop	{r7}
 8009ab0:	4770      	bx	lr
	...

08009ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d108      	bne.n	8009ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ad4:	e031      	b.n	8009b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ada:	2308      	movs	r3, #8
 8009adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	0e5b      	lsrs	r3, r3, #25
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f003 0307 	and.w	r3, r3, #7
 8009aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	0f5b      	lsrs	r3, r3, #29
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	7b3a      	ldrb	r2, [r7, #12]
 8009b02:	4910      	ldr	r1, [pc, #64]	; (8009b44 <UARTEx_SetNbDataToProcess+0x90>)
 8009b04:	5c8a      	ldrb	r2, [r1, r2]
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b0a:	7b3a      	ldrb	r2, [r7, #12]
 8009b0c:	490e      	ldr	r1, [pc, #56]	; (8009b48 <UARTEx_SetNbDataToProcess+0x94>)
 8009b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	7b7a      	ldrb	r2, [r7, #13]
 8009b20:	4908      	ldr	r1, [pc, #32]	; (8009b44 <UARTEx_SetNbDataToProcess+0x90>)
 8009b22:	5c8a      	ldrb	r2, [r1, r2]
 8009b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b28:	7b7a      	ldrb	r2, [r7, #13]
 8009b2a:	4907      	ldr	r1, [pc, #28]	; (8009b48 <UARTEx_SetNbDataToProcess+0x94>)
 8009b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b3a:	bf00      	nop
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr
 8009b44:	0801c828 	.word	0x0801c828
 8009b48:	0801c830 	.word	0x0801c830

08009b4c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009b50:	f7f8 f80a 	bl	8001b68 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009b54:	f000 f820 	bl	8009b98 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009b58:	bf00      	nop
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b64:	f011 fa8a 	bl	801b07c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009b68:	bf00      	nop
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009b70:	f3bf 8f4f 	dsb	sy
}
 8009b74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009b76:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <__NVIC_SystemReset+0x24>)
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b7e:	4904      	ldr	r1, [pc, #16]	; (8009b90 <__NVIC_SystemReset+0x24>)
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <__NVIC_SystemReset+0x28>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b86:	f3bf 8f4f 	dsb	sy
}
 8009b8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <__NVIC_SystemReset+0x20>
 8009b90:	e000ed00 	.word	0xe000ed00
 8009b94:	05fa0004 	.word	0x05fa0004

08009b98 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	2301      	movs	r3, #1
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	4b59      	ldr	r3, [pc, #356]	; (8009d14 <LoRaWAN_Init+0x17c>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	2002      	movs	r0, #2
 8009bb6:	f011 feaf 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9302      	str	r3, [sp, #8]
 8009bbe:	2305      	movs	r3, #5
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	4b54      	ldr	r3, [pc, #336]	; (8009d18 <LoRaWAN_Init+0x180>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2100      	movs	r1, #0
 8009bcc:	2002      	movs	r0, #2
 8009bce:	f011 fea3 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9302      	str	r3, [sp, #8]
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4b4f      	ldr	r3, [pc, #316]	; (8009d1c <LoRaWAN_Init+0x184>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	2100      	movs	r1, #0
 8009be4:	2002      	movs	r0, #2
 8009be6:	f011 fe97 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009bea:	1d3b      	adds	r3, r7, #4
 8009bec:	4619      	mov	r1, r3
 8009bee:	2000      	movs	r0, #0
 8009bf0:	f003 f978 	bl	800cee4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	0e1b      	lsrs	r3, r3, #24
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	0c1b      	lsrs	r3, r3, #16
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	4619      	mov	r1, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	0a1b      	lsrs	r3, r3, #8
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	9302      	str	r3, [sp, #8]
 8009c0c:	9101      	str	r1, [sp, #4]
 8009c0e:	9200      	str	r2, [sp, #0]
 8009c10:	4b43      	ldr	r3, [pc, #268]	; (8009d20 <LoRaWAN_Init+0x188>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	2002      	movs	r0, #2
 8009c18:	f011 fe7e 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009c1c:	1d3b      	adds	r3, r7, #4
 8009c1e:	4619      	mov	r1, r3
 8009c20:	2001      	movs	r0, #1
 8009c22:	f003 f95f 	bl	800cee4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	0e1b      	lsrs	r3, r3, #24
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	4619      	mov	r1, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	0a1b      	lsrs	r3, r3, #8
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	b2c0      	uxtb	r0, r0
 8009c40:	9003      	str	r0, [sp, #12]
 8009c42:	9302      	str	r3, [sp, #8]
 8009c44:	9101      	str	r1, [sp, #4]
 8009c46:	9200      	str	r2, [sp, #0]
 8009c48:	4b36      	ldr	r3, [pc, #216]	; (8009d24 <LoRaWAN_Init+0x18c>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	2002      	movs	r0, #2
 8009c50:	f011 fe62 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009c54:	2300      	movs	r3, #0
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	4b33      	ldr	r3, [pc, #204]	; (8009d28 <LoRaWAN_Init+0x190>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009c60:	4832      	ldr	r0, [pc, #200]	; (8009d2c <LoRaWAN_Init+0x194>)
 8009c62:	f011 fbab 	bl	801b3bc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009c66:	2300      	movs	r3, #0
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <LoRaWAN_Init+0x198>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009c72:	4830      	ldr	r0, [pc, #192]	; (8009d34 <LoRaWAN_Init+0x19c>)
 8009c74:	f011 fba2 	bl	801b3bc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	4b2e      	ldr	r3, [pc, #184]	; (8009d38 <LoRaWAN_Init+0x1a0>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009c84:	482d      	ldr	r0, [pc, #180]	; (8009d3c <LoRaWAN_Init+0x1a4>)
 8009c86:	f011 fb99 	bl	801b3bc <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4b2c      	ldr	r3, [pc, #176]	; (8009d40 <LoRaWAN_Init+0x1a8>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009c96:	482b      	ldr	r0, [pc, #172]	; (8009d44 <LoRaWAN_Init+0x1ac>)
 8009c98:	f011 fb90 	bl	801b3bc <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009c9c:	4a2a      	ldr	r2, [pc, #168]	; (8009d48 <LoRaWAN_Init+0x1b0>)
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f011 fae7 	bl	801b274 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009ca6:	4a29      	ldr	r2, [pc, #164]	; (8009d4c <LoRaWAN_Init+0x1b4>)
 8009ca8:	2100      	movs	r1, #0
 8009caa:	2002      	movs	r0, #2
 8009cac:	f011 fae2 	bl	801b274 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009cb0:	4a27      	ldr	r2, [pc, #156]	; (8009d50 <LoRaWAN_Init+0x1b8>)
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	2004      	movs	r0, #4
 8009cb6:	f011 fadd 	bl	801b274 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009cba:	4a26      	ldr	r2, [pc, #152]	; (8009d54 <LoRaWAN_Init+0x1bc>)
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	2008      	movs	r0, #8
 8009cc0:	f011 fad8 	bl	801b274 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009cc4:	f000 fd22 	bl	800a70c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009cc8:	4923      	ldr	r1, [pc, #140]	; (8009d58 <LoRaWAN_Init+0x1c0>)
 8009cca:	4824      	ldr	r0, [pc, #144]	; (8009d5c <LoRaWAN_Init+0x1c4>)
 8009ccc:	f002 f97c 	bl	800bfc8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009cd0:	4823      	ldr	r0, [pc, #140]	; (8009d60 <LoRaWAN_Init+0x1c8>)
 8009cd2:	f002 f9e7 	bl	800c0a4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009cd6:	4819      	ldr	r0, [pc, #100]	; (8009d3c <LoRaWAN_Init+0x1a4>)
 8009cd8:	f011 fba6 	bl	801b428 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009cdc:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <LoRaWAN_Init+0x1cc>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	4a21      	ldr	r2, [pc, #132]	; (8009d68 <LoRaWAN_Init+0x1d0>)
 8009ce2:	7812      	ldrb	r2, [r2, #0]
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f002 fb34 	bl	800c354 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009cec:	4b1f      	ldr	r3, [pc, #124]	; (8009d6c <LoRaWAN_Init+0x1d4>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009cf4:	4b1e      	ldr	r3, [pc, #120]	; (8009d70 <LoRaWAN_Init+0x1d8>)
 8009cf6:	6819      	ldr	r1, [r3, #0]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <LoRaWAN_Init+0x1dc>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	481d      	ldr	r0, [pc, #116]	; (8009d78 <LoRaWAN_Init+0x1e0>)
 8009d02:	f011 fb5b 	bl	801b3bc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009d06:	481c      	ldr	r0, [pc, #112]	; (8009d78 <LoRaWAN_Init+0x1e0>)
 8009d08:	f011 fb8e 	bl	801b428 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	0801bfc0 	.word	0x0801bfc0
 8009d18:	0801bfe4 	.word	0x0801bfe4
 8009d1c:	0801c008 	.word	0x0801c008
 8009d20:	0801c02c 	.word	0x0801c02c
 8009d24:	0801c050 	.word	0x0801c050
 8009d28:	0800a22d 	.word	0x0800a22d
 8009d2c:	20000458 	.word	0x20000458
 8009d30:	0800a23f 	.word	0x0800a23f
 8009d34:	20000470 	.word	0x20000470
 8009d38:	0800a251 	.word	0x0800a251
 8009d3c:	20000488 	.word	0x20000488
 8009d40:	0800a60d 	.word	0x0800a60d
 8009d44:	2000034c 	.word	0x2000034c
 8009d48:	0800c2e9 	.word	0x0800c2e9
 8009d4c:	08009eed 	.word	0x08009eed
 8009d50:	0800a631 	.word	0x0800a631
 8009d54:	0800a58d 	.word	0x0800a58d
 8009d58:	01030000 	.word	0x01030000
 8009d5c:	20000024 	.word	0x20000024
 8009d60:	20000070 	.word	0x20000070
 8009d64:	20000020 	.word	0x20000020
 8009d68:	20000021 	.word	0x20000021
 8009d6c:	20000330 	.word	0x20000330
 8009d70:	20000088 	.word	0x20000088
 8009d74:	0800a209 	.word	0x0800a209
 8009d78:	20000334 	.word	0x20000334

08009d7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d8c:	d104      	bne.n	8009d98 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009d8e:	2100      	movs	r1, #0
 8009d90:	2002      	movs	r0, #2
 8009d92:	f011 fa91 	bl	801b2b8 <UTIL_SEQ_SetTask>
      }
      break;
 8009d96:	e000      	b.n	8009d9a <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009d98:	bf00      	nop
  }
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009da4:	b5b0      	push	{r4, r5, r7, lr}
 8009da6:	b08a      	sub	sp, #40	; 0x28
 8009da8:	af06      	add	r7, sp, #24
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 8086 	beq.w	8009ec6 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009dba:	4845      	ldr	r0, [pc, #276]	; (8009ed0 <OnRxData+0x12c>)
 8009dbc:	f011 fb34 	bl	801b428 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05a      	beq.n	8009e7e <OnRxData+0xda>
    {
      if (appData != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d057      	beq.n	8009e7e <OnRxData+0xda>
      {
        RxPort = appData->Port;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d050      	beq.n	8009e7e <OnRxData+0xda>
        {
          switch (appData->Port)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d01f      	beq.n	8009e24 <OnRxData+0x80>
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d145      	bne.n	8009e74 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	785b      	ldrb	r3, [r3, #1]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d143      	bne.n	8009e78 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d00e      	beq.n	8009e18 <OnRxData+0x74>
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	dc10      	bgt.n	8009e20 <OnRxData+0x7c>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <OnRxData+0x64>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d004      	beq.n	8009e10 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 8009e06:	e00b      	b.n	8009e20 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 8009e08:	2000      	movs	r0, #0
 8009e0a:	f002 fc57 	bl	800c6bc <LmHandlerRequestClass>
                    break;
 8009e0e:	e008      	b.n	8009e22 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 8009e10:	2001      	movs	r0, #1
 8009e12:	f002 fc53 	bl	800c6bc <LmHandlerRequestClass>
                    break;
 8009e16:	e004      	b.n	8009e22 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 8009e18:	2002      	movs	r0, #2
 8009e1a:	f002 fc4f 	bl	800c6bc <LmHandlerRequestClass>
                    break;
 8009e1e:	e000      	b.n	8009e22 <OnRxData+0x7e>
                    break;
 8009e20:	bf00      	nop
                }
              }
              break;
 8009e22:	e029      	b.n	8009e78 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	785b      	ldrb	r3, [r3, #1]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d127      	bne.n	8009e7c <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <OnRxData+0x130>)
 8009e3a:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 8009e3c:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <OnRxData+0x130>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10b      	bne.n	8009e5c <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8009e44:	4b24      	ldr	r3, [pc, #144]	; (8009ed8 <OnRxData+0x134>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	2100      	movs	r1, #0
 8009e4a:	2003      	movs	r0, #3
 8009e4c:	f011 fd64 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009e50:	2201      	movs	r2, #1
 8009e52:	2120      	movs	r1, #32
 8009e54:	4821      	ldr	r0, [pc, #132]	; (8009edc <OnRxData+0x138>)
 8009e56:	f7fb f841 	bl	8004edc <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 8009e5a:	e00f      	b.n	8009e7c <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009e5c:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <OnRxData+0x13c>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2100      	movs	r1, #0
 8009e62:	2003      	movs	r0, #3
 8009e64:	f011 fd58 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2120      	movs	r1, #32
 8009e6c:	481b      	ldr	r0, [pc, #108]	; (8009edc <OnRxData+0x138>)
 8009e6e:	f7fb f835 	bl	8004edc <HAL_GPIO_WritePin>
              break;
 8009e72:	e003      	b.n	8009e7c <OnRxData+0xd8>

            default:

              break;
 8009e74:	bf00      	nop
 8009e76:	e002      	b.n	8009e7e <OnRxData+0xda>
              break;
 8009e78:	bf00      	nop
 8009e7a:	e000      	b.n	8009e7e <OnRxData+0xda>
              break;
 8009e7c:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	7c1b      	ldrb	r3, [r3, #16]
 8009e82:	2b05      	cmp	r3, #5
 8009e84:	d81f      	bhi.n	8009ec6 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	7bfa      	ldrb	r2, [r7, #15]
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 8009e92:	460c      	mov	r4, r1
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	7c09      	ldrb	r1, [r1, #16]
 8009e98:	4608      	mov	r0, r1
 8009e9a:	4912      	ldr	r1, [pc, #72]	; (8009ee4 <OnRxData+0x140>)
 8009e9c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009ea0:	6838      	ldr	r0, [r7, #0]
 8009ea2:	f990 0009 	ldrsb.w	r0, [r0, #9]
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	6838      	ldr	r0, [r7, #0]
 8009eaa:	f990 000a 	ldrsb.w	r0, [r0, #10]
 8009eae:	9005      	str	r0, [sp, #20]
 8009eb0:	9504      	str	r5, [sp, #16]
 8009eb2:	9103      	str	r1, [sp, #12]
 8009eb4:	9402      	str	r4, [sp, #8]
 8009eb6:	9201      	str	r2, [sp, #4]
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <OnRxData+0x144>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	2003      	movs	r0, #3
 8009ec2:	f011 fd29 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000470 	.word	0x20000470
 8009ed4:	20000456 	.word	0x20000456
 8009ed8:	0801c074 	.word	0x0801c074
 8009edc:	48000400 	.word	0x48000400
 8009ee0:	0801c080 	.word	0x0801c080
 8009ee4:	20000008 	.word	0x20000008
 8009ee8:	0801c08c 	.word	0x0801c08c

08009eec <SendTxData>:

static void SendTxData(void)
{
 8009eec:	b590      	push	{r4, r7, lr}
 8009eee:	b091      	sub	sp, #68	; 0x44
 8009ef0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009ef2:	23ff      	movs	r3, #255	; 0xff
 8009ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 8009ef8:	f7f7 fe66 	bl	8001bc8 <GetBatteryLevel>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009f22:	1d3b      	adds	r3, r7, #4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f8 f813 	bl	8001f50 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8009f2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4b8f      	ldr	r3, [pc, #572]	; (800a170 <SendTxData+0x284>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	2100      	movs	r1, #0
 8009f36:	2002      	movs	r0, #2
 8009f38:	f011 fcee 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7f6 fdec 	bl	8000b1c <__aeabi_f2iz>
 8009f44:	4603      	mov	r3, r0
 8009f46:	b21b      	sxth	r3, r3
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	4b8a      	ldr	r3, [pc, #552]	; (800a174 <SendTxData+0x288>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	2100      	movs	r1, #0
 8009f50:	2002      	movs	r0, #2
 8009f52:	f011 fce1 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009f56:	4b88      	ldr	r3, [pc, #544]	; (800a178 <SendTxData+0x28c>)
 8009f58:	2202      	movs	r2, #2
 8009f5a:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4987      	ldr	r1, [pc, #540]	; (800a17c <SendTxData+0x290>)
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7f6 fc8b 	bl	800087c <__aeabi_fmul>
 8009f66:	4603      	mov	r3, r0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7f6 fdfd 	bl	8000b68 <__aeabi_f2uiz>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f6 fdd1 	bl	8000b1c <__aeabi_f2iz>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	497f      	ldr	r1, [pc, #508]	; (800a180 <SendTxData+0x294>)
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7f6 fc7a 	bl	800087c <__aeabi_fmul>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	497c      	ldr	r1, [pc, #496]	; (800a17c <SendTxData+0x290>)
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f6 fd29 	bl	80009e4 <__aeabi_fdiv>
 8009f92:	4603      	mov	r3, r0
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f6 fde7 	bl	8000b68 <__aeabi_f2uiz>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 8009f9e:	4b76      	ldr	r3, [pc, #472]	; (800a178 <SendTxData+0x28c>)
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	1c59      	adds	r1, r3, #1
 8009fa6:	6339      	str	r1, [r7, #48]	; 0x30
 8009fa8:	4413      	add	r3, r2
 8009faa:	4a76      	ldr	r2, [pc, #472]	; (800a184 <SendTxData+0x298>)
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009fb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fb2:	0a1b      	lsrs	r3, r3, #8
 8009fb4:	b298      	uxth	r0, r3
 8009fb6:	4b70      	ldr	r3, [pc, #448]	; (800a178 <SendTxData+0x28c>)
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	1c59      	adds	r1, r3, #1
 8009fbe:	6339      	str	r1, [r7, #48]	; 0x30
 8009fc0:	4413      	add	r3, r2
 8009fc2:	b2c2      	uxtb	r2, r0
 8009fc4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009fc6:	4b6c      	ldr	r3, [pc, #432]	; (800a178 <SendTxData+0x28c>)
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	1c59      	adds	r1, r3, #1
 8009fce:	6339      	str	r1, [r7, #48]	; 0x30
 8009fd0:	4413      	add	r3, r2
 8009fd2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009fd8:	4b67      	ldr	r3, [pc, #412]	; (800a178 <SendTxData+0x28c>)
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	1c59      	adds	r1, r3, #1
 8009fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8009fe2:	4413      	add	r3, r2
 8009fe4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009fea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009fec:	0a1b      	lsrs	r3, r3, #8
 8009fee:	b298      	uxth	r0, r3
 8009ff0:	4b61      	ldr	r3, [pc, #388]	; (800a178 <SendTxData+0x28c>)
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	1c59      	adds	r1, r3, #1
 8009ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8009ffa:	4413      	add	r3, r2
 8009ffc:	b2c2      	uxtb	r2, r0
 8009ffe:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a000:	4b5d      	ldr	r3, [pc, #372]	; (800a178 <SendTxData+0x28c>)
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	6339      	str	r1, [r7, #48]	; 0x30
 800a00a:	4413      	add	r3, r2
 800a00c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a012:	4b5d      	ldr	r3, [pc, #372]	; (800a188 <SendTxData+0x29c>)
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b08      	cmp	r3, #8
 800a018:	d007      	beq.n	800a02a <SendTxData+0x13e>
 800a01a:	4b5b      	ldr	r3, [pc, #364]	; (800a188 <SendTxData+0x29c>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d003      	beq.n	800a02a <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a022:	4b59      	ldr	r3, [pc, #356]	; (800a188 <SendTxData+0x29c>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d120      	bne.n	800a06c <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a02a:	4b53      	ldr	r3, [pc, #332]	; (800a178 <SendTxData+0x28c>)
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	1c59      	adds	r1, r3, #1
 800a032:	6339      	str	r1, [r7, #48]	; 0x30
 800a034:	4413      	add	r3, r2
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a03a:	4b4f      	ldr	r3, [pc, #316]	; (800a178 <SendTxData+0x28c>)
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	1c59      	adds	r1, r3, #1
 800a042:	6339      	str	r1, [r7, #48]	; 0x30
 800a044:	4413      	add	r3, r2
 800a046:	2200      	movs	r2, #0
 800a048:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a04a:	4b4b      	ldr	r3, [pc, #300]	; (800a178 <SendTxData+0x28c>)
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	1c59      	adds	r1, r3, #1
 800a052:	6339      	str	r1, [r7, #48]	; 0x30
 800a054:	4413      	add	r3, r2
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a05a:	4b47      	ldr	r3, [pc, #284]	; (800a178 <SendTxData+0x28c>)
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	1c59      	adds	r1, r3, #1
 800a062:	6339      	str	r1, [r7, #48]	; 0x30
 800a064:	4413      	add	r3, r2
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
 800a06a:	e05b      	b.n	800a124 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a074:	4b40      	ldr	r3, [pc, #256]	; (800a178 <SendTxData+0x28c>)
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	6339      	str	r1, [r7, #48]	; 0x30
 800a07e:	18d4      	adds	r4, r2, r3
 800a080:	f7f7 fda2 	bl	8001bc8 <GetBatteryLevel>
 800a084:	4603      	mov	r3, r0
 800a086:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	1418      	asrs	r0, r3, #16
 800a08c:	4b3a      	ldr	r3, [pc, #232]	; (800a178 <SendTxData+0x28c>)
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	1c59      	adds	r1, r3, #1
 800a094:	6339      	str	r1, [r7, #48]	; 0x30
 800a096:	4413      	add	r3, r2
 800a098:	b2c2      	uxtb	r2, r0
 800a09a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	1218      	asrs	r0, r3, #8
 800a0a0:	4b35      	ldr	r3, [pc, #212]	; (800a178 <SendTxData+0x28c>)
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	1c59      	adds	r1, r3, #1
 800a0a8:	6339      	str	r1, [r7, #48]	; 0x30
 800a0aa:	4413      	add	r3, r2
 800a0ac:	b2c2      	uxtb	r2, r0
 800a0ae:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a0b0:	4b31      	ldr	r3, [pc, #196]	; (800a178 <SendTxData+0x28c>)
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	6339      	str	r1, [r7, #48]	; 0x30
 800a0ba:	4413      	add	r3, r2
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	b2d2      	uxtb	r2, r2
 800a0c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	1418      	asrs	r0, r3, #16
 800a0c6:	4b2c      	ldr	r3, [pc, #176]	; (800a178 <SendTxData+0x28c>)
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	1c59      	adds	r1, r3, #1
 800a0ce:	6339      	str	r1, [r7, #48]	; 0x30
 800a0d0:	4413      	add	r3, r2
 800a0d2:	b2c2      	uxtb	r2, r0
 800a0d4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	1218      	asrs	r0, r3, #8
 800a0da:	4b27      	ldr	r3, [pc, #156]	; (800a178 <SendTxData+0x28c>)
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	1c59      	adds	r1, r3, #1
 800a0e2:	6339      	str	r1, [r7, #48]	; 0x30
 800a0e4:	4413      	add	r3, r2
 800a0e6:	b2c2      	uxtb	r2, r0
 800a0e8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a0ea:	4b23      	ldr	r3, [pc, #140]	; (800a178 <SendTxData+0x28c>)
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	1c59      	adds	r1, r3, #1
 800a0f2:	6339      	str	r1, [r7, #48]	; 0x30
 800a0f4:	4413      	add	r3, r2
 800a0f6:	6a3a      	ldr	r2, [r7, #32]
 800a0f8:	b2d2      	uxtb	r2, r2
 800a0fa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a0fc:	8bfb      	ldrh	r3, [r7, #30]
 800a0fe:	0a1b      	lsrs	r3, r3, #8
 800a100:	b298      	uxth	r0, r3
 800a102:	4b1d      	ldr	r3, [pc, #116]	; (800a178 <SendTxData+0x28c>)
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	1c59      	adds	r1, r3, #1
 800a10a:	6339      	str	r1, [r7, #48]	; 0x30
 800a10c:	4413      	add	r3, r2
 800a10e:	b2c2      	uxtb	r2, r0
 800a110:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a112:	4b19      	ldr	r3, [pc, #100]	; (800a178 <SendTxData+0x28c>)
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	1c59      	adds	r1, r3, #1
 800a11a:	6339      	str	r1, [r7, #48]	; 0x30
 800a11c:	4413      	add	r3, r2
 800a11e:	8bfa      	ldrh	r2, [r7, #30]
 800a120:	b2d2      	uxtb	r2, r2
 800a122:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	b2da      	uxtb	r2, r3
 800a128:	4b13      	ldr	r3, [pc, #76]	; (800a178 <SendTxData+0x28c>)
 800a12a:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a12c:	4b17      	ldr	r3, [pc, #92]	; (800a18c <SendTxData+0x2a0>)
 800a12e:	7a5b      	ldrb	r3, [r3, #9]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d007      	beq.n	800a144 <SendTxData+0x258>
 800a134:	f002 f9b0 	bl	800c498 <LmHandlerJoinStatus>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d102      	bne.n	800a144 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a13e:	4813      	ldr	r0, [pc, #76]	; (800a18c <SendTxData+0x2a0>)
 800a140:	f011 f9e0 	bl	801b504 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a144:	4b10      	ldr	r3, [pc, #64]	; (800a188 <SendTxData+0x29c>)
 800a146:	78db      	ldrb	r3, [r3, #3]
 800a148:	2200      	movs	r2, #0
 800a14a:	4619      	mov	r1, r3
 800a14c:	480a      	ldr	r0, [pc, #40]	; (800a178 <SendTxData+0x28c>)
 800a14e:	f002 f9bf 	bl	800c4d0 <LmHandlerSend>
 800a152:	4603      	mov	r3, r0
 800a154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a158:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d119      	bne.n	800a194 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a160:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <SendTxData+0x2a4>)
 800a162:	2201      	movs	r2, #1
 800a164:	2100      	movs	r1, #0
 800a166:	2001      	movs	r0, #1
 800a168:	f011 fbd6 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
 800a16c:	e029      	b.n	800a1c2 <SendTxData+0x2d6>
 800a16e:	bf00      	nop
 800a170:	0801c0d4 	.word	0x0801c0d4
 800a174:	0801c0e0 	.word	0x0801c0e0
 800a178:	2000008c 	.word	0x2000008c
 800a17c:	41200000 	.word	0x41200000
 800a180:	42c80000 	.word	0x42c80000
 800a184:	20000456 	.word	0x20000456
 800a188:	20000070 	.word	0x20000070
 800a18c:	20000488 	.word	0x20000488
 800a190:	0801c0ec 	.word	0x0801c0ec
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a194:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a198:	f113 0f06 	cmn.w	r3, #6
 800a19c:	d111      	bne.n	800a1c2 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a19e:	f002 f8cf 	bl	800c340 <LmHandlerGetDutyCycleWaitTime>
 800a1a2:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	4a11      	ldr	r2, [pc, #68]	; (800a1f4 <SendTxData+0x308>)
 800a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b2:	099b      	lsrs	r3, r3, #6
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	4b10      	ldr	r3, [pc, #64]	; (800a1f8 <SendTxData+0x30c>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	2001      	movs	r0, #1
 800a1be:	f011 fbab 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a1c2:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <SendTxData+0x310>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10f      	bne.n	800a1ea <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a1ca:	480d      	ldr	r0, [pc, #52]	; (800a200 <SendTxData+0x314>)
 800a1cc:	f011 f99a 	bl	801b504 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <SendTxData+0x318>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	bf38      	it	cc
 800a1da:	4613      	movcc	r3, r2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4808      	ldr	r0, [pc, #32]	; (800a200 <SendTxData+0x314>)
 800a1e0:	f011 fa00 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a1e4:	4806      	ldr	r0, [pc, #24]	; (800a200 <SendTxData+0x314>)
 800a1e6:	f011 f91f 	bl	801b428 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a1ea:	bf00      	nop
 800a1ec:	373c      	adds	r7, #60	; 0x3c
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd90      	pop	{r4, r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	10624dd3 	.word	0x10624dd3
 800a1f8:	0801c0fc 	.word	0x0801c0fc
 800a1fc:	20000330 	.word	0x20000330
 800a200:	20000334 	.word	0x20000334
 800a204:	20000088 	.word	0x20000088

0800a208 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a210:	2100      	movs	r1, #0
 800a212:	2002      	movs	r0, #2
 800a214:	f011 f850 	bl	801b2b8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a218:	4803      	ldr	r0, [pc, #12]	; (800a228 <OnTxTimerEvent+0x20>)
 800a21a:	f011 f905 	bl	801b428 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000334 	.word	0x20000334

0800a22c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	bc80      	pop	{r7}
 800a23c:	4770      	bx	lr

0800a23e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a23e:	b480      	push	{r7}
 800a240:	b083      	sub	sp, #12
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bc80      	pop	{r7}
 800a24e:	4770      	bx	lr

0800a250 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bc80      	pop	{r7}
 800a260:	4770      	bx	lr
	...

0800a264 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af04      	add	r7, sp, #16
 800a26a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d041      	beq.n	800a2f6 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d03d      	beq.n	800a2f6 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a27a:	4821      	ldr	r0, [pc, #132]	; (800a300 <OnTxData+0x9c>)
 800a27c:	f011 f8d4 	bl	801b428 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a280:	4b20      	ldr	r3, [pc, #128]	; (800a304 <OnTxData+0xa0>)
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	2002      	movs	r0, #2
 800a288:	f011 fb46 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	7c12      	ldrb	r2, [r2, #16]
 800a294:	4611      	mov	r1, r2
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a29c:	4610      	mov	r0, r2
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a2a4:	9203      	str	r2, [sp, #12]
 800a2a6:	9002      	str	r0, [sp, #8]
 800a2a8:	9101      	str	r1, [sp, #4]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4b16      	ldr	r3, [pc, #88]	; (800a308 <OnTxData+0xa4>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2003      	movs	r0, #3
 800a2b4:	f011 fb30 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a2b8:	4b14      	ldr	r3, [pc, #80]	; (800a30c <OnTxData+0xa8>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2100      	movs	r1, #0
 800a2be:	2003      	movs	r0, #3
 800a2c0:	f011 fb2a 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7a1b      	ldrb	r3, [r3, #8]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d10e      	bne.n	800a2ea <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7a5b      	ldrb	r3, [r3, #9]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <OnTxData+0x74>
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	; (800a310 <OnTxData+0xac>)
 800a2d6:	e000      	b.n	800a2da <OnTxData+0x76>
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <OnTxData+0xb0>)
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <OnTxData+0xb4>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	2003      	movs	r0, #3
 800a2e4:	f011 fb18 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a2e8:	e005      	b.n	800a2f6 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <OnTxData+0xb8>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	2003      	movs	r0, #3
 800a2f2:	f011 fb11 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000458 	.word	0x20000458
 800a304:	0801c11c 	.word	0x0801c11c
 800a308:	0801c150 	.word	0x0801c150
 800a30c:	0801c184 	.word	0x0801c184
 800a310:	0801c194 	.word	0x0801c194
 800a314:	0801c198 	.word	0x0801c198
 800a318:	0801c1a0 	.word	0x0801c1a0
 800a31c:	0801c1b4 	.word	0x0801c1b4

0800a320 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d039      	beq.n	800a3a2 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d11e      	bne.n	800a376 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a338:	2100      	movs	r1, #0
 800a33a:	2004      	movs	r0, #4
 800a33c:	f010 ffbc 	bl	801b2b8 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a340:	481a      	ldr	r0, [pc, #104]	; (800a3ac <OnJoinRequest+0x8c>)
 800a342:	f011 f8df 	bl	801b504 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a346:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <OnJoinRequest+0x90>)
 800a348:	2200      	movs	r2, #0
 800a34a:	2100      	movs	r1, #0
 800a34c:	2002      	movs	r0, #2
 800a34e:	f011 fae3 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	79db      	ldrb	r3, [r3, #7]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d106      	bne.n	800a368 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a35a:	4b16      	ldr	r3, [pc, #88]	; (800a3b4 <OnJoinRequest+0x94>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	2100      	movs	r1, #0
 800a360:	2002      	movs	r0, #2
 800a362:	f011 fad9 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a366:	e01c      	b.n	800a3a2 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a368:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <OnJoinRequest+0x98>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	2100      	movs	r1, #0
 800a36e:	2002      	movs	r0, #2
 800a370:	f011 fad2 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800a374:	e015      	b.n	800a3a2 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a376:	4b11      	ldr	r3, [pc, #68]	; (800a3bc <OnJoinRequest+0x9c>)
 800a378:	2200      	movs	r2, #0
 800a37a:	2100      	movs	r1, #0
 800a37c:	2002      	movs	r0, #2
 800a37e:	f011 facb 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	79db      	ldrb	r3, [r3, #7]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d10b      	bne.n	800a3a2 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a38a:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <OnJoinRequest+0xa0>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	2002      	movs	r0, #2
 800a392:	f011 fac1 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <OnJoinRequest+0xa4>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2101      	movs	r1, #1
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 ffd9 	bl	800c354 <LmHandlerJoin>
}
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20000488 	.word	0x20000488
 800a3b0:	0801c1c4 	.word	0x0801c1c4
 800a3b4:	0801c1dc 	.word	0x0801c1dc
 800a3b8:	0801c1fc 	.word	0x0801c1fc
 800a3bc:	0801c21c 	.word	0x0801c21c
 800a3c0:	0801c238 	.word	0x0801c238
 800a3c4:	20000020 	.word	0x20000020

0800a3c8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ca:	b093      	sub	sp, #76	; 0x4c
 800a3cc:	af0c      	add	r7, sp, #48	; 0x30
 800a3ce:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d056      	beq.n	800a484 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d008      	beq.n	800a3f0 <OnBeaconStatusChange+0x28>
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d049      	beq.n	800a476 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a3e2:	4b2a      	ldr	r3, [pc, #168]	; (800a48c <OnBeaconStatusChange+0xc4>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	2002      	movs	r0, #2
 800a3ea:	f011 fa95 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a3ee:	e049      	b.n	800a484 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	7c1b      	ldrb	r3, [r3, #16]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a3fc:	461c      	mov	r4, r3
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a404:	461d      	mov	r5, r3
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	6852      	ldr	r2, [r2, #4]
 800a40e:	6979      	ldr	r1, [r7, #20]
 800a410:	7d89      	ldrb	r1, [r1, #22]
 800a412:	460e      	mov	r6, r1
 800a414:	6979      	ldr	r1, [r7, #20]
 800a416:	7dc9      	ldrb	r1, [r1, #23]
 800a418:	6139      	str	r1, [r7, #16]
 800a41a:	6979      	ldr	r1, [r7, #20]
 800a41c:	7e09      	ldrb	r1, [r1, #24]
 800a41e:	60f9      	str	r1, [r7, #12]
 800a420:	6979      	ldr	r1, [r7, #20]
 800a422:	7e49      	ldrb	r1, [r1, #25]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	6979      	ldr	r1, [r7, #20]
 800a428:	7e89      	ldrb	r1, [r1, #26]
 800a42a:	6079      	str	r1, [r7, #4]
 800a42c:	6979      	ldr	r1, [r7, #20]
 800a42e:	7ec9      	ldrb	r1, [r1, #27]
 800a430:	6039      	str	r1, [r7, #0]
 800a432:	6979      	ldr	r1, [r7, #20]
 800a434:	7f09      	ldrb	r1, [r1, #28]
 800a436:	910b      	str	r1, [sp, #44]	; 0x2c
 800a438:	f8d7 c000 	ldr.w	ip, [r7]
 800a43c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800a440:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a444:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800a448:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a44c:	f8cd c020 	str.w	ip, [sp, #32]
 800a450:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a454:	f8cd c01c 	str.w	ip, [sp, #28]
 800a458:	6939      	ldr	r1, [r7, #16]
 800a45a:	9106      	str	r1, [sp, #24]
 800a45c:	9605      	str	r6, [sp, #20]
 800a45e:	9204      	str	r2, [sp, #16]
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	9502      	str	r5, [sp, #8]
 800a464:	9401      	str	r4, [sp, #4]
 800a466:	9000      	str	r0, [sp, #0]
 800a468:	4b09      	ldr	r3, [pc, #36]	; (800a490 <OnBeaconStatusChange+0xc8>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	2100      	movs	r1, #0
 800a46e:	2002      	movs	r0, #2
 800a470:	f011 fa52 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a474:	e006      	b.n	800a484 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <OnBeaconStatusChange+0xcc>)
 800a478:	2200      	movs	r2, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	2002      	movs	r0, #2
 800a47e:	f011 fa4b 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a482:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a484:	bf00      	nop
 800a486:	371c      	adds	r7, #28
 800a488:	46bd      	mov	sp, r7
 800a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48c:	0801c25c 	.word	0x0801c25c
 800a490:	0801c274 	.word	0x0801c274
 800a494:	0801c2e8 	.word	0x0801c2e8

0800a498 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800a49c:	bf00      	nop
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	4a06      	ldr	r2, [pc, #24]	; (800a4cc <OnClassChange+0x28>)
 800a4b2:	5cd3      	ldrb	r3, [r2, r3]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <OnClassChange+0x2c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2002      	movs	r0, #2
 800a4be:	f011 fa2b 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a4c2:	bf00      	nop
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0801c324 	.word	0x0801c324
 800a4d0:	0801c308 	.word	0x0801c308

0800a4d4 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a4d8:	2100      	movs	r1, #0
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f010 feec 	bl	801b2b8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a4e0:	bf00      	nop
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a4ec:	4a0d      	ldr	r2, [pc, #52]	; (800a524 <OnTxPeriodicityChanged+0x40>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <OnTxPeriodicityChanged+0x40>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d103      	bne.n	800a502 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <OnTxPeriodicityChanged+0x40>)
 800a4fc:	f242 7210 	movw	r2, #10000	; 0x2710
 800a500:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a502:	4809      	ldr	r0, [pc, #36]	; (800a528 <OnTxPeriodicityChanged+0x44>)
 800a504:	f010 fffe 	bl	801b504 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a508:	4b06      	ldr	r3, [pc, #24]	; (800a524 <OnTxPeriodicityChanged+0x40>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4619      	mov	r1, r3
 800a50e:	4806      	ldr	r0, [pc, #24]	; (800a528 <OnTxPeriodicityChanged+0x44>)
 800a510:	f011 f868 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a514:	4804      	ldr	r0, [pc, #16]	; (800a528 <OnTxPeriodicityChanged+0x44>)
 800a516:	f010 ff87 	bl	801b428 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000088 	.word	0x20000088
 800a528:	20000334 	.word	0x20000334

0800a52c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a536:	4a04      	ldr	r2, [pc, #16]	; (800a548 <OnTxFrameCtrlChanged+0x1c>)
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	bc80      	pop	{r7}
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000070 	.word	0x20000070

0800a54c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a556:	4a04      	ldr	r2, [pc, #16]	; (800a568 <OnPingSlotPeriodicityChanged+0x1c>)
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	bc80      	pop	{r7}
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	20000070 	.word	0x20000070

0800a56c <OnSystemReset>:

static void OnSystemReset(void)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a570:	f002 fce9 	bl	800cf46 <LmHandlerHalt>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <OnSystemReset+0x1c>
 800a57a:	f001 ff8d 	bl	800c498 <LmHandlerJoinStatus>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a584:	f7ff faf2 	bl	8009b6c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a588:	bf00      	nop
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <StopJoin>:

static void StopJoin(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a590:	4817      	ldr	r0, [pc, #92]	; (800a5f0 <StopJoin+0x64>)
 800a592:	f010 ffb7 	bl	801b504 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a596:	f002 fcc9 	bl	800cf2c <LmHandlerStop>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a5a0:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <StopJoin+0x68>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	2002      	movs	r0, #2
 800a5a8:	f011 f9b6 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
 800a5ac:	e01a      	b.n	800a5e4 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <StopJoin+0x6c>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	2002      	movs	r0, #2
 800a5b6:	f011 f9af 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a5ba:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <StopJoin+0x70>)
 800a5bc:	2201      	movs	r2, #1
 800a5be:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <StopJoin+0x74>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	2002      	movs	r0, #2
 800a5c8:	f011 f9a6 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a5cc:	480d      	ldr	r0, [pc, #52]	; (800a604 <StopJoin+0x78>)
 800a5ce:	f001 fd69 	bl	800c0a4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <StopJoin+0x70>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 febb 	bl	800c354 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a5de:	4804      	ldr	r0, [pc, #16]	; (800a5f0 <StopJoin+0x64>)
 800a5e0:	f010 ff22 	bl	801b428 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a5e4:	4808      	ldr	r0, [pc, #32]	; (800a608 <StopJoin+0x7c>)
 800a5e6:	f010 ff1f 	bl	801b428 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a5ea:	bf00      	nop
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20000334 	.word	0x20000334
 800a5f4:	0801c328 	.word	0x0801c328
 800a5f8:	0801c348 	.word	0x0801c348
 800a5fc:	20000020 	.word	0x20000020
 800a600:	0801c35c 	.word	0x0801c35c
 800a604:	20000070 	.word	0x20000070
 800a608:	2000034c 	.word	0x2000034c

0800a60c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a614:	4b05      	ldr	r3, [pc, #20]	; (800a62c <OnStopJoinTimerEvent+0x20>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d103      	bne.n	800a624 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a61c:	2100      	movs	r1, #0
 800a61e:	2008      	movs	r0, #8
 800a620:	f010 fe4a 	bl	801b2b8 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20000020 	.word	0x20000020

0800a630 <StoreContext>:

static void StoreContext(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a636:	23ff      	movs	r3, #255	; 0xff
 800a638:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a63a:	f002 fcb9 	bl	800cfb0 <LmHandlerNvmDataStore>
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a646:	f113 0f08 	cmn.w	r3, #8
 800a64a:	d106      	bne.n	800a65a <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a64c:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <StoreContext+0x48>)
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	2002      	movs	r0, #2
 800a654:	f011 f960 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a658:	e00a      	b.n	800a670 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a65a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a662:	d105      	bne.n	800a670 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <StoreContext+0x4c>)
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	2002      	movs	r0, #2
 800a66c:	f011 f954 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	0801c37c 	.word	0x0801c37c
 800a67c:	0801c394 	.word	0x0801c394

0800a680 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d106      	bne.n	800a69e <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a690:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <OnNvmDataChange+0x34>)
 800a692:	2200      	movs	r2, #0
 800a694:	2100      	movs	r1, #0
 800a696:	2002      	movs	r0, #2
 800a698:	f011 f93e 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a69c:	e005      	b.n	800a6aa <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a69e:	4b06      	ldr	r3, [pc, #24]	; (800a6b8 <OnNvmDataChange+0x38>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	2002      	movs	r0, #2
 800a6a6:	f011 f937 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800a6aa:	bf00      	nop
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0801c3ac 	.word	0x0801c3ac
 800a6b8:	0801c3c0 	.word	0x0801c3c0

0800a6bc <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800a6c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a6ca:	4807      	ldr	r0, [pc, #28]	; (800a6e8 <OnStoreContextRequest+0x2c>)
 800a6cc:	f7f6 fd8c 	bl	80011e8 <FLASH_IF_Erase>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d104      	bne.n	800a6e0 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	4803      	ldr	r0, [pc, #12]	; (800a6e8 <OnStoreContextRequest+0x2c>)
 800a6dc:	f7f6 fd34 	bl	8001148 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a6e0:	bf00      	nop
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	0803f000 	.word	0x0803f000

0800a6ec <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4903      	ldr	r1, [pc, #12]	; (800a708 <OnRestoreContextRequest+0x1c>)
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7f6 fd4c 	bl	8001198 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0803f000 	.word	0x0803f000

0800a70c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800a710:	4b15      	ldr	r3, [pc, #84]	; (800a768 <LoraInfo_Init+0x5c>)
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a716:	4b14      	ldr	r3, [pc, #80]	; (800a768 <LoraInfo_Init+0x5c>)
 800a718:	2200      	movs	r2, #0
 800a71a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a71c:	4b12      	ldr	r3, [pc, #72]	; (800a768 <LoraInfo_Init+0x5c>)
 800a71e:	2200      	movs	r2, #0
 800a720:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a722:	4b11      	ldr	r3, [pc, #68]	; (800a768 <LoraInfo_Init+0x5c>)
 800a724:	2200      	movs	r2, #0
 800a726:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800a728:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <LoraInfo_Init+0x5c>)
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a730:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <LoraInfo_Init+0x5c>)
 800a732:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a734:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <LoraInfo_Init+0x5c>)
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10c      	bne.n	800a756 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a73c:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <LoraInfo_Init+0x60>)
 800a73e:	2200      	movs	r2, #0
 800a740:	2100      	movs	r1, #0
 800a742:	2000      	movs	r0, #0
 800a744:	f011 f8e8 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a748:	bf00      	nop
 800a74a:	f011 f8d3 	bl	801b8f4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b01      	cmp	r3, #1
 800a752:	d1fa      	bne.n	800a74a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a754:	e7fe      	b.n	800a754 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a756:	4b04      	ldr	r3, [pc, #16]	; (800a768 <LoraInfo_Init+0x5c>)
 800a758:	2200      	movs	r2, #0
 800a75a:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <LoraInfo_Init+0x5c>)
 800a75e:	2201      	movs	r2, #1
 800a760:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a762:	bf00      	nop
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200004a0 	.word	0x200004a0
 800a76c:	0801c3d4 	.word	0x0801c3d4

0800a770 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a774:	4b02      	ldr	r3, [pc, #8]	; (800a780 <LoraInfo_GetPtr+0x10>)
}
 800a776:	4618      	mov	r0, r3
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	200004a0 	.word	0x200004a0

0800a784 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a788:	f7f8 f8bb 	bl	8002902 <BSP_RADIO_Init>
 800a78c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a78e:	4618      	mov	r0, r3
 800a790:	bd80      	pop	{r7, pc}

0800a792 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	4603      	mov	r3, r0
 800a79a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a79c:	79fb      	ldrb	r3, [r7, #7]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7f8 f8e0 	bl	8002964 <BSP_RADIO_ConfigRFSwitch>
 800a7a4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a7b2:	f7f8 f925 	bl	8002a00 <BSP_RADIO_GetTxConfig>
 800a7b6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a7c0:	f7f8 f925 	bl	8002a0e <BSP_RADIO_IsTCXO>
 800a7c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a7ce:	f7f8 f925 	bl	8002a1c <BSP_RADIO_IsDCDC>
 800a7d2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f8 f920 	bl	8002a2a <BSP_RADIO_GetRFOMaxPowerConfig>
 800a7ea:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	33f1      	adds	r3, #241	; 0xf1
 800a800:	2210      	movs	r2, #16
 800a802:	2100      	movs	r1, #0
 800a804:	4618      	mov	r0, r3
 800a806:	f00c fd1d 	bl	8017244 <memset1>
    ctx->M_n = 0;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	22f0      	movs	r2, #240	; 0xf0
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f00c fd13 	bl	8017244 <memset1>
}
 800a81e:	bf00      	nop
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	461a      	mov	r2, r3
 800a834:	2110      	movs	r1, #16
 800a836:	6838      	ldr	r0, [r7, #0]
 800a838:	f000 fe5c 	bl	800b4f4 <lorawan_aes_set_key>
}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08c      	sub	sp, #48	; 0x30
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80a1 	beq.w	800a99e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a862:	f1c3 0310 	rsb	r3, r3, #16
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	4293      	cmp	r3, r2
 800a86a:	bf28      	it	cs
 800a86c:	4613      	movcs	r3, r2
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a87c:	4413      	add	r3, r2
 800a87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a880:	b292      	uxth	r2, r2
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	4618      	mov	r0, r3
 800a886:	f00c fca2 	bl	80171ce <memcpy1>
        ctx->M_n += mlen;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	441a      	add	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8a0:	2b0f      	cmp	r3, #15
 800a8a2:	f240 808d 	bls.w	800a9c0 <AES_CMAC_Update+0x17c>
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	f000 8088 	beq.w	800a9c0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8b4:	e015      	b.n	800a8e2 <AES_CMAC_Update+0x9e>
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	4413      	add	r3, r2
 800a8bc:	33f1      	adds	r3, #241	; 0xf1
 800a8be:	781a      	ldrb	r2, [r3, #0]
 800a8c0:	68f9      	ldr	r1, [r7, #12]
 800a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c4:	440b      	add	r3, r1
 800a8c6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	4053      	eors	r3, r2
 800a8ce:	b2d9      	uxtb	r1, r3
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	4413      	add	r3, r2
 800a8d6:	33f1      	adds	r3, #241	; 0xf1
 800a8d8:	460a      	mov	r2, r1
 800a8da:	701a      	strb	r2, [r3, #0]
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	3301      	adds	r3, #1
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e4:	2b0f      	cmp	r3, #15
 800a8e6:	dde6      	ble.n	800a8b6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a8ee:	f107 0314 	add.w	r3, r7, #20
 800a8f2:	2210      	movs	r2, #16
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f00c fc6a 	bl	80171ce <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	f107 0114 	add.w	r1, r7, #20
 800a900:	f107 0314 	add.w	r3, r7, #20
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fed3 	bl	800b6b0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	33f1      	adds	r3, #241	; 0xf1
 800a90e:	f107 0114 	add.w	r1, r7, #20
 800a912:	2210      	movs	r2, #16
 800a914:	4618      	mov	r0, r3
 800a916:	f00c fc5a 	bl	80171ce <memcpy1>

        data += mlen;
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	4413      	add	r3, r2
 800a920:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a92a:	e038      	b.n	800a99e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a92c:	2300      	movs	r3, #0
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a930:	e013      	b.n	800a95a <AES_CMAC_Update+0x116>
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	4413      	add	r3, r2
 800a938:	33f1      	adds	r3, #241	; 0xf1
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	440b      	add	r3, r1
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	4053      	eors	r3, r2
 800a946:	b2d9      	uxtb	r1, r3
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	4413      	add	r3, r2
 800a94e:	33f1      	adds	r3, #241	; 0xf1
 800a950:	460a      	mov	r2, r1
 800a952:	701a      	strb	r2, [r3, #0]
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	3301      	adds	r3, #1
 800a958:	62bb      	str	r3, [r7, #40]	; 0x28
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	2b0f      	cmp	r3, #15
 800a95e:	dde8      	ble.n	800a932 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a966:	f107 0314 	add.w	r3, r7, #20
 800a96a:	2210      	movs	r2, #16
 800a96c:	4618      	mov	r0, r3
 800a96e:	f00c fc2e 	bl	80171ce <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	f107 0114 	add.w	r1, r7, #20
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fe97 	bl	800b6b0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	33f1      	adds	r3, #241	; 0xf1
 800a986:	f107 0114 	add.w	r1, r7, #20
 800a98a:	2210      	movs	r2, #16
 800a98c:	4618      	mov	r0, r3
 800a98e:	f00c fc1e 	bl	80171ce <memcpy1>

        data += 16;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	3310      	adds	r3, #16
 800a996:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3b10      	subs	r3, #16
 800a99c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b10      	cmp	r3, #16
 800a9a2:	d8c3      	bhi.n	800a92c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	b292      	uxth	r2, r2
 800a9ae:	68b9      	ldr	r1, [r7, #8]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f00c fc0c 	bl	80171ce <memcpy1>
    ctx->M_n = len;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a9be:	e000      	b.n	800a9c2 <AES_CMAC_Update+0x17e>
            return;
 800a9c0:	bf00      	nop
}
 800a9c2:	3730      	adds	r7, #48	; 0x30
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b092      	sub	sp, #72	; 0x48
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a9d2:	f107 031c 	add.w	r3, r7, #28
 800a9d6:	2210      	movs	r2, #16
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f00c fc32 	bl	8017244 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	f107 011c 	add.w	r1, r7, #28
 800a9e6:	f107 031c 	add.w	r3, r7, #28
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fe60 	bl	800b6b0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a9f0:	7f3b      	ldrb	r3, [r7, #28]
 800a9f2:	b25b      	sxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	da30      	bge.n	800aa5a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a9fc:	e01b      	b.n	800aa36 <AES_CMAC_Final+0x6e>
 800a9fe:	f107 021c 	add.w	r2, r7, #28
 800aa02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa04:	4413      	add	r3, r2
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	b25a      	sxtb	r2, r3
 800aa0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0e:	3301      	adds	r3, #1
 800aa10:	3348      	adds	r3, #72	; 0x48
 800aa12:	443b      	add	r3, r7
 800aa14:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aa18:	09db      	lsrs	r3, r3, #7
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	b25b      	sxtb	r3, r3
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	b2d9      	uxtb	r1, r3
 800aa24:	f107 021c 	add.w	r2, r7, #28
 800aa28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa2a:	4413      	add	r3, r2
 800aa2c:	460a      	mov	r2, r1
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa32:	3301      	adds	r3, #1
 800aa34:	647b      	str	r3, [r7, #68]	; 0x44
 800aa36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa38:	2b0e      	cmp	r3, #14
 800aa3a:	dde0      	ble.n	800a9fe <AES_CMAC_Final+0x36>
 800aa3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800aa48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa4c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800aa50:	43db      	mvns	r3, r3
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa58:	e027      	b.n	800aaaa <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa5e:	e01b      	b.n	800aa98 <AES_CMAC_Final+0xd0>
 800aa60:	f107 021c 	add.w	r2, r7, #28
 800aa64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa66:	4413      	add	r3, r2
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	b25a      	sxtb	r2, r3
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa70:	3301      	adds	r3, #1
 800aa72:	3348      	adds	r3, #72	; 0x48
 800aa74:	443b      	add	r3, r7
 800aa76:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aa7a:	09db      	lsrs	r3, r3, #7
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	b25b      	sxtb	r3, r3
 800aa80:	4313      	orrs	r3, r2
 800aa82:	b25b      	sxtb	r3, r3
 800aa84:	b2d9      	uxtb	r1, r3
 800aa86:	f107 021c 	add.w	r2, r7, #28
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8c:	4413      	add	r3, r2
 800aa8e:	460a      	mov	r2, r1
 800aa90:	701a      	strb	r2, [r3, #0]
 800aa92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa94:	3301      	adds	r3, #1
 800aa96:	643b      	str	r3, [r7, #64]	; 0x40
 800aa98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9a:	2b0e      	cmp	r3, #14
 800aa9c:	dde0      	ble.n	800aa60 <AES_CMAC_Final+0x98>
 800aa9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	d11d      	bne.n	800aaf0 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab8:	e016      	b.n	800aae8 <AES_CMAC_Final+0x120>
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aabe:	4413      	add	r3, r2
 800aac0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aac4:	781a      	ldrb	r2, [r3, #0]
 800aac6:	f107 011c 	add.w	r1, r7, #28
 800aaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aacc:	440b      	add	r3, r1
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	4053      	eors	r3, r2
 800aad2:	b2d9      	uxtb	r1, r3
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad8:	4413      	add	r3, r2
 800aada:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aade:	460a      	mov	r2, r1
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae4:	3301      	adds	r3, #1
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaea:	2b0f      	cmp	r3, #15
 800aaec:	dde5      	ble.n	800aaba <AES_CMAC_Final+0xf2>
 800aaee:	e096      	b.n	800ac1e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800aaf0:	7f3b      	ldrb	r3, [r7, #28]
 800aaf2:	b25b      	sxtb	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	da30      	bge.n	800ab5a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63bb      	str	r3, [r7, #56]	; 0x38
 800aafc:	e01b      	b.n	800ab36 <AES_CMAC_Final+0x16e>
 800aafe:	f107 021c 	add.w	r2, r7, #28
 800ab02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab04:	4413      	add	r3, r2
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	b25a      	sxtb	r2, r3
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	3301      	adds	r3, #1
 800ab10:	3348      	adds	r3, #72	; 0x48
 800ab12:	443b      	add	r3, r7
 800ab14:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ab18:	09db      	lsrs	r3, r3, #7
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	b25b      	sxtb	r3, r3
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	b2d9      	uxtb	r1, r3
 800ab24:	f107 021c 	add.w	r2, r7, #28
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	4413      	add	r3, r2
 800ab2c:	460a      	mov	r2, r1
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	3301      	adds	r3, #1
 800ab34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	2b0e      	cmp	r3, #14
 800ab3a:	dde0      	ble.n	800aafe <AES_CMAC_Final+0x136>
 800ab3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ab48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab4c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ab50:	43db      	mvns	r3, r3
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab58:	e027      	b.n	800abaa <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab5e:	e01b      	b.n	800ab98 <AES_CMAC_Final+0x1d0>
 800ab60:	f107 021c 	add.w	r2, r7, #28
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	4413      	add	r3, r2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	005b      	lsls	r3, r3, #1
 800ab6c:	b25a      	sxtb	r2, r3
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab70:	3301      	adds	r3, #1
 800ab72:	3348      	adds	r3, #72	; 0x48
 800ab74:	443b      	add	r3, r7
 800ab76:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ab7a:	09db      	lsrs	r3, r3, #7
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	b25b      	sxtb	r3, r3
 800ab80:	4313      	orrs	r3, r2
 800ab82:	b25b      	sxtb	r3, r3
 800ab84:	b2d9      	uxtb	r1, r3
 800ab86:	f107 021c 	add.w	r2, r7, #28
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	4413      	add	r3, r2
 800ab8e:	460a      	mov	r2, r1
 800ab90:	701a      	strb	r2, [r3, #0]
 800ab92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab94:	3301      	adds	r3, #1
 800ab96:	637b      	str	r3, [r7, #52]	; 0x34
 800ab98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9a:	2b0e      	cmp	r3, #14
 800ab9c:	dde0      	ble.n	800ab60 <AES_CMAC_Final+0x198>
 800ab9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	4413      	add	r3, r2
 800abb4:	2280      	movs	r2, #128	; 0x80
 800abb6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800abba:	e007      	b.n	800abcc <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	4413      	add	r3, r2
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800abe0:	2b0f      	cmp	r3, #15
 800abe2:	d9eb      	bls.n	800abbc <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800abe4:	2300      	movs	r3, #0
 800abe6:	633b      	str	r3, [r7, #48]	; 0x30
 800abe8:	e016      	b.n	800ac18 <AES_CMAC_Final+0x250>
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	4413      	add	r3, r2
 800abf0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800abf4:	781a      	ldrb	r2, [r3, #0]
 800abf6:	f107 011c 	add.w	r1, r7, #28
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	440b      	add	r3, r1
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	4053      	eors	r3, r2
 800ac02:	b2d9      	uxtb	r1, r3
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	4413      	add	r3, r2
 800ac0a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac0e:	460a      	mov	r2, r1
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	3301      	adds	r3, #1
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	dde5      	ble.n	800abea <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ac1e:	2300      	movs	r3, #0
 800ac20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac22:	e015      	b.n	800ac50 <AES_CMAC_Final+0x288>
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	4413      	add	r3, r2
 800ac2a:	33f1      	adds	r3, #241	; 0xf1
 800ac2c:	781a      	ldrb	r2, [r3, #0]
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	440b      	add	r3, r1
 800ac34:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	4053      	eors	r3, r2
 800ac3c:	b2d9      	uxtb	r1, r3
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	4413      	add	r3, r2
 800ac44:	33f1      	adds	r3, #241	; 0xf1
 800ac46:	460a      	mov	r2, r1
 800ac48:	701a      	strb	r2, [r3, #0]
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	2b0f      	cmp	r3, #15
 800ac54:	dde6      	ble.n	800ac24 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ac5c:	f107 030c 	add.w	r3, r7, #12
 800ac60:	2210      	movs	r2, #16
 800ac62:	4618      	mov	r0, r3
 800ac64:	f00c fab3 	bl	80171ce <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	f107 030c 	add.w	r3, r7, #12
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fd1d 	bl	800b6b0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ac76:	f107 031c 	add.w	r3, r7, #28
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f00c fae0 	bl	8017244 <memset1>
}
 800ac84:	bf00      	nop
 800ac86:	3748      	adds	r7, #72	; 0x48
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781a      	ldrb	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3301      	adds	r3, #1
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	7852      	ldrb	r2, [r2, #1]
 800aca6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3302      	adds	r3, #2
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	7892      	ldrb	r2, [r2, #2]
 800acb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3303      	adds	r3, #3
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	78d2      	ldrb	r2, [r2, #3]
 800acba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3304      	adds	r3, #4
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	7912      	ldrb	r2, [r2, #4]
 800acc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3305      	adds	r3, #5
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	7952      	ldrb	r2, [r2, #5]
 800acce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3306      	adds	r3, #6
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	7992      	ldrb	r2, [r2, #6]
 800acd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3307      	adds	r3, #7
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	79d2      	ldrb	r2, [r2, #7]
 800ace2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3308      	adds	r3, #8
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	7a12      	ldrb	r2, [r2, #8]
 800acec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3309      	adds	r3, #9
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	7a52      	ldrb	r2, [r2, #9]
 800acf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	330a      	adds	r3, #10
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	7a92      	ldrb	r2, [r2, #10]
 800ad00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	330b      	adds	r3, #11
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	7ad2      	ldrb	r2, [r2, #11]
 800ad0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	330c      	adds	r3, #12
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	7b12      	ldrb	r2, [r2, #12]
 800ad14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	330d      	adds	r3, #13
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	7b52      	ldrb	r2, [r2, #13]
 800ad1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	330e      	adds	r3, #14
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	7b92      	ldrb	r2, [r2, #14]
 800ad28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	330f      	adds	r3, #15
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	7bd2      	ldrb	r2, [r2, #15]
 800ad32:	701a      	strb	r2, [r3, #0]
#endif
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bc80      	pop	{r7}
 800ad3c:	4770      	bx	lr

0800ad3e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b085      	sub	sp, #20
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ad4c:	e007      	b.n	800ad5e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	1c53      	adds	r3, r2, #1
 800ad52:	60bb      	str	r3, [r7, #8]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	1c59      	adds	r1, r3, #1
 800ad58:	60f9      	str	r1, [r7, #12]
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	1e5a      	subs	r2, r3, #1
 800ad62:	71fa      	strb	r2, [r7, #7]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1f2      	bne.n	800ad4e <copy_block_nn+0x10>
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bc80      	pop	{r7}
 800ad72:	4770      	bx	lr

0800ad74 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	4053      	eors	r3, r2
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3301      	adds	r3, #1
 800ad92:	7819      	ldrb	r1, [r3, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	3301      	adds	r3, #1
 800ad98:	781a      	ldrb	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	404a      	eors	r2, r1
 800ada0:	b2d2      	uxtb	r2, r2
 800ada2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	3302      	adds	r3, #2
 800ada8:	7819      	ldrb	r1, [r3, #0]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	3302      	adds	r3, #2
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3302      	adds	r3, #2
 800adb4:	404a      	eors	r2, r1
 800adb6:	b2d2      	uxtb	r2, r2
 800adb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3303      	adds	r3, #3
 800adbe:	7819      	ldrb	r1, [r3, #0]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	3303      	adds	r3, #3
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3303      	adds	r3, #3
 800adca:	404a      	eors	r2, r1
 800adcc:	b2d2      	uxtb	r2, r2
 800adce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3304      	adds	r3, #4
 800add4:	7819      	ldrb	r1, [r3, #0]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	3304      	adds	r3, #4
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
 800ade0:	404a      	eors	r2, r1
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3305      	adds	r3, #5
 800adea:	7819      	ldrb	r1, [r3, #0]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	3305      	adds	r3, #5
 800adf0:	781a      	ldrb	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3305      	adds	r3, #5
 800adf6:	404a      	eors	r2, r1
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3306      	adds	r3, #6
 800ae00:	7819      	ldrb	r1, [r3, #0]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	3306      	adds	r3, #6
 800ae06:	781a      	ldrb	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3306      	adds	r3, #6
 800ae0c:	404a      	eors	r2, r1
 800ae0e:	b2d2      	uxtb	r2, r2
 800ae10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3307      	adds	r3, #7
 800ae16:	7819      	ldrb	r1, [r3, #0]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	3307      	adds	r3, #7
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3307      	adds	r3, #7
 800ae22:	404a      	eors	r2, r1
 800ae24:	b2d2      	uxtb	r2, r2
 800ae26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	7819      	ldrb	r1, [r3, #0]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	3308      	adds	r3, #8
 800ae32:	781a      	ldrb	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3308      	adds	r3, #8
 800ae38:	404a      	eors	r2, r1
 800ae3a:	b2d2      	uxtb	r2, r2
 800ae3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3309      	adds	r3, #9
 800ae42:	7819      	ldrb	r1, [r3, #0]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	3309      	adds	r3, #9
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3309      	adds	r3, #9
 800ae4e:	404a      	eors	r2, r1
 800ae50:	b2d2      	uxtb	r2, r2
 800ae52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	330a      	adds	r3, #10
 800ae58:	7819      	ldrb	r1, [r3, #0]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	330a      	adds	r3, #10
 800ae5e:	781a      	ldrb	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	330a      	adds	r3, #10
 800ae64:	404a      	eors	r2, r1
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	330b      	adds	r3, #11
 800ae6e:	7819      	ldrb	r1, [r3, #0]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	330b      	adds	r3, #11
 800ae74:	781a      	ldrb	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	330b      	adds	r3, #11
 800ae7a:	404a      	eors	r2, r1
 800ae7c:	b2d2      	uxtb	r2, r2
 800ae7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	330c      	adds	r3, #12
 800ae84:	7819      	ldrb	r1, [r3, #0]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	330c      	adds	r3, #12
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	330c      	adds	r3, #12
 800ae90:	404a      	eors	r2, r1
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	330d      	adds	r3, #13
 800ae9a:	7819      	ldrb	r1, [r3, #0]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	330d      	adds	r3, #13
 800aea0:	781a      	ldrb	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	330d      	adds	r3, #13
 800aea6:	404a      	eors	r2, r1
 800aea8:	b2d2      	uxtb	r2, r2
 800aeaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	330e      	adds	r3, #14
 800aeb0:	7819      	ldrb	r1, [r3, #0]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	330e      	adds	r3, #14
 800aeb6:	781a      	ldrb	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	330e      	adds	r3, #14
 800aebc:	404a      	eors	r2, r1
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	330f      	adds	r3, #15
 800aec6:	7819      	ldrb	r1, [r3, #0]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	330f      	adds	r3, #15
 800aecc:	781a      	ldrb	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	330f      	adds	r3, #15
 800aed2:	404a      	eors	r2, r1
 800aed4:	b2d2      	uxtb	r2, r2
 800aed6:	701a      	strb	r2, [r3, #0]
#endif
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr

0800aee2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800aee2:	b480      	push	{r7}
 800aee4:	b085      	sub	sp, #20
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	781a      	ldrb	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	4053      	eors	r3, r2
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	3301      	adds	r3, #1
 800af02:	7819      	ldrb	r1, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3301      	adds	r3, #1
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	404a      	eors	r2, r1
 800af10:	b2d2      	uxtb	r2, r2
 800af12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3302      	adds	r3, #2
 800af18:	7819      	ldrb	r1, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3302      	adds	r3, #2
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3302      	adds	r3, #2
 800af24:	404a      	eors	r2, r1
 800af26:	b2d2      	uxtb	r2, r2
 800af28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3303      	adds	r3, #3
 800af2e:	7819      	ldrb	r1, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3303      	adds	r3, #3
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3303      	adds	r3, #3
 800af3a:	404a      	eors	r2, r1
 800af3c:	b2d2      	uxtb	r2, r2
 800af3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3304      	adds	r3, #4
 800af44:	7819      	ldrb	r1, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3304      	adds	r3, #4
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3304      	adds	r3, #4
 800af50:	404a      	eors	r2, r1
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	3305      	adds	r3, #5
 800af5a:	7819      	ldrb	r1, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3305      	adds	r3, #5
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3305      	adds	r3, #5
 800af66:	404a      	eors	r2, r1
 800af68:	b2d2      	uxtb	r2, r2
 800af6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	3306      	adds	r3, #6
 800af70:	7819      	ldrb	r1, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3306      	adds	r3, #6
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3306      	adds	r3, #6
 800af7c:	404a      	eors	r2, r1
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	3307      	adds	r3, #7
 800af86:	7819      	ldrb	r1, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3307      	adds	r3, #7
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3307      	adds	r3, #7
 800af92:	404a      	eors	r2, r1
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	3308      	adds	r3, #8
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3308      	adds	r3, #8
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3308      	adds	r3, #8
 800afa8:	404a      	eors	r2, r1
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	3309      	adds	r3, #9
 800afb2:	7819      	ldrb	r1, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3309      	adds	r3, #9
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3309      	adds	r3, #9
 800afbe:	404a      	eors	r2, r1
 800afc0:	b2d2      	uxtb	r2, r2
 800afc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	330a      	adds	r3, #10
 800afc8:	7819      	ldrb	r1, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	330a      	adds	r3, #10
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	330a      	adds	r3, #10
 800afd4:	404a      	eors	r2, r1
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	330b      	adds	r3, #11
 800afde:	7819      	ldrb	r1, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	330b      	adds	r3, #11
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	330b      	adds	r3, #11
 800afea:	404a      	eors	r2, r1
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	330c      	adds	r3, #12
 800aff4:	7819      	ldrb	r1, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	330c      	adds	r3, #12
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	330c      	adds	r3, #12
 800b000:	404a      	eors	r2, r1
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	330d      	adds	r3, #13
 800b00a:	7819      	ldrb	r1, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	330d      	adds	r3, #13
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	330d      	adds	r3, #13
 800b016:	404a      	eors	r2, r1
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	330e      	adds	r3, #14
 800b020:	7819      	ldrb	r1, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	330e      	adds	r3, #14
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	330e      	adds	r3, #14
 800b02c:	404a      	eors	r2, r1
 800b02e:	b2d2      	uxtb	r2, r2
 800b030:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	330f      	adds	r3, #15
 800b036:	7819      	ldrb	r1, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	330f      	adds	r3, #15
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	330f      	adds	r3, #15
 800b042:	404a      	eors	r2, r1
 800b044:	b2d2      	uxtb	r2, r2
 800b046:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b048:	bf00      	nop
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr

0800b052 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fe88 	bl	800ad74 <xor_block>
}
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	4b48      	ldr	r3, [pc, #288]	; (800b19c <shift_sub_rows+0x130>)
 800b07c:	5c9a      	ldrb	r2, [r3, r2]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	701a      	strb	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3304      	adds	r3, #4
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	4619      	mov	r1, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3304      	adds	r3, #4
 800b08e:	4a43      	ldr	r2, [pc, #268]	; (800b19c <shift_sub_rows+0x130>)
 800b090:	5c52      	ldrb	r2, [r2, r1]
 800b092:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3308      	adds	r3, #8
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	4a3e      	ldr	r2, [pc, #248]	; (800b19c <shift_sub_rows+0x130>)
 800b0a2:	5c52      	ldrb	r2, [r2, r1]
 800b0a4:	701a      	strb	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	330c      	adds	r3, #12
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	4a3a      	ldr	r2, [pc, #232]	; (800b19c <shift_sub_rows+0x130>)
 800b0b4:	5c52      	ldrb	r2, [r2, r1]
 800b0b6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	785b      	ldrb	r3, [r3, #1]
 800b0bc:	73fb      	strb	r3, [r7, #15]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3305      	adds	r3, #5
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	4a34      	ldr	r2, [pc, #208]	; (800b19c <shift_sub_rows+0x130>)
 800b0cc:	5c52      	ldrb	r2, [r2, r1]
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3309      	adds	r3, #9
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3305      	adds	r3, #5
 800b0dc:	4a2f      	ldr	r2, [pc, #188]	; (800b19c <shift_sub_rows+0x130>)
 800b0de:	5c52      	ldrb	r2, [r2, r1]
 800b0e0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	330d      	adds	r3, #13
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3309      	adds	r3, #9
 800b0ee:	4a2b      	ldr	r2, [pc, #172]	; (800b19c <shift_sub_rows+0x130>)
 800b0f0:	5c52      	ldrb	r2, [r2, r1]
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	7bfa      	ldrb	r2, [r7, #15]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	330d      	adds	r3, #13
 800b0fa:	4928      	ldr	r1, [pc, #160]	; (800b19c <shift_sub_rows+0x130>)
 800b0fc:	5c8a      	ldrb	r2, [r1, r2]
 800b0fe:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	789b      	ldrb	r3, [r3, #2]
 800b104:	73fb      	strb	r3, [r7, #15]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	330a      	adds	r3, #10
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	4619      	mov	r1, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3302      	adds	r3, #2
 800b112:	4a22      	ldr	r2, [pc, #136]	; (800b19c <shift_sub_rows+0x130>)
 800b114:	5c52      	ldrb	r2, [r2, r1]
 800b116:	701a      	strb	r2, [r3, #0]
 800b118:	7bfa      	ldrb	r2, [r7, #15]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	330a      	adds	r3, #10
 800b11e:	491f      	ldr	r1, [pc, #124]	; (800b19c <shift_sub_rows+0x130>)
 800b120:	5c8a      	ldrb	r2, [r1, r2]
 800b122:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	799b      	ldrb	r3, [r3, #6]
 800b128:	73fb      	strb	r3, [r7, #15]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	330e      	adds	r3, #14
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4619      	mov	r1, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3306      	adds	r3, #6
 800b136:	4a19      	ldr	r2, [pc, #100]	; (800b19c <shift_sub_rows+0x130>)
 800b138:	5c52      	ldrb	r2, [r2, r1]
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	7bfa      	ldrb	r2, [r7, #15]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	330e      	adds	r3, #14
 800b142:	4916      	ldr	r1, [pc, #88]	; (800b19c <shift_sub_rows+0x130>)
 800b144:	5c8a      	ldrb	r2, [r1, r2]
 800b146:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7bdb      	ldrb	r3, [r3, #15]
 800b14c:	73fb      	strb	r3, [r7, #15]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	330b      	adds	r3, #11
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	330f      	adds	r3, #15
 800b15a:	4a10      	ldr	r2, [pc, #64]	; (800b19c <shift_sub_rows+0x130>)
 800b15c:	5c52      	ldrb	r2, [r2, r1]
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3307      	adds	r3, #7
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	4619      	mov	r1, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	330b      	adds	r3, #11
 800b16c:	4a0b      	ldr	r2, [pc, #44]	; (800b19c <shift_sub_rows+0x130>)
 800b16e:	5c52      	ldrb	r2, [r2, r1]
 800b170:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3303      	adds	r3, #3
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	4619      	mov	r1, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3307      	adds	r3, #7
 800b17e:	4a07      	ldr	r2, [pc, #28]	; (800b19c <shift_sub_rows+0x130>)
 800b180:	5c52      	ldrb	r2, [r2, r1]
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	7bfa      	ldrb	r2, [r7, #15]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3303      	adds	r3, #3
 800b18a:	4904      	ldr	r1, [pc, #16]	; (800b19c <shift_sub_rows+0x130>)
 800b18c:	5c8a      	ldrb	r2, [r1, r2]
 800b18e:	701a      	strb	r2, [r3, #0]
}
 800b190:	bf00      	nop
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	bc80      	pop	{r7}
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	0801c838 	.word	0x0801c838

0800b1a0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b1a8:	f107 0308 	add.w	r3, r7, #8
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff fd6c 	bl	800ac8c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b1b4:	7a3b      	ldrb	r3, [r7, #8]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4b9a      	ldr	r3, [pc, #616]	; (800b424 <mix_sub_columns+0x284>)
 800b1ba:	5c9a      	ldrb	r2, [r3, r2]
 800b1bc:	7b7b      	ldrb	r3, [r7, #13]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4b99      	ldr	r3, [pc, #612]	; (800b428 <mix_sub_columns+0x288>)
 800b1c2:	5c5b      	ldrb	r3, [r3, r1]
 800b1c4:	4053      	eors	r3, r2
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	7cbb      	ldrb	r3, [r7, #18]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4b97      	ldr	r3, [pc, #604]	; (800b42c <mix_sub_columns+0x28c>)
 800b1ce:	5c5b      	ldrb	r3, [r3, r1]
 800b1d0:	4053      	eors	r3, r2
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4b94      	ldr	r3, [pc, #592]	; (800b42c <mix_sub_columns+0x28c>)
 800b1da:	5c5b      	ldrb	r3, [r3, r1]
 800b1dc:	4053      	eors	r3, r2
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b1e4:	7a3b      	ldrb	r3, [r7, #8]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4b90      	ldr	r3, [pc, #576]	; (800b42c <mix_sub_columns+0x28c>)
 800b1ea:	5c9a      	ldrb	r2, [r3, r2]
 800b1ec:	7b7b      	ldrb	r3, [r7, #13]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4b8c      	ldr	r3, [pc, #560]	; (800b424 <mix_sub_columns+0x284>)
 800b1f2:	5c5b      	ldrb	r3, [r3, r1]
 800b1f4:	4053      	eors	r3, r2
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	7cbb      	ldrb	r3, [r7, #18]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4b8a      	ldr	r3, [pc, #552]	; (800b428 <mix_sub_columns+0x288>)
 800b1fe:	5c5b      	ldrb	r3, [r3, r1]
 800b200:	4053      	eors	r3, r2
 800b202:	b2d9      	uxtb	r1, r3
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	461a      	mov	r2, r3
 800b208:	4b88      	ldr	r3, [pc, #544]	; (800b42c <mix_sub_columns+0x28c>)
 800b20a:	5c9a      	ldrb	r2, [r3, r2]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3301      	adds	r3, #1
 800b210:	404a      	eors	r2, r1
 800b212:	b2d2      	uxtb	r2, r2
 800b214:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b216:	7a3b      	ldrb	r3, [r7, #8]
 800b218:	461a      	mov	r2, r3
 800b21a:	4b84      	ldr	r3, [pc, #528]	; (800b42c <mix_sub_columns+0x28c>)
 800b21c:	5c9a      	ldrb	r2, [r3, r2]
 800b21e:	7b7b      	ldrb	r3, [r7, #13]
 800b220:	4619      	mov	r1, r3
 800b222:	4b82      	ldr	r3, [pc, #520]	; (800b42c <mix_sub_columns+0x28c>)
 800b224:	5c5b      	ldrb	r3, [r3, r1]
 800b226:	4053      	eors	r3, r2
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	7cbb      	ldrb	r3, [r7, #18]
 800b22c:	4619      	mov	r1, r3
 800b22e:	4b7d      	ldr	r3, [pc, #500]	; (800b424 <mix_sub_columns+0x284>)
 800b230:	5c5b      	ldrb	r3, [r3, r1]
 800b232:	4053      	eors	r3, r2
 800b234:	b2d9      	uxtb	r1, r3
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	461a      	mov	r2, r3
 800b23a:	4b7b      	ldr	r3, [pc, #492]	; (800b428 <mix_sub_columns+0x288>)
 800b23c:	5c9a      	ldrb	r2, [r3, r2]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3302      	adds	r3, #2
 800b242:	404a      	eors	r2, r1
 800b244:	b2d2      	uxtb	r2, r2
 800b246:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b248:	7a3b      	ldrb	r3, [r7, #8]
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b76      	ldr	r3, [pc, #472]	; (800b428 <mix_sub_columns+0x288>)
 800b24e:	5c9a      	ldrb	r2, [r3, r2]
 800b250:	7b7b      	ldrb	r3, [r7, #13]
 800b252:	4619      	mov	r1, r3
 800b254:	4b75      	ldr	r3, [pc, #468]	; (800b42c <mix_sub_columns+0x28c>)
 800b256:	5c5b      	ldrb	r3, [r3, r1]
 800b258:	4053      	eors	r3, r2
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	7cbb      	ldrb	r3, [r7, #18]
 800b25e:	4619      	mov	r1, r3
 800b260:	4b72      	ldr	r3, [pc, #456]	; (800b42c <mix_sub_columns+0x28c>)
 800b262:	5c5b      	ldrb	r3, [r3, r1]
 800b264:	4053      	eors	r3, r2
 800b266:	b2d9      	uxtb	r1, r3
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	461a      	mov	r2, r3
 800b26c:	4b6d      	ldr	r3, [pc, #436]	; (800b424 <mix_sub_columns+0x284>)
 800b26e:	5c9a      	ldrb	r2, [r3, r2]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3303      	adds	r3, #3
 800b274:	404a      	eors	r2, r1
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b27a:	7b3b      	ldrb	r3, [r7, #12]
 800b27c:	461a      	mov	r2, r3
 800b27e:	4b69      	ldr	r3, [pc, #420]	; (800b424 <mix_sub_columns+0x284>)
 800b280:	5c9a      	ldrb	r2, [r3, r2]
 800b282:	7c7b      	ldrb	r3, [r7, #17]
 800b284:	4619      	mov	r1, r3
 800b286:	4b68      	ldr	r3, [pc, #416]	; (800b428 <mix_sub_columns+0x288>)
 800b288:	5c5b      	ldrb	r3, [r3, r1]
 800b28a:	4053      	eors	r3, r2
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	7dbb      	ldrb	r3, [r7, #22]
 800b290:	4619      	mov	r1, r3
 800b292:	4b66      	ldr	r3, [pc, #408]	; (800b42c <mix_sub_columns+0x28c>)
 800b294:	5c5b      	ldrb	r3, [r3, r1]
 800b296:	4053      	eors	r3, r2
 800b298:	b2d9      	uxtb	r1, r3
 800b29a:	7afb      	ldrb	r3, [r7, #11]
 800b29c:	461a      	mov	r2, r3
 800b29e:	4b63      	ldr	r3, [pc, #396]	; (800b42c <mix_sub_columns+0x28c>)
 800b2a0:	5c9a      	ldrb	r2, [r3, r2]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	404a      	eors	r2, r1
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b2ac:	7b3b      	ldrb	r3, [r7, #12]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	4b5e      	ldr	r3, [pc, #376]	; (800b42c <mix_sub_columns+0x28c>)
 800b2b2:	5c9a      	ldrb	r2, [r3, r2]
 800b2b4:	7c7b      	ldrb	r3, [r7, #17]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4b5a      	ldr	r3, [pc, #360]	; (800b424 <mix_sub_columns+0x284>)
 800b2ba:	5c5b      	ldrb	r3, [r3, r1]
 800b2bc:	4053      	eors	r3, r2
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	7dbb      	ldrb	r3, [r7, #22]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4b58      	ldr	r3, [pc, #352]	; (800b428 <mix_sub_columns+0x288>)
 800b2c6:	5c5b      	ldrb	r3, [r3, r1]
 800b2c8:	4053      	eors	r3, r2
 800b2ca:	b2d9      	uxtb	r1, r3
 800b2cc:	7afb      	ldrb	r3, [r7, #11]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4b56      	ldr	r3, [pc, #344]	; (800b42c <mix_sub_columns+0x28c>)
 800b2d2:	5c9a      	ldrb	r2, [r3, r2]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3305      	adds	r3, #5
 800b2d8:	404a      	eors	r2, r1
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b2de:	7b3b      	ldrb	r3, [r7, #12]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	4b52      	ldr	r3, [pc, #328]	; (800b42c <mix_sub_columns+0x28c>)
 800b2e4:	5c9a      	ldrb	r2, [r3, r2]
 800b2e6:	7c7b      	ldrb	r3, [r7, #17]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4b50      	ldr	r3, [pc, #320]	; (800b42c <mix_sub_columns+0x28c>)
 800b2ec:	5c5b      	ldrb	r3, [r3, r1]
 800b2ee:	4053      	eors	r3, r2
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	7dbb      	ldrb	r3, [r7, #22]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4b4b      	ldr	r3, [pc, #300]	; (800b424 <mix_sub_columns+0x284>)
 800b2f8:	5c5b      	ldrb	r3, [r3, r1]
 800b2fa:	4053      	eors	r3, r2
 800b2fc:	b2d9      	uxtb	r1, r3
 800b2fe:	7afb      	ldrb	r3, [r7, #11]
 800b300:	461a      	mov	r2, r3
 800b302:	4b49      	ldr	r3, [pc, #292]	; (800b428 <mix_sub_columns+0x288>)
 800b304:	5c9a      	ldrb	r2, [r3, r2]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3306      	adds	r3, #6
 800b30a:	404a      	eors	r2, r1
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b310:	7b3b      	ldrb	r3, [r7, #12]
 800b312:	461a      	mov	r2, r3
 800b314:	4b44      	ldr	r3, [pc, #272]	; (800b428 <mix_sub_columns+0x288>)
 800b316:	5c9a      	ldrb	r2, [r3, r2]
 800b318:	7c7b      	ldrb	r3, [r7, #17]
 800b31a:	4619      	mov	r1, r3
 800b31c:	4b43      	ldr	r3, [pc, #268]	; (800b42c <mix_sub_columns+0x28c>)
 800b31e:	5c5b      	ldrb	r3, [r3, r1]
 800b320:	4053      	eors	r3, r2
 800b322:	b2da      	uxtb	r2, r3
 800b324:	7dbb      	ldrb	r3, [r7, #22]
 800b326:	4619      	mov	r1, r3
 800b328:	4b40      	ldr	r3, [pc, #256]	; (800b42c <mix_sub_columns+0x28c>)
 800b32a:	5c5b      	ldrb	r3, [r3, r1]
 800b32c:	4053      	eors	r3, r2
 800b32e:	b2d9      	uxtb	r1, r3
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	461a      	mov	r2, r3
 800b334:	4b3b      	ldr	r3, [pc, #236]	; (800b424 <mix_sub_columns+0x284>)
 800b336:	5c9a      	ldrb	r2, [r3, r2]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3307      	adds	r3, #7
 800b33c:	404a      	eors	r2, r1
 800b33e:	b2d2      	uxtb	r2, r2
 800b340:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b342:	7c3b      	ldrb	r3, [r7, #16]
 800b344:	461a      	mov	r2, r3
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <mix_sub_columns+0x284>)
 800b348:	5c9a      	ldrb	r2, [r3, r2]
 800b34a:	7d7b      	ldrb	r3, [r7, #21]
 800b34c:	4619      	mov	r1, r3
 800b34e:	4b36      	ldr	r3, [pc, #216]	; (800b428 <mix_sub_columns+0x288>)
 800b350:	5c5b      	ldrb	r3, [r3, r1]
 800b352:	4053      	eors	r3, r2
 800b354:	b2da      	uxtb	r2, r3
 800b356:	7abb      	ldrb	r3, [r7, #10]
 800b358:	4619      	mov	r1, r3
 800b35a:	4b34      	ldr	r3, [pc, #208]	; (800b42c <mix_sub_columns+0x28c>)
 800b35c:	5c5b      	ldrb	r3, [r3, r1]
 800b35e:	4053      	eors	r3, r2
 800b360:	b2d9      	uxtb	r1, r3
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	461a      	mov	r2, r3
 800b366:	4b31      	ldr	r3, [pc, #196]	; (800b42c <mix_sub_columns+0x28c>)
 800b368:	5c9a      	ldrb	r2, [r3, r2]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3308      	adds	r3, #8
 800b36e:	404a      	eors	r2, r1
 800b370:	b2d2      	uxtb	r2, r2
 800b372:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b374:	7c3b      	ldrb	r3, [r7, #16]
 800b376:	461a      	mov	r2, r3
 800b378:	4b2c      	ldr	r3, [pc, #176]	; (800b42c <mix_sub_columns+0x28c>)
 800b37a:	5c9a      	ldrb	r2, [r3, r2]
 800b37c:	7d7b      	ldrb	r3, [r7, #21]
 800b37e:	4619      	mov	r1, r3
 800b380:	4b28      	ldr	r3, [pc, #160]	; (800b424 <mix_sub_columns+0x284>)
 800b382:	5c5b      	ldrb	r3, [r3, r1]
 800b384:	4053      	eors	r3, r2
 800b386:	b2da      	uxtb	r2, r3
 800b388:	7abb      	ldrb	r3, [r7, #10]
 800b38a:	4619      	mov	r1, r3
 800b38c:	4b26      	ldr	r3, [pc, #152]	; (800b428 <mix_sub_columns+0x288>)
 800b38e:	5c5b      	ldrb	r3, [r3, r1]
 800b390:	4053      	eors	r3, r2
 800b392:	b2d9      	uxtb	r1, r3
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	461a      	mov	r2, r3
 800b398:	4b24      	ldr	r3, [pc, #144]	; (800b42c <mix_sub_columns+0x28c>)
 800b39a:	5c9a      	ldrb	r2, [r3, r2]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3309      	adds	r3, #9
 800b3a0:	404a      	eors	r2, r1
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b3a6:	7c3b      	ldrb	r3, [r7, #16]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	4b20      	ldr	r3, [pc, #128]	; (800b42c <mix_sub_columns+0x28c>)
 800b3ac:	5c9a      	ldrb	r2, [r3, r2]
 800b3ae:	7d7b      	ldrb	r3, [r7, #21]
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4b1e      	ldr	r3, [pc, #120]	; (800b42c <mix_sub_columns+0x28c>)
 800b3b4:	5c5b      	ldrb	r3, [r3, r1]
 800b3b6:	4053      	eors	r3, r2
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	7abb      	ldrb	r3, [r7, #10]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4b19      	ldr	r3, [pc, #100]	; (800b424 <mix_sub_columns+0x284>)
 800b3c0:	5c5b      	ldrb	r3, [r3, r1]
 800b3c2:	4053      	eors	r3, r2
 800b3c4:	b2d9      	uxtb	r1, r3
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4b17      	ldr	r3, [pc, #92]	; (800b428 <mix_sub_columns+0x288>)
 800b3cc:	5c9a      	ldrb	r2, [r3, r2]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	330a      	adds	r3, #10
 800b3d2:	404a      	eors	r2, r1
 800b3d4:	b2d2      	uxtb	r2, r2
 800b3d6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b3d8:	7c3b      	ldrb	r3, [r7, #16]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4b12      	ldr	r3, [pc, #72]	; (800b428 <mix_sub_columns+0x288>)
 800b3de:	5c9a      	ldrb	r2, [r3, r2]
 800b3e0:	7d7b      	ldrb	r3, [r7, #21]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4b11      	ldr	r3, [pc, #68]	; (800b42c <mix_sub_columns+0x28c>)
 800b3e6:	5c5b      	ldrb	r3, [r3, r1]
 800b3e8:	4053      	eors	r3, r2
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	7abb      	ldrb	r3, [r7, #10]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <mix_sub_columns+0x28c>)
 800b3f2:	5c5b      	ldrb	r3, [r3, r1]
 800b3f4:	4053      	eors	r3, r2
 800b3f6:	b2d9      	uxtb	r1, r3
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4b09      	ldr	r3, [pc, #36]	; (800b424 <mix_sub_columns+0x284>)
 800b3fe:	5c9a      	ldrb	r2, [r3, r2]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	330b      	adds	r3, #11
 800b404:	404a      	eors	r2, r1
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b40a:	7d3b      	ldrb	r3, [r7, #20]
 800b40c:	461a      	mov	r2, r3
 800b40e:	4b05      	ldr	r3, [pc, #20]	; (800b424 <mix_sub_columns+0x284>)
 800b410:	5c9a      	ldrb	r2, [r3, r2]
 800b412:	7a7b      	ldrb	r3, [r7, #9]
 800b414:	4619      	mov	r1, r3
 800b416:	4b04      	ldr	r3, [pc, #16]	; (800b428 <mix_sub_columns+0x288>)
 800b418:	5c5b      	ldrb	r3, [r3, r1]
 800b41a:	4053      	eors	r3, r2
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	4619      	mov	r1, r3
 800b422:	e005      	b.n	800b430 <mix_sub_columns+0x290>
 800b424:	0801c938 	.word	0x0801c938
 800b428:	0801ca38 	.word	0x0801ca38
 800b42c:	0801c838 	.word	0x0801c838
 800b430:	4b2d      	ldr	r3, [pc, #180]	; (800b4e8 <mix_sub_columns+0x348>)
 800b432:	5c5b      	ldrb	r3, [r3, r1]
 800b434:	4053      	eors	r3, r2
 800b436:	b2d9      	uxtb	r1, r3
 800b438:	7cfb      	ldrb	r3, [r7, #19]
 800b43a:	461a      	mov	r2, r3
 800b43c:	4b2a      	ldr	r3, [pc, #168]	; (800b4e8 <mix_sub_columns+0x348>)
 800b43e:	5c9a      	ldrb	r2, [r3, r2]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	330c      	adds	r3, #12
 800b444:	404a      	eors	r2, r1
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b44a:	7d3b      	ldrb	r3, [r7, #20]
 800b44c:	461a      	mov	r2, r3
 800b44e:	4b26      	ldr	r3, [pc, #152]	; (800b4e8 <mix_sub_columns+0x348>)
 800b450:	5c9a      	ldrb	r2, [r3, r2]
 800b452:	7a7b      	ldrb	r3, [r7, #9]
 800b454:	4619      	mov	r1, r3
 800b456:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <mix_sub_columns+0x34c>)
 800b458:	5c5b      	ldrb	r3, [r3, r1]
 800b45a:	4053      	eors	r3, r2
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	4619      	mov	r1, r3
 800b462:	4b23      	ldr	r3, [pc, #140]	; (800b4f0 <mix_sub_columns+0x350>)
 800b464:	5c5b      	ldrb	r3, [r3, r1]
 800b466:	4053      	eors	r3, r2
 800b468:	b2d9      	uxtb	r1, r3
 800b46a:	7cfb      	ldrb	r3, [r7, #19]
 800b46c:	461a      	mov	r2, r3
 800b46e:	4b1e      	ldr	r3, [pc, #120]	; (800b4e8 <mix_sub_columns+0x348>)
 800b470:	5c9a      	ldrb	r2, [r3, r2]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	330d      	adds	r3, #13
 800b476:	404a      	eors	r2, r1
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b47c:	7d3b      	ldrb	r3, [r7, #20]
 800b47e:	461a      	mov	r2, r3
 800b480:	4b19      	ldr	r3, [pc, #100]	; (800b4e8 <mix_sub_columns+0x348>)
 800b482:	5c9a      	ldrb	r2, [r3, r2]
 800b484:	7a7b      	ldrb	r3, [r7, #9]
 800b486:	4619      	mov	r1, r3
 800b488:	4b17      	ldr	r3, [pc, #92]	; (800b4e8 <mix_sub_columns+0x348>)
 800b48a:	5c5b      	ldrb	r3, [r3, r1]
 800b48c:	4053      	eors	r3, r2
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	4619      	mov	r1, r3
 800b494:	4b15      	ldr	r3, [pc, #84]	; (800b4ec <mix_sub_columns+0x34c>)
 800b496:	5c5b      	ldrb	r3, [r3, r1]
 800b498:	4053      	eors	r3, r2
 800b49a:	b2d9      	uxtb	r1, r3
 800b49c:	7cfb      	ldrb	r3, [r7, #19]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <mix_sub_columns+0x350>)
 800b4a2:	5c9a      	ldrb	r2, [r3, r2]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	330e      	adds	r3, #14
 800b4a8:	404a      	eors	r2, r1
 800b4aa:	b2d2      	uxtb	r2, r2
 800b4ac:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b4ae:	7d3b      	ldrb	r3, [r7, #20]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <mix_sub_columns+0x350>)
 800b4b4:	5c9a      	ldrb	r2, [r3, r2]
 800b4b6:	7a7b      	ldrb	r3, [r7, #9]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <mix_sub_columns+0x348>)
 800b4bc:	5c5b      	ldrb	r3, [r3, r1]
 800b4be:	4053      	eors	r3, r2
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4b08      	ldr	r3, [pc, #32]	; (800b4e8 <mix_sub_columns+0x348>)
 800b4c8:	5c5b      	ldrb	r3, [r3, r1]
 800b4ca:	4053      	eors	r3, r2
 800b4cc:	b2d9      	uxtb	r1, r3
 800b4ce:	7cfb      	ldrb	r3, [r7, #19]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <mix_sub_columns+0x34c>)
 800b4d4:	5c9a      	ldrb	r2, [r3, r2]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	330f      	adds	r3, #15
 800b4da:	404a      	eors	r2, r1
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	701a      	strb	r2, [r3, #0]
  }
 800b4e0:	bf00      	nop
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	0801c838 	.word	0x0801c838
 800b4ec:	0801c938 	.word	0x0801c938
 800b4f0:	0801ca38 	.word	0x0801ca38

0800b4f4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3b10      	subs	r3, #16
 800b506:	2b10      	cmp	r3, #16
 800b508:	bf8c      	ite	hi
 800b50a:	2201      	movhi	r2, #1
 800b50c:	2200      	movls	r2, #0
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	2a00      	cmp	r2, #0
 800b512:	d10b      	bne.n	800b52c <lorawan_aes_set_key+0x38>
 800b514:	4a64      	ldr	r2, [pc, #400]	; (800b6a8 <lorawan_aes_set_key+0x1b4>)
 800b516:	fa22 f303 	lsr.w	r3, r2, r3
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf14      	ite	ne
 800b522:	2301      	movne	r3, #1
 800b524:	2300      	moveq	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d105      	bne.n	800b538 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b534:	23ff      	movs	r3, #255	; 0xff
 800b536:	e0b2      	b.n	800b69e <lorawan_aes_set_key+0x1aa>
        break;
 800b538:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	7afa      	ldrb	r2, [r7, #11]
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff fbfc 	bl	800ad3e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b546:	7afb      	ldrb	r3, [r7, #11]
 800b548:	331c      	adds	r3, #28
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b550:	7c7b      	ldrb	r3, [r7, #17]
 800b552:	091b      	lsrs	r3, r3, #4
 800b554:	b2db      	uxtb	r3, r3
 800b556:	3b01      	subs	r3, #1
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	75fb      	strb	r3, [r7, #23]
 800b564:	2301      	movs	r3, #1
 800b566:	75bb      	strb	r3, [r7, #22]
 800b568:	e093      	b.n	800b692 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	3b04      	subs	r3, #4
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	5cd3      	ldrb	r3, [r2, r3]
 800b572:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	3b03      	subs	r3, #3
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	5cd3      	ldrb	r3, [r2, r3]
 800b57c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	3b02      	subs	r3, #2
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	5cd3      	ldrb	r3, [r2, r3]
 800b586:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	5cd3      	ldrb	r3, [r2, r3]
 800b590:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	7afa      	ldrb	r2, [r7, #11]
 800b596:	fbb3 f1f2 	udiv	r1, r3, r2
 800b59a:	fb01 f202 	mul.w	r2, r1, r2
 800b59e:	1a9b      	subs	r3, r3, r2
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d127      	bne.n	800b5f6 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b5a6:	7d7b      	ldrb	r3, [r7, #21]
 800b5a8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b5aa:	7d3b      	ldrb	r3, [r7, #20]
 800b5ac:	4a3f      	ldr	r2, [pc, #252]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b5ae:	5cd2      	ldrb	r2, [r2, r3]
 800b5b0:	7dbb      	ldrb	r3, [r7, #22]
 800b5b2:	4053      	eors	r3, r2
 800b5b4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b5b6:	7cfb      	ldrb	r3, [r7, #19]
 800b5b8:	4a3c      	ldr	r2, [pc, #240]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b5ba:	5cd3      	ldrb	r3, [r2, r3]
 800b5bc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b5be:	7cbb      	ldrb	r3, [r7, #18]
 800b5c0:	4a3a      	ldr	r2, [pc, #232]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b5c2:	5cd3      	ldrb	r3, [r2, r3]
 800b5c4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b5c6:	7c3b      	ldrb	r3, [r7, #16]
 800b5c8:	4a38      	ldr	r2, [pc, #224]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b5ca:	5cd3      	ldrb	r3, [r2, r3]
 800b5cc:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b5ce:	7dbb      	ldrb	r3, [r7, #22]
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	b25a      	sxtb	r2, r3
 800b5d4:	7dbb      	ldrb	r3, [r7, #22]
 800b5d6:	09db      	lsrs	r3, r3, #7
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	4619      	mov	r1, r3
 800b5dc:	0049      	lsls	r1, r1, #1
 800b5de:	440b      	add	r3, r1
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	00c8      	lsls	r0, r1, #3
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	440b      	add	r3, r1
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	b25b      	sxtb	r3, r3
 800b5ee:	4053      	eors	r3, r2
 800b5f0:	b25b      	sxtb	r3, r3
 800b5f2:	75bb      	strb	r3, [r7, #22]
 800b5f4:	e01c      	b.n	800b630 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	2b18      	cmp	r3, #24
 800b5fa:	d919      	bls.n	800b630 <lorawan_aes_set_key+0x13c>
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	7afa      	ldrb	r2, [r7, #11]
 800b600:	fbb3 f1f2 	udiv	r1, r3, r2
 800b604:	fb01 f202 	mul.w	r2, r1, r2
 800b608:	1a9b      	subs	r3, r3, r2
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b10      	cmp	r3, #16
 800b60e:	d10f      	bne.n	800b630 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b610:	7d7b      	ldrb	r3, [r7, #21]
 800b612:	4a26      	ldr	r2, [pc, #152]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b614:	5cd3      	ldrb	r3, [r2, r3]
 800b616:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b618:	7d3b      	ldrb	r3, [r7, #20]
 800b61a:	4a24      	ldr	r2, [pc, #144]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b61c:	5cd3      	ldrb	r3, [r2, r3]
 800b61e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b620:	7cfb      	ldrb	r3, [r7, #19]
 800b622:	4a22      	ldr	r2, [pc, #136]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b624:	5cd3      	ldrb	r3, [r2, r3]
 800b626:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b628:	7cbb      	ldrb	r3, [r7, #18]
 800b62a:	4a20      	ldr	r2, [pc, #128]	; (800b6ac <lorawan_aes_set_key+0x1b8>)
 800b62c:	5cd3      	ldrb	r3, [r2, r3]
 800b62e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b630:	7dfa      	ldrb	r2, [r7, #23]
 800b632:	7afb      	ldrb	r3, [r7, #11]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b638:	7c3b      	ldrb	r3, [r7, #16]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	5cd1      	ldrb	r1, [r2, r3]
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	7d7a      	ldrb	r2, [r7, #21]
 800b642:	404a      	eors	r2, r1
 800b644:	b2d1      	uxtb	r1, r2
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b64a:	7c3b      	ldrb	r3, [r7, #16]
 800b64c:	3301      	adds	r3, #1
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	5cd1      	ldrb	r1, [r2, r3]
 800b652:	7dfb      	ldrb	r3, [r7, #23]
 800b654:	3301      	adds	r3, #1
 800b656:	7d3a      	ldrb	r2, [r7, #20]
 800b658:	404a      	eors	r2, r1
 800b65a:	b2d1      	uxtb	r1, r2
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b660:	7c3b      	ldrb	r3, [r7, #16]
 800b662:	3302      	adds	r3, #2
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	5cd1      	ldrb	r1, [r2, r3]
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	3302      	adds	r3, #2
 800b66c:	7cfa      	ldrb	r2, [r7, #19]
 800b66e:	404a      	eors	r2, r1
 800b670:	b2d1      	uxtb	r1, r2
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b676:	7c3b      	ldrb	r3, [r7, #16]
 800b678:	3303      	adds	r3, #3
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	5cd1      	ldrb	r1, [r2, r3]
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	3303      	adds	r3, #3
 800b682:	7cba      	ldrb	r2, [r7, #18]
 800b684:	404a      	eors	r2, r1
 800b686:	b2d1      	uxtb	r1, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	3304      	adds	r3, #4
 800b690:	75fb      	strb	r3, [r7, #23]
 800b692:	7dfa      	ldrb	r2, [r7, #23]
 800b694:	7c7b      	ldrb	r3, [r7, #17]
 800b696:	429a      	cmp	r2, r3
 800b698:	f4ff af67 	bcc.w	800b56a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	00010101 	.word	0x00010101
 800b6ac:	0801c838 	.word	0x0801c838

0800b6b0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d038      	beq.n	800b738 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	f107 0314 	add.w	r3, r7, #20
 800b6cc:	68f9      	ldr	r1, [r7, #12]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff fc07 	bl	800aee2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6da:	e014      	b.n	800b706 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b6dc:	f107 0314 	add.w	r3, r7, #20
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7ff fd5d 	bl	800b1a0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6ec:	0112      	lsls	r2, r2, #4
 800b6ee:	441a      	add	r2, r3
 800b6f0:	f107 0314 	add.w	r3, r7, #20
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff fcab 	bl	800b052 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b700:	3301      	adds	r3, #1
 800b702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b70c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b710:	429a      	cmp	r2, r3
 800b712:	d3e3      	bcc.n	800b6dc <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b714:	f107 0314 	add.w	r3, r7, #20
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fca7 	bl	800b06c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b724:	0112      	lsls	r2, r2, #4
 800b726:	441a      	add	r2, r3
 800b728:	f107 0314 	add.w	r3, r7, #20
 800b72c:	4619      	mov	r1, r3
 800b72e:	68b8      	ldr	r0, [r7, #8]
 800b730:	f7ff fbd7 	bl	800aee2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b734:	2300      	movs	r3, #0
 800b736:	e000      	b.n	800b73a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b738:	23ff      	movs	r3, #255	; 0xff
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3728      	adds	r7, #40	; 0x28
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800b742:	b480      	push	{r7}
 800b744:	b083      	sub	sp, #12
 800b746:	af00      	add	r7, sp, #0
 800b748:	4603      	mov	r3, r0
 800b74a:	71fb      	strb	r3, [r7, #7]
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr
	...

0800b758 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800b758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b75a:	b091      	sub	sp, #68	; 0x44
 800b75c:	af08      	add	r7, sp, #32
 800b75e:	4603      	mov	r3, r0
 800b760:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800b766:	f107 0310 	add.w	r3, r7, #16
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fba8 	bl	800bec0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800b770:	7c3b      	ldrb	r3, [r7, #16]
 800b772:	7c7a      	ldrb	r2, [r7, #17]
 800b774:	7cb9      	ldrb	r1, [r7, #18]
 800b776:	7cf8      	ldrb	r0, [r7, #19]
 800b778:	7d3c      	ldrb	r4, [r7, #20]
 800b77a:	7d7d      	ldrb	r5, [r7, #21]
 800b77c:	7dbe      	ldrb	r6, [r7, #22]
 800b77e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800b782:	f8cd c01c 	str.w	ip, [sp, #28]
 800b786:	9606      	str	r6, [sp, #24]
 800b788:	9505      	str	r5, [sp, #20]
 800b78a:	9404      	str	r4, [sp, #16]
 800b78c:	9003      	str	r0, [sp, #12]
 800b78e:	9102      	str	r1, [sp, #8]
 800b790:	9201      	str	r2, [sp, #4]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	4b24      	ldr	r3, [pc, #144]	; (800b828 <PrintIds+0xd0>)
 800b796:	2200      	movs	r2, #0
 800b798:	2100      	movs	r1, #0
 800b79a:	2002      	movs	r0, #2
 800b79c:	f010 f8bc 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800b7a0:	f107 0318 	add.w	r3, r7, #24
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 fbbb 	bl	800bf20 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800b7aa:	7e3b      	ldrb	r3, [r7, #24]
 800b7ac:	7e7a      	ldrb	r2, [r7, #25]
 800b7ae:	7eb9      	ldrb	r1, [r7, #26]
 800b7b0:	7ef8      	ldrb	r0, [r7, #27]
 800b7b2:	7f3c      	ldrb	r4, [r7, #28]
 800b7b4:	7f7d      	ldrb	r5, [r7, #29]
 800b7b6:	7fbe      	ldrb	r6, [r7, #30]
 800b7b8:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800b7bc:	f8cd c01c 	str.w	ip, [sp, #28]
 800b7c0:	9606      	str	r6, [sp, #24]
 800b7c2:	9505      	str	r5, [sp, #20]
 800b7c4:	9404      	str	r4, [sp, #16]
 800b7c6:	9003      	str	r0, [sp, #12]
 800b7c8:	9102      	str	r1, [sp, #8]
 800b7ca:	9201      	str	r2, [sp, #4]
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	4b17      	ldr	r3, [pc, #92]	; (800b82c <PrintIds+0xd4>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	2002      	movs	r0, #2
 800b7d6:	f010 f89f 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800b7da:	f107 020c 	add.w	r2, r7, #12
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fbce 	bl	800bf84 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b7e8:	f107 030c 	add.w	r3, r7, #12
 800b7ec:	3303      	adds	r3, #3
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	f107 030c 	add.w	r3, r7, #12
 800b7f6:	3302      	adds	r3, #2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	f107 030c 	add.w	r3, r7, #12
 800b800:	3301      	adds	r3, #1
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	4618      	mov	r0, r3
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	9002      	str	r0, [sp, #8]
 800b810:	9101      	str	r1, [sp, #4]
 800b812:	9200      	str	r2, [sp, #0]
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <PrintIds+0xd8>)
 800b816:	2200      	movs	r2, #0
 800b818:	2100      	movs	r1, #0
 800b81a:	2002      	movs	r0, #2
 800b81c:	f010 f87c 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800b820:	bf00      	nop
 800b822:	3724      	adds	r7, #36	; 0x24
 800b824:	46bd      	mov	sp, r7
 800b826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b828:	0801c424 	.word	0x0801c424
 800b82c:	0801c464 	.word	0x0801c464
 800b830:	0801c4a4 	.word	0x0801c4a4

0800b834 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
 800b844:	e01a      	b.n	800b87c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b846:	4b12      	ldr	r3, [pc, #72]	; (800b890 <GetKeyByID+0x5c>)
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	7bfa      	ldrb	r2, [r7, #15]
 800b84c:	4613      	mov	r3, r2
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	4413      	add	r3, r2
 800b852:	440b      	add	r3, r1
 800b854:	3318      	adds	r3, #24
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	79fa      	ldrb	r2, [r7, #7]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d10b      	bne.n	800b876 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <GetKeyByID+0x5c>)
 800b860:	6819      	ldr	r1, [r3, #0]
 800b862:	7bfa      	ldrb	r2, [r7, #15]
 800b864:	4613      	mov	r3, r2
 800b866:	011b      	lsls	r3, r3, #4
 800b868:	4413      	add	r3, r2
 800b86a:	3318      	adds	r3, #24
 800b86c:	18ca      	adds	r2, r1, r3
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b872:	2300      	movs	r3, #0
 800b874:	e006      	b.n	800b884 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b876:	7bfb      	ldrb	r3, [r7, #15]
 800b878:	3301      	adds	r3, #1
 800b87a:	73fb      	strb	r3, [r7, #15]
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
 800b87e:	2b0a      	cmp	r3, #10
 800b880:	d9e1      	bls.n	800b846 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b882:	2303      	movs	r3, #3
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	bc80      	pop	{r7}
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	200004b0 	.word	0x200004b0

0800b894 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b0d1      	sub	sp, #324	; 0x144
 800b898:	af00      	add	r7, sp, #0
 800b89a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800b89e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800b8a2:	6020      	str	r0, [r4, #0]
 800b8a4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800b8a8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800b8ac:	6001      	str	r1, [r0, #0]
 800b8ae:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800b8b2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800b8b6:	600a      	str	r2, [r1, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b8be:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800b8c2:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b8c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b8c8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <ComputeCmac+0x46>
 800b8d2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	e05d      	b.n	800b99a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b8de:	f107 0314 	add.w	r3, r7, #20
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fe ff86 	bl	800a7f4 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b8e8:	f107 0210 	add.w	r2, r7, #16
 800b8ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b8f0:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff ff9b 	bl	800b834 <GetKeyByID>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b904:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d144      	bne.n	800b996 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b90c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	f107 0314 	add.w	r3, r7, #20
 800b91c:	4611      	mov	r1, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe ff81 	bl	800a826 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b924:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b928:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d009      	beq.n	800b946 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800b932:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b936:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b93a:	f107 0014 	add.w	r0, r7, #20
 800b93e:	2210      	movs	r2, #16
 800b940:	6819      	ldr	r1, [r3, #0]
 800b942:	f7fe ff7f 	bl	800a844 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b946:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b94a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800b94e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b952:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b956:	f107 0014 	add.w	r0, r7, #20
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	6819      	ldr	r1, [r3, #0]
 800b95e:	f7fe ff71 	bl	800a844 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b962:	f107 0214 	add.w	r2, r7, #20
 800b966:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b96a:	4611      	mov	r1, r2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7ff f82b 	bl	800a9c8 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800b972:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800b976:	461a      	mov	r2, r3
 800b978:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800b97c:	021b      	lsls	r3, r3, #8
 800b97e:	431a      	orrs	r2, r3
 800b980:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800b984:	041b      	lsls	r3, r3, #16
 800b986:	431a      	orrs	r2, r3
 800b988:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800b98c:	061b      	lsls	r3, r3, #24
 800b98e:	431a      	orrs	r2, r3
 800b990:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b994:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b996:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd90      	pop	{r4, r7, pc}

0800b9a4 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e00a      	b.n	800b9cc <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800b9b6:	4a07      	ldr	r2, [pc, #28]	; (800b9d4 <SecureElementInit+0x30>)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <SecureElementInit+0x30>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	22d8      	movs	r2, #216	; 0xd8
 800b9c2:	4905      	ldr	r1, [pc, #20]	; (800b9d8 <SecureElementInit+0x34>)
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f00b fc02 	bl	80171ce <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	200004b0 	.word	0x200004b0
 800b9d8:	0801cd1c 	.word	0x0801cd1c

0800b9dc <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800b9ea:	f107 030c 	add.w	r3, r7, #12
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 fa66 	bl	800bec0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	f000 fac2 	bl	800bf84 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d024      	beq.n	800ba50 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800ba06:	2300      	movs	r3, #0
 800ba08:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	75bb      	strb	r3, [r7, #22]
 800ba0e:	e00c      	b.n	800ba2a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800ba10:	7dbb      	ldrb	r3, [r7, #22]
 800ba12:	3318      	adds	r3, #24
 800ba14:	443b      	add	r3, r7
 800ba16:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	75fb      	strb	r3, [r7, #23]
                break;
 800ba22:	e005      	b.n	800ba30 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ba24:	7dbb      	ldrb	r3, [r7, #22]
 800ba26:	3301      	adds	r3, #1
 800ba28:	75bb      	strb	r3, [r7, #22]
 800ba2a:	7dbb      	ldrb	r3, [r7, #22]
 800ba2c:	2b07      	cmp	r3, #7
 800ba2e:	d9ef      	bls.n	800ba10 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	f083 0301 	eor.w	r3, r3, #1
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d009      	beq.n	800ba50 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800ba3c:	f107 020c 	add.w	r2, r7, #12
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4610      	mov	r0, r2
 800ba44:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800ba46:	f107 030c 	add.w	r3, r7, #12
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fa20 	bl	800be90 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00c      	beq.n	800ba70 <SecureElementInitMcuID+0x94>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d109      	bne.n	800ba70 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800ba5c:	f107 0208 	add.w	r2, r7, #8
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	4610      	mov	r0, r2
 800ba64:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	f000 fa70 	bl	800bf50 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800ba7e:	2000      	movs	r0, #0
 800ba80:	f7ff fe5f 	bl	800b742 <PrintKey>
    PrintKey( NWK_KEY );
 800ba84:	2001      	movs	r0, #1
 800ba86:	f7ff fe5c 	bl	800b742 <PrintKey>
    PrintKey( APP_S_KEY );
 800ba8a:	2009      	movs	r0, #9
 800ba8c:	f7ff fe59 	bl	800b742 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ba90:	2008      	movs	r0, #8
 800ba92:	f7ff fe56 	bl	800b742 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800ba96:	2000      	movs	r0, #0
 800ba98:	f7ff fe5e 	bl	800b758 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	4603      	mov	r3, r0
 800baaa:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800baac:	200b      	movs	r0, #11
 800baae:	f7ff fe48 	bl	800b742 <PrintKey>
    PrintKey( MC_KE_KEY );
 800bab2:	200c      	movs	r0, #12
 800bab4:	f7ff fe45 	bl	800b742 <PrintKey>
    PrintKey( APP_S_KEY );
 800bab8:	2009      	movs	r0, #9
 800baba:	f7ff fe42 	bl	800b742 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800babe:	2008      	movs	r0, #8
 800bac0:	f7ff fe3f 	bl	800b742 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800bac4:	200a      	movs	r0, #10
 800bac6:	f7ff fe3c 	bl	800b742 <PrintKey>
    PrintIds( mode );
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fe43 	bl	800b758 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	6039      	str	r1, [r7, #0]
 800bae6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800baee:	2302      	movs	r3, #2
 800baf0:	e04c      	b.n	800bb8c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800baf2:	2300      	movs	r3, #0
 800baf4:	77fb      	strb	r3, [r7, #31]
 800baf6:	e045      	b.n	800bb84 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800baf8:	4b26      	ldr	r3, [pc, #152]	; (800bb94 <SecureElementSetKey+0xb8>)
 800bafa:	6819      	ldr	r1, [r3, #0]
 800bafc:	7ffa      	ldrb	r2, [r7, #31]
 800bafe:	4613      	mov	r3, r2
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	4413      	add	r3, r2
 800bb04:	440b      	add	r3, r1
 800bb06:	3318      	adds	r3, #24
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	79fa      	ldrb	r2, [r7, #7]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d136      	bne.n	800bb7e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	2b0d      	cmp	r3, #13
 800bb14:	d123      	bne.n	800bb5e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bb16:	2306      	movs	r3, #6
 800bb18:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	f107 0310 	add.w	r3, r7, #16
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	605a      	str	r2, [r3, #4]
 800bb28:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800bb2a:	f107 030c 	add.w	r3, r7, #12
 800bb2e:	220c      	movs	r2, #12
 800bb30:	2110      	movs	r1, #16
 800bb32:	6838      	ldr	r0, [r7, #0]
 800bb34:	f000 f876 	bl	800bc24 <SecureElementAesEncrypt>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bb3c:	4b15      	ldr	r3, [pc, #84]	; (800bb94 <SecureElementSetKey+0xb8>)
 800bb3e:	6819      	ldr	r1, [r3, #0]
 800bb40:	7ffa      	ldrb	r2, [r7, #31]
 800bb42:	4613      	mov	r3, r2
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	4413      	add	r3, r2
 800bb48:	3318      	adds	r3, #24
 800bb4a:	440b      	add	r3, r1
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	f107 010c 	add.w	r1, r7, #12
 800bb52:	2210      	movs	r2, #16
 800bb54:	4618      	mov	r0, r3
 800bb56:	f00b fb3a 	bl	80171ce <memcpy1>
                return retval;
 800bb5a:	7fbb      	ldrb	r3, [r7, #30]
 800bb5c:	e016      	b.n	800bb8c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bb5e:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <SecureElementSetKey+0xb8>)
 800bb60:	6819      	ldr	r1, [r3, #0]
 800bb62:	7ffa      	ldrb	r2, [r7, #31]
 800bb64:	4613      	mov	r3, r2
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	3318      	adds	r3, #24
 800bb6c:	440b      	add	r3, r1
 800bb6e:	3301      	adds	r3, #1
 800bb70:	2210      	movs	r2, #16
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f00b fb2a 	bl	80171ce <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e006      	b.n	800bb8c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb7e:	7ffb      	ldrb	r3, [r7, #31]
 800bb80:	3301      	adds	r3, #1
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	7ffb      	ldrb	r3, [r7, #31]
 800bb86:	2b0a      	cmp	r3, #10
 800bb88:	d9b6      	bls.n	800baf8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb8a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3720      	adds	r7, #32
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	200004b0 	.word	0x200004b0

0800bb98 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	2b0b      	cmp	r3, #11
 800bbaa:	d901      	bls.n	800bbb0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e009      	b.n	800bbc4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bbb0:	78fa      	ldrb	r2, [r7, #3]
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7ff fe69 	bl	800b894 <ComputeCmac>
 800bbc2:	4603      	mov	r3, r0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e01b      	b.n	800bc1c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bbe4:	2306      	movs	r3, #6
 800bbe6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bbec:	78fa      	ldrb	r2, [r7, #3]
 800bbee:	f107 0310 	add.w	r3, r7, #16
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	68f9      	ldr	r1, [r7, #12]
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f7ff fe4a 	bl	800b894 <ComputeCmac>
 800bc00:	4603      	mov	r3, r0
 800bc02:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	e006      	b.n	800bc1c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d001      	beq.n	800bc1a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bc16:	2301      	movs	r3, #1
 800bc18:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b0c2      	sub	sp, #264	; 0x108
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc30:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800bc34:	6001      	str	r1, [r0, #0]
 800bc36:	4611      	mov	r1, r2
 800bc38:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bc3c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc46:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800bc4a:	460a      	mov	r2, r1
 800bc4c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d006      	beq.n	800bc62 <SecureElementAesEncrypt+0x3e>
 800bc54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc62:	2302      	movs	r3, #2
 800bc64:	e059      	b.n	800bd1a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800bc66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 030f 	and.w	r3, r3, #15
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bc78:	2305      	movs	r3, #5
 800bc7a:	e04e      	b.n	800bd1a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bc7c:	f107 0314 	add.w	r3, r7, #20
 800bc80:	22f0      	movs	r2, #240	; 0xf0
 800bc82:	2100      	movs	r1, #0
 800bc84:	4618      	mov	r0, r3
 800bc86:	f00b fadd 	bl	8017244 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bc8a:	f107 0210 	add.w	r2, r7, #16
 800bc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc92:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fdca 	bl	800b834 <GetKeyByID>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bca6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d133      	bne.n	800bd16 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	f107 0214 	add.w	r2, r7, #20
 800bcb6:	2110      	movs	r1, #16
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fc1b 	bl	800b4f4 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bcc4:	e020      	b.n	800bd08 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800bcc6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	18d0      	adds	r0, r2, r3
 800bcce:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bcd2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bcd6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f107 0214 	add.w	r2, r7, #20
 800bce2:	4619      	mov	r1, r3
 800bce4:	f7ff fce4 	bl	800b6b0 <lorawan_aes_encrypt>
            block = block + 16;
 800bce8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bcec:	3310      	adds	r3, #16
 800bcee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bcf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800bcfa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bcfe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	3a10      	subs	r2, #16
 800bd06:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800bd08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1d7      	bne.n	800bcc6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bd16:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
 800bd30:	4613      	mov	r3, r2
 800bd32:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	e02e      	b.n	800bd9c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bd3e:	2306      	movs	r3, #6
 800bd40:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800bd42:	78bb      	ldrb	r3, [r7, #2]
 800bd44:	2b0c      	cmp	r3, #12
 800bd46:	d104      	bne.n	800bd52 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	2b0b      	cmp	r3, #11
 800bd4c:	d001      	beq.n	800bd52 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e024      	b.n	800bd9c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	f107 0310 	add.w	r3, r7, #16
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	605a      	str	r2, [r3, #4]
 800bd60:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800bd62:	f107 030c 	add.w	r3, r7, #12
 800bd66:	78fa      	ldrb	r2, [r7, #3]
 800bd68:	2110      	movs	r1, #16
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff ff5a 	bl	800bc24 <SecureElementAesEncrypt>
 800bd70:	4603      	mov	r3, r0
 800bd72:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd74:	7ffb      	ldrb	r3, [r7, #31]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bd7a:	7ffb      	ldrb	r3, [r7, #31]
 800bd7c:	e00e      	b.n	800bd9c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800bd7e:	f107 020c 	add.w	r2, r7, #12
 800bd82:	78bb      	ldrb	r3, [r7, #2]
 800bd84:	4611      	mov	r1, r2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7ff fea8 	bl	800badc <SecureElementSetKey>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd90:	7ffb      	ldrb	r3, [r7, #31]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bd96:	7ffb      	ldrb	r3, [r7, #31]
 800bd98:	e000      	b.n	800bd9c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bd9a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3720      	adds	r7, #32
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607b      	str	r3, [r7, #4]
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <SecureElementProcessJoinAccept+0x24>
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <SecureElementProcessJoinAccept+0x24>
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdc8:	2302      	movs	r3, #2
 800bdca:	e05c      	b.n	800be86 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bdcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdd0:	2b21      	cmp	r3, #33	; 0x21
 800bdd2:	d901      	bls.n	800bdd8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bdd4:	2305      	movs	r3, #5
 800bdd6:	e056      	b.n	800be86 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bddc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	461a      	mov	r2, r3
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bde8:	f00b f9f1 	bl	80171ce <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	1c58      	adds	r0, r3, #1
 800bdf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	7dfa      	ldrb	r2, [r7, #23]
 800bdfe:	f7ff ff11 	bl	800bc24 <SecureElementAesEncrypt>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800be08:	2307      	movs	r3, #7
 800be0a:	e03c      	b.n	800be86 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	330b      	adds	r3, #11
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	09db      	lsrs	r3, r3, #7
 800be14:	b2da      	uxtb	r2, r3
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800be1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be1e:	3b04      	subs	r3, #4
 800be20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be22:	4413      	add	r3, r2
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	4619      	mov	r1, r3
 800be28:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be2c:	3b03      	subs	r3, #3
 800be2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be30:	4413      	add	r3, r2
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	021b      	lsls	r3, r3, #8
 800be36:	ea41 0203 	orr.w	r2, r1, r3
 800be3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be3e:	3b02      	subs	r3, #2
 800be40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be42:	440b      	add	r3, r1
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	041b      	lsls	r3, r3, #16
 800be48:	431a      	orrs	r2, r3
 800be4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be4e:	3b01      	subs	r3, #1
 800be50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be52:	440b      	add	r3, r1
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	061b      	lsls	r3, r3, #24
 800be58:	4313      	orrs	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10d      	bne.n	800be80 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800be64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be68:	3b04      	subs	r3, #4
 800be6a:	4619      	mov	r1, r3
 800be6c:	2301      	movs	r3, #1
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be72:	f7ff feab 	bl	800bbcc <SecureElementVerifyAesCmac>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800be7c:	2301      	movs	r3, #1
 800be7e:	e002      	b.n	800be86 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800be80:	2304      	movs	r3, #4
 800be82:	e000      	b.n	800be86 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be9e:	2302      	movs	r3, #2
 800bea0:	e007      	b.n	800beb2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800bea2:	4b06      	ldr	r3, [pc, #24]	; (800bebc <SecureElementSetDevEui+0x2c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2208      	movs	r2, #8
 800bea8:	6879      	ldr	r1, [r7, #4]
 800beaa:	4618      	mov	r0, r3
 800beac:	f00b f98f 	bl	80171ce <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800beb0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	200004b0 	.word	0x200004b0

0800bec0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bece:	2302      	movs	r3, #2
 800bed0:	e007      	b.n	800bee2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800bed2:	4b06      	ldr	r3, [pc, #24]	; (800beec <SecureElementGetDevEui+0x2c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2208      	movs	r2, #8
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f00b f977 	bl	80171ce <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bee0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	200004b0 	.word	0x200004b0

0800bef0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800befe:	2302      	movs	r3, #2
 800bf00:	e008      	b.n	800bf14 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800bf02:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <SecureElementSetJoinEui+0x2c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3308      	adds	r3, #8
 800bf08:	2208      	movs	r2, #8
 800bf0a:	6879      	ldr	r1, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f00b f95e 	bl	80171ce <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bf12:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	200004b0 	.word	0x200004b0

0800bf20 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e008      	b.n	800bf44 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800bf32:	4b06      	ldr	r3, [pc, #24]	; (800bf4c <SecureElementGetJoinEui+0x2c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3308      	adds	r3, #8
 800bf38:	2208      	movs	r2, #8
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f00b f946 	bl	80171ce <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bf42:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200004b0 	.word	0x200004b0

0800bf50 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	6039      	str	r1, [r7, #0]
 800bf5a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d104      	bne.n	800bf6c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800bf62:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <SecureElementSetDevAddr+0x30>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	611a      	str	r2, [r3, #16]
 800bf6a:	e003      	b.n	800bf74 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800bf6c:	4b04      	ldr	r3, [pc, #16]	; (800bf80 <SecureElementSetDevAddr+0x30>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800bf74:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bc80      	pop	{r7}
 800bf7e:	4770      	bx	lr
 800bf80:	200004b0 	.word	0x200004b0

0800bf84 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf96:	2302      	movs	r3, #2
 800bf98:	e00e      	b.n	800bfb8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d105      	bne.n	800bfac <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800bfa0:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <SecureElementGetDevAddr+0x40>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	691a      	ldr	r2, [r3, #16]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	e004      	b.n	800bfb6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800bfac:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <SecureElementGetDevAddr+0x40>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	695a      	ldr	r2, [r3, #20]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800bfb6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bc80      	pop	{r7}
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	200004b0 	.word	0x200004b0

0800bfc8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bfd2:	4a29      	ldr	r2, [pc, #164]	; (800c078 <LmHandlerInit+0xb0>)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bfd8:	4b28      	ldr	r3, [pc, #160]	; (800c07c <LmHandlerInit+0xb4>)
 800bfda:	4a29      	ldr	r2, [pc, #164]	; (800c080 <LmHandlerInit+0xb8>)
 800bfdc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bfde:	4b27      	ldr	r3, [pc, #156]	; (800c07c <LmHandlerInit+0xb4>)
 800bfe0:	4a28      	ldr	r2, [pc, #160]	; (800c084 <LmHandlerInit+0xbc>)
 800bfe2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bfe4:	4b25      	ldr	r3, [pc, #148]	; (800c07c <LmHandlerInit+0xb4>)
 800bfe6:	4a28      	ldr	r2, [pc, #160]	; (800c088 <LmHandlerInit+0xc0>)
 800bfe8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bfea:	4b24      	ldr	r3, [pc, #144]	; (800c07c <LmHandlerInit+0xb4>)
 800bfec:	4a27      	ldr	r2, [pc, #156]	; (800c08c <LmHandlerInit+0xc4>)
 800bfee:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bff0:	4b21      	ldr	r3, [pc, #132]	; (800c078 <LmHandlerInit+0xb0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a26      	ldr	r2, [pc, #152]	; (800c090 <LmHandlerInit+0xc8>)
 800bff8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bffa:	4b1f      	ldr	r3, [pc, #124]	; (800c078 <LmHandlerInit+0xb0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4a23      	ldr	r2, [pc, #140]	; (800c090 <LmHandlerInit+0xc8>)
 800c002:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c004:	4b1c      	ldr	r3, [pc, #112]	; (800c078 <LmHandlerInit+0xb0>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	4a21      	ldr	r2, [pc, #132]	; (800c090 <LmHandlerInit+0xc8>)
 800c00c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c00e:	4b1a      	ldr	r3, [pc, #104]	; (800c078 <LmHandlerInit+0xb0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	4a1e      	ldr	r2, [pc, #120]	; (800c090 <LmHandlerInit+0xc8>)
 800c016:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c018:	4b1d      	ldr	r3, [pc, #116]	; (800c090 <LmHandlerInit+0xc8>)
 800c01a:	4a1e      	ldr	r2, [pc, #120]	; (800c094 <LmHandlerInit+0xcc>)
 800c01c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c01e:	4b16      	ldr	r3, [pc, #88]	; (800c078 <LmHandlerInit+0xb0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	4a1a      	ldr	r2, [pc, #104]	; (800c090 <LmHandlerInit+0xc8>)
 800c026:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	4a1b      	ldr	r2, [pc, #108]	; (800c098 <LmHandlerInit+0xd0>)
 800c02c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c02e:	4b12      	ldr	r3, [pc, #72]	; (800c078 <LmHandlerInit+0xb0>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c034:	4a18      	ldr	r2, [pc, #96]	; (800c098 <LmHandlerInit+0xd0>)
 800c036:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800c038:	4b17      	ldr	r3, [pc, #92]	; (800c098 <LmHandlerInit+0xd0>)
 800c03a:	4a18      	ldr	r2, [pc, #96]	; (800c09c <LmHandlerInit+0xd4>)
 800c03c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800c03e:	4b16      	ldr	r3, [pc, #88]	; (800c098 <LmHandlerInit+0xd0>)
 800c040:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <LmHandlerInit+0xd8>)
 800c042:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c044:	4914      	ldr	r1, [pc, #80]	; (800c098 <LmHandlerInit+0xd0>)
 800c046:	2000      	movs	r0, #0
 800c048:	f000 fdb4 	bl	800cbb4 <LmHandlerPackageRegister>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800c052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c056:	e00a      	b.n	800c06e <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c058:	463b      	mov	r3, r7
 800c05a:	4618      	mov	r0, r3
 800c05c:	f001 fd2a 	bl	800dab4 <LmhpPackagesRegistrationInit>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d002      	beq.n	800c06c <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800c066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c06a:	e000      	b.n	800c06e <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20000508 	.word	0x20000508
 800c07c:	2000050c 	.word	0x2000050c
 800c080:	0800c88d 	.word	0x0800c88d
 800c084:	0800c901 	.word	0x0800c901
 800c088:	0800c9d1 	.word	0x0800c9d1
 800c08c:	0800cb21 	.word	0x0800cb21
 800c090:	2000051c 	.word	0x2000051c
 800c094:	0800d061 	.word	0x0800d061
 800c098:	200004cc 	.word	0x200004cc
 800c09c:	0800ce75 	.word	0x0800ce75
 800c0a0:	0800cead 	.word	0x0800cead

0800c0a4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b092      	sub	sp, #72	; 0x48
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c0ac:	2218      	movs	r2, #24
 800c0ae:	6879      	ldr	r1, [r7, #4]
 800c0b0:	4884      	ldr	r0, [pc, #528]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c0b2:	f00b f88c 	bl	80171ce <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800c0b6:	4b84      	ldr	r3, [pc, #528]	; (800c2c8 <LmHandlerConfigure+0x224>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c0bc:	f7fe fb58 	bl	800a770 <LoraInfo_GetPtr>
 800c0c0:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c0c2:	4b80      	ldr	r3, [pc, #512]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	4093      	lsls	r3, r2
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d106      	bne.n	800c0e6 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800c0d8:	4b7c      	ldr	r3, [pc, #496]	; (800c2cc <LmHandlerConfigure+0x228>)
 800c0da:	2201      	movs	r2, #1
 800c0dc:	2100      	movs	r1, #0
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f00f fc1a 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c0e4:	e7fe      	b.n	800c0e4 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c0e6:	4b77      	ldr	r3, [pc, #476]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4978      	ldr	r1, [pc, #480]	; (800c2d0 <LmHandlerConfigure+0x22c>)
 800c0ee:	4879      	ldr	r0, [pc, #484]	; (800c2d4 <LmHandlerConfigure+0x230>)
 800c0f0:	f004 ffd4 	bl	801109c <LoRaMacInitialization>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800c0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0fe:	e0dc      	b.n	800c2ba <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800c100:	2327      	movs	r3, #39	; 0x27
 800c102:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c104:	f107 0318 	add.w	r3, r7, #24
 800c108:	4618      	mov	r0, r3
 800c10a:	f005 fd53 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d103      	bne.n	800c11c <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c114:	4b70      	ldr	r3, [pc, #448]	; (800c2d8 <LmHandlerConfigure+0x234>)
 800c116:	2201      	movs	r2, #1
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	e02a      	b.n	800c172 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c11c:	2328      	movs	r3, #40	; 0x28
 800c11e:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800c120:	4b6e      	ldr	r3, [pc, #440]	; (800c2dc <LmHandlerConfigure+0x238>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00c      	beq.n	800c144 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c12a:	f107 0318 	add.w	r3, r7, #24
 800c12e:	4618      	mov	r0, r3
 800c130:	f005 fb68 	bl	8011804 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800c134:	4b69      	ldr	r3, [pc, #420]	; (800c2dc <LmHandlerConfigure+0x238>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800c140:	4610      	mov	r0, r2
 800c142:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800c144:	2327      	movs	r3, #39	; 0x27
 800c146:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c148:	f107 0318 	add.w	r3, r7, #24
 800c14c:	4618      	mov	r0, r3
 800c14e:	f005 fd31 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10c      	bne.n	800c172 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c158:	2301      	movs	r3, #1
 800c15a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c15c:	f107 0318 	add.w	r3, r7, #24
 800c160:	4618      	mov	r0, r3
 800c162:	f005 fb4f 	bl	8011804 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c166:	7f3b      	ldrb	r3, [r7, #28]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800c16c:	4b5a      	ldr	r3, [pc, #360]	; (800c2d8 <LmHandlerConfigure+0x234>)
 800c16e:	2201      	movs	r2, #1
 800c170:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800c172:	4b59      	ldr	r3, [pc, #356]	; (800c2d8 <LmHandlerConfigure+0x234>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d022      	beq.n	800c1c0 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c17a:	4b58      	ldr	r3, [pc, #352]	; (800c2dc <LmHandlerConfigure+0x238>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d004      	beq.n	800c18e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c184:	4b55      	ldr	r3, [pc, #340]	; (800c2dc <LmHandlerConfigure+0x238>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	2000      	movs	r0, #0
 800c18c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800c18e:	2327      	movs	r3, #39	; 0x27
 800c190:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c192:	f107 0318 	add.w	r3, r7, #24
 800c196:	4618      	mov	r0, r3
 800c198:	f005 fb34 	bl	8011804 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800c1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1a2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c1a6:	4b47      	ldr	r3, [pc, #284]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c1a8:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800c1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ac:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800c1b0:	4b44      	ldr	r3, [pc, #272]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c1b2:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800c1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800c1ba:	4b42      	ldr	r3, [pc, #264]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c1bc:	709a      	strb	r2, [r3, #2]
 800c1be:	e008      	b.n	800c1d2 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c1c0:	2305      	movs	r3, #5
 800c1c2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c1c8:	f107 0318 	add.w	r3, r7, #24
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f005 fcf1 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c1d2:	4b3f      	ldr	r3, [pc, #252]	; (800c2d0 <LmHandlerConfigure+0x22c>)
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	4a3e      	ldr	r2, [pc, #248]	; (800c2d0 <LmHandlerConfigure+0x22c>)
 800c1d8:	68d2      	ldr	r2, [r2, #12]
 800c1da:	4611      	mov	r1, r2
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7ff fbfd 	bl	800b9dc <SecureElementInitMcuID>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ec:	e065      	b.n	800c2ba <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800c1ee:	2306      	movs	r3, #6
 800c1f0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c1f2:	f107 0318 	add.w	r3, r7, #24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f005 fb04 	bl	8011804 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4a38      	ldr	r2, [pc, #224]	; (800c2e0 <LmHandlerConfigure+0x23c>)
 800c200:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c202:	f107 0318 	add.w	r3, r7, #24
 800c206:	4618      	mov	r0, r3
 800c208:	f005 fcd4 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800c20c:	2302      	movs	r3, #2
 800c20e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800c210:	4b33      	ldr	r3, [pc, #204]	; (800c2e0 <LmHandlerConfigure+0x23c>)
 800c212:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c214:	f107 0318 	add.w	r3, r7, #24
 800c218:	4618      	mov	r0, r3
 800c21a:	f005 faf3 	bl	8011804 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800c21e:	2303      	movs	r3, #3
 800c220:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800c222:	4b30      	ldr	r3, [pc, #192]	; (800c2e4 <LmHandlerConfigure+0x240>)
 800c224:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c226:	f107 0318 	add.w	r3, r7, #24
 800c22a:	4618      	mov	r0, r3
 800c22c:	f005 faea 	bl	8011804 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800c230:	f7ff fc23 	bl	800ba7a <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c234:	230f      	movs	r3, #15
 800c236:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c238:	2301      	movs	r3, #1
 800c23a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c23c:	f107 0318 	add.w	r3, r7, #24
 800c240:	4618      	mov	r0, r3
 800c242:	f005 fcb7 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c246:	2310      	movs	r3, #16
 800c248:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c24a:	2300      	movs	r3, #0
 800c24c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c24e:	f107 0318 	add.w	r3, r7, #24
 800c252:	4618      	mov	r0, r3
 800c254:	f005 fcae 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c258:	2304      	movs	r3, #4
 800c25a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c25c:	4b19      	ldr	r3, [pc, #100]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c25e:	789b      	ldrb	r3, [r3, #2]
 800c260:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c262:	f107 0318 	add.w	r3, r7, #24
 800c266:	4618      	mov	r0, r3
 800c268:	f005 fca4 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c26c:	233a      	movs	r3, #58	; 0x3a
 800c26e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c270:	4b14      	ldr	r3, [pc, #80]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c272:	695b      	ldr	r3, [r3, #20]
 800c274:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c276:	f107 0318 	add.w	r3, r7, #24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f005 fc9a 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c280:	230f      	movs	r3, #15
 800c282:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c284:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	f107 0210 	add.w	r2, r7, #16
 800c28c:	4611      	mov	r1, r2
 800c28e:	4618      	mov	r0, r3
 800c290:	f008 fbe5 	bl	8014a5e <RegionGetPhyParam>
 800c294:	4603      	mov	r3, r0
 800c296:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	bf14      	ite	ne
 800c29e:	2301      	movne	r3, #1
 800c2a0:	2300      	moveq	r3, #0
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	4b07      	ldr	r3, [pc, #28]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c2a6:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800c2a8:	2014      	movs	r0, #20
 800c2aa:	f000 fad7 	bl	800c85c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <LmHandlerConfigure+0x220>)
 800c2b0:	79db      	ldrb	r3, [r3, #7]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f006 faf8 	bl	80128a8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3748      	adds	r7, #72	; 0x48
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200004f0 	.word	0x200004f0
 800c2c8:	20000538 	.word	0x20000538
 800c2cc:	0801c4d0 	.word	0x0801c4d0
 800c2d0:	2000051c 	.word	0x2000051c
 800c2d4:	2000050c 	.word	0x2000050c
 800c2d8:	2000062e 	.word	0x2000062e
 800c2dc:	20000508 	.word	0x20000508
 800c2e0:	200004b4 	.word	0x200004b4
 800c2e4:	200004bc 	.word	0x200004bc

0800c2e8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800c2ee:	f002 fe49 	bl	800ef84 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800c2f2:	f000 fd8b 	bl	800ce0c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800c2f6:	f000 fd5f 	bl	800cdb8 <LmHandlerPackageIsTxPending>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d117      	bne.n	800c330 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800c300:	4b0d      	ldr	r3, [pc, #52]	; (800c338 <LmHandlerProcess+0x50>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d014      	beq.n	800c332 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c308:	2300      	movs	r3, #0
 800c30a:	703b      	strb	r3, [r7, #0]
 800c30c:	2300      	movs	r3, #0
 800c30e:	707b      	strb	r3, [r7, #1]
 800c310:	2300      	movs	r3, #0
 800c312:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c314:	4b09      	ldr	r3, [pc, #36]	; (800c33c <LmHandlerProcess+0x54>)
 800c316:	78d9      	ldrb	r1, [r3, #3]
 800c318:	463b      	mov	r3, r7
 800c31a:	2200      	movs	r2, #0
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 f8d7 	bl	800c4d0 <LmHandlerSend>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d104      	bne.n	800c332 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c328:	4b03      	ldr	r3, [pc, #12]	; (800c338 <LmHandlerProcess+0x50>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	e000      	b.n	800c332 <LmHandlerProcess+0x4a>
        return;
 800c330:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	20000538 	.word	0x20000538
 800c33c:	200004f0 	.word	0x200004f0

0800c340 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c346:	681b      	ldr	r3, [r3, #0]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bc80      	pop	{r7}
 800c34e:	4770      	bx	lr
 800c350:	20000534 	.word	0x20000534

0800c354 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b092      	sub	sp, #72	; 0x48
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	460a      	mov	r2, r1
 800c35e:	71fb      	strb	r3, [r7, #7]
 800c360:	4613      	mov	r3, r2
 800c362:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c364:	2301      	movs	r3, #1
 800c366:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c36a:	4b46      	ldr	r3, [pc, #280]	; (800c484 <LmHandlerJoin+0x130>)
 800c36c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c370:	b2db      	uxtb	r3, r3
 800c372:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800c376:	4b43      	ldr	r3, [pc, #268]	; (800c484 <LmHandlerJoin+0x130>)
 800c378:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c37c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d10b      	bne.n	800c39e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c386:	2302      	movs	r3, #2
 800c388:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c38c:	4b3e      	ldr	r3, [pc, #248]	; (800c488 <LmHandlerJoin+0x134>)
 800c38e:	2202      	movs	r2, #2
 800c390:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800c392:	4a3d      	ldr	r2, [pc, #244]	; (800c488 <LmHandlerJoin+0x134>)
 800c394:	79bb      	ldrb	r3, [r7, #6]
 800c396:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800c398:	f005 f936 	bl	8011608 <LoRaMacStart>
 800c39c:	e05c      	b.n	800c458 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c3a4:	4b38      	ldr	r3, [pc, #224]	; (800c488 <LmHandlerJoin+0x134>)
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c3aa:	4b36      	ldr	r3, [pc, #216]	; (800c484 <LmHandlerJoin+0x130>)
 800c3ac:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c3b0:	4b35      	ldr	r3, [pc, #212]	; (800c488 <LmHandlerJoin+0x134>)
 800c3b2:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800c3b4:	4b33      	ldr	r3, [pc, #204]	; (800c484 <LmHandlerJoin+0x130>)
 800c3b6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800c3ba:	4b33      	ldr	r3, [pc, #204]	; (800c488 <LmHandlerJoin+0x134>)
 800c3bc:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c3be:	4b32      	ldr	r3, [pc, #200]	; (800c488 <LmHandlerJoin+0x134>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c3c4:	4a30      	ldr	r2, [pc, #192]	; (800c488 <LmHandlerJoin+0x134>)
 800c3c6:	79bb      	ldrb	r3, [r7, #6]
 800c3c8:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800c3ca:	4b30      	ldr	r3, [pc, #192]	; (800c48c <LmHandlerJoin+0x138>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	f083 0301 	eor.w	r3, r3, #1
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d034      	beq.n	800c442 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c3d8:	231f      	movs	r3, #31
 800c3da:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c3dc:	4b29      	ldr	r3, [pc, #164]	; (800c484 <LmHandlerJoin+0x130>)
 800c3de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c3e2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c3e4:	f107 030c 	add.w	r3, r7, #12
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f005 fbe3 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c3ee:	2320      	movs	r3, #32
 800c3f0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <LmHandlerJoin+0x130>)
 800c3f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c3f8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c3fa:	f107 030c 	add.w	r3, r7, #12
 800c3fe:	4618      	mov	r0, r3
 800c400:	f005 fbd8 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800c404:	2322      	movs	r3, #34	; 0x22
 800c406:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800c408:	4b1e      	ldr	r3, [pc, #120]	; (800c484 <LmHandlerJoin+0x130>)
 800c40a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c40e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c410:	f107 030c 	add.w	r3, r7, #12
 800c414:	4618      	mov	r0, r3
 800c416:	f005 fbcd 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c41a:	2321      	movs	r3, #33	; 0x21
 800c41c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800c41e:	4b19      	ldr	r3, [pc, #100]	; (800c484 <LmHandlerJoin+0x130>)
 800c420:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c424:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c426:	f107 030c 	add.w	r3, r7, #12
 800c42a:	4618      	mov	r0, r3
 800c42c:	f005 fbc2 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c430:	2329      	movs	r3, #41	; 0x29
 800c432:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c434:	4b16      	ldr	r3, [pc, #88]	; (800c490 <LmHandlerJoin+0x13c>)
 800c436:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c438:	f107 030c 	add.w	r3, r7, #12
 800c43c:	4618      	mov	r0, r3
 800c43e:	f005 fbb9 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800c442:	f005 f8e1 	bl	8011608 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c446:	2301      	movs	r3, #1
 800c448:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c44a:	2301      	movs	r3, #1
 800c44c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c44e:	f107 030c 	add.w	r3, r7, #12
 800c452:	4618      	mov	r0, r3
 800c454:	f005 fbae 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800c458:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <LmHandlerJoin+0x138>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	f083 0301 	eor.w	r3, r3, #1
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b00      	cmp	r3, #0
 800c464:	d102      	bne.n	800c46c <LmHandlerJoin+0x118>
 800c466:	79bb      	ldrb	r3, [r7, #6]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d004      	beq.n	800c476 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800c46c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c470:	4618      	mov	r0, r3
 800c472:	f005 ff49 	bl	8012308 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c478:	4a06      	ldr	r2, [pc, #24]	; (800c494 <LmHandlerJoin+0x140>)
 800c47a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c47c:	bf00      	nop
 800c47e:	3748      	adds	r7, #72	; 0x48
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	200004f0 	.word	0x200004f0
 800c488:	20000094 	.word	0x20000094
 800c48c:	2000062e 	.word	0x2000062e
 800c490:	01000400 	.word	0x01000400
 800c494:	20000534 	.word	0x20000534

0800c498 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08c      	sub	sp, #48	; 0x30
 800c49c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c4a2:	1d3b      	adds	r3, r7, #4
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f005 f9ad 	bl	8011804 <LoRaMacMibGetRequestConfirm>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800c4b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c4b8:	7a3b      	ldrb	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e002      	b.n	800c4c8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e000      	b.n	800c4c8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c4c6:	2300      	movs	r3, #0
    }
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3730      	adds	r7, #48	; 0x30
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08a      	sub	sp, #40	; 0x28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	70fb      	strb	r3, [r7, #3]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c4e0:	23ff      	movs	r3, #255	; 0xff
 800c4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800c4e6:	f002 faa7 	bl	800ea38 <LoRaMacIsBusy>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c4f0:	f06f 0301 	mvn.w	r3, #1
 800c4f4:	e0ab      	b.n	800c64e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800c4f6:	f002 fac7 	bl	800ea88 <LoRaMacIsStopped>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c500:	f06f 0302 	mvn.w	r3, #2
 800c504:	e0a3      	b.n	800c64e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c506:	f7ff ffc7 	bl	800c498 <LmHandlerJoinStatus>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d00a      	beq.n	800c526 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c510:	4b51      	ldr	r3, [pc, #324]	; (800c658 <LmHandlerSend+0x188>)
 800c512:	79db      	ldrb	r3, [r3, #7]
 800c514:	4a50      	ldr	r2, [pc, #320]	; (800c658 <LmHandlerSend+0x188>)
 800c516:	7a12      	ldrb	r2, [r2, #8]
 800c518:	4611      	mov	r1, r2
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff ff1a 	bl	800c354 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c520:	f06f 0302 	mvn.w	r3, #2
 800c524:	e093      	b.n	800c64e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c526:	4a4d      	ldr	r2, [pc, #308]	; (800c65c <LmHandlerSend+0x18c>)
 800c528:	78fb      	ldrb	r3, [r7, #3]
 800c52a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bf14      	ite	ne
 800c532:	2301      	movne	r3, #1
 800c534:	2300      	moveq	r3, #0
 800c536:	b2db      	uxtb	r3, r3
 800c538:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c53a:	4b49      	ldr	r3, [pc, #292]	; (800c660 <LmHandlerSend+0x190>)
 800c53c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c540:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	785b      	ldrb	r3, [r3, #1]
 800c546:	f107 020c 	add.w	r2, r7, #12
 800c54a:	4611      	mov	r1, r2
 800c54c:	4618      	mov	r0, r3
 800c54e:	f005 f8c9 	bl	80116e4 <LoRaMacQueryTxPossible>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d009      	beq.n	800c56c <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c558:	2300      	movs	r3, #0
 800c55a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c55c:	2300      	movs	r3, #0
 800c55e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c564:	23f9      	movs	r3, #249	; 0xf9
 800c566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c56a:	e009      	b.n	800c580 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	785b      	ldrb	r3, [r3, #1]
 800c576:	b29b      	uxth	r3, r3
 800c578:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c580:	4b36      	ldr	r3, [pc, #216]	; (800c65c <LmHandlerSend+0x18c>)
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	3310      	adds	r3, #16
 800c586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c58a:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c58e:	4b34      	ldr	r3, [pc, #208]	; (800c660 <LmHandlerSend+0x190>)
 800c590:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c594:	4b31      	ldr	r3, [pc, #196]	; (800c65c <LmHandlerSend+0x18c>)
 800c596:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800c598:	78ba      	ldrb	r2, [r7, #2]
 800c59a:	f107 0310 	add.w	r3, r7, #16
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f006 f849 	bl	8012638 <LoRaMacMcpsRequest>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	4a2d      	ldr	r2, [pc, #180]	; (800c664 <LmHandlerSend+0x194>)
 800c5b0:	6013      	str	r3, [r2, #0]

    switch( status )
 800c5b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5b6:	2b11      	cmp	r3, #17
 800c5b8:	d842      	bhi.n	800c640 <LmHandlerSend+0x170>
 800c5ba:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <LmHandlerSend+0xf0>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c609 	.word	0x0800c609
 800c5c4:	0800c621 	.word	0x0800c621
 800c5c8:	0800c641 	.word	0x0800c641
 800c5cc:	0800c641 	.word	0x0800c641
 800c5d0:	0800c641 	.word	0x0800c641
 800c5d4:	0800c641 	.word	0x0800c641
 800c5d8:	0800c641 	.word	0x0800c641
 800c5dc:	0800c629 	.word	0x0800c629
 800c5e0:	0800c641 	.word	0x0800c641
 800c5e4:	0800c641 	.word	0x0800c641
 800c5e8:	0800c641 	.word	0x0800c641
 800c5ec:	0800c639 	.word	0x0800c639
 800c5f0:	0800c641 	.word	0x0800c641
 800c5f4:	0800c641 	.word	0x0800c641
 800c5f8:	0800c621 	.word	0x0800c621
 800c5fc:	0800c621 	.word	0x0800c621
 800c600:	0800c621 	.word	0x0800c621
 800c604:	0800c631 	.word	0x0800c631
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800c608:	4b17      	ldr	r3, [pc, #92]	; (800c668 <LmHandlerSend+0x198>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800c60e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c612:	f113 0f07 	cmn.w	r3, #7
 800c616:	d017      	beq.n	800c648 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c618:	2300      	movs	r3, #0
 800c61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800c61e:	e013      	b.n	800c648 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c620:	23fe      	movs	r3, #254	; 0xfe
 800c622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c626:	e010      	b.n	800c64a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c628:	23fd      	movs	r3, #253	; 0xfd
 800c62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c62e:	e00c      	b.n	800c64a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c630:	23fb      	movs	r3, #251	; 0xfb
 800c632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c636:	e008      	b.n	800c64a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c638:	23fa      	movs	r3, #250	; 0xfa
 800c63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c63e:	e004      	b.n	800c64a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c640:	23ff      	movs	r3, #255	; 0xff
 800c642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c646:	e000      	b.n	800c64a <LmHandlerSend+0x17a>
            break;
 800c648:	bf00      	nop
    }

    return lmhStatus;
 800c64a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3728      	adds	r7, #40	; 0x28
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000094 	.word	0x20000094
 800c65c:	200000a0 	.word	0x200000a0
 800c660:	200004f0 	.word	0x200004f0
 800c664:	20000534 	.word	0x20000534
 800c668:	20000538 	.word	0x20000538

0800c66c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c672:	2309      	movs	r3, #9
 800c674:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c676:	463b      	mov	r3, r7
 800c678:	4618      	mov	r0, r3
 800c67a:	f005 fe45 	bl	8012308 <LoRaMacMlmeRequest>
 800c67e:	4603      	mov	r3, r0
 800c680:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	4a06      	ldr	r2, [pc, #24]	; (800c6a0 <LmHandlerDeviceTimeReq+0x34>)
 800c686:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c68e:	2300      	movs	r3, #0
 800c690:	e001      	b.n	800c696 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20000534 	.word	0x20000534

0800c6a4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c6ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bc80      	pop	{r7}
 800c6ba:	4770      	bx	lr

0800c6bc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b08e      	sub	sp, #56	; 0x38
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800c6cc:	f002 f9b4 	bl	800ea38 <LoRaMacIsBusy>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c6d6:	f06f 0301 	mvn.w	r3, #1
 800c6da:	e071      	b.n	800c7c0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800c6dc:	f7ff fedc 	bl	800c498 <LmHandlerJoinStatus>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d002      	beq.n	800c6ec <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6e6:	f06f 0302 	mvn.w	r3, #2
 800c6ea:	e069      	b.n	800c7c0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c6f0:	f107 030c 	add.w	r3, r7, #12
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f005 f885 	bl	8011804 <LoRaMacMibGetRequestConfirm>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c704:	e05c      	b.n	800c7c0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c706:	7c3b      	ldrb	r3, [r7, #16]
 800c708:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800c70c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	429a      	cmp	r2, r3
 800c714:	d052      	beq.n	800c7bc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d028      	beq.n	800c76e <LmHandlerRequestClass+0xb2>
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	dc48      	bgt.n	800c7b2 <LmHandlerRequestClass+0xf6>
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <LmHandlerRequestClass+0x6e>
 800c724:	2b01      	cmp	r3, #1
 800c726:	d01e      	beq.n	800c766 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800c728:	e043      	b.n	800c7b2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800c72a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d041      	beq.n	800c7b6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c736:	f107 030c 	add.w	r3, r7, #12
 800c73a:	4618      	mov	r0, r3
 800c73c:	f005 fa3a 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c746:	4b20      	ldr	r3, [pc, #128]	; (800c7c8 <LmHandlerRequestClass+0x10c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d032      	beq.n	800c7b6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c750:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <LmHandlerRequestClass+0x10c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	79fa      	ldrb	r2, [r7, #7]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
                break;
 800c75c:	e02b      	b.n	800c7b6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c75e:	23ff      	movs	r3, #255	; 0xff
 800c760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800c764:	e027      	b.n	800c7b6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c766:	23ff      	movs	r3, #255	; 0xff
 800c768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800c76c:	e026      	b.n	800c7bc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800c76e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c776:	23ff      	movs	r3, #255	; 0xff
 800c778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800c77c:	e01d      	b.n	800c7ba <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c782:	f107 030c 	add.w	r3, r7, #12
 800c786:	4618      	mov	r0, r3
 800c788:	f005 fa14 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c792:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <LmHandlerRequestClass+0x10c>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00e      	beq.n	800c7ba <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c79c:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <LmHandlerRequestClass+0x10c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a2:	79fa      	ldrb	r2, [r7, #7]
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
                break;
 800c7a8:	e007      	b.n	800c7ba <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c7aa:	23ff      	movs	r3, #255	; 0xff
 800c7ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800c7b0:	e003      	b.n	800c7ba <LmHandlerRequestClass+0xfe>
                break;
 800c7b2:	bf00      	nop
 800c7b4:	e002      	b.n	800c7bc <LmHandlerRequestClass+0x100>
                break;
 800c7b6:	bf00      	nop
 800c7b8:	e000      	b.n	800c7bc <LmHandlerRequestClass+0x100>
                break;
 800c7ba:	bf00      	nop
        }
    }
    return errorStatus;
 800c7bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3738      	adds	r7, #56	; 0x38
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20000508 	.word	0x20000508

0800c7cc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08c      	sub	sp, #48	; 0x30
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7de:	e010      	b.n	800c802 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c7e4:	f107 0308 	add.w	r3, r7, #8
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f005 f80b 	bl	8011804 <LoRaMacMibGetRequestConfirm>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7f8:	e003      	b.n	800c802 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c7fa:	7b3a      	ldrb	r2, [r7, #12]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3730      	adds	r7, #48	; 0x30
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08c      	sub	sp, #48	; 0x30
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c81e:	e016      	b.n	800c84e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c820:	2320      	movs	r3, #32
 800c822:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800c824:	f107 0308 	add.w	r3, r7, #8
 800c828:	4618      	mov	r0, r3
 800c82a:	f004 ffeb 	bl	8011804 <LoRaMacMibGetRequestConfirm>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c838:	e009      	b.n	800c84e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c83a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f993 2000 	ldrsb.w	r2, [r3]
 800c848:	4b03      	ldr	r3, [pc, #12]	; (800c858 <LmHandlerGetTxDatarate+0x4c>)
 800c84a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3730      	adds	r7, #48	; 0x30
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	200004f0 	.word	0x200004f0

0800c85c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08c      	sub	sp, #48	; 0x30
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c864:	2323      	movs	r3, #35	; 0x23
 800c866:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c86c:	f107 0308 	add.w	r3, r7, #8
 800c870:	4618      	mov	r0, r3
 800c872:	f005 f99f 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c880:	e000      	b.n	800c884 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3730      	adds	r7, #48	; 0x30
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c894:	4b18      	ldr	r3, [pc, #96]	; (800c8f8 <McpsConfirm+0x6c>)
 800c896:	2201      	movs	r2, #1
 800c898:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	785a      	ldrb	r2, [r3, #1]
 800c89e:	4b16      	ldr	r3, [pc, #88]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8a0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	789b      	ldrb	r3, [r3, #2]
 800c8a6:	b25a      	sxtb	r2, r3
 800c8a8:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8aa:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	4a11      	ldr	r2, [pc, #68]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8b2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c8ba:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8bc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8c6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	791b      	ldrb	r3, [r3, #4]
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8d0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800c8d2:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <McpsConfirm+0x70>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c8dc:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <McpsConfirm+0x70>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e2:	4805      	ldr	r0, [pc, #20]	; (800c8f8 <McpsConfirm+0x6c>)
 800c8e4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c8e6:	6879      	ldr	r1, [r7, #4]
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	f000 f9e9 	bl	800ccc0 <LmHandlerPackagesNotify>
}
 800c8ee:	bf00      	nop
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	200000a0 	.word	0x200000a0
 800c8fc:	20000508 	.word	0x20000508

0800c900 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c90e:	4b2d      	ldr	r3, [pc, #180]	; (800c9c4 <McpsIndication+0xc4>)
 800c910:	2201      	movs	r2, #1
 800c912:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	785a      	ldrb	r2, [r3, #1]
 800c918:	4b2a      	ldr	r3, [pc, #168]	; (800c9c4 <McpsIndication+0xc4>)
 800c91a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c91c:	4b29      	ldr	r3, [pc, #164]	; (800c9c4 <McpsIndication+0xc4>)
 800c91e:	785b      	ldrb	r3, [r3, #1]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d14b      	bne.n	800c9bc <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	791b      	ldrb	r3, [r3, #4]
 800c928:	b25a      	sxtb	r2, r3
 800c92a:	4b26      	ldr	r3, [pc, #152]	; (800c9c4 <McpsIndication+0xc4>)
 800c92c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c934:	b25a      	sxtb	r2, r3
 800c936:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <McpsIndication+0xc4>)
 800c938:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c940:	4b20      	ldr	r3, [pc, #128]	; (800c9c4 <McpsIndication+0xc4>)
 800c942:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	78da      	ldrb	r2, [r3, #3]
 800c948:	4b1e      	ldr	r3, [pc, #120]	; (800c9c4 <McpsIndication+0xc4>)
 800c94a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	4a1c      	ldr	r2, [pc, #112]	; (800c9c4 <McpsIndication+0xc4>)
 800c952:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	78db      	ldrb	r3, [r3, #3]
 800c958:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	7b1b      	ldrb	r3, [r3, #12]
 800c95e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800c966:	4b18      	ldr	r3, [pc, #96]	; (800c9c8 <McpsIndication+0xc8>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c970:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <McpsIndication+0xc8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c976:	f107 0210 	add.w	r2, r7, #16
 800c97a:	4912      	ldr	r1, [pc, #72]	; (800c9c4 <McpsIndication+0xc4>)
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800c980:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <McpsIndication+0xc8>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <McpsIndication+0x9a>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7e1b      	ldrb	r3, [r3, #24]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c992:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <McpsIndication+0xc8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c998:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c99a:	6879      	ldr	r1, [r7, #4]
 800c99c:	2001      	movs	r0, #1
 800c99e:	f000 f98f 	bl	800ccc0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c9a2:	f107 030f 	add.w	r3, r7, #15
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff ff10 	bl	800c7cc <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	795b      	ldrb	r3, [r3, #5]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d004      	beq.n	800c9be <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <McpsIndication+0xcc>)
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	e000      	b.n	800c9be <McpsIndication+0xbe>
        return;
 800c9bc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	200000bc 	.word	0x200000bc
 800c9c8:	20000508 	.word	0x20000508
 800c9cc:	20000538 	.word	0x20000538

0800c9d0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b08c      	sub	sp, #48	; 0x30
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c9d8:	4b49      	ldr	r3, [pc, #292]	; (800cb00 <MlmeConfirm+0x130>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	785a      	ldrb	r2, [r3, #1]
 800c9e2:	4b47      	ldr	r3, [pc, #284]	; (800cb00 <MlmeConfirm+0x130>)
 800c9e4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800c9e6:	4b47      	ldr	r3, [pc, #284]	; (800cb04 <MlmeConfirm+0x134>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d004      	beq.n	800c9fa <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c9f0:	4b44      	ldr	r3, [pc, #272]	; (800cb04 <MlmeConfirm+0x134>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f6:	4842      	ldr	r0, [pc, #264]	; (800cb00 <MlmeConfirm+0x130>)
 800c9f8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	2002      	movs	r0, #2
 800c9fe:	f000 f95f 	bl	800ccc0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	2b0b      	cmp	r3, #11
 800ca0a:	d872      	bhi.n	800caf2 <MlmeConfirm+0x122>
 800ca0c:	a201      	add	r2, pc, #4	; (adr r2, 800ca14 <MlmeConfirm+0x44>)
 800ca0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca12:	bf00      	nop
 800ca14:	0800ca45 	.word	0x0800ca45
 800ca18:	0800caf3 	.word	0x0800caf3
 800ca1c:	0800caf3 	.word	0x0800caf3
 800ca20:	0800caf3 	.word	0x0800caf3
 800ca24:	0800cac1 	.word	0x0800cac1
 800ca28:	0800caf3 	.word	0x0800caf3
 800ca2c:	0800caf3 	.word	0x0800caf3
 800ca30:	0800caf3 	.word	0x0800caf3
 800ca34:	0800caf3 	.word	0x0800caf3
 800ca38:	0800caf3 	.word	0x0800caf3
 800ca3c:	0800cad9 	.word	0x0800cad9
 800ca40:	0800caf3 	.word	0x0800caf3
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800ca44:	2306      	movs	r3, #6
 800ca46:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800ca48:	f107 0308 	add.w	r3, r7, #8
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f004 fed9 	bl	8011804 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800ca52:	4b2d      	ldr	r3, [pc, #180]	; (800cb08 <MlmeConfirm+0x138>)
 800ca54:	79db      	ldrb	r3, [r3, #7]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7ff fa78 	bl	800bf50 <SecureElementSetDevAddr>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d102      	bne.n	800ca6c <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	4a28      	ldr	r2, [pc, #160]	; (800cb0c <MlmeConfirm+0x13c>)
 800ca6a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ca6c:	4828      	ldr	r0, [pc, #160]	; (800cb10 <MlmeConfirm+0x140>)
 800ca6e:	f7ff fecd 	bl	800c80c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800ca72:	4828      	ldr	r0, [pc, #160]	; (800cb14 <MlmeConfirm+0x144>)
 800ca74:	f000 fa74 	bl	800cf60 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca78:	4b21      	ldr	r3, [pc, #132]	; (800cb00 <MlmeConfirm+0x130>)
 800ca7a:	785b      	ldrb	r3, [r3, #1]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d108      	bne.n	800ca92 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ca80:	4b21      	ldr	r3, [pc, #132]	; (800cb08 <MlmeConfirm+0x138>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800ca86:	4b24      	ldr	r3, [pc, #144]	; (800cb18 <MlmeConfirm+0x148>)
 800ca88:	785b      	ldrb	r3, [r3, #1]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fe16 	bl	800c6bc <LmHandlerRequestClass>
 800ca90:	e002      	b.n	800ca98 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ca92:	4b1d      	ldr	r3, [pc, #116]	; (800cb08 <MlmeConfirm+0x138>)
 800ca94:	22ff      	movs	r2, #255	; 0xff
 800ca96:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800ca98:	4b1a      	ldr	r3, [pc, #104]	; (800cb04 <MlmeConfirm+0x134>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800caa2:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <MlmeConfirm+0x134>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	4817      	ldr	r0, [pc, #92]	; (800cb08 <MlmeConfirm+0x138>)
 800caaa:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800caac:	4b14      	ldr	r3, [pc, #80]	; (800cb00 <MlmeConfirm+0x130>)
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d120      	bne.n	800caf6 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800cab4:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <MlmeConfirm+0x138>)
 800cab6:	79db      	ldrb	r3, [r3, #7]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe fff2 	bl	800baa2 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800cabe:	e01a      	b.n	800caf6 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800cac0:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <MlmeConfirm+0x14c>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	7a1a      	ldrb	r2, [r3, #8]
 800caca:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <MlmeConfirm+0x14c>)
 800cacc:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	7a5a      	ldrb	r2, [r3, #9]
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <MlmeConfirm+0x14c>)
 800cad4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800cad6:	e00f      	b.n	800caf8 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d105      	bne.n	800caec <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cae0:	4b0d      	ldr	r3, [pc, #52]	; (800cb18 <MlmeConfirm+0x148>)
 800cae2:	7c1b      	ldrb	r3, [r3, #16]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff fddd 	bl	800c6a4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800caea:	e005      	b.n	800caf8 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800caec:	f7ff fdbe 	bl	800c66c <LmHandlerDeviceTimeReq>
            break;
 800caf0:	e002      	b.n	800caf8 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800caf2:	bf00      	nop
 800caf4:	e000      	b.n	800caf8 <MlmeConfirm+0x128>
            break;
 800caf6:	bf00      	nop
    }
}
 800caf8:	bf00      	nop
 800cafa:	3730      	adds	r7, #48	; 0x30
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	200000a0 	.word	0x200000a0
 800cb04:	20000508 	.word	0x20000508
 800cb08:	20000094 	.word	0x20000094
 800cb0c:	200004b4 	.word	0x200004b4
 800cb10:	20000098 	.word	0x20000098
 800cb14:	20000099 	.word	0x20000099
 800cb18:	200004f0 	.word	0x200004f0
 800cb1c:	200000bc 	.word	0x200000bc

0800cb20 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cb2a:	4b20      	ldr	r3, [pc, #128]	; (800cbac <MlmeIndication+0x8c>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	785a      	ldrb	r2, [r3, #1]
 800cb34:	4b1d      	ldr	r3, [pc, #116]	; (800cbac <MlmeIndication+0x8c>)
 800cb36:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	789b      	ldrb	r3, [r3, #2]
 800cb3c:	b25a      	sxtb	r2, r3
 800cb3e:	4b1b      	ldr	r3, [pc, #108]	; (800cbac <MlmeIndication+0x8c>)
 800cb40:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb48:	b25a      	sxtb	r2, r3
 800cb4a:	4b18      	ldr	r3, [pc, #96]	; (800cbac <MlmeIndication+0x8c>)
 800cb4c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cb54:	4b15      	ldr	r3, [pc, #84]	; (800cbac <MlmeIndication+0x8c>)
 800cb56:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	78da      	ldrb	r2, [r3, #3]
 800cb5c:	4b13      	ldr	r3, [pc, #76]	; (800cbac <MlmeIndication+0x8c>)
 800cb5e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	4a11      	ldr	r2, [pc, #68]	; (800cbac <MlmeIndication+0x8c>)
 800cb66:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800cb68:	4b11      	ldr	r3, [pc, #68]	; (800cbb0 <MlmeIndication+0x90>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00d      	beq.n	800cb8e <MlmeIndication+0x6e>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b0a      	cmp	r3, #10
 800cb78:	d009      	beq.n	800cb8e <MlmeIndication+0x6e>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	2b0e      	cmp	r3, #14
 800cb80:	d005      	beq.n	800cb8e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cb82:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <MlmeIndication+0x90>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb88:	4908      	ldr	r1, [pc, #32]	; (800cbac <MlmeIndication+0x8c>)
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	2003      	movs	r0, #3
 800cb92:	f000 f895 	bl	800ccc0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	2b0a      	cmp	r3, #10
 800cb9c:	d001      	beq.n	800cba2 <MlmeIndication+0x82>
 800cb9e:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800cba0:	e000      	b.n	800cba4 <MlmeIndication+0x84>
            break;
 800cba2:	bf00      	nop
    }
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	200000bc 	.word	0x200000bc
 800cbb0:	20000508 	.word	0x20000508

0800cbb4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d104      	bne.n	800cbd4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800cbca:	f000 fa8b 	bl	800d0e4 <LmhpCompliancePackageFactory>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	60fb      	str	r3, [r7, #12]
                break;
 800cbd2:	e00d      	b.n	800cbf0 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800cbd4:	f107 020c 	add.w	r2, r7, #12
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	4611      	mov	r1, r2
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 ff73 	bl	800dac8 <LmhpPackagesRegister>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800cbe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbec:	e03b      	b.n	800cc66 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800cbee:	bf00      	nop
            }
    }
    if( package != NULL )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d035      	beq.n	800cc62 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	491d      	ldr	r1, [pc, #116]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cbfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	4a1b      	ldr	r2, [pc, #108]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc08:	4a1a      	ldr	r2, [pc, #104]	; (800cc74 <LmHandlerPackageRegister+0xc0>)
 800cc0a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800cc0c:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <LmHandlerPackageRegister+0xc4>)
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	4917      	ldr	r1, [pc, #92]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cc14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cc1a:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800cc1c:	4b16      	ldr	r3, [pc, #88]	; (800cc78 <LmHandlerPackageRegister+0xc4>)
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	79fb      	ldrb	r3, [r7, #7]
 800cc22:	4913      	ldr	r1, [pc, #76]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cc24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cc2a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cc30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc34:	4a11      	ldr	r2, [pc, #68]	; (800cc7c <LmHandlerPackageRegister+0xc8>)
 800cc36:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cc38:	4b0f      	ldr	r3, [pc, #60]	; (800cc78 <LmHandlerPackageRegister+0xc4>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	490c      	ldr	r1, [pc, #48]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cc40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc44:	6992      	ldr	r2, [r2, #24]
 800cc46:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cc48:	79fb      	ldrb	r3, [r7, #7]
 800cc4a:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <LmHandlerPackageRegister+0xbc>)
 800cc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	4a0b      	ldr	r2, [pc, #44]	; (800cc80 <LmHandlerPackageRegister+0xcc>)
 800cc54:	6851      	ldr	r1, [r2, #4]
 800cc56:	4a0a      	ldr	r2, [pc, #40]	; (800cc80 <LmHandlerPackageRegister+0xcc>)
 800cc58:	7852      	ldrb	r2, [r2, #1]
 800cc5a:	6838      	ldr	r0, [r7, #0]
 800cc5c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e001      	b.n	800cc66 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cc62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	200004dc 	.word	0x200004dc
 800cc74:	0800c355 	.word	0x0800c355
 800cc78:	20000508 	.word	0x20000508
 800cc7c:	0800c66d 	.word	0x0800c66d
 800cc80:	200000d0 	.word	0x200000d0

0800cc84 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d80e      	bhi.n	800ccb2 <LmHandlerPackageIsInitialized+0x2e>
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <LmHandlerPackageIsInitialized+0x38>)
 800cc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d007      	beq.n	800ccb2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	4a05      	ldr	r2, [pc, #20]	; (800ccbc <LmHandlerPackageIsInitialized+0x38>)
 800cca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	4798      	blx	r3
 800ccae:	4603      	mov	r3, r0
 800ccb0:	e000      	b.n	800ccb4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ccb2:	2300      	movs	r3, #0
    }
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	200004dc 	.word	0x200004dc

0800ccc0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
 800ccd0:	e067      	b.n	800cda2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800ccd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccd6:	4a37      	ldr	r2, [pc, #220]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800ccd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d05a      	beq.n	800cd96 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d84e      	bhi.n	800cd84 <LmHandlerPackagesNotify+0xc4>
 800cce6:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <LmHandlerPackagesNotify+0x2c>)
 800cce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccec:	0800ccfd 	.word	0x0800ccfd
 800ccf0:	0800cd1f 	.word	0x0800cd1f
 800ccf4:	0800cd41 	.word	0x0800cd41
 800ccf8:	0800cd63 	.word	0x0800cd63
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ccfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd00:	4a2c      	ldr	r2, [pc, #176]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d03d      	beq.n	800cd88 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800cd0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd10:	4a28      	ldr	r2, [pc, #160]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	6838      	ldr	r0, [r7, #0]
 800cd1a:	4798      	blx	r3
                        }
                        break;
 800cd1c:	e034      	b.n	800cd88 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800cd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd22:	4a24      	ldr	r2, [pc, #144]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d02e      	beq.n	800cd8c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800cd2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd32:	4a20      	ldr	r2, [pc, #128]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	6838      	ldr	r0, [r7, #0]
 800cd3c:	4798      	blx	r3
                        }
                        break;
 800cd3e:	e025      	b.n	800cd8c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd44:	4a1b      	ldr	r2, [pc, #108]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01f      	beq.n	800cd90 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800cd50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd54:	4a17      	ldr	r2, [pc, #92]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd5a:	6a1b      	ldr	r3, [r3, #32]
 800cd5c:	6838      	ldr	r0, [r7, #0]
 800cd5e:	4798      	blx	r3
                        }
                        break;
 800cd60:	e016      	b.n	800cd90 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd66:	4a13      	ldr	r2, [pc, #76]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d010      	beq.n	800cd94 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd76:	4a0f      	ldr	r2, [pc, #60]	; (800cdb4 <LmHandlerPackagesNotify+0xf4>)
 800cd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7e:	6838      	ldr	r0, [r7, #0]
 800cd80:	4798      	blx	r3
                        }
                        break;
 800cd82:	e007      	b.n	800cd94 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800cd84:	bf00      	nop
 800cd86:	e006      	b.n	800cd96 <LmHandlerPackagesNotify+0xd6>
                        break;
 800cd88:	bf00      	nop
 800cd8a:	e004      	b.n	800cd96 <LmHandlerPackagesNotify+0xd6>
                        break;
 800cd8c:	bf00      	nop
 800cd8e:	e002      	b.n	800cd96 <LmHandlerPackagesNotify+0xd6>
                        break;
 800cd90:	bf00      	nop
 800cd92:	e000      	b.n	800cd96 <LmHandlerPackagesNotify+0xd6>
                        break;
 800cd94:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	73fb      	strb	r3, [r7, #15]
 800cda2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	dd93      	ble.n	800ccd2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	200004dc 	.word	0x200004dc

0800cdb8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	71fb      	strb	r3, [r7, #7]
 800cdc2:	e018      	b.n	800cdf6 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800cdc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdc8:	4a0f      	ldr	r2, [pc, #60]	; (800ce08 <LmHandlerPackageIsTxPending+0x50>)
 800cdca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cdd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdd6:	4a0c      	ldr	r2, [pc, #48]	; (800ce08 <LmHandlerPackageIsTxPending+0x50>)
 800cdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	4798      	blx	r3
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e00a      	b.n	800ce00 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	71fb      	strb	r3, [r7, #7]
 800cdf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	dde2      	ble.n	800cdc4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	200004dc 	.word	0x200004dc

0800ce0c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce12:	2300      	movs	r3, #0
 800ce14:	71fb      	strb	r3, [r7, #7]
 800ce16:	e022      	b.n	800ce5e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce1c:	4a14      	ldr	r2, [pc, #80]	; (800ce70 <LmHandlerPackagesProcess+0x64>)
 800ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d015      	beq.n	800ce52 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2a:	4a11      	ldr	r2, [pc, #68]	; (800ce70 <LmHandlerPackagesProcess+0x64>)
 800ce2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce30:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00d      	beq.n	800ce52 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff ff23 	bl	800cc84 <LmHandlerPackageIsInitialized>
 800ce3e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d006      	beq.n	800ce52 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ce44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce48:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <LmHandlerPackagesProcess+0x64>)
 800ce4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	71fb      	strb	r3, [r7, #7]
 800ce5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	ddd8      	ble.n	800ce18 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ce66:	bf00      	nop
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	200004dc 	.word	0x200004dc

0800ce74 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ce7e:	4a09      	ldr	r2, [pc, #36]	; (800cea4 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800ce84:	4b08      	ldr	r3, [pc, #32]	; (800cea8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800ce8e:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce94:	79fa      	ldrb	r2, [r7, #7]
 800ce96:	4610      	mov	r0, r2
 800ce98:	4798      	blx	r3
    }
}
 800ce9a:	bf00      	nop
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	200004f0 	.word	0x200004f0
 800cea8:	20000508 	.word	0x20000508

0800ceac <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ceb6:	4a09      	ldr	r2, [pc, #36]	; (800cedc <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800cebc:	4b08      	ldr	r3, [pc, #32]	; (800cee0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d005      	beq.n	800ced2 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800cec6:	4b06      	ldr	r3, [pc, #24]	; (800cee0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cecc:	79fa      	ldrb	r2, [r7, #7]
 800cece:	4610      	mov	r0, r2
 800ced0:	4798      	blx	r3
    }
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	200004f0 	.word	0x200004f0
 800cee0:	20000508 	.word	0x20000508

0800cee4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	4603      	mov	r3, r0
 800ceec:	6039      	str	r1, [r7, #0]
 800ceee:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d102      	bne.n	800cefc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800cef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cefa:	e00e      	b.n	800cf1a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <LmHandlerGetVersion+0x24>
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d004      	beq.n	800cf10 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800cf06:	e007      	b.n	800cf18 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	4a06      	ldr	r2, [pc, #24]	; (800cf24 <LmHandlerGetVersion+0x40>)
 800cf0c:	601a      	str	r2, [r3, #0]
            break;
 800cf0e:	e003      	b.n	800cf18 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	4a05      	ldr	r2, [pc, #20]	; (800cf28 <LmHandlerGetVersion+0x44>)
 800cf14:	601a      	str	r2, [r3, #0]
            break;
 800cf16:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bc80      	pop	{r7}
 800cf22:	4770      	bx	lr
 800cf24:	01000400 	.word	0x01000400
 800cf28:	02010001 	.word	0x02010001

0800cf2c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800cf30:	f005 fce0 	bl	80128f4 <LoRaMacDeInitialization>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e001      	b.n	800cf42 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cf3e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800cf4a:	f004 fb93 	bl	8011674 <LoRaMacHalt>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d101      	bne.n	800cf58 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cf54:	2300      	movs	r3, #0
 800cf56:	e001      	b.n	800cf5c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cf58:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08c      	sub	sp, #48	; 0x30
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf72:	e016      	b.n	800cfa2 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cf74:	2321      	movs	r3, #33	; 0x21
 800cf76:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cf78:	f107 0308 	add.w	r3, r7, #8
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f004 fc41 	bl	8011804 <LoRaMacMibGetRequestConfirm>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf8c:	e009      	b.n	800cfa2 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800cf8e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f993 2000 	ldrsb.w	r2, [r3]
 800cf9c:	4b03      	ldr	r3, [pc, #12]	; (800cfac <LmHandlerGetTxPower+0x4c>)
 800cf9e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3730      	adds	r7, #48	; 0x30
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200004f0 	.word	0x200004f0

0800cfb0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08e      	sub	sp, #56	; 0x38
 800cfb4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800cfc0:	f7ff ffc1 	bl	800cf46 <LmHandlerHalt>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800cfca:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d12f      	bne.n	800d032 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cfd2:	f000 f859 	bl	800d088 <NvmDataMgmtStoreBegin>
 800cfd6:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfda:	f113 0f02 	cmn.w	r3, #2
 800cfde:	d103      	bne.n	800cfe8 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800cfe0:	23f8      	movs	r3, #248	; 0xf8
 800cfe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cfe6:	e01c      	b.n	800d022 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d104      	bne.n	800cff8 <LmHandlerNvmDataStore+0x48>
 800cfee:	4b1b      	ldr	r3, [pc, #108]	; (800d05c <LmHandlerNvmDataStore+0xac>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d103      	bne.n	800d000 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cff8:	23ff      	movs	r3, #255	; 0xff
 800cffa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cffe:	e010      	b.n	800d022 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d000:	2327      	movs	r3, #39	; 0x27
 800d002:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d004:	463b      	mov	r3, r7
 800d006:	4618      	mov	r0, r3
 800d008:	f004 fbfc 	bl	8011804 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d010:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800d014:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d016:	4b11      	ldr	r3, [pc, #68]	; (800d05c <LmHandlerNvmDataStore+0xac>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	695b      	ldr	r3, [r3, #20]
 800d01c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d01e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d020:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d022:	f000 f847 	bl	800d0b4 <NvmDataMgmtStoreEnd>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d02c:	23ff      	movs	r3, #255	; 0xff
 800d02e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d032:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d036:	2b00      	cmp	r3, #0
 800d038:	d109      	bne.n	800d04e <LmHandlerNvmDataStore+0x9e>
 800d03a:	4b08      	ldr	r3, [pc, #32]	; (800d05c <LmHandlerNvmDataStore+0xac>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	69db      	ldr	r3, [r3, #28]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d004      	beq.n	800d04e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <LmHandlerNvmDataStore+0xac>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	2001      	movs	r0, #1
 800d04c:	4798      	blx	r3
    }

    return lmhStatus;
 800d04e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d052:	4618      	mov	r0, r3
 800d054:	3738      	adds	r7, #56	; 0x38
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20000508 	.word	0x20000508

0800d060 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d06a:	4b06      	ldr	r3, [pc, #24]	; (800d084 <NvmDataMgmtEvent+0x24>)
 800d06c:	881a      	ldrh	r2, [r3, #0]
 800d06e:	88fb      	ldrh	r3, [r7, #6]
 800d070:	4313      	orrs	r3, r2
 800d072:	b29a      	uxth	r2, r3
 800d074:	4b03      	ldr	r3, [pc, #12]	; (800d084 <NvmDataMgmtEvent+0x24>)
 800d076:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bc80      	pop	{r7}
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	20000630 	.word	0x20000630

0800d088 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d08c:	4b08      	ldr	r3, [pc, #32]	; (800d0b0 <NvmDataMgmtStoreBegin+0x28>)
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d102      	bne.n	800d09a <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800d094:	f06f 0301 	mvn.w	r3, #1
 800d098:	e008      	b.n	800d0ac <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d09a:	f004 fac3 	bl	8011624 <LoRaMacStop>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d0a4:	f06f 0302 	mvn.w	r3, #2
 800d0a8:	e000      	b.n	800d0ac <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d0aa:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	20000630 	.word	0x20000630

0800d0b4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d0b8:	4b03      	ldr	r3, [pc, #12]	; (800d0c8 <NvmDataMgmtStoreEnd+0x14>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d0be:	f004 faa3 	bl	8011608 <LoRaMacStart>
    return NVM_DATA_OK;
 800d0c2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	20000630 	.word	0x20000630

0800d0cc <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	4802      	ldr	r0, [pc, #8]	; (800d0e0 <ClassBStatusReset+0x14>)
 800d0d6:	f00a f8b5 	bl	8017244 <memset1>
}
 800d0da:	bf00      	nop
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	20000648 	.word	0x20000648

0800d0e4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d0e8:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <LmhpCompliancePackageFactory+0x10>)
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bc80      	pop	{r7}
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	200000d8 	.word	0x200000d8

0800d0f8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	4613      	mov	r3, r2
 800d104:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d018      	beq.n	800d13e <LmhpComplianceInit+0x46>
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d015      	beq.n	800d13e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800d112:	4a19      	ldr	r2, [pc, #100]	; (800d178 <LmhpComplianceInit+0x80>)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d118:	4a18      	ldr	r2, [pc, #96]	; (800d17c <LmhpComplianceInit+0x84>)
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d11e:	4a17      	ldr	r2, [pc, #92]	; (800d17c <LmhpComplianceInit+0x84>)
 800d120:	79fb      	ldrb	r3, [r7, #7]
 800d122:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d124:	4b15      	ldr	r3, [pc, #84]	; (800d17c <LmhpComplianceInit+0x84>)
 800d126:	2201      	movs	r2, #1
 800d128:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d12a:	2300      	movs	r3, #0
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	4b14      	ldr	r3, [pc, #80]	; (800d180 <LmhpComplianceInit+0x88>)
 800d130:	2200      	movs	r2, #0
 800d132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d136:	4813      	ldr	r0, [pc, #76]	; (800d184 <LmhpComplianceInit+0x8c>)
 800d138:	f00e f940 	bl	801b3bc <UTIL_TIMER_Create>
 800d13c:	e005      	b.n	800d14a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d13e:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <LmhpComplianceInit+0x80>)
 800d140:	2200      	movs	r2, #0
 800d142:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d144:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <LmhpComplianceInit+0x84>)
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d14a:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <LmhpComplianceInit+0x84>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d150:	f7ff ffbc 	bl	800d0cc <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d154:	4b09      	ldr	r3, [pc, #36]	; (800d17c <LmhpComplianceInit+0x84>)
 800d156:	2200      	movs	r2, #0
 800d158:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d15a:	4b08      	ldr	r3, [pc, #32]	; (800d17c <LmhpComplianceInit+0x84>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d160:	4b06      	ldr	r3, [pc, #24]	; (800d17c <LmhpComplianceInit+0x84>)
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d168:	4b04      	ldr	r3, [pc, #16]	; (800d17c <LmhpComplianceInit+0x84>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800d170:	bf00      	nop
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	2000066c 	.word	0x2000066c
 800d17c:	20000634 	.word	0x20000634
 800d180:	0800da81 	.word	0x0800da81
 800d184:	20000670 	.word	0x20000670

0800d188 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d188:	b480      	push	{r7}
 800d18a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d18c:	4b02      	ldr	r3, [pc, #8]	; (800d198 <LmhpComplianceIsInitialized+0x10>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
}
 800d190:	4618      	mov	r0, r3
 800d192:	46bd      	mov	sp, r7
 800d194:	bc80      	pop	{r7}
 800d196:	4770      	bx	lr
 800d198:	20000634 	.word	0x20000634

0800d19c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d19c:	b480      	push	{r7}
 800d19e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d1a0:	4b02      	ldr	r3, [pc, #8]	; (800d1ac <LmhpComplianceIsTxPending+0x10>)
 800d1a2:	785b      	ldrb	r3, [r3, #1]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bc80      	pop	{r7}
 800d1aa:	4770      	bx	lr
 800d1ac:	20000634 	.word	0x20000634

0800d1b0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d1b6:	4b33      	ldr	r3, [pc, #204]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d1b8:	785b      	ldrb	r3, [r3, #1]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d03e      	beq.n	800d23c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d1be:	f00e fabb 	bl	801b738 <UTIL_TIMER_GetCurrentTime>
 800d1c2:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d1c4:	4b2f      	ldr	r3, [pc, #188]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d1c6:	685c      	ldr	r4, [r3, #4]
 800d1c8:	f7ff f8ba 	bl	800c340 <LmHandlerGetDutyCycleWaitTime>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	4423      	add	r3, r4
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d941      	bls.n	800d25a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d1d6:	4b2b      	ldr	r3, [pc, #172]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d1d8:	7a9b      	ldrb	r3, [r3, #10]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d03d      	beq.n	800d25a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800d1de:	23e0      	movs	r3, #224	; 0xe0
 800d1e0:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d1e2:	4b28      	ldr	r3, [pc, #160]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d1e4:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800d1e6:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d1e8:	4b26      	ldr	r3, [pc, #152]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d1ea:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800d1ec:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d1ee:	23ff      	movs	r3, #255	; 0xff
 800d1f0:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d1f2:	4b24      	ldr	r3, [pc, #144]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d1f4:	7a19      	ldrb	r1, [r3, #8]
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff f968 	bl	800c4d0 <LmHandlerSend>
 800d200:	4603      	mov	r3, r0
 800d202:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800d204:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d004      	beq.n	800d216 <LmhpComplianceProcess+0x66>
 800d20c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d210:	f113 0f07 	cmn.w	r3, #7
 800d214:	d106      	bne.n	800d224 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800d216:	4b1b      	ldr	r3, [pc, #108]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d218:	2200      	movs	r2, #0
 800d21a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d21c:	4b19      	ldr	r3, [pc, #100]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d21e:	2200      	movs	r2, #0
 800d220:	729a      	strb	r2, [r3, #10]
 800d222:	e007      	b.n	800d234 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800d224:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800d228:	4817      	ldr	r0, [pc, #92]	; (800d288 <LmhpComplianceProcess+0xd8>)
 800d22a:	f00e f9db 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800d22e:	4816      	ldr	r0, [pc, #88]	; (800d288 <LmhpComplianceProcess+0xd8>)
 800d230:	f00e f8fa 	bl	801b428 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800d234:	4a13      	ldr	r2, [pc, #76]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6053      	str	r3, [r2, #4]
 800d23a:	e00e      	b.n	800d25a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d23c:	4b11      	ldr	r3, [pc, #68]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d23e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d242:	2b00      	cmp	r3, #0
 800d244:	d009      	beq.n	800d25a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d246:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d248:	2200      	movs	r2, #0
 800d24a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d250:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d254:	4618      	mov	r0, r3
 800d256:	f7ff fa31 	bl	800c6bc <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d25a:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d25c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00a      	beq.n	800d27a <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d264:	4b07      	ldr	r3, [pc, #28]	; (800d284 <LmhpComplianceProcess+0xd4>)
 800d266:	2200      	movs	r2, #0
 800d268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800d26c:	4b07      	ldr	r3, [pc, #28]	; (800d28c <LmhpComplianceProcess+0xdc>)
 800d26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <LmhpComplianceProcess+0xdc>)
 800d276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d278:	4798      	blx	r3
        }
    }
}
 800d27a:	bf00      	nop
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd90      	pop	{r4, r7, pc}
 800d282:	bf00      	nop
 800d284:	20000634 	.word	0x20000634
 800d288:	20000670 	.word	0x20000670
 800d28c:	200000d8 	.word	0x200000d8

0800d290 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800d290:	b5b0      	push	{r4, r5, r7, lr}
 800d292:	b0a4      	sub	sp, #144	; 0x90
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d29e:	4bd0      	ldr	r3, [pc, #832]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	f083 0301 	eor.w	r3, r3, #1
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f040 83bf 	bne.w	800da2c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	78db      	ldrb	r3, [r3, #3]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d103      	bne.n	800d2be <LmhpComplianceOnMcpsIndication+0x2e>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	7b9b      	ldrb	r3, [r3, #14]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d005      	beq.n	800d2ca <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d2be:	4bc8      	ldr	r3, [pc, #800]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d2c0:	8a1b      	ldrh	r3, [r3, #16]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	4bc6      	ldr	r3, [pc, #792]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d2c8:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7b5b      	ldrb	r3, [r3, #13]
 800d2ce:	f083 0301 	eor.w	r3, r3, #1
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f040 83ab 	bne.w	800da30 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	78db      	ldrb	r3, [r3, #3]
 800d2de:	2be0      	cmp	r3, #224	; 0xe0
 800d2e0:	f040 83a8 	bne.w	800da34 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d2e4:	4bbe      	ldr	r3, [pc, #760]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689a      	ldr	r2, [r3, #8]
 800d2ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d2f2:	1c59      	adds	r1, r3, #1
 800d2f4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d2f8:	4413      	add	r3, r2
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	2b7f      	cmp	r3, #127	; 0x7f
 800d2fe:	f200 8372 	bhi.w	800d9e6 <LmhpComplianceOnMcpsIndication+0x756>
 800d302:	a201      	add	r2, pc, #4	; (adr r2, 800d308 <LmhpComplianceOnMcpsIndication+0x78>)
 800d304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d308:	0800d509 	.word	0x0800d509
 800d30c:	0800d54d 	.word	0x0800d54d
 800d310:	0800d557 	.word	0x0800d557
 800d314:	0800d56d 	.word	0x0800d56d
 800d318:	0800d58f 	.word	0x0800d58f
 800d31c:	0800d5bd 	.word	0x0800d5bd
 800d320:	0800d5e9 	.word	0x0800d5e9
 800d324:	0800d647 	.word	0x0800d647
 800d328:	0800d69f 	.word	0x0800d69f
 800d32c:	0800d70b 	.word	0x0800d70b
 800d330:	0800d75b 	.word	0x0800d75b
 800d334:	0800d9e7 	.word	0x0800d9e7
 800d338:	0800d9e7 	.word	0x0800d9e7
 800d33c:	0800d9e7 	.word	0x0800d9e7
 800d340:	0800d9e7 	.word	0x0800d9e7
 800d344:	0800d9e7 	.word	0x0800d9e7
 800d348:	0800d9e7 	.word	0x0800d9e7
 800d34c:	0800d9e7 	.word	0x0800d9e7
 800d350:	0800d9e7 	.word	0x0800d9e7
 800d354:	0800d9e7 	.word	0x0800d9e7
 800d358:	0800d9e7 	.word	0x0800d9e7
 800d35c:	0800d9e7 	.word	0x0800d9e7
 800d360:	0800d9e7 	.word	0x0800d9e7
 800d364:	0800d9e7 	.word	0x0800d9e7
 800d368:	0800d9e7 	.word	0x0800d9e7
 800d36c:	0800d9e7 	.word	0x0800d9e7
 800d370:	0800d9e7 	.word	0x0800d9e7
 800d374:	0800d9e7 	.word	0x0800d9e7
 800d378:	0800d9e7 	.word	0x0800d9e7
 800d37c:	0800d9e7 	.word	0x0800d9e7
 800d380:	0800d9e7 	.word	0x0800d9e7
 800d384:	0800d9e7 	.word	0x0800d9e7
 800d388:	0800d763 	.word	0x0800d763
 800d38c:	0800d775 	.word	0x0800d775
 800d390:	0800d77d 	.word	0x0800d77d
 800d394:	0800d9e7 	.word	0x0800d9e7
 800d398:	0800d9e7 	.word	0x0800d9e7
 800d39c:	0800d9e7 	.word	0x0800d9e7
 800d3a0:	0800d9e7 	.word	0x0800d9e7
 800d3a4:	0800d9e7 	.word	0x0800d9e7
 800d3a8:	0800d9e7 	.word	0x0800d9e7
 800d3ac:	0800d9e7 	.word	0x0800d9e7
 800d3b0:	0800d9e7 	.word	0x0800d9e7
 800d3b4:	0800d9e7 	.word	0x0800d9e7
 800d3b8:	0800d9e7 	.word	0x0800d9e7
 800d3bc:	0800d9e7 	.word	0x0800d9e7
 800d3c0:	0800d9e7 	.word	0x0800d9e7
 800d3c4:	0800d9e7 	.word	0x0800d9e7
 800d3c8:	0800d9e7 	.word	0x0800d9e7
 800d3cc:	0800d9e7 	.word	0x0800d9e7
 800d3d0:	0800d9e7 	.word	0x0800d9e7
 800d3d4:	0800d9e7 	.word	0x0800d9e7
 800d3d8:	0800d9e7 	.word	0x0800d9e7
 800d3dc:	0800d9e7 	.word	0x0800d9e7
 800d3e0:	0800d9e7 	.word	0x0800d9e7
 800d3e4:	0800d9e7 	.word	0x0800d9e7
 800d3e8:	0800d9e7 	.word	0x0800d9e7
 800d3ec:	0800d9e7 	.word	0x0800d9e7
 800d3f0:	0800d9e7 	.word	0x0800d9e7
 800d3f4:	0800d9e7 	.word	0x0800d9e7
 800d3f8:	0800d9e7 	.word	0x0800d9e7
 800d3fc:	0800d9e7 	.word	0x0800d9e7
 800d400:	0800d9e7 	.word	0x0800d9e7
 800d404:	0800d9e7 	.word	0x0800d9e7
 800d408:	0800d9e7 	.word	0x0800d9e7
 800d40c:	0800d9e7 	.word	0x0800d9e7
 800d410:	0800d9e7 	.word	0x0800d9e7
 800d414:	0800d9e7 	.word	0x0800d9e7
 800d418:	0800d9e7 	.word	0x0800d9e7
 800d41c:	0800d9e7 	.word	0x0800d9e7
 800d420:	0800d9e7 	.word	0x0800d9e7
 800d424:	0800d9e7 	.word	0x0800d9e7
 800d428:	0800d9e7 	.word	0x0800d9e7
 800d42c:	0800d9e7 	.word	0x0800d9e7
 800d430:	0800d9e7 	.word	0x0800d9e7
 800d434:	0800d9e7 	.word	0x0800d9e7
 800d438:	0800d9e7 	.word	0x0800d9e7
 800d43c:	0800d9e7 	.word	0x0800d9e7
 800d440:	0800d9e7 	.word	0x0800d9e7
 800d444:	0800d9e7 	.word	0x0800d9e7
 800d448:	0800d9e7 	.word	0x0800d9e7
 800d44c:	0800d9e7 	.word	0x0800d9e7
 800d450:	0800d9e7 	.word	0x0800d9e7
 800d454:	0800d9e7 	.word	0x0800d9e7
 800d458:	0800d9e7 	.word	0x0800d9e7
 800d45c:	0800d9e7 	.word	0x0800d9e7
 800d460:	0800d9e7 	.word	0x0800d9e7
 800d464:	0800d9e7 	.word	0x0800d9e7
 800d468:	0800d9e7 	.word	0x0800d9e7
 800d46c:	0800d9e7 	.word	0x0800d9e7
 800d470:	0800d9e7 	.word	0x0800d9e7
 800d474:	0800d9e7 	.word	0x0800d9e7
 800d478:	0800d9e7 	.word	0x0800d9e7
 800d47c:	0800d9e7 	.word	0x0800d9e7
 800d480:	0800d9e7 	.word	0x0800d9e7
 800d484:	0800d9e7 	.word	0x0800d9e7
 800d488:	0800d9e7 	.word	0x0800d9e7
 800d48c:	0800d9e7 	.word	0x0800d9e7
 800d490:	0800d9e7 	.word	0x0800d9e7
 800d494:	0800d9e7 	.word	0x0800d9e7
 800d498:	0800d9e7 	.word	0x0800d9e7
 800d49c:	0800d9e7 	.word	0x0800d9e7
 800d4a0:	0800d9e7 	.word	0x0800d9e7
 800d4a4:	0800d9e7 	.word	0x0800d9e7
 800d4a8:	0800d9e7 	.word	0x0800d9e7
 800d4ac:	0800d9e7 	.word	0x0800d9e7
 800d4b0:	0800d9e7 	.word	0x0800d9e7
 800d4b4:	0800d9e7 	.word	0x0800d9e7
 800d4b8:	0800d9e7 	.word	0x0800d9e7
 800d4bc:	0800d9e7 	.word	0x0800d9e7
 800d4c0:	0800d9e7 	.word	0x0800d9e7
 800d4c4:	0800d9e7 	.word	0x0800d9e7
 800d4c8:	0800d9e7 	.word	0x0800d9e7
 800d4cc:	0800d9e7 	.word	0x0800d9e7
 800d4d0:	0800d9e7 	.word	0x0800d9e7
 800d4d4:	0800d9e7 	.word	0x0800d9e7
 800d4d8:	0800d9e7 	.word	0x0800d9e7
 800d4dc:	0800d9e7 	.word	0x0800d9e7
 800d4e0:	0800d9e7 	.word	0x0800d9e7
 800d4e4:	0800d9e7 	.word	0x0800d9e7
 800d4e8:	0800d9e7 	.word	0x0800d9e7
 800d4ec:	0800d9e7 	.word	0x0800d9e7
 800d4f0:	0800d9e7 	.word	0x0800d9e7
 800d4f4:	0800d9e7 	.word	0x0800d9e7
 800d4f8:	0800d9e7 	.word	0x0800d9e7
 800d4fc:	0800d7af 	.word	0x0800d7af
 800d500:	0800d85f 	.word	0x0800d85f
 800d504:	0800d891 	.word	0x0800d891
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d508:	4b35      	ldr	r3, [pc, #212]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d50a:	68da      	ldr	r2, [r3, #12]
 800d50c:	4b34      	ldr	r3, [pc, #208]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d50e:	7a9b      	ldrb	r3, [r3, #10]
 800d510:	1c59      	adds	r1, r3, #1
 800d512:	b2c8      	uxtb	r0, r1
 800d514:	4932      	ldr	r1, [pc, #200]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d516:	7288      	strb	r0, [r1, #10]
 800d518:	4413      	add	r3, r2
 800d51a:	2200      	movs	r2, #0
 800d51c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d51e:	4b30      	ldr	r3, [pc, #192]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d520:	68da      	ldr	r2, [r3, #12]
 800d522:	4b2f      	ldr	r3, [pc, #188]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d524:	7a9b      	ldrb	r3, [r3, #10]
 800d526:	1c59      	adds	r1, r3, #1
 800d528:	b2c8      	uxtb	r0, r1
 800d52a:	492d      	ldr	r1, [pc, #180]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d52c:	7288      	strb	r0, [r1, #10]
 800d52e:	4413      	add	r3, r2
 800d530:	2206      	movs	r2, #6
 800d532:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d534:	4b2a      	ldr	r3, [pc, #168]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d536:	68da      	ldr	r2, [r3, #12]
 800d538:	4b29      	ldr	r3, [pc, #164]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d53a:	7a9b      	ldrb	r3, [r3, #10]
 800d53c:	1c59      	adds	r1, r3, #1
 800d53e:	b2c8      	uxtb	r0, r1
 800d540:	4927      	ldr	r1, [pc, #156]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d542:	7288      	strb	r0, [r1, #10]
 800d544:	4413      	add	r3, r2
 800d546:	2201      	movs	r2, #1
 800d548:	701a      	strb	r2, [r3, #0]
                break;
 800d54a:	e257      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800d54c:	4b24      	ldr	r3, [pc, #144]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800d554:	e252      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800d556:	4b23      	ldr	r3, [pc, #140]	; (800d5e4 <LmhpComplianceOnMcpsIndication+0x354>)
 800d558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 8245 	beq.w	800d9ea <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d560:	4b20      	ldr	r3, [pc, #128]	; (800d5e4 <LmhpComplianceOnMcpsIndication+0x354>)
 800d562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d564:	2101      	movs	r1, #1
 800d566:	2002      	movs	r0, #2
 800d568:	4798      	blx	r3
                }
                break;
 800d56a:	e23e      	b.n	800d9ea <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d574:	1c59      	adds	r1, r3, #1
 800d576:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d57a:	4413      	add	r3, r2
 800d57c:	781a      	ldrb	r2, [r3, #0]
 800d57e:	4b18      	ldr	r3, [pc, #96]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d580:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800d584:	4b16      	ldr	r3, [pc, #88]	; (800d5e0 <LmhpComplianceOnMcpsIndication+0x350>)
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800d58c:	e236      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800d58e:	2304      	movs	r3, #4
 800d590:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d59a:	1c59      	adds	r1, r3, #1
 800d59c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d5a0:	4413      	add	r3, r2
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	bf14      	ite	ne
 800d5a8:	2301      	movne	r3, #1
 800d5aa:	2300      	moveq	r3, #0
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800d5b0:	f107 0308 	add.w	r3, r7, #8
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f004 fafd 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>
                break;
 800d5ba:	e21f      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	689a      	ldr	r2, [r3, #8]
 800d5c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5c4:	1c59      	adds	r1, r3, #1
 800d5c6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d5ca:	4413      	add	r3, r2
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bf14      	ite	ne
 800d5d2:	2301      	movne	r3, #1
 800d5d4:	2300      	moveq	r3, #0
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f005 f965 	bl	80128a8 <LoRaMacTestSetDutyCycleOn>
                break;
 800d5de:	e20d      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
 800d5e0:	20000634 	.word	0x20000634
 800d5e4:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d5e8:	4ba5      	ldr	r3, [pc, #660]	; (800d880 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5ea:	f107 0408 	add.w	r4, r7, #8
 800d5ee:	461d      	mov	r5, r3
 800d5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d5fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	689a      	ldr	r2, [r3, #8]
 800d604:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d608:	1c59      	adds	r1, r3, #1
 800d60a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d60e:	4413      	add	r3, r2
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d616:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d61a:	2b0a      	cmp	r3, #10
 800d61c:	f200 81e7 	bhi.w	800d9ee <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d620:	4b98      	ldr	r3, [pc, #608]	; (800d884 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 81e1 	beq.w	800d9ee <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d62c:	4b95      	ldr	r3, [pc, #596]	; (800d884 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	3390      	adds	r3, #144	; 0x90
 800d63a:	443b      	add	r3, r7
 800d63c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800d640:	4618      	mov	r0, r3
 800d642:	4790      	blx	r2
                    }
                }
                break;
 800d644:	e1d3      	b.n	800d9ee <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	689a      	ldr	r2, [r3, #8]
 800d64a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d64e:	1c59      	adds	r1, r3, #1
 800d650:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d654:	4413      	add	r3, r2
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d65c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d660:	2b01      	cmp	r3, #1
 800d662:	d004      	beq.n	800d66e <LmhpComplianceOnMcpsIndication+0x3de>
 800d664:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d668:	2b02      	cmp	r3, #2
 800d66a:	f040 81c2 	bne.w	800d9f2 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d66e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d672:	2b01      	cmp	r3, #1
 800d674:	bf14      	ite	ne
 800d676:	2301      	movne	r3, #1
 800d678:	2300      	moveq	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	461a      	mov	r2, r3
 800d67e:	4b82      	ldr	r3, [pc, #520]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d680:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d682:	4b80      	ldr	r3, [pc, #512]	; (800d884 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 81b2 	beq.w	800d9f2 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d68e:	4b7d      	ldr	r3, [pc, #500]	; (800d884 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	4a7c      	ldr	r2, [pc, #496]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d696:	7a12      	ldrb	r2, [r2, #8]
 800d698:	4610      	mov	r0, r2
 800d69a:	4798      	blx	r3
                    }
                }
                break;
 800d69c:	e1a9      	b.n	800d9f2 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d69e:	4b7a      	ldr	r3, [pc, #488]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6a0:	68da      	ldr	r2, [r3, #12]
 800d6a2:	4b79      	ldr	r3, [pc, #484]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6a4:	7a9b      	ldrb	r3, [r3, #10]
 800d6a6:	1c59      	adds	r1, r3, #1
 800d6a8:	b2c8      	uxtb	r0, r1
 800d6aa:	4977      	ldr	r1, [pc, #476]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6ac:	7288      	strb	r0, [r1, #10]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800d6ba:	e019      	b.n	800d6f0 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	689a      	ldr	r2, [r3, #8]
 800d6c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6c4:	1c59      	adds	r1, r3, #1
 800d6c6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d6ca:	4413      	add	r3, r2
 800d6cc:	781a      	ldrb	r2, [r3, #0]
 800d6ce:	4b6e      	ldr	r3, [pc, #440]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6d0:	68d9      	ldr	r1, [r3, #12]
 800d6d2:	4b6d      	ldr	r3, [pc, #436]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6d4:	7a9b      	ldrb	r3, [r3, #10]
 800d6d6:	1c58      	adds	r0, r3, #1
 800d6d8:	b2c4      	uxtb	r4, r0
 800d6da:	486b      	ldr	r0, [pc, #428]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6dc:	7284      	strb	r4, [r0, #10]
 800d6de:	440b      	add	r3, r1
 800d6e0:	3201      	adds	r2, #1
 800d6e2:	b2d2      	uxtb	r2, r2
 800d6e4:	701a      	strb	r2, [r3, #0]
                     i++ )
 800d6e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d6f0:	4b65      	ldr	r3, [pc, #404]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d6f2:	7a5a      	ldrb	r2, [r3, #9]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7b1b      	ldrb	r3, [r3, #12]
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	bf28      	it	cs
 800d6fc:	4613      	movcs	r3, r2
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800d704:	429a      	cmp	r2, r3
 800d706:	d3d9      	bcc.n	800d6bc <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800d708:	e178      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d70a:	4b5f      	ldr	r3, [pc, #380]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d70c:	68da      	ldr	r2, [r3, #12]
 800d70e:	4b5e      	ldr	r3, [pc, #376]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d710:	7a9b      	ldrb	r3, [r3, #10]
 800d712:	1c59      	adds	r1, r3, #1
 800d714:	b2c8      	uxtb	r0, r1
 800d716:	495c      	ldr	r1, [pc, #368]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d718:	7288      	strb	r0, [r1, #10]
 800d71a:	4413      	add	r3, r2
 800d71c:	2209      	movs	r2, #9
 800d71e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d720:	4b59      	ldr	r3, [pc, #356]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d722:	8a18      	ldrh	r0, [r3, #16]
 800d724:	4b58      	ldr	r3, [pc, #352]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d726:	68da      	ldr	r2, [r3, #12]
 800d728:	4b57      	ldr	r3, [pc, #348]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d72a:	7a9b      	ldrb	r3, [r3, #10]
 800d72c:	1c59      	adds	r1, r3, #1
 800d72e:	b2cc      	uxtb	r4, r1
 800d730:	4955      	ldr	r1, [pc, #340]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d732:	728c      	strb	r4, [r1, #10]
 800d734:	4413      	add	r3, r2
 800d736:	b2c2      	uxtb	r2, r0
 800d738:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d73a:	4b53      	ldr	r3, [pc, #332]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d73c:	8a1b      	ldrh	r3, [r3, #16]
 800d73e:	0a1b      	lsrs	r3, r3, #8
 800d740:	b298      	uxth	r0, r3
 800d742:	4b51      	ldr	r3, [pc, #324]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	4b50      	ldr	r3, [pc, #320]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d748:	7a9b      	ldrb	r3, [r3, #10]
 800d74a:	1c59      	adds	r1, r3, #1
 800d74c:	b2cc      	uxtb	r4, r1
 800d74e:	494e      	ldr	r1, [pc, #312]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d750:	728c      	strb	r4, [r1, #10]
 800d752:	4413      	add	r3, r2
 800d754:	b2c2      	uxtb	r2, r0
 800d756:	701a      	strb	r2, [r3, #0]
                break;
 800d758:	e150      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800d75a:	4b4b      	ldr	r3, [pc, #300]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	821a      	strh	r2, [r3, #16]
                break;
 800d760:	e14c      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800d762:	2305      	movs	r3, #5
 800d764:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800d768:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d76c:	4618      	mov	r0, r3
 800d76e:	f004 fdcb 	bl	8012308 <LoRaMacMlmeRequest>
                break;
 800d772:	e143      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800d774:	4b45      	ldr	r3, [pc, #276]	; (800d88c <LmhpComplianceOnMcpsIndication+0x5fc>)
 800d776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d778:	4798      	blx	r3
                break;
 800d77a:	e13f      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689a      	ldr	r2, [r3, #8]
 800d780:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d784:	1c59      	adds	r1, r3, #1
 800d786:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d78a:	4413      	add	r3, r2
 800d78c:	781a      	ldrb	r2, [r3, #0]
 800d78e:	4b3e      	ldr	r3, [pc, #248]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d790:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d792:	4b3c      	ldr	r3, [pc, #240]	; (800d884 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 812c 	beq.w	800d9f6 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d79e:	4b39      	ldr	r3, [pc, #228]	; (800d884 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	4a38      	ldr	r2, [pc, #224]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d7a6:	7d52      	ldrb	r2, [r2, #21]
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	4798      	blx	r3
                }
                break;
 800d7ac:	e123      	b.n	800d9f6 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7b1b      	ldrb	r3, [r3, #12]
 800d7b2:	2b07      	cmp	r3, #7
 800d7b4:	f040 8121 	bne.w	800d9fa <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d7b8:	2306      	movs	r3, #6
 800d7ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	689a      	ldr	r2, [r3, #8]
 800d7c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7c6:	4413      	add	r3, r2
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	b21a      	sxth	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6899      	ldr	r1, [r3, #8]
 800d7d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	440b      	add	r3, r1
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	021b      	lsls	r3, r3, #8
 800d7dc:	b21b      	sxth	r3, r3
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	b21b      	sxth	r3, r3
 800d7e2:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800d7e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800d7e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7ec:	3302      	adds	r3, #2
 800d7ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	689a      	ldr	r2, [r3, #8]
 800d7f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7fa:	4413      	add	r3, r2
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	4619      	mov	r1, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	689a      	ldr	r2, [r3, #8]
 800d804:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d808:	3301      	adds	r3, #1
 800d80a:	4413      	add	r3, r2
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6899      	ldr	r1, [r3, #8]
 800d818:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d81c:	3302      	adds	r3, #2
 800d81e:	440b      	add	r3, r1
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d824:	4313      	orrs	r3, r2
 800d826:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d828:	2364      	movs	r3, #100	; 0x64
 800d82a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800d82e:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800d830:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d834:	3303      	adds	r3, #3
 800d836:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689a      	ldr	r2, [r3, #8]
 800d83e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d842:	1c59      	adds	r1, r3, #1
 800d844:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d848:	4413      	add	r3, r2
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	b25b      	sxtb	r3, r3
 800d84e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800d852:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d856:	4618      	mov	r0, r3
 800d858:	f004 fd56 	bl	8012308 <LoRaMacMlmeRequest>
                }
                break;
 800d85c:	e0cd      	b.n	800d9fa <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d85e:	233b      	movs	r3, #59	; 0x3b
 800d860:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d86a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d86e:	4618      	mov	r0, r3
 800d870:	f004 f9a0 	bl	8011bb4 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800d874:	4b04      	ldr	r3, [pc, #16]	; (800d888 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d876:	2201      	movs	r2, #1
 800d878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800d87c:	e0be      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
 800d87e:	bf00      	nop
 800d880:	0801c51c 	.word	0x0801c51c
 800d884:	2000066c 	.word	0x2000066c
 800d888:	20000634 	.word	0x20000634
 800d88c:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800d890:	232a      	movs	r3, #42	; 0x2a
 800d892:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800d894:	f107 0308 	add.w	r3, r7, #8
 800d898:	4618      	mov	r0, r3
 800d89a:	f003 ffb3 	bl	8011804 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d8a6:	4b65      	ldr	r3, [pc, #404]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	4b64      	ldr	r3, [pc, #400]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8ac:	7a9b      	ldrb	r3, [r3, #10]
 800d8ae:	1c59      	adds	r1, r3, #1
 800d8b0:	b2c8      	uxtb	r0, r1
 800d8b2:	4962      	ldr	r1, [pc, #392]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8b4:	7288      	strb	r0, [r1, #10]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	227f      	movs	r2, #127	; 0x7f
 800d8ba:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d8bc:	4b60      	ldr	r3, [pc, #384]	; (800da40 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	4b5e      	ldr	r3, [pc, #376]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8c2:	68d9      	ldr	r1, [r3, #12]
 800d8c4:	4b5d      	ldr	r3, [pc, #372]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8c6:	7a9b      	ldrb	r3, [r3, #10]
 800d8c8:	1c58      	adds	r0, r3, #1
 800d8ca:	b2c4      	uxtb	r4, r0
 800d8cc:	485b      	ldr	r0, [pc, #364]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8ce:	7284      	strb	r4, [r0, #10]
 800d8d0:	440b      	add	r3, r1
 800d8d2:	78d2      	ldrb	r2, [r2, #3]
 800d8d4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d8d6:	4b5a      	ldr	r3, [pc, #360]	; (800da40 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	4b58      	ldr	r3, [pc, #352]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8dc:	68d9      	ldr	r1, [r3, #12]
 800d8de:	4b57      	ldr	r3, [pc, #348]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8e0:	7a9b      	ldrb	r3, [r3, #10]
 800d8e2:	1c58      	adds	r0, r3, #1
 800d8e4:	b2c4      	uxtb	r4, r0
 800d8e6:	4855      	ldr	r0, [pc, #340]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8e8:	7284      	strb	r4, [r0, #10]
 800d8ea:	440b      	add	r3, r1
 800d8ec:	7892      	ldrb	r2, [r2, #2]
 800d8ee:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d8f0:	4b53      	ldr	r3, [pc, #332]	; (800da40 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	4b51      	ldr	r3, [pc, #324]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8f6:	68d9      	ldr	r1, [r3, #12]
 800d8f8:	4b50      	ldr	r3, [pc, #320]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d8fa:	7a9b      	ldrb	r3, [r3, #10]
 800d8fc:	1c58      	adds	r0, r3, #1
 800d8fe:	b2c4      	uxtb	r4, r0
 800d900:	484e      	ldr	r0, [pc, #312]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d902:	7284      	strb	r4, [r0, #10]
 800d904:	440b      	add	r3, r1
 800d906:	7852      	ldrb	r2, [r2, #1]
 800d908:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d90a:	4b4d      	ldr	r3, [pc, #308]	; (800da40 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	4b4b      	ldr	r3, [pc, #300]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d910:	68d9      	ldr	r1, [r3, #12]
 800d912:	4b4a      	ldr	r3, [pc, #296]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d914:	7a9b      	ldrb	r3, [r3, #10]
 800d916:	1c58      	adds	r0, r3, #1
 800d918:	b2c4      	uxtb	r4, r0
 800d91a:	4848      	ldr	r0, [pc, #288]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d91c:	7284      	strb	r4, [r0, #10]
 800d91e:	440b      	add	r3, r1
 800d920:	7812      	ldrb	r2, [r2, #0]
 800d922:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d924:	4b45      	ldr	r3, [pc, #276]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d926:	68da      	ldr	r2, [r3, #12]
 800d928:	4b44      	ldr	r3, [pc, #272]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d92a:	7a9b      	ldrb	r3, [r3, #10]
 800d92c:	1c59      	adds	r1, r3, #1
 800d92e:	b2c8      	uxtb	r0, r1
 800d930:	4942      	ldr	r1, [pc, #264]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d932:	7288      	strb	r0, [r1, #10]
 800d934:	4413      	add	r3, r2
 800d936:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d93a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d93c:	4b3f      	ldr	r3, [pc, #252]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d93e:	68da      	ldr	r2, [r3, #12]
 800d940:	4b3e      	ldr	r3, [pc, #248]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d942:	7a9b      	ldrb	r3, [r3, #10]
 800d944:	1c59      	adds	r1, r3, #1
 800d946:	b2c8      	uxtb	r0, r1
 800d948:	493c      	ldr	r1, [pc, #240]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d94a:	7288      	strb	r0, [r1, #10]
 800d94c:	4413      	add	r3, r2
 800d94e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d952:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d954:	4b39      	ldr	r3, [pc, #228]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	4b38      	ldr	r3, [pc, #224]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d95a:	7a9b      	ldrb	r3, [r3, #10]
 800d95c:	1c59      	adds	r1, r3, #1
 800d95e:	b2c8      	uxtb	r0, r1
 800d960:	4936      	ldr	r1, [pc, #216]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d962:	7288      	strb	r0, [r1, #10]
 800d964:	4413      	add	r3, r2
 800d966:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800d96a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d96c:	4b33      	ldr	r3, [pc, #204]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	4b32      	ldr	r3, [pc, #200]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d972:	7a9b      	ldrb	r3, [r3, #10]
 800d974:	1c59      	adds	r1, r3, #1
 800d976:	b2c8      	uxtb	r0, r1
 800d978:	4930      	ldr	r1, [pc, #192]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d97a:	7288      	strb	r0, [r1, #10]
 800d97c:	4413      	add	r3, r2
 800d97e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d982:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d984:	4b2d      	ldr	r3, [pc, #180]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d986:	68da      	ldr	r2, [r3, #12]
 800d988:	4b2c      	ldr	r3, [pc, #176]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d98a:	7a9b      	ldrb	r3, [r3, #10]
 800d98c:	1c59      	adds	r1, r3, #1
 800d98e:	b2c8      	uxtb	r0, r1
 800d990:	492a      	ldr	r1, [pc, #168]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d992:	7288      	strb	r0, [r1, #10]
 800d994:	4413      	add	r3, r2
 800d996:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d99a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d99c:	4b27      	ldr	r3, [pc, #156]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d99e:	68da      	ldr	r2, [r3, #12]
 800d9a0:	4b26      	ldr	r3, [pc, #152]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9a2:	7a9b      	ldrb	r3, [r3, #10]
 800d9a4:	1c59      	adds	r1, r3, #1
 800d9a6:	b2c8      	uxtb	r0, r1
 800d9a8:	4924      	ldr	r1, [pc, #144]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9aa:	7288      	strb	r0, [r1, #10]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d9b2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d9b4:	4b21      	ldr	r3, [pc, #132]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9b6:	68da      	ldr	r2, [r3, #12]
 800d9b8:	4b20      	ldr	r3, [pc, #128]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9ba:	7a9b      	ldrb	r3, [r3, #10]
 800d9bc:	1c59      	adds	r1, r3, #1
 800d9be:	b2c8      	uxtb	r0, r1
 800d9c0:	491e      	ldr	r1, [pc, #120]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9c2:	7288      	strb	r0, [r1, #10]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800d9ca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d9cc:	4b1b      	ldr	r3, [pc, #108]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9ce:	68da      	ldr	r2, [r3, #12]
 800d9d0:	4b1a      	ldr	r3, [pc, #104]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9d2:	7a9b      	ldrb	r3, [r3, #10]
 800d9d4:	1c59      	adds	r1, r3, #1
 800d9d6:	b2c8      	uxtb	r0, r1
 800d9d8:	4918      	ldr	r1, [pc, #96]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9da:	7288      	strb	r0, [r1, #10]
 800d9dc:	4413      	add	r3, r2
 800d9de:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800d9e2:	701a      	strb	r2, [r3, #0]
                break;
 800d9e4:	e00a      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800d9e6:	bf00      	nop
 800d9e8:	e008      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d9ea:	bf00      	nop
 800d9ec:	e006      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d9ee:	bf00      	nop
 800d9f0:	e004      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d9f2:	bf00      	nop
 800d9f4:	e002      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d9f6:	bf00      	nop
 800d9f8:	e000      	b.n	800d9fc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d9fa:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d9fc:	4b0f      	ldr	r3, [pc, #60]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d9fe:	7a9b      	ldrb	r3, [r3, #10]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00c      	beq.n	800da1e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800da04:	4b0f      	ldr	r3, [pc, #60]	; (800da44 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800da06:	7a5b      	ldrb	r3, [r3, #9]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d114      	bne.n	800da36 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800da0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800da10:	480c      	ldr	r0, [pc, #48]	; (800da44 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800da12:	f00d fde7 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800da16:	480b      	ldr	r0, [pc, #44]	; (800da44 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800da18:	f00d fd06 	bl	801b428 <UTIL_TIMER_Start>
 800da1c:	e00b      	b.n	800da36 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800da1e:	4809      	ldr	r0, [pc, #36]	; (800da44 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800da20:	f00d fd70 	bl	801b504 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800da24:	4b05      	ldr	r3, [pc, #20]	; (800da3c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800da26:	2200      	movs	r2, #0
 800da28:	705a      	strb	r2, [r3, #1]
 800da2a:	e004      	b.n	800da36 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800da2c:	bf00      	nop
 800da2e:	e002      	b.n	800da36 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800da30:	bf00      	nop
 800da32:	e000      	b.n	800da36 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800da34:	bf00      	nop
    }
}
 800da36:	3790      	adds	r7, #144	; 0x90
 800da38:	46bd      	mov	sp, r7
 800da3a:	bdb0      	pop	{r4, r5, r7, pc}
 800da3c:	20000634 	.word	0x20000634
 800da40:	2000066c 	.word	0x2000066c
 800da44:	20000670 	.word	0x20000670

0800da48 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800da50:	bf00      	nop
    }
}
 800da52:	bf00      	nop
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	bc80      	pop	{r7}
 800da5a:	4770      	bx	lr

0800da5c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800da64:	4b05      	ldr	r3, [pc, #20]	; (800da7c <LmhpComplianceOnMlmeIndication+0x20>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f083 0301 	eor.w	r3, r3, #1
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b00      	cmp	r3, #0
    {
        return;
 800da70:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	bc80      	pop	{r7}
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	20000634 	.word	0x20000634

0800da80 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800da88:	4b08      	ldr	r3, [pc, #32]	; (800daac <OnProcessTimer+0x2c>)
 800da8a:	7a9b      	ldrb	r3, [r3, #10]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800da90:	4b06      	ldr	r3, [pc, #24]	; (800daac <OnProcessTimer+0x2c>)
 800da92:	2201      	movs	r2, #1
 800da94:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800da96:	4b06      	ldr	r3, [pc, #24]	; (800dab0 <OnProcessTimer+0x30>)
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d002      	beq.n	800daa4 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800da9e:	4b04      	ldr	r3, [pc, #16]	; (800dab0 <OnProcessTimer+0x30>)
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	4798      	blx	r3
    }
}
 800daa4:	bf00      	nop
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	20000634 	.word	0x20000634
 800dab0:	200000d8 	.word	0x200000d8

0800dab4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bc80      	pop	{r7}
 800dac6:	4770      	bx	lr

0800dac8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	6039      	str	r1, [r7, #0]
 800dad2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800dad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800dad8:	4618      	mov	r0, r3
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	bc80      	pop	{r7}
 800dae0:	4770      	bx	lr
	...

0800dae4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800daea:	f00d fe25 	bl	801b738 <UTIL_TIMER_GetCurrentTime>
 800daee:	4603      	mov	r3, r0
 800daf0:	4a0f      	ldr	r2, [pc, #60]	; (800db30 <OnRadioTxDone+0x4c>)
 800daf2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800daf4:	4c0f      	ldr	r4, [pc, #60]	; (800db34 <OnRadioTxDone+0x50>)
 800daf6:	463b      	mov	r3, r7
 800daf8:	4618      	mov	r0, r3
 800dafa:	f00c ff9b 	bl	801aa34 <SysTimeGet>
 800dafe:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800db02:	463a      	mov	r2, r7
 800db04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db08:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800db0c:	4a0a      	ldr	r2, [pc, #40]	; (800db38 <OnRadioTxDone+0x54>)
 800db0e:	7813      	ldrb	r3, [r2, #0]
 800db10:	f043 0320 	orr.w	r3, r3, #32
 800db14:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800db16:	f003 fa71 	bl	8010ffc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800db1a:	4b08      	ldr	r3, [pc, #32]	; (800db3c <OnRadioTxDone+0x58>)
 800db1c:	2201      	movs	r2, #1
 800db1e:	2100      	movs	r1, #0
 800db20:	2002      	movs	r0, #2
 800db22:	f00d fef9 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800db26:	bf00      	nop
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd90      	pop	{r4, r7, pc}
 800db2e:	bf00      	nop
 800db30:	200017d0 	.word	0x200017d0
 800db34:	20000688 	.word	0x20000688
 800db38:	200017cc 	.word	0x200017cc
 800db3c:	0801c548 	.word	0x0801c548

0800db40 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	4608      	mov	r0, r1
 800db4a:	4611      	mov	r1, r2
 800db4c:	461a      	mov	r2, r3
 800db4e:	4603      	mov	r3, r0
 800db50:	817b      	strh	r3, [r7, #10]
 800db52:	460b      	mov	r3, r1
 800db54:	813b      	strh	r3, [r7, #8]
 800db56:	4613      	mov	r3, r2
 800db58:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800db5a:	f00d fded 	bl	801b738 <UTIL_TIMER_GetCurrentTime>
 800db5e:	4603      	mov	r3, r0
 800db60:	4a11      	ldr	r2, [pc, #68]	; (800dba8 <OnRadioRxDone+0x68>)
 800db62:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800db64:	4a10      	ldr	r2, [pc, #64]	; (800dba8 <OnRadioRxDone+0x68>)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800db6a:	4a0f      	ldr	r2, [pc, #60]	; (800dba8 <OnRadioRxDone+0x68>)
 800db6c:	897b      	ldrh	r3, [r7, #10]
 800db6e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800db70:	4a0d      	ldr	r2, [pc, #52]	; (800dba8 <OnRadioRxDone+0x68>)
 800db72:	893b      	ldrh	r3, [r7, #8]
 800db74:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800db76:	4a0c      	ldr	r2, [pc, #48]	; (800dba8 <OnRadioRxDone+0x68>)
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800db7c:	4a0b      	ldr	r2, [pc, #44]	; (800dbac <OnRadioRxDone+0x6c>)
 800db7e:	7813      	ldrb	r3, [r2, #0]
 800db80:	f043 0310 	orr.w	r3, r3, #16
 800db84:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800db86:	4a09      	ldr	r2, [pc, #36]	; (800dbac <OnRadioRxDone+0x6c>)
 800db88:	7813      	ldrb	r3, [r2, #0]
 800db8a:	f043 0301 	orr.w	r3, r3, #1
 800db8e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800db90:	f003 fa34 	bl	8010ffc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800db94:	4b06      	ldr	r3, [pc, #24]	; (800dbb0 <OnRadioRxDone+0x70>)
 800db96:	2201      	movs	r2, #1
 800db98:	2100      	movs	r1, #0
 800db9a:	2002      	movs	r0, #2
 800db9c:	f00d febc 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800dba0:	bf00      	nop
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	200017d4 	.word	0x200017d4
 800dbac:	200017cc 	.word	0x200017cc
 800dbb0:	0801c558 	.word	0x0801c558

0800dbb4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800dbb8:	4a07      	ldr	r2, [pc, #28]	; (800dbd8 <OnRadioTxTimeout+0x24>)
 800dbba:	7813      	ldrb	r3, [r2, #0]
 800dbbc:	f043 0308 	orr.w	r3, r3, #8
 800dbc0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dbc2:	f003 fa1b 	bl	8010ffc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800dbc6:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <OnRadioTxTimeout+0x28>)
 800dbc8:	2201      	movs	r2, #1
 800dbca:	2100      	movs	r1, #0
 800dbcc:	2002      	movs	r0, #2
 800dbce:	f00d fea3 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800dbd2:	bf00      	nop
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	200017cc 	.word	0x200017cc
 800dbdc:	0801c568 	.word	0x0801c568

0800dbe0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800dbe4:	4a04      	ldr	r2, [pc, #16]	; (800dbf8 <OnRadioRxError+0x18>)
 800dbe6:	7813      	ldrb	r3, [r2, #0]
 800dbe8:	f043 0304 	orr.w	r3, r3, #4
 800dbec:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dbee:	f003 fa05 	bl	8010ffc <OnMacProcessNotify>
}
 800dbf2:	bf00      	nop
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	200017cc 	.word	0x200017cc

0800dbfc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800dc00:	4a07      	ldr	r2, [pc, #28]	; (800dc20 <OnRadioRxTimeout+0x24>)
 800dc02:	7813      	ldrb	r3, [r2, #0]
 800dc04:	f043 0302 	orr.w	r3, r3, #2
 800dc08:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dc0a:	f003 f9f7 	bl	8010ffc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800dc0e:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <OnRadioRxTimeout+0x28>)
 800dc10:	2201      	movs	r2, #1
 800dc12:	2100      	movs	r1, #0
 800dc14:	2002      	movs	r0, #2
 800dc16:	f00d fe7f 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc1a:	bf00      	nop
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	200017cc 	.word	0x200017cc
 800dc24:	0801c578 	.word	0x0801c578

0800dc28 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800dc28:	b480      	push	{r7}
 800dc2a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dc2c:	4b08      	ldr	r3, [pc, #32]	; (800dc50 <UpdateRxSlotIdleState+0x28>)
 800dc2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d004      	beq.n	800dc40 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800dc36:	4b07      	ldr	r3, [pc, #28]	; (800dc54 <UpdateRxSlotIdleState+0x2c>)
 800dc38:	2206      	movs	r2, #6
 800dc3a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800dc3e:	e003      	b.n	800dc48 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dc40:	4b04      	ldr	r3, [pc, #16]	; (800dc54 <UpdateRxSlotIdleState+0x2c>)
 800dc42:	2202      	movs	r2, #2
 800dc44:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800dc48:	bf00      	nop
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bc80      	pop	{r7}
 800dc4e:	4770      	bx	lr
 800dc50:	20000ba4 	.word	0x20000ba4
 800dc54:	20000688 	.word	0x20000688

0800dc58 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b092      	sub	sp, #72	; 0x48
 800dc5c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dc5e:	4b4a      	ldr	r3, [pc, #296]	; (800dd88 <ProcessRadioTxDone+0x130>)
 800dc60:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d002      	beq.n	800dc6e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800dc68:	4b48      	ldr	r3, [pc, #288]	; (800dd8c <ProcessRadioTxDone+0x134>)
 800dc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc6e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800dc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800dc76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800dc78:	b672      	cpsid	i
}
 800dc7a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800dc7c:	f00d fd5c 	bl	801b738 <UTIL_TIMER_GetCurrentTime>
 800dc80:	4602      	mov	r2, r0
 800dc82:	4b43      	ldr	r3, [pc, #268]	; (800dd90 <ProcessRadioTxDone+0x138>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800dc8a:	4b42      	ldr	r3, [pc, #264]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dc8c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	4619      	mov	r1, r3
 800dc96:	4840      	ldr	r0, [pc, #256]	; (800dd98 <ProcessRadioTxDone+0x140>)
 800dc98:	f00d fca4 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800dc9c:	483e      	ldr	r0, [pc, #248]	; (800dd98 <ProcessRadioTxDone+0x140>)
 800dc9e:	f00d fbc3 	bl	801b428 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800dca2:	4b3c      	ldr	r3, [pc, #240]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dca4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800dca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	4619      	mov	r1, r3
 800dcae:	483b      	ldr	r0, [pc, #236]	; (800dd9c <ProcessRadioTxDone+0x144>)
 800dcb0:	f00d fc98 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800dcb4:	4839      	ldr	r0, [pc, #228]	; (800dd9c <ProcessRadioTxDone+0x144>)
 800dcb6:	f00d fbb7 	bl	801b428 <UTIL_TIMER_Start>
 800dcba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcbc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc0:	f383 8810 	msr	PRIMASK, r3
}
 800dcc4:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800dcc6:	4b33      	ldr	r3, [pc, #204]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dcc8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d01a      	beq.n	800dd06 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800dcd0:	2315      	movs	r3, #21
 800dcd2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcd6:	4b2c      	ldr	r3, [pc, #176]	; (800dd88 <ProcessRadioTxDone+0x130>)
 800dcd8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dcdc:	f107 0220 	add.w	r2, r7, #32
 800dce0:	4611      	mov	r1, r2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f006 febb 	bl	8014a5e <RegionGetPhyParam>
 800dce8:	4603      	mov	r3, r0
 800dcea:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dcec:	4b29      	ldr	r3, [pc, #164]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dcee:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4829      	ldr	r0, [pc, #164]	; (800dda0 <ProcessRadioTxDone+0x148>)
 800dcfa:	f00d fc73 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800dcfe:	4828      	ldr	r0, [pc, #160]	; (800dda0 <ProcessRadioTxDone+0x148>)
 800dd00:	f00d fb92 	bl	801b428 <UTIL_TIMER_Start>
 800dd04:	e003      	b.n	800dd0e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd06:	4b23      	ldr	r3, [pc, #140]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dd0e:	4b20      	ldr	r3, [pc, #128]	; (800dd90 <ProcessRadioTxDone+0x138>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a1d      	ldr	r2, [pc, #116]	; (800dd88 <ProcessRadioTxDone+0x130>)
 800dd14:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dd16:	4b1f      	ldr	r3, [pc, #124]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dd18:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800dd1c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800dd1e:	4b1c      	ldr	r3, [pc, #112]	; (800dd90 <ProcessRadioTxDone+0x138>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dd24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f00c febb 	bl	801aaa4 <SysTimeGetMcuTime>
 800dd2e:	4638      	mov	r0, r7
 800dd30:	4b15      	ldr	r3, [pc, #84]	; (800dd88 <ProcessRadioTxDone+0x130>)
 800dd32:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800dd36:	9200      	str	r2, [sp, #0]
 800dd38:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800dd3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dd40:	ca06      	ldmia	r2, {r1, r2}
 800dd42:	f00c fe10 	bl	801a966 <SysTimeSub>
 800dd46:	f107 0314 	add.w	r3, r7, #20
 800dd4a:	463a      	mov	r2, r7
 800dd4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd50:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800dd54:	4b0f      	ldr	r3, [pc, #60]	; (800dd94 <ProcessRadioTxDone+0x13c>)
 800dd56:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800dd5a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd60:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <ProcessRadioTxDone+0x130>)
 800dd62:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800dd6e:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <ProcessRadioTxDone+0x130>)
 800dd70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dd74:	f107 0208 	add.w	r2, r7, #8
 800dd78:	4611      	mov	r1, r2
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f006 fe87 	bl	8014a8e <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800dd80:	bf00      	nop
 800dd82:	3740      	adds	r7, #64	; 0x40
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20000ba4 	.word	0x20000ba4
 800dd8c:	0801cbcc 	.word	0x0801cbcc
 800dd90:	200017d0 	.word	0x200017d0
 800dd94:	20000688 	.word	0x20000688
 800dd98:	20000a08 	.word	0x20000a08
 800dd9c:	20000a20 	.word	0x20000a20
 800dda0:	20000a88 	.word	0x20000a88

0800dda4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dda8:	4b10      	ldr	r3, [pc, #64]	; (800ddec <PrepareRxDoneAbort+0x48>)
 800ddaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ddae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddb2:	4a0e      	ldr	r2, [pc, #56]	; (800ddec <PrepareRxDoneAbort+0x48>)
 800ddb4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800ddb8:	4b0c      	ldr	r3, [pc, #48]	; (800ddec <PrepareRxDoneAbort+0x48>)
 800ddba:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	f001 f9fa 	bl	800f1bc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ddc8:	4a08      	ldr	r2, [pc, #32]	; (800ddec <PrepareRxDoneAbort+0x48>)
 800ddca:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ddce:	f043 0302 	orr.w	r3, r3, #2
 800ddd2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ddd6:	4a05      	ldr	r2, [pc, #20]	; (800ddec <PrepareRxDoneAbort+0x48>)
 800ddd8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800dddc:	f043 0310 	orr.w	r3, r3, #16
 800dde0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 800dde4:	f7ff ff20 	bl	800dc28 <UpdateRxSlotIdleState>
}
 800dde8:	bf00      	nop
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20000688 	.word	0x20000688

0800ddf0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b0ab      	sub	sp, #172	; 0xac
 800ddf4:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ddf6:	2312      	movs	r3, #18
 800ddf8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ddfc:	4b81      	ldr	r3, [pc, #516]	; (800e004 <ProcessRadioRxDone+0x214>)
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 800de04:	4b7f      	ldr	r3, [pc, #508]	; (800e004 <ProcessRadioRxDone+0x214>)
 800de06:	891b      	ldrh	r3, [r3, #8]
 800de08:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800de0c:	4b7d      	ldr	r3, [pc, #500]	; (800e004 <ProcessRadioRxDone+0x214>)
 800de0e:	895b      	ldrh	r3, [r3, #10]
 800de10:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 800de14:	4b7b      	ldr	r3, [pc, #492]	; (800e004 <ProcessRadioRxDone+0x214>)
 800de16:	7b1b      	ldrb	r3, [r3, #12]
 800de18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 800de22:	2300      	movs	r3, #0
 800de24:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800de26:	4b78      	ldr	r3, [pc, #480]	; (800e008 <ProcessRadioRxDone+0x218>)
 800de28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800de36:	2301      	movs	r3, #1
 800de38:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800de42:	4a72      	ldr	r2, [pc, #456]	; (800e00c <ProcessRadioRxDone+0x21c>)
 800de44:	7813      	ldrb	r3, [r2, #0]
 800de46:	f36f 0300 	bfc	r3, #0, #1
 800de4a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800de4c:	4b70      	ldr	r3, [pc, #448]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800de54:	4a6e      	ldr	r2, [pc, #440]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de56:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800de5a:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800de5e:	4a6c      	ldr	r2, [pc, #432]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de60:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de64:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800de68:	4b69      	ldr	r3, [pc, #420]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de6a:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 800de6e:	4b68      	ldr	r3, [pc, #416]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de70:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800de74:	4b66      	ldr	r3, [pc, #408]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de76:	2200      	movs	r2, #0
 800de78:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800de7c:	4b64      	ldr	r3, [pc, #400]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de7e:	2200      	movs	r2, #0
 800de80:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800de84:	4b62      	ldr	r3, [pc, #392]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800de8c:	4b60      	ldr	r3, [pc, #384]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de8e:	2200      	movs	r2, #0
 800de90:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800de94:	4b5e      	ldr	r3, [pc, #376]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de96:	2200      	movs	r2, #0
 800de98:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800de9c:	4b5c      	ldr	r3, [pc, #368]	; (800e010 <ProcessRadioRxDone+0x220>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800dea4:	4b5a      	ldr	r3, [pc, #360]	; (800e010 <ProcessRadioRxDone+0x220>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800deac:	4b58      	ldr	r3, [pc, #352]	; (800e010 <ProcessRadioRxDone+0x220>)
 800deae:	2200      	movs	r2, #0
 800deb0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800deb4:	4b56      	ldr	r3, [pc, #344]	; (800e010 <ProcessRadioRxDone+0x220>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800debc:	4b54      	ldr	r3, [pc, #336]	; (800e010 <ProcessRadioRxDone+0x220>)
 800debe:	2200      	movs	r2, #0
 800dec0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dec4:	4b52      	ldr	r3, [pc, #328]	; (800e010 <ProcessRadioRxDone+0x220>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800decc:	4b50      	ldr	r3, [pc, #320]	; (800e010 <ProcessRadioRxDone+0x220>)
 800dece:	2200      	movs	r2, #0
 800ded0:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ded4:	4b4f      	ldr	r3, [pc, #316]	; (800e014 <ProcessRadioRxDone+0x224>)
 800ded6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded8:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800deda:	4b4d      	ldr	r3, [pc, #308]	; (800e010 <ProcessRadioRxDone+0x220>)
 800dedc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d102      	bne.n	800deea <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800dee4:	484c      	ldr	r0, [pc, #304]	; (800e018 <ProcessRadioRxDone+0x228>)
 800dee6:	f00d fb0d 	bl	801b504 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800deea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800deee:	4619      	mov	r1, r3
 800def0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800def4:	f004 fe28 	bl	8012b48 <LoRaMacClassBRxBeacon>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800defe:	4a44      	ldr	r2, [pc, #272]	; (800e010 <ProcessRadioRxDone+0x220>)
 800df00:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800df04:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800df08:	4a41      	ldr	r2, [pc, #260]	; (800e010 <ProcessRadioRxDone+0x220>)
 800df0a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df0e:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 800df12:	f000 bc75 	b.w	800e800 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800df16:	4b3c      	ldr	r3, [pc, #240]	; (800e008 <ProcessRadioRxDone+0x218>)
 800df18:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d11e      	bne.n	800df5e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800df20:	f004 fe25 	bl	8012b6e <LoRaMacClassBIsPingExpected>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00a      	beq.n	800df40 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800df2a:	2000      	movs	r0, #0
 800df2c:	f004 fdd6 	bl	8012adc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800df30:	2000      	movs	r0, #0
 800df32:	f004 fdf7 	bl	8012b24 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800df36:	4b36      	ldr	r3, [pc, #216]	; (800e010 <ProcessRadioRxDone+0x220>)
 800df38:	2204      	movs	r2, #4
 800df3a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800df3e:	e00e      	b.n	800df5e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800df40:	f004 fe1c 	bl	8012b7c <LoRaMacClassBIsMulticastExpected>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d009      	beq.n	800df5e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800df4a:	2000      	movs	r0, #0
 800df4c:	f004 fdd0 	bl	8012af0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800df50:	2000      	movs	r0, #0
 800df52:	f004 fdf0 	bl	8012b36 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800df56:	4b2e      	ldr	r3, [pc, #184]	; (800e010 <ProcessRadioRxDone+0x220>)
 800df58:	2205      	movs	r2, #5
 800df5a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800df5e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800df62:	2b00      	cmp	r3, #0
 800df64:	d107      	bne.n	800df76 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df66:	4b2a      	ldr	r3, [pc, #168]	; (800e010 <ProcessRadioRxDone+0x220>)
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800df6e:	f7ff ff19 	bl	800dda4 <PrepareRxDoneAbort>
        return;
 800df72:	f000 bc45 	b.w	800e800 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800df76:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800df7a:	1c5a      	adds	r2, r3, #1
 800df7c:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 800df80:	461a      	mov	r2, r3
 800df82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df86:	4413      	add	r3, r2
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800df8e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800df92:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800df96:	b2db      	uxtb	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	2b06      	cmp	r3, #6
 800df9c:	f200 8403 	bhi.w	800e7a6 <ProcessRadioRxDone+0x9b6>
 800dfa0:	a201      	add	r2, pc, #4	; (adr r2, 800dfa8 <ProcessRadioRxDone+0x1b8>)
 800dfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa6:	bf00      	nop
 800dfa8:	0800dfc5 	.word	0x0800dfc5
 800dfac:	0800e7a7 	.word	0x0800e7a7
 800dfb0:	0800e1c3 	.word	0x0800e1c3
 800dfb4:	0800e7a7 	.word	0x0800e7a7
 800dfb8:	0800e1bb 	.word	0x0800e1bb
 800dfbc:	0800e7a7 	.word	0x0800e7a7
 800dfc0:	0800e74b 	.word	0x0800e74b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dfc4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dfc8:	2b10      	cmp	r3, #16
 800dfca:	d807      	bhi.n	800dfdc <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfcc:	4b10      	ldr	r3, [pc, #64]	; (800e010 <ProcessRadioRxDone+0x220>)
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800dfd4:	f7ff fee6 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800dfd8:	f000 bc12 	b.w	800e800 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800dfdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfe0:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800dfe2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dfea:	4b07      	ldr	r3, [pc, #28]	; (800e008 <ProcessRadioRxDone+0x218>)
 800dfec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d013      	beq.n	800e01c <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dff4:	4b06      	ldr	r3, [pc, #24]	; (800e010 <ProcessRadioRxDone+0x220>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800dffc:	f7ff fed2 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e000:	e3fe      	b.n	800e800 <ProcessRadioRxDone+0xa10>
 800e002:	bf00      	nop
 800e004:	200017d4 	.word	0x200017d4
 800e008:	20000ba4 	.word	0x20000ba4
 800e00c:	200017cc 	.word	0x200017cc
 800e010:	20000688 	.word	0x20000688
 800e014:	0801cbcc 	.word	0x0801cbcc
 800e018:	20000a20 	.word	0x20000a20
            }

            SecureElementGetJoinEui( joinEui );
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	4618      	mov	r0, r3
 800e022:	f7fd ff7d 	bl	800bf20 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e026:	f107 0218 	add.w	r2, r7, #24
 800e02a:	f107 0308 	add.w	r3, r7, #8
 800e02e:	4619      	mov	r1, r3
 800e030:	20ff      	movs	r0, #255	; 0xff
 800e032:	f005 ff95 	bl	8013f60 <LoRaMacCryptoHandleJoinAccept>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800e03c:	2300      	movs	r3, #0
 800e03e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e046:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	b25b      	sxtb	r3, r3
 800e04e:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e050:	4bb1      	ldr	r3, [pc, #708]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e052:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e056:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e058:	4baf      	ldr	r3, [pc, #700]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e05a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e05e:	1d39      	adds	r1, r7, #4
 800e060:	2207      	movs	r2, #7
 800e062:	4618      	mov	r0, r3
 800e064:	f006 fd36 	bl	8014ad4 <RegionVerify>
 800e068:	4603      	mov	r3, r0
 800e06a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e06e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e072:	2b00      	cmp	r3, #0
 800e074:	f040 8095 	bne.w	800e1a2 <ProcessRadioRxDone+0x3b2>
 800e078:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f000 8090 	beq.w	800e1a2 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e082:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e086:	461a      	mov	r2, r3
 800e088:	4ba3      	ldr	r3, [pc, #652]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e08a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e08e:	4ba2      	ldr	r3, [pc, #648]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e090:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e098:	021b      	lsls	r3, r3, #8
 800e09a:	4313      	orrs	r3, r2
 800e09c:	4a9e      	ldr	r2, [pc, #632]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e09e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e0a2:	4b9d      	ldr	r3, [pc, #628]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e0a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0ac:	041b      	lsls	r3, r3, #16
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	4a99      	ldr	r2, [pc, #612]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	4a97      	ldr	r2, [pc, #604]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e0be:	4b96      	ldr	r3, [pc, #600]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	2002      	movs	r0, #2
 800e0c8:	f7fd ff42 	bl	800bf50 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e0cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	4b8f      	ldr	r3, [pc, #572]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e0de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4b8b      	ldr	r3, [pc, #556]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e0f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	4b86      	ldr	r3, [pc, #536]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e0fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e102:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e106:	461a      	mov	r2, r3
 800e108:	4b83      	ldr	r3, [pc, #524]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e10a:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e10c:	4b82      	ldr	r3, [pc, #520]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e110:	2b00      	cmp	r3, #0
 800e112:	d102      	bne.n	800e11a <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e114:	4b80      	ldr	r3, [pc, #512]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e116:	2201      	movs	r2, #1
 800e118:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e11a:	4b7f      	ldr	r3, [pc, #508]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e122:	fb02 f303 	mul.w	r3, r2, r3
 800e126:	4a7c      	ldr	r2, [pc, #496]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e128:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e12a:	4b7b      	ldr	r3, [pc, #492]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e12e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e132:	4a79      	ldr	r2, [pc, #484]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e134:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800e136:	4b78      	ldr	r3, [pc, #480]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e13e:	4b76      	ldr	r3, [pc, #472]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e140:	2200      	movs	r2, #0
 800e142:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e146:	f107 0318 	add.w	r3, r7, #24
 800e14a:	3312      	adds	r3, #18
 800e14c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e150:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e154:	b2db      	uxtb	r3, r3
 800e156:	3b11      	subs	r3, #17
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e15e:	4b6f      	ldr	r3, [pc, #444]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e160:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e164:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e168:	4b6b      	ldr	r3, [pc, #428]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e16a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e16e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f006 fcc4 	bl	8014b02 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e17a:	4b67      	ldr	r3, [pc, #412]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e17c:	2202      	movs	r2, #2
 800e17e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e182:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e186:	4618      	mov	r0, r3
 800e188:	f005 f9f4 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f000 8311 	beq.w	800e7b6 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800e194:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e198:	4619      	mov	r1, r3
 800e19a:	2000      	movs	r0, #0
 800e19c:	f005 f95e 	bl	801345c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e1a0:	e309      	b.n	800e7b6 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e1a2:	2001      	movs	r0, #1
 800e1a4:	f005 f9e6 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 8302 	beq.w	800e7b4 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e1b0:	2101      	movs	r1, #1
 800e1b2:	2007      	movs	r0, #7
 800e1b4:	f005 f952 	bl	801345c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800e1b8:	e2fc      	b.n	800e7b4 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1ba:	4b58      	ldr	r3, [pc, #352]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e1c2:	4b55      	ldr	r3, [pc, #340]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e1c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e1c8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e1cc:	4b53      	ldr	r3, [pc, #332]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e1ce:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800e1d2:	b25b      	sxtb	r3, r3
 800e1d4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e1d8:	230d      	movs	r3, #13
 800e1da:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e1de:	4b4e      	ldr	r3, [pc, #312]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e1e0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d002      	beq.n	800e1ee <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e1e8:	230e      	movs	r3, #14
 800e1ea:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e1ee:	4b4a      	ldr	r3, [pc, #296]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e1f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e1f4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f006 fc2f 	bl	8014a5e <RegionGetPhyParam>
 800e200:	4603      	mov	r3, r0
 800e202:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e204:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e208:	3b0d      	subs	r3, #13
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	b21b      	sxth	r3, r3
 800e20e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e212:	b21a      	sxth	r2, r3
 800e214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e216:	b21b      	sxth	r3, r3
 800e218:	429a      	cmp	r2, r3
 800e21a:	dc03      	bgt.n	800e224 <ProcessRadioRxDone+0x434>
 800e21c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e220:	2b0b      	cmp	r3, #11
 800e222:	d806      	bhi.n	800e232 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e224:	4b3d      	ldr	r3, [pc, #244]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e22c:	f7ff fdba 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e230:	e2e6      	b.n	800e800 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800e232:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e236:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 800e238:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e242:	4b37      	ldr	r3, [pc, #220]	; (800e320 <ProcessRadioRxDone+0x530>)
 800e244:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e246:	23ff      	movs	r3, #255	; 0xff
 800e248:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e24c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e250:	4618      	mov	r0, r3
 800e252:	f006 f987 	bl	8014564 <LoRaMacParserData>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d006      	beq.n	800e26a <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e25c:	4b2f      	ldr	r3, [pc, #188]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e264:	f7ff fd9e 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e268:	e2ca      	b.n	800e800 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e26a:	4b2b      	ldr	r3, [pc, #172]	; (800e318 <ProcessRadioRxDone+0x528>)
 800e26c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e270:	2b01      	cmp	r3, #1
 800e272:	d132      	bne.n	800e2da <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e274:	f004 fc7b 	bl	8012b6e <LoRaMacClassBIsPingExpected>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d014      	beq.n	800e2a8 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e27e:	2000      	movs	r0, #0
 800e280:	f004 fc2c 	bl	8012adc <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e284:	2000      	movs	r0, #0
 800e286:	f004 fc4d 	bl	8012b24 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e28a:	4b24      	ldr	r3, [pc, #144]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e28c:	2204      	movs	r2, #4
 800e28e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e294:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e298:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	f004 fced 	bl	8012c80 <LoRaMacClassBSetFPendingBit>
 800e2a6:	e018      	b.n	800e2da <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e2a8:	f004 fc68 	bl	8012b7c <LoRaMacClassBIsMulticastExpected>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d013      	beq.n	800e2da <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	f004 fc1c 	bl	8012af0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	f004 fc3c 	bl	8012b36 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e2be:	4b17      	ldr	r3, [pc, #92]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e2c0:	2205      	movs	r2, #5
 800e2c2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e2c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e2cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	f004 fcd3 	bl	8012c80 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2dc:	4a0f      	ldr	r2, [pc, #60]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e2de:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e2e2:	f107 0212 	add.w	r2, r7, #18
 800e2e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f002 fd81 	bl	8010df4 <DetermineFrameType>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d006      	beq.n	800e306 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2f8:	4b08      	ldr	r3, [pc, #32]	; (800e31c <ProcessRadioRxDone+0x52c>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e300:	f7ff fd50 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e304:	e27c      	b.n	800e800 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e310:	2300      	movs	r3, #0
 800e312:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800e316:	e055      	b.n	800e3c4 <ProcessRadioRxDone+0x5d4>
 800e318:	20000ba4 	.word	0x20000ba4
 800e31c:	20000688 	.word	0x20000688
 800e320:	200008c0 	.word	0x200008c0
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e324:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800e328:	499f      	ldr	r1, [pc, #636]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e32a:	4613      	mov	r3, r2
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	4413      	add	r3, r2
 800e330:	011b      	lsls	r3, r3, #4
 800e332:	440b      	add	r3, r1
 800e334:	33ec      	adds	r3, #236	; 0xec
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d13d      	bne.n	800e3ba <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e33e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800e342:	4999      	ldr	r1, [pc, #612]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e344:	4613      	mov	r3, r2
 800e346:	005b      	lsls	r3, r3, #1
 800e348:	4413      	add	r3, r2
 800e34a:	011b      	lsls	r3, r3, #4
 800e34c:	440b      	add	r3, r1
 800e34e:	33e9      	adds	r3, #233	; 0xe9
 800e350:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e352:	2b00      	cmp	r3, #0
 800e354:	d031      	beq.n	800e3ba <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800e356:	2301      	movs	r3, #1
 800e358:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e35c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800e360:	4991      	ldr	r1, [pc, #580]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	011b      	lsls	r3, r3, #4
 800e36a:	440b      	add	r3, r1
 800e36c:	33ea      	adds	r3, #234	; 0xea
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e374:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800e378:	498b      	ldr	r1, [pc, #556]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e37a:	4613      	mov	r3, r2
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	4413      	add	r3, r2
 800e380:	011b      	lsls	r3, r3, #4
 800e382:	440b      	add	r3, r1
 800e384:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e38e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800e392:	4985      	ldr	r1, [pc, #532]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e394:	4613      	mov	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	4413      	add	r3, r2
 800e39a:	011b      	lsls	r3, r3, #4
 800e39c:	440b      	add	r3, r1
 800e39e:	33ec      	adds	r3, #236	; 0xec
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e3a6:	4b80      	ldr	r3, [pc, #512]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e3a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d10e      	bne.n	800e3ce <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e3b0:	4b7e      	ldr	r3, [pc, #504]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e3b2:	2203      	movs	r2, #3
 800e3b4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 800e3b8:	e009      	b.n	800e3ce <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e3ba:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800e3be:	3301      	adds	r3, #1
 800e3c0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800e3c4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d0ab      	beq.n	800e324 <ProcessRadioRxDone+0x534>
 800e3cc:	e000      	b.n	800e3d0 <ProcessRadioRxDone+0x5e0>
                    break;
 800e3ce:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e3d0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d117      	bne.n	800e408 <ProcessRadioRxDone+0x618>
 800e3d8:	7cbb      	ldrb	r3, [r7, #18]
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d10d      	bne.n	800e3fa <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e3de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e3e2:	f003 0320 	and.w	r3, r3, #32
 800e3e6:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d106      	bne.n	800e3fa <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e3ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f4:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d006      	beq.n	800e408 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3fa:	4b6c      	ldr	r3, [pc, #432]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e402:	f7ff fccf 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e406:	e1fb      	b.n	800e800 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e408:	7cb9      	ldrb	r1, [r7, #18]
 800e40a:	4c67      	ldr	r4, [pc, #412]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e40c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e410:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	f107 0313 	add.w	r3, r7, #19
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800e424:	f000 fee4 	bl	800f1f0 <GetFCntDown>
 800e428:	4603      	mov	r3, r0
 800e42a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e42e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e432:	2b00      	cmp	r3, #0
 800e434:	d017      	beq.n	800e466 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e436:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e43a:	2b07      	cmp	r3, #7
 800e43c:	d104      	bne.n	800e448 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e43e:	4b5b      	ldr	r3, [pc, #364]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e440:	2208      	movs	r2, #8
 800e442:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800e446:	e003      	b.n	800e450 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e448:	4b58      	ldr	r3, [pc, #352]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e44a:	2201      	movs	r2, #1
 800e44c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	4a56      	ldr	r2, [pc, #344]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e454:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	4a54      	ldr	r2, [pc, #336]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e45c:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800e460:	f7ff fca0 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e464:	e1cc      	b.n	800e800 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e466:	7cfa      	ldrb	r2, [r7, #19]
 800e468:	6979      	ldr	r1, [r7, #20]
 800e46a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800e46e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	460b      	mov	r3, r1
 800e476:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800e47a:	f005 fed3 	bl	8014224 <LoRaMacCryptoUnsecureMessage>
 800e47e:	4603      	mov	r3, r0
 800e480:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e484:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00f      	beq.n	800e4ac <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e48c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e490:	2b02      	cmp	r3, #2
 800e492:	d104      	bne.n	800e49e <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e494:	4b45      	ldr	r3, [pc, #276]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e496:	220a      	movs	r2, #10
 800e498:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800e49c:	e003      	b.n	800e4a6 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e49e:	4b43      	ldr	r3, [pc, #268]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4a0:	220b      	movs	r2, #11
 800e4a2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 800e4a6:	f7ff fc7d 	bl	800dda4 <PrepareRxDoneAbort>
                return;
 800e4aa:	e1a9      	b.n	800e800 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e4ac:	4b3f      	ldr	r3, [pc, #252]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800e4b4:	4a3d      	ldr	r2, [pc, #244]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4b6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800e4ba:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800e4be:	4b3b      	ldr	r3, [pc, #236]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800e4c6:	4b39      	ldr	r3, [pc, #228]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	4a36      	ldr	r2, [pc, #216]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4d2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	4a34      	ldr	r2, [pc, #208]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4da:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e4de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e4e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	bf14      	ite	ne
 800e4ec:	2301      	movne	r3, #1
 800e4ee:	2300      	moveq	r3, #0
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	4b2e      	ldr	r3, [pc, #184]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4f4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e4f8:	4b2c      	ldr	r3, [pc, #176]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e500:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e504:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	bf14      	ite	ne
 800e50e:	2301      	movne	r3, #1
 800e510:	2300      	moveq	r3, #0
 800e512:	b2da      	uxtb	r2, r3
 800e514:	4b25      	ldr	r3, [pc, #148]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e516:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e51a:	4b24      	ldr	r3, [pc, #144]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e51c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e520:	2b00      	cmp	r3, #0
 800e522:	d004      	beq.n	800e52e <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e524:	4b21      	ldr	r3, [pc, #132]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e526:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d106      	bne.n	800e53c <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e52e:	4b1e      	ldr	r3, [pc, #120]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e530:	2200      	movs	r2, #0
 800e532:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e534:	4b1c      	ldr	r3, [pc, #112]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e536:	2201      	movs	r2, #1
 800e538:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e53c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800e540:	2b01      	cmp	r3, #1
 800e542:	d104      	bne.n	800e54e <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e544:	4b19      	ldr	r3, [pc, #100]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e546:	2202      	movs	r2, #2
 800e548:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800e54c:	e03a      	b.n	800e5c4 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e54e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e552:	f023 031f 	bic.w	r3, r3, #31
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2ba0      	cmp	r3, #160	; 0xa0
 800e55a:	d12b      	bne.n	800e5b4 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e55c:	4b12      	ldr	r3, [pc, #72]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e564:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e566:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d102      	bne.n	800e574 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e570:	4a0d      	ldr	r2, [pc, #52]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e572:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e574:	4b0d      	ldr	r3, [pc, #52]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e57c:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e57e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e582:	2b00      	cmp	r3, #0
 800e584:	d01e      	beq.n	800e5c4 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e586:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e588:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d019      	beq.n	800e5c4 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e590:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <ProcessRadioRxDone+0x7b8>)
 800e592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e596:	4a05      	ldr	r2, [pc, #20]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e598:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e59c:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <ProcessRadioRxDone+0x7c0>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a02      	ldr	r2, [pc, #8]	; (800e5ac <ProcessRadioRxDone+0x7bc>)
 800e5a2:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 800e5a6:	e00d      	b.n	800e5c4 <ProcessRadioRxDone+0x7d4>
 800e5a8:	20000ba4 	.word	0x20000ba4
 800e5ac:	20000688 	.word	0x20000688
 800e5b0:	200017d4 	.word	0x200017d4
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e5b4:	4b94      	ldr	r3, [pc, #592]	; (800e808 <ProcessRadioRxDone+0xa18>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e5bc:	4b93      	ldr	r3, [pc, #588]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800e5c4:	4b90      	ldr	r3, [pc, #576]	; (800e808 <ProcessRadioRxDone+0xa18>)
 800e5c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d106      	bne.n	800e5dc <ProcessRadioRxDone+0x7ec>
 800e5ce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e5d2:	f003 0310 	and.w	r3, r3, #16
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d008      	beq.n	800e5ee <ProcessRadioRxDone+0x7fe>
 800e5dc:	4b8a      	ldr	r3, [pc, #552]	; (800e808 <ProcessRadioRxDone+0xa18>)
 800e5de:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d103      	bne.n	800e5ee <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800e5e6:	4b89      	ldr	r3, [pc, #548]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e5ee:	4b87      	ldr	r3, [pc, #540]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e5f0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e5f4:	4a85      	ldr	r2, [pc, #532]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e5f6:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 800e5fa:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800e5fe:	4618      	mov	r0, r3
 800e600:	f001 ff8a 	bl	8010518 <RemoveMacCommands>

            switch( fType )
 800e604:	7cbb      	ldrb	r3, [r7, #18]
 800e606:	2b03      	cmp	r3, #3
 800e608:	d873      	bhi.n	800e6f2 <ProcessRadioRxDone+0x902>
 800e60a:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <ProcessRadioRxDone+0x820>)
 800e60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e610:	0800e621 	.word	0x0800e621
 800e614:	0800e671 	.word	0x0800e671
 800e618:	0800e6a7 	.word	0x0800e6a7
 800e61c:	0800e6cd 	.word	0x0800e6cd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e620:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e624:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	461c      	mov	r4, r3
 800e62c:	4b77      	ldr	r3, [pc, #476]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e62e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e632:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800e636:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e63a:	f102 0010 	add.w	r0, r2, #16
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	460b      	mov	r3, r1
 800e642:	4622      	mov	r2, r4
 800e644:	2100      	movs	r1, #0
 800e646:	f000 ff4f 	bl	800f4e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e64a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e64e:	4b6f      	ldr	r3, [pc, #444]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e650:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e656:	4a6d      	ldr	r2, [pc, #436]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e658:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e65c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800e660:	4b6a      	ldr	r3, [pc, #424]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e662:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800e666:	4b69      	ldr	r3, [pc, #420]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800e66e:	e047      	b.n	800e700 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e670:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e674:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	461c      	mov	r4, r3
 800e67c:	4b63      	ldr	r3, [pc, #396]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e67e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e682:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800e686:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e68a:	f102 0010 	add.w	r0, r2, #16
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	460b      	mov	r3, r1
 800e692:	4622      	mov	r2, r4
 800e694:	2100      	movs	r1, #0
 800e696:	f000 ff27 	bl	800f4e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e69a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e69e:	4b5b      	ldr	r3, [pc, #364]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6a0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800e6a4:	e02c      	b.n	800e700 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e6a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e6a8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800e6ac:	4b57      	ldr	r3, [pc, #348]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6ae:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e6b2:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	f000 ff14 	bl	800f4e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e6c0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e6c4:	4b51      	ldr	r3, [pc, #324]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6c6:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800e6ca:	e019      	b.n	800e700 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e6cc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e6d0:	4b4e      	ldr	r3, [pc, #312]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6d2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e6d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6d8:	4a4c      	ldr	r2, [pc, #304]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6da:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e6de:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800e6e2:	4b4a      	ldr	r3, [pc, #296]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6e4:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800e6e8:	4b48      	ldr	r3, [pc, #288]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800e6f0:	e006      	b.n	800e700 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e6f2:	4b46      	ldr	r3, [pc, #280]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800e6fa:	f7ff fb53 	bl	800dda4 <PrepareRxDoneAbort>
                    break;
 800e6fe:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e700:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800e704:	2be0      	cmp	r3, #224	; 0xe0
 800e706:	d118      	bne.n	800e73a <ProcessRadioRxDone+0x94a>
 800e708:	4b3f      	ldr	r3, [pc, #252]	; (800e808 <ProcessRadioRxDone+0xa18>)
 800e70a:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800e70e:	f083 0301 	eor.w	r3, r3, #1
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b00      	cmp	r3, #0
 800e716:	d010      	beq.n	800e73a <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e718:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e71c:	4b3b      	ldr	r3, [pc, #236]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e71e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800e722:	4b3a      	ldr	r3, [pc, #232]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e724:	2200      	movs	r2, #0
 800e726:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800e72a:	4b38      	ldr	r3, [pc, #224]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800e732:	4b36      	ldr	r3, [pc, #216]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e734:	2200      	movs	r2, #0
 800e736:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e73a:	4a34      	ldr	r2, [pc, #208]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e73c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 800e748:	e035      	b.n	800e7b6 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e74a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e74e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e752:	18d1      	adds	r1, r2, r3
 800e754:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e758:	b29b      	uxth	r3, r3
 800e75a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	b29b      	uxth	r3, r3
 800e762:	461a      	mov	r2, r3
 800e764:	482a      	ldr	r0, [pc, #168]	; (800e810 <ProcessRadioRxDone+0xa20>)
 800e766:	f008 fd32 	bl	80171ce <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e76a:	4b28      	ldr	r3, [pc, #160]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e76c:	2203      	movs	r2, #3
 800e76e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e772:	4b26      	ldr	r3, [pc, #152]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e77a:	4b24      	ldr	r3, [pc, #144]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e77c:	4a24      	ldr	r2, [pc, #144]	; (800e810 <ProcessRadioRxDone+0xa20>)
 800e77e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e782:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e786:	b2da      	uxtb	r2, r3
 800e788:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	4b1e      	ldr	r3, [pc, #120]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e792:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e796:	4a1d      	ldr	r2, [pc, #116]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e798:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e79c:	f043 0302 	orr.w	r3, r3, #2
 800e7a0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800e7a4:	e007      	b.n	800e7b6 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7a6:	4b19      	ldr	r3, [pc, #100]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800e7ae:	f7ff faf9 	bl	800dda4 <PrepareRxDoneAbort>
            break;
 800e7b2:	e000      	b.n	800e7b6 <ProcessRadioRxDone+0x9c6>
            break;
 800e7b4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e7b6:	4b15      	ldr	r3, [pc, #84]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7b8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d004      	beq.n	800e7ca <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e7c0:	4b12      	ldr	r3, [pc, #72]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7c2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d10c      	bne.n	800e7e4 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800e7ca:	4b10      	ldr	r3, [pc, #64]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7cc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d007      	beq.n	800e7e4 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e7d4:	4b0d      	ldr	r3, [pc, #52]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7d6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d002      	beq.n	800e7e4 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e7de:	2000      	movs	r0, #0
 800e7e0:	f000 fcec 	bl	800f1bc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e7e4:	4b09      	ldr	r3, [pc, #36]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7e6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	d006      	beq.n	800e7fc <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e7ee:	4a07      	ldr	r2, [pc, #28]	; (800e80c <ProcessRadioRxDone+0xa1c>)
 800e7f0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e7f4:	f043 0310 	orr.w	r3, r3, #16
 800e7f8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e7fc:	f7ff fa14 	bl	800dc28 <UpdateRxSlotIdleState>
}
 800e800:	37a4      	adds	r7, #164	; 0xa4
 800e802:	46bd      	mov	sp, r7
 800e804:	bd90      	pop	{r4, r7, pc}
 800e806:	bf00      	nop
 800e808:	20000ba4 	.word	0x20000ba4
 800e80c:	20000688 	.word	0x20000688
 800e810:	200008c0 	.word	0x200008c0

0800e814 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e818:	4b11      	ldr	r3, [pc, #68]	; (800e860 <ProcessRadioTxTimeout+0x4c>)
 800e81a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d002      	beq.n	800e828 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e822:	4b10      	ldr	r3, [pc, #64]	; (800e864 <ProcessRadioTxTimeout+0x50>)
 800e824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e826:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e828:	f7ff f9fe 	bl	800dc28 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e82c:	4b0e      	ldr	r3, [pc, #56]	; (800e868 <ProcessRadioTxTimeout+0x54>)
 800e82e:	2202      	movs	r2, #2
 800e830:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e834:	2002      	movs	r0, #2
 800e836:	f004 fe69 	bl	801350c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e83a:	4b0b      	ldr	r3, [pc, #44]	; (800e868 <ProcessRadioTxTimeout+0x54>)
 800e83c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e840:	2b00      	cmp	r3, #0
 800e842:	d003      	beq.n	800e84c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800e844:	4b08      	ldr	r3, [pc, #32]	; (800e868 <ProcessRadioTxTimeout+0x54>)
 800e846:	2201      	movs	r2, #1
 800e848:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e84c:	4a06      	ldr	r2, [pc, #24]	; (800e868 <ProcessRadioTxTimeout+0x54>)
 800e84e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e852:	f043 0310 	orr.w	r3, r3, #16
 800e856:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800e85a:	bf00      	nop
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20000ba4 	.word	0x20000ba4
 800e864:	0801cbcc 	.word	0x0801cbcc
 800e868:	20000688 	.word	0x20000688

0800e86c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	4603      	mov	r3, r0
 800e874:	460a      	mov	r2, r1
 800e876:	71fb      	strb	r3, [r7, #7]
 800e878:	4613      	mov	r3, r2
 800e87a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e880:	4b3d      	ldr	r3, [pc, #244]	; (800e978 <HandleRadioRxErrorTimeout+0x10c>)
 800e882:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e886:	2b02      	cmp	r3, #2
 800e888:	d002      	beq.n	800e890 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e88a:	4b3c      	ldr	r3, [pc, #240]	; (800e97c <HandleRadioRxErrorTimeout+0x110>)
 800e88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e890:	f004 f966 	bl	8012b60 <LoRaMacClassBIsBeaconExpected>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e89a:	2002      	movs	r0, #2
 800e89c:	f004 f914 	bl	8012ac8 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	f004 f936 	bl	8012b12 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e8aa:	4b33      	ldr	r3, [pc, #204]	; (800e978 <HandleRadioRxErrorTimeout+0x10c>)
 800e8ac:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d119      	bne.n	800e8e8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e8b4:	f004 f95b 	bl	8012b6e <LoRaMacClassBIsPingExpected>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d007      	beq.n	800e8ce <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e8be:	2000      	movs	r0, #0
 800e8c0:	f004 f90c 	bl	8012adc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	f004 f92d 	bl	8012b24 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e8ce:	f004 f955 	bl	8012b7c <LoRaMacClassBIsMulticastExpected>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e8d8:	2000      	movs	r0, #0
 800e8da:	f004 f909 	bl	8012af0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e8de:	2000      	movs	r0, #0
 800e8e0:	f004 f929 	bl	8012b36 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ea:	f083 0301 	eor.w	r3, r3, #1
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d03b      	beq.n	800e96c <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e8f4:	4b22      	ldr	r3, [pc, #136]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e8f6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d122      	bne.n	800e944 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e8fe:	4b20      	ldr	r3, [pc, #128]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e900:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e904:	2b00      	cmp	r3, #0
 800e906:	d003      	beq.n	800e910 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e908:	4a1d      	ldr	r2, [pc, #116]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e90a:	79fb      	ldrb	r3, [r7, #7]
 800e90c:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e910:	79fb      	ldrb	r3, [r7, #7]
 800e912:	4618      	mov	r0, r3
 800e914:	f004 fdfa 	bl	801350c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e918:	4b17      	ldr	r3, [pc, #92]	; (800e978 <HandleRadioRxErrorTimeout+0x10c>)
 800e91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91c:	4618      	mov	r0, r3
 800e91e:	f00c ff1d 	bl	801b75c <UTIL_TIMER_GetElapsedTime>
 800e922:	4602      	mov	r2, r0
 800e924:	4b16      	ldr	r3, [pc, #88]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e926:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d31e      	bcc.n	800e96c <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e92e:	4815      	ldr	r0, [pc, #84]	; (800e984 <HandleRadioRxErrorTimeout+0x118>)
 800e930:	f00c fde8 	bl	801b504 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e934:	4a12      	ldr	r2, [pc, #72]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e936:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e93a:	f043 0310 	orr.w	r3, r3, #16
 800e93e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800e942:	e013      	b.n	800e96c <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e944:	4b0e      	ldr	r3, [pc, #56]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e946:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e94e:	4a0c      	ldr	r2, [pc, #48]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e950:	79bb      	ldrb	r3, [r7, #6]
 800e952:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e956:	79bb      	ldrb	r3, [r7, #6]
 800e958:	4618      	mov	r0, r3
 800e95a:	f004 fdd7 	bl	801350c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e95e:	4a08      	ldr	r2, [pc, #32]	; (800e980 <HandleRadioRxErrorTimeout+0x114>)
 800e960:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e964:	f043 0310 	orr.w	r3, r3, #16
 800e968:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e96c:	f7ff f95c 	bl	800dc28 <UpdateRxSlotIdleState>
}
 800e970:	bf00      	nop
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	20000ba4 	.word	0x20000ba4
 800e97c:	0801cbcc 	.word	0x0801cbcc
 800e980:	20000688 	.word	0x20000688
 800e984:	20000a20 	.word	0x20000a20

0800e988 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e98c:	2106      	movs	r1, #6
 800e98e:	2005      	movs	r0, #5
 800e990:	f7ff ff6c 	bl	800e86c <HandleRadioRxErrorTimeout>
}
 800e994:	bf00      	nop
 800e996:	bd80      	pop	{r7, pc}

0800e998 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e99c:	2104      	movs	r1, #4
 800e99e:	2003      	movs	r0, #3
 800e9a0:	f7ff ff64 	bl	800e86c <HandleRadioRxErrorTimeout>
}
 800e9a4:	bf00      	nop
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800e9b2:	607b      	str	r3, [r7, #4]
  return(result);
 800e9b4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e9b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e9b8:	b672      	cpsid	i
}
 800e9ba:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e9bc:	4b1d      	ldr	r3, [pc, #116]	; (800ea34 <LoRaMacHandleIrqEvents+0x8c>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ea34 <LoRaMacHandleIrqEvents+0x8c>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	601a      	str	r2, [r3, #0]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	f383 8810 	msr	PRIMASK, r3
}
 800e9d2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d027      	beq.n	800ea2a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e9da:	783b      	ldrb	r3, [r7, #0]
 800e9dc:	f003 0320 	and.w	r3, r3, #32
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e9e6:	f7ff f937 	bl	800dc58 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e9ea:	783b      	ldrb	r3, [r7, #0]
 800e9ec:	f003 0310 	and.w	r3, r3, #16
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e9f6:	f7ff f9fb 	bl	800ddf0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e9fa:	783b      	ldrb	r3, [r7, #0]
 800e9fc:	f003 0308 	and.w	r3, r3, #8
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ea06:	f7ff ff05 	bl	800e814 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ea0a:	783b      	ldrb	r3, [r7, #0]
 800ea0c:	f003 0304 	and.w	r3, r3, #4
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ea16:	f7ff ffb7 	bl	800e988 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ea1a:	783b      	ldrb	r3, [r7, #0]
 800ea1c:	f003 0302 	and.w	r3, r3, #2
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ea26:	f7ff ffb7 	bl	800e998 <ProcessRadioRxTimeout>
        }
    }
}
 800ea2a:	bf00      	nop
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	200017cc 	.word	0x200017cc

0800ea38 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ea38:	b480      	push	{r7}
 800ea3a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800ea3c:	4b10      	ldr	r3, [pc, #64]	; (800ea80 <LoRaMacIsBusy+0x48>)
 800ea3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d101      	bne.n	800ea4a <LoRaMacIsBusy+0x12>
    {
        return false;
 800ea46:	2300      	movs	r3, #0
 800ea48:	e015      	b.n	800ea76 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800ea4a:	4b0e      	ldr	r3, [pc, #56]	; (800ea84 <LoRaMacIsBusy+0x4c>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <LoRaMacIsBusy+0x24>
    {
        return true;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e00c      	b.n	800ea76 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ea5c:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <LoRaMacIsBusy+0x48>)
 800ea5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d106      	bne.n	800ea74 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800ea66:	4b06      	ldr	r3, [pc, #24]	; (800ea80 <LoRaMacIsBusy+0x48>)
 800ea68:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d101      	bne.n	800ea74 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800ea70:	2300      	movs	r3, #0
 800ea72:	e000      	b.n	800ea76 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800ea74:	2301      	movs	r3, #1
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bc80      	pop	{r7}
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	20000688 	.word	0x20000688
 800ea84:	200017cc 	.word	0x200017cc

0800ea88 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800ea8c:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <LoRaMacIsStopped+0x1c>)
 800ea8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d101      	bne.n	800ea9a <LoRaMacIsStopped+0x12>
    {
        return true;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e000      	b.n	800ea9c <LoRaMacIsStopped+0x14>
    }
    return false;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bc80      	pop	{r7}
 800eaa2:	4770      	bx	lr
 800eaa4:	20000688 	.word	0x20000688

0800eaa8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800eab2:	4a04      	ldr	r2, [pc, #16]	; (800eac4 <LoRaMacEnableRequests+0x1c>)
 800eab4:	79fb      	ldrb	r3, [r7, #7]
 800eab6:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 800eaba:	bf00      	nop
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bc80      	pop	{r7}
 800eac2:	4770      	bx	lr
 800eac4:	20000688 	.word	0x20000688

0800eac8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800eace:	4b2c      	ldr	r3, [pc, #176]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800ead0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ead4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ead6:	4b2a      	ldr	r3, [pc, #168]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800ead8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d14a      	bne.n	800eb76 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800eae0:	4b27      	ldr	r3, [pc, #156]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eae2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800eae6:	f003 0301 	and.w	r3, r3, #1
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d006      	beq.n	800eafe <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800eaf0:	4a23      	ldr	r2, [pc, #140]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eaf2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eaf6:	f36f 0300 	bfc	r3, #0, #1
 800eafa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eafe:	4b20      	ldr	r3, [pc, #128]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eb00:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800eb04:	f003 0304 	and.w	r3, r3, #4
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d006      	beq.n	800eb1c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800eb0e:	4a1c      	ldr	r2, [pc, #112]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eb10:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eb14:	f36f 0382 	bfc	r3, #2, #1
 800eb18:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb1c:	2001      	movs	r0, #1
 800eb1e:	f7ff ffc3 	bl	800eaa8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800eb22:	793b      	ldrb	r3, [r7, #4]
 800eb24:	f003 0301 	and.w	r3, r3, #1
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d005      	beq.n	800eb3a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800eb2e:	4b14      	ldr	r3, [pc, #80]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eb30:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4813      	ldr	r0, [pc, #76]	; (800eb84 <LoRaMacHandleRequestEvents+0xbc>)
 800eb38:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800eb3a:	793b      	ldrb	r3, [r7, #4]
 800eb3c:	f003 0304 	and.w	r3, r3, #4
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00e      	beq.n	800eb64 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800eb46:	4810      	ldr	r0, [pc, #64]	; (800eb88 <LoRaMacHandleRequestEvents+0xc0>)
 800eb48:	f004 fd2e 	bl	80135a8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800eb4c:	f004 fd7e 	bl	801364c <LoRaMacConfirmQueueGetCnt>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d006      	beq.n	800eb64 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800eb56:	4a0a      	ldr	r2, [pc, #40]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eb58:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eb5c:	f043 0304 	orr.w	r3, r3, #4
 800eb60:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800eb64:	f004 f828 	bl	8012bb8 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800eb68:	4a05      	ldr	r2, [pc, #20]	; (800eb80 <LoRaMacHandleRequestEvents+0xb8>)
 800eb6a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eb6e:	f36f 1304 	bfc	r3, #4, #1
 800eb72:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800eb76:	bf00      	nop
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20000688 	.word	0x20000688
 800eb84:	20000ac8 	.word	0x20000ac8
 800eb88:	20000adc 	.word	0x20000adc

0800eb8c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800eb90:	4b16      	ldr	r3, [pc, #88]	; (800ebec <LoRaMacHandleIndicationEvents+0x60>)
 800eb92:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800eb96:	f003 0308 	and.w	r3, r3, #8
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00d      	beq.n	800ebbc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800eba0:	4a12      	ldr	r2, [pc, #72]	; (800ebec <LoRaMacHandleIndicationEvents+0x60>)
 800eba2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eba6:	f36f 03c3 	bfc	r3, #3, #1
 800ebaa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ebae:	4b0f      	ldr	r3, [pc, #60]	; (800ebec <LoRaMacHandleIndicationEvents+0x60>)
 800ebb0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	490e      	ldr	r1, [pc, #56]	; (800ebf0 <LoRaMacHandleIndicationEvents+0x64>)
 800ebb8:	480e      	ldr	r0, [pc, #56]	; (800ebf4 <LoRaMacHandleIndicationEvents+0x68>)
 800ebba:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ebbc:	4b0b      	ldr	r3, [pc, #44]	; (800ebec <LoRaMacHandleIndicationEvents+0x60>)
 800ebbe:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ebc2:	f003 0302 	and.w	r3, r3, #2
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00d      	beq.n	800ebe8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ebcc:	4a07      	ldr	r2, [pc, #28]	; (800ebec <LoRaMacHandleIndicationEvents+0x60>)
 800ebce:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ebd2:	f36f 0341 	bfc	r3, #1, #1
 800ebd6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ebda:	4b04      	ldr	r3, [pc, #16]	; (800ebec <LoRaMacHandleIndicationEvents+0x60>)
 800ebdc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	4903      	ldr	r1, [pc, #12]	; (800ebf0 <LoRaMacHandleIndicationEvents+0x64>)
 800ebe4:	4804      	ldr	r0, [pc, #16]	; (800ebf8 <LoRaMacHandleIndicationEvents+0x6c>)
 800ebe6:	4798      	blx	r3
    }
}
 800ebe8:	bf00      	nop
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20000688 	.word	0x20000688
 800ebf0:	20000b14 	.word	0x20000b14
 800ebf4:	20000af0 	.word	0x20000af0
 800ebf8:	20000aa8 	.word	0x20000aa8

0800ebfc <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ec02:	4b2a      	ldr	r3, [pc, #168]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec04:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d048      	beq.n	800eca4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800ec12:	2300      	movs	r3, #0
 800ec14:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ec16:	2300      	movs	r3, #0
 800ec18:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ec1a:	4b24      	ldr	r3, [pc, #144]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec1c:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d004      	beq.n	800ec2e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ec24:	4b21      	ldr	r3, [pc, #132]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec26:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	d104      	bne.n	800ec38 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ec2e:	f002 f943 	bl	8010eb8 <CheckRetransUnconfirmedUplink>
 800ec32:	4603      	mov	r3, r0
 800ec34:	71fb      	strb	r3, [r7, #7]
 800ec36:	e010      	b.n	800ec5a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ec38:	4b1c      	ldr	r3, [pc, #112]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec3a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d10b      	bne.n	800ec5a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ec42:	4b1a      	ldr	r3, [pc, #104]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec44:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d004      	beq.n	800ec56 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ec4c:	f002 f960 	bl	8010f10 <CheckRetransConfirmedUplink>
 800ec50:	4603      	mov	r3, r0
 800ec52:	71fb      	strb	r3, [r7, #7]
 800ec54:	e001      	b.n	800ec5a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800ec56:	2301      	movs	r3, #1
 800ec58:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00d      	beq.n	800ec7c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ec60:	4813      	ldr	r0, [pc, #76]	; (800ecb0 <LoRaMacHandleMcpsRequest+0xb4>)
 800ec62:	f00c fc4f 	bl	801b504 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ec66:	4b11      	ldr	r3, [pc, #68]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec68:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec6c:	f023 0320 	bic.w	r3, r3, #32
 800ec70:	4a0e      	ldr	r2, [pc, #56]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec72:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800ec76:	f002 f985 	bl	8010f84 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800ec7a:	e013      	b.n	800eca4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800ec7c:	79bb      	ldrb	r3, [r7, #6]
 800ec7e:	f083 0301 	eor.w	r3, r3, #1
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00d      	beq.n	800eca4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ec88:	4a08      	ldr	r2, [pc, #32]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec8a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ec8e:	f36f 1304 	bfc	r3, #4, #1
 800ec92:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800ec96:	4b05      	ldr	r3, [pc, #20]	; (800ecac <LoRaMacHandleMcpsRequest+0xb0>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800ec9e:	2000      	movs	r0, #0
 800eca0:	f000 f9c8 	bl	800f034 <OnTxDelayedTimerEvent>
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	20000688 	.word	0x20000688
 800ecb0:	200009f0 	.word	0x200009f0

0800ecb4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ecb8:	4b18      	ldr	r3, [pc, #96]	; (800ed1c <LoRaMacHandleMlmeRequest+0x68>)
 800ecba:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ecbe:	f003 0304 	and.w	r3, r3, #4
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d026      	beq.n	800ed16 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ecc8:	2001      	movs	r0, #1
 800ecca:	f004 fc53 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d012      	beq.n	800ecfa <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ecd4:	2001      	movs	r0, #1
 800ecd6:	f004 fbef 	bl	80134b8 <LoRaMacConfirmQueueGetStatus>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d103      	bne.n	800ece8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ece0:	4b0e      	ldr	r3, [pc, #56]	; (800ed1c <LoRaMacHandleMlmeRequest+0x68>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ece8:	4b0c      	ldr	r3, [pc, #48]	; (800ed1c <LoRaMacHandleMlmeRequest+0x68>)
 800ecea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ecee:	f023 0302 	bic.w	r3, r3, #2
 800ecf2:	4a0a      	ldr	r2, [pc, #40]	; (800ed1c <LoRaMacHandleMlmeRequest+0x68>)
 800ecf4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800ecf8:	e00d      	b.n	800ed16 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ecfa:	2006      	movs	r0, #6
 800ecfc:	f004 fc3a 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d007      	beq.n	800ed16 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ed06:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <LoRaMacHandleMlmeRequest+0x68>)
 800ed08:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed0c:	f023 0302 	bic.w	r3, r3, #2
 800ed10:	4a02      	ldr	r2, [pc, #8]	; (800ed1c <LoRaMacHandleMlmeRequest+0x68>)
 800ed12:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800ed16:	bf00      	nop
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	20000688 	.word	0x20000688

0800ed20 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ed24:	200b      	movs	r0, #11
 800ed26:	f004 fc25 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d019      	beq.n	800ed64 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ed30:	4b0e      	ldr	r3, [pc, #56]	; (800ed6c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ed32:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d111      	bne.n	800ed64 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ed40:	4b0a      	ldr	r3, [pc, #40]	; (800ed6c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ed42:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ed46:	f003 0304 	and.w	r3, r3, #4
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d009      	beq.n	800ed64 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ed52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed56:	f023 0302 	bic.w	r3, r3, #2
 800ed5a:	4a04      	ldr	r2, [pc, #16]	; (800ed6c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ed5c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800ed60:	2301      	movs	r3, #1
 800ed62:	e000      	b.n	800ed66 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	20000688 	.word	0x20000688

0800ed70 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4603      	mov	r3, r0
 800ed78:	71fb      	strb	r3, [r7, #7]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	71bb      	strb	r3, [r7, #6]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00a      	beq.n	800ed9e <CheckForMinimumAbpDatarate+0x2e>
 800ed88:	79bb      	ldrb	r3, [r7, #6]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d107      	bne.n	800ed9e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800ed8e:	797b      	ldrb	r3, [r7, #5]
 800ed90:	f083 0301 	eor.w	r3, r3, #1
 800ed94:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bc80      	pop	{r7}
 800eda8:	4770      	bx	lr
	...

0800edac <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800edac:	b480      	push	{r7}
 800edae:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800edb0:	4b0d      	ldr	r3, [pc, #52]	; (800ede8 <LoRaMacCheckForRxAbort+0x3c>)
 800edb2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800edb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00f      	beq.n	800edde <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800edbe:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <LoRaMacCheckForRxAbort+0x3c>)
 800edc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800edc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edc8:	4a07      	ldr	r2, [pc, #28]	; (800ede8 <LoRaMacCheckForRxAbort+0x3c>)
 800edca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800edce:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <LoRaMacCheckForRxAbort+0x3c>)
 800edd0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800edd4:	f023 0302 	bic.w	r3, r3, #2
 800edd8:	4a03      	ldr	r2, [pc, #12]	; (800ede8 <LoRaMacCheckForRxAbort+0x3c>)
 800edda:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800edde:	bf00      	nop
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bc80      	pop	{r7}
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	20000688 	.word	0x20000688

0800edec <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800edf4:	2300      	movs	r3, #0
 800edf6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800edf8:	2300      	movs	r3, #0
 800edfa:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800edfc:	4b51      	ldr	r3, [pc, #324]	; (800ef44 <LoRaMacHandleNvm+0x158>)
 800edfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f040 8099 	bne.w	800ef3a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2124      	movs	r1, #36	; 0x24
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f008 fa33 	bl	8017278 <Crc32>
 800ee12:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee18:	68ba      	ldr	r2, [r7, #8]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d006      	beq.n	800ee2c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ee24:	89fb      	ldrh	r3, [r7, #14]
 800ee26:	f043 0301 	orr.w	r3, r3, #1
 800ee2a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3328      	adds	r3, #40	; 0x28
 800ee30:	211c      	movs	r1, #28
 800ee32:	4618      	mov	r0, r3
 800ee34:	f008 fa20 	bl	8017278 <Crc32>
 800ee38:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d006      	beq.n	800ee52 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ee4a:	89fb      	ldrh	r3, [r7, #14]
 800ee4c:	f043 0302 	orr.w	r3, r3, #2
 800ee50:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3348      	adds	r3, #72	; 0x48
 800ee56:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f008 fa0c 	bl	8017278 <Crc32>
 800ee60:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d007      	beq.n	800ee7e <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ee76:	89fb      	ldrh	r3, [r7, #14]
 800ee78:	f043 0304 	orr.w	r3, r3, #4
 800ee7c:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800ee84:	21d4      	movs	r1, #212	; 0xd4
 800ee86:	4618      	mov	r0, r3
 800ee88:	f008 f9f6 	bl	8017278 <Crc32>
 800ee8c:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d007      	beq.n	800eeaa <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800eea2:	89fb      	ldrh	r3, [r7, #14]
 800eea4:	f043 0308 	orr.w	r3, r3, #8
 800eea8:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800eeb0:	2110      	movs	r1, #16
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f008 f9e0 	bl	8017278 <Crc32>
 800eeb8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d007      	beq.n	800eed6 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800eece:	89fb      	ldrh	r3, [r7, #14]
 800eed0:	f043 0310 	orr.w	r3, r3, #16
 800eed4:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800eedc:	f44f 715e 	mov.w	r1, #888	; 0x378
 800eee0:	4618      	mov	r0, r3
 800eee2:	f008 f9c9 	bl	8017278 <Crc32>
 800eee6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d007      	beq.n	800ef04 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800eefc:	89fb      	ldrh	r3, [r7, #14]
 800eefe:	f043 0320 	orr.w	r3, r3, #32
 800ef02:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800ef0a:	2114      	movs	r1, #20
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f008 f9b3 	bl	8017278 <Crc32>
 800ef12:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d007      	beq.n	800ef30 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ef28:	89fb      	ldrh	r3, [r7, #14]
 800ef2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef2e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800ef30:	89fb      	ldrh	r3, [r7, #14]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f002 f878 	bl	8011028 <CallNvmDataChangeCallback>
 800ef38:	e000      	b.n	800ef3c <LoRaMacHandleNvm+0x150>
        return;
 800ef3a:	bf00      	nop
}
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	20000688 	.word	0x20000688

0800ef48 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00d      	beq.n	800ef74 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ef58:	6838      	ldr	r0, [r7, #0]
 800ef5a:	f00c fbff 	bl	801b75c <UTIL_TIMER_GetElapsedTime>
 800ef5e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d905      	bls.n	800ef74 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800ef68:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <LoRaMacHandleResponseTimeout+0x38>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800ef70:	2301      	movs	r3, #1
 800ef72:	e000      	b.n	800ef76 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	20000ba4 	.word	0x20000ba4

0800ef84 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800ef8e:	f7ff fd0b 	bl	800e9a8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ef92:	f003 fe80 	bl	8012c96 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ef96:	4b25      	ldr	r3, [pc, #148]	; (800f02c <LoRaMacProcess+0xa8>)
 800ef98:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ef9c:	f003 0310 	and.w	r3, r3, #16
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d023      	beq.n	800efee <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800efa6:	2000      	movs	r0, #0
 800efa8:	f7ff fd7e 	bl	800eaa8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800efac:	f7ff fefe 	bl	800edac <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800efb0:	f002 f858 	bl	8011064 <IsRequestPending>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d006      	beq.n	800efc8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800efba:	f7ff feb1 	bl	800ed20 <LoRaMacCheckForBeaconAcquisition>
 800efbe:	4603      	mov	r3, r0
 800efc0:	461a      	mov	r2, r3
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d103      	bne.n	800efd6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800efce:	f7ff fe71 	bl	800ecb4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800efd2:	f7ff fe13 	bl	800ebfc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800efd6:	f7ff fd77 	bl	800eac8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800efda:	2001      	movs	r0, #1
 800efdc:	f7ff fd64 	bl	800eaa8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800efe0:	4a12      	ldr	r2, [pc, #72]	; (800f02c <LoRaMacProcess+0xa8>)
 800efe2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800efe6:	f043 0320 	orr.w	r3, r3, #32
 800efea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800efee:	f7ff fdcd 	bl	800eb8c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eff2:	4b0e      	ldr	r3, [pc, #56]	; (800f02c <LoRaMacProcess+0xa8>)
 800eff4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800eff8:	2b02      	cmp	r3, #2
 800effa:	d101      	bne.n	800f000 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800effc:	f001 fc1a 	bl	8010834 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f000:	4b0a      	ldr	r3, [pc, #40]	; (800f02c <LoRaMacProcess+0xa8>)
 800f002:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f006:	f003 0320 	and.w	r3, r3, #32
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d009      	beq.n	800f024 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f010:	4a06      	ldr	r2, [pc, #24]	; (800f02c <LoRaMacProcess+0xa8>)
 800f012:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f016:	f36f 1345 	bfc	r3, #5, #1
 800f01a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800f01e:	4804      	ldr	r0, [pc, #16]	; (800f030 <LoRaMacProcess+0xac>)
 800f020:	f7ff fee4 	bl	800edec <LoRaMacHandleNvm>
    }
}
 800f024:	bf00      	nop
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	20000688 	.word	0x20000688
 800f030:	20000ba4 	.word	0x20000ba4

0800f034 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f03c:	481e      	ldr	r0, [pc, #120]	; (800f0b8 <OnTxDelayedTimerEvent+0x84>)
 800f03e:	f00c fa61 	bl	801b504 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f042:	4b1e      	ldr	r3, [pc, #120]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f044:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f048:	f023 0320 	bic.w	r3, r3, #32
 800f04c:	4a1b      	ldr	r2, [pc, #108]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f04e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f052:	4b1b      	ldr	r3, [pc, #108]	; (800f0c0 <OnTxDelayedTimerEvent+0x8c>)
 800f054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f058:	4a18      	ldr	r2, [pc, #96]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f05a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 800f05e:	4611      	mov	r1, r2
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff ff71 	bl	800ef48 <LoRaMacHandleResponseTimeout>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d11e      	bne.n	800f0aa <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f06c:	2001      	movs	r0, #1
 800f06e:	f001 f92b 	bl	80102c8 <ScheduleTx>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d01a      	beq.n	800f0ae <OnTxDelayedTimerEvent+0x7a>
 800f078:	2b0b      	cmp	r3, #11
 800f07a:	d018      	beq.n	800f0ae <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f07c:	4b10      	ldr	r3, [pc, #64]	; (800f0c0 <OnTxDelayedTimerEvent+0x8c>)
 800f07e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f082:	b2da      	uxtb	r2, r3
 800f084:	4b0d      	ldr	r3, [pc, #52]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f086:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f08a:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f08c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800f090:	4b0a      	ldr	r3, [pc, #40]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f092:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f096:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <OnTxDelayedTimerEvent+0x88>)
 800f098:	2209      	movs	r2, #9
 800f09a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f09e:	2009      	movs	r0, #9
 800f0a0:	f004 fa34 	bl	801350c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f0a4:	f001 ff6e 	bl	8010f84 <StopRetransmission>
            break;
 800f0a8:	e002      	b.n	800f0b0 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f0aa:	bf00      	nop
 800f0ac:	e000      	b.n	800f0b0 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f0ae:	bf00      	nop
        }
    }
}
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	200009f0 	.word	0x200009f0
 800f0bc:	20000688 	.word	0x20000688
 800f0c0:	20000ba4 	.word	0x20000ba4

0800f0c4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f0cc:	4b17      	ldr	r3, [pc, #92]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f0ce:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f0d2:	4b16      	ldr	r3, [pc, #88]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f0d4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f0d8:	4b15      	ldr	r3, [pc, #84]	; (800f130 <OnRxWindow1TimerEvent+0x6c>)
 800f0da:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f0de:	b25a      	sxtb	r2, r3
 800f0e0:	4b12      	ldr	r3, [pc, #72]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f0e2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f0e6:	4b12      	ldr	r3, [pc, #72]	; (800f130 <OnRxWindow1TimerEvent+0x6c>)
 800f0e8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f0ec:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f0ee:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f0f2:	4b0f      	ldr	r3, [pc, #60]	; (800f130 <OnRxWindow1TimerEvent+0x6c>)
 800f0f4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f0f8:	4b0c      	ldr	r3, [pc, #48]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f0fa:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f0fe:	4b0b      	ldr	r3, [pc, #44]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f100:	2200      	movs	r2, #0
 800f102:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f106:	4b09      	ldr	r3, [pc, #36]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f10e:	4b08      	ldr	r3, [pc, #32]	; (800f130 <OnRxWindow1TimerEvent+0x6c>)
 800f110:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f114:	4b05      	ldr	r3, [pc, #20]	; (800f12c <OnRxWindow1TimerEvent+0x68>)
 800f116:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f11a:	4906      	ldr	r1, [pc, #24]	; (800f134 <OnRxWindow1TimerEvent+0x70>)
 800f11c:	4806      	ldr	r0, [pc, #24]	; (800f138 <OnRxWindow1TimerEvent+0x74>)
 800f11e:	f001 fb55 	bl	80107cc <RxWindowSetup>
}
 800f122:	bf00      	nop
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20000688 	.word	0x20000688
 800f130:	20000ba4 	.word	0x20000ba4
 800f134:	20000a40 	.word	0x20000a40
 800f138:	20000a08 	.word	0x20000a08

0800f13c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f144:	4b19      	ldr	r3, [pc, #100]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f146:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d029      	beq.n	800f1a2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f14e:	4b17      	ldr	r3, [pc, #92]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f150:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f154:	4b15      	ldr	r3, [pc, #84]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f156:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f15a:	4b15      	ldr	r3, [pc, #84]	; (800f1b0 <OnRxWindow2TimerEvent+0x74>)
 800f15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f15e:	4a13      	ldr	r2, [pc, #76]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f160:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f164:	4b12      	ldr	r3, [pc, #72]	; (800f1b0 <OnRxWindow2TimerEvent+0x74>)
 800f166:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f16a:	4b10      	ldr	r3, [pc, #64]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f16c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f170:	4b0f      	ldr	r3, [pc, #60]	; (800f1b0 <OnRxWindow2TimerEvent+0x74>)
 800f172:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f176:	4b0d      	ldr	r3, [pc, #52]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f178:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f17c:	4b0b      	ldr	r3, [pc, #44]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f184:	4b09      	ldr	r3, [pc, #36]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f186:	2201      	movs	r2, #1
 800f188:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f18c:	4b08      	ldr	r3, [pc, #32]	; (800f1b0 <OnRxWindow2TimerEvent+0x74>)
 800f18e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f192:	4b06      	ldr	r3, [pc, #24]	; (800f1ac <OnRxWindow2TimerEvent+0x70>)
 800f194:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f198:	4906      	ldr	r1, [pc, #24]	; (800f1b4 <OnRxWindow2TimerEvent+0x78>)
 800f19a:	4807      	ldr	r0, [pc, #28]	; (800f1b8 <OnRxWindow2TimerEvent+0x7c>)
 800f19c:	f001 fb16 	bl	80107cc <RxWindowSetup>
 800f1a0:	e000      	b.n	800f1a4 <OnRxWindow2TimerEvent+0x68>
        return;
 800f1a2:	bf00      	nop
}
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20000688 	.word	0x20000688
 800f1b0:	20000ba4 	.word	0x20000ba4
 800f1b4:	20000a58 	.word	0x20000a58
 800f1b8:	20000a20 	.word	0x20000a20

0800f1bc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f1c4:	4808      	ldr	r0, [pc, #32]	; (800f1e8 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800f1c6:	f00c f99d 	bl	801b504 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f1ca:	4b08      	ldr	r3, [pc, #32]	; (800f1ec <OnRetransmitTimeoutTimerEvent+0x30>)
 800f1cc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d003      	beq.n	800f1dc <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f1d4:	4b05      	ldr	r3, [pc, #20]	; (800f1ec <OnRetransmitTimeoutTimerEvent+0x30>)
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 800f1dc:	f001 ff0e 	bl	8010ffc <OnMacProcessNotify>
}
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	20000a88 	.word	0x20000a88
 800f1ec:	20000688 	.word	0x20000688

0800f1f0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60ba      	str	r2, [r7, #8]
 800f1f8:	607b      	str	r3, [r7, #4]
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	73fb      	strb	r3, [r7, #15]
 800f1fe:	460b      	mov	r3, r1
 800f200:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d005      	beq.n	800f214 <GetFCntDown+0x24>
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d002      	beq.n	800f214 <GetFCntDown+0x24>
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f214:	2309      	movs	r3, #9
 800f216:	e028      	b.n	800f26a <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <GetFCntDown+0x5c>
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d118      	bne.n	800f254 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f222:	79bb      	ldrb	r3, [r7, #6]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d10d      	bne.n	800f244 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d002      	beq.n	800f234 <GetFCntDown+0x44>
 800f22e:	7bbb      	ldrb	r3, [r7, #14]
 800f230:	2b03      	cmp	r3, #3
 800f232:	d103      	bne.n	800f23c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	2202      	movs	r2, #2
 800f238:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f23a:	e00d      	b.n	800f258 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	2201      	movs	r2, #1
 800f240:	701a      	strb	r2, [r3, #0]
            break;
 800f242:	e009      	b.n	800f258 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	2203      	movs	r2, #3
 800f248:	701a      	strb	r2, [r3, #0]
            break;
 800f24a:	e005      	b.n	800f258 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	2204      	movs	r2, #4
 800f250:	701a      	strb	r2, [r3, #0]
            break;
 800f252:	e001      	b.n	800f258 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f254:	2305      	movs	r3, #5
 800f256:	e008      	b.n	800f26a <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	7818      	ldrb	r0, [r3, #0]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	89db      	ldrh	r3, [r3, #14]
 800f260:	69fa      	ldr	r2, [r7, #28]
 800f262:	4619      	mov	r1, r3
 800f264:	f004 fd90 	bl	8013d88 <LoRaMacCryptoGetFCntDown>
 800f268:	4603      	mov	r3, r0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
	...

0800f274 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f274:	b5b0      	push	{r4, r5, r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f27e:	2303      	movs	r3, #3
 800f280:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f282:	4b6e      	ldr	r3, [pc, #440]	; (800f43c <SwitchClass+0x1c8>)
 800f284:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f288:	2b02      	cmp	r3, #2
 800f28a:	f000 80bb 	beq.w	800f404 <SwitchClass+0x190>
 800f28e:	2b02      	cmp	r3, #2
 800f290:	f300 80ce 	bgt.w	800f430 <SwitchClass+0x1bc>
 800f294:	2b00      	cmp	r3, #0
 800f296:	d003      	beq.n	800f2a0 <SwitchClass+0x2c>
 800f298:	2b01      	cmp	r3, #1
 800f29a:	f000 80a5 	beq.w	800f3e8 <SwitchClass+0x174>
 800f29e:	e0c7      	b.n	800f430 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d109      	bne.n	800f2ba <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f2a6:	4b65      	ldr	r3, [pc, #404]	; (800f43c <SwitchClass+0x1c8>)
 800f2a8:	4a64      	ldr	r2, [pc, #400]	; (800f43c <SwitchClass+0x1c8>)
 800f2aa:	3374      	adds	r3, #116	; 0x74
 800f2ac:	326c      	adds	r2, #108	; 0x6c
 800f2ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2b2:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d10c      	bne.n	800f2da <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f003 fc7e 	bl	8012bc4 <LoRaMacClassBSwitchClass>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f2cc:	7bfb      	ldrb	r3, [r7, #15]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d103      	bne.n	800f2da <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f2d2:	4a5a      	ldr	r2, [pc, #360]	; (800f43c <SwitchClass+0x1c8>)
 800f2d4:	79fb      	ldrb	r3, [r7, #7]
 800f2d6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800f2da:	79fb      	ldrb	r3, [r7, #7]
 800f2dc:	2b02      	cmp	r3, #2
 800f2de:	f040 80a2 	bne.w	800f426 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f2e2:	4a56      	ldr	r2, [pc, #344]	; (800f43c <SwitchClass+0x1c8>)
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f2ea:	4a55      	ldr	r2, [pc, #340]	; (800f440 <SwitchClass+0x1cc>)
 800f2ec:	4b54      	ldr	r3, [pc, #336]	; (800f440 <SwitchClass+0x1cc>)
 800f2ee:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800f2f2:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800f2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f2fe:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f302:	4b4f      	ldr	r3, [pc, #316]	; (800f440 <SwitchClass+0x1cc>)
 800f304:	2202      	movs	r2, #2
 800f306:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f30a:	2300      	movs	r3, #0
 800f30c:	73bb      	strb	r3, [r7, #14]
 800f30e:	e05b      	b.n	800f3c8 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f310:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f314:	4949      	ldr	r1, [pc, #292]	; (800f43c <SwitchClass+0x1c8>)
 800f316:	4613      	mov	r3, r2
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	4413      	add	r3, r2
 800f31c:	011b      	lsls	r3, r3, #4
 800f31e:	440b      	add	r3, r1
 800f320:	33e9      	adds	r3, #233	; 0xe9
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d049      	beq.n	800f3bc <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800f328:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f32c:	4943      	ldr	r1, [pc, #268]	; (800f43c <SwitchClass+0x1c8>)
 800f32e:	4613      	mov	r3, r2
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4413      	add	r3, r2
 800f334:	011b      	lsls	r3, r3, #4
 800f336:	440b      	add	r3, r1
 800f338:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f33c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d13c      	bne.n	800f3bc <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800f342:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f346:	493d      	ldr	r1, [pc, #244]	; (800f43c <SwitchClass+0x1c8>)
 800f348:	4613      	mov	r3, r2
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	4413      	add	r3, r2
 800f34e:	011b      	lsls	r3, r3, #4
 800f350:	440b      	add	r3, r1
 800f352:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a38      	ldr	r2, [pc, #224]	; (800f43c <SwitchClass+0x1c8>)
 800f35a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800f35c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f360:	4936      	ldr	r1, [pc, #216]	; (800f43c <SwitchClass+0x1c8>)
 800f362:	4613      	mov	r3, r2
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	4413      	add	r3, r2
 800f368:	011b      	lsls	r3, r3, #4
 800f36a:	440b      	add	r3, r1
 800f36c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f370:	f993 3000 	ldrsb.w	r3, [r3]
 800f374:	b2da      	uxtb	r2, r3
 800f376:	4b31      	ldr	r3, [pc, #196]	; (800f43c <SwitchClass+0x1c8>)
 800f378:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f37c:	4b30      	ldr	r3, [pc, #192]	; (800f440 <SwitchClass+0x1cc>)
 800f37e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f382:	4b2f      	ldr	r3, [pc, #188]	; (800f440 <SwitchClass+0x1cc>)
 800f384:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f388:	4b2c      	ldr	r3, [pc, #176]	; (800f43c <SwitchClass+0x1c8>)
 800f38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f38c:	4a2c      	ldr	r2, [pc, #176]	; (800f440 <SwitchClass+0x1cc>)
 800f38e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f392:	4b2a      	ldr	r3, [pc, #168]	; (800f43c <SwitchClass+0x1c8>)
 800f394:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f398:	4b29      	ldr	r3, [pc, #164]	; (800f440 <SwitchClass+0x1cc>)
 800f39a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f39e:	4b27      	ldr	r3, [pc, #156]	; (800f43c <SwitchClass+0x1c8>)
 800f3a0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f3a4:	4b26      	ldr	r3, [pc, #152]	; (800f440 <SwitchClass+0x1cc>)
 800f3a6:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f3aa:	4b25      	ldr	r3, [pc, #148]	; (800f440 <SwitchClass+0x1cc>)
 800f3ac:	2203      	movs	r2, #3
 800f3ae:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f3b2:	4b23      	ldr	r3, [pc, #140]	; (800f440 <SwitchClass+0x1cc>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800f3ba:	e009      	b.n	800f3d0 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f3bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	73bb      	strb	r3, [r7, #14]
 800f3c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dd9f      	ble.n	800f310 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f3d0:	4b1b      	ldr	r3, [pc, #108]	; (800f440 <SwitchClass+0x1cc>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f3d8:	4b1a      	ldr	r3, [pc, #104]	; (800f444 <SwitchClass+0x1d0>)
 800f3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3dc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f3de:	f001 fa29 	bl	8010834 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f3e6:	e01e      	b.n	800f426 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f003 fbea 	bl	8012bc4 <LoRaMacClassBSwitchClass>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d117      	bne.n	800f42a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f3fa:	4a10      	ldr	r2, [pc, #64]	; (800f43c <SwitchClass+0x1c8>)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 800f402:	e012      	b.n	800f42a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d111      	bne.n	800f42e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800f40a:	4b0d      	ldr	r3, [pc, #52]	; (800f440 <SwitchClass+0x1cc>)
 800f40c:	2206      	movs	r2, #6
 800f40e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f412:	4a0a      	ldr	r2, [pc, #40]	; (800f43c <SwitchClass+0x1c8>)
 800f414:	79fb      	ldrb	r3, [r7, #7]
 800f416:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f41a:	4b0a      	ldr	r3, [pc, #40]	; (800f444 <SwitchClass+0x1d0>)
 800f41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800f424:	e003      	b.n	800f42e <SwitchClass+0x1ba>
            break;
 800f426:	bf00      	nop
 800f428:	e002      	b.n	800f430 <SwitchClass+0x1bc>
            break;
 800f42a:	bf00      	nop
 800f42c:	e000      	b.n	800f430 <SwitchClass+0x1bc>
            break;
 800f42e:	bf00      	nop
        }
    }

    return status;
 800f430:	7bfb      	ldrb	r3, [r7, #15]
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bdb0      	pop	{r4, r5, r7, pc}
 800f43a:	bf00      	nop
 800f43c:	20000ba4 	.word	0x20000ba4
 800f440:	20000688 	.word	0x20000688
 800f444:	0801cbcc 	.word	0x0801cbcc

0800f448 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	4603      	mov	r3, r0
 800f450:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f452:	4b10      	ldr	r3, [pc, #64]	; (800f494 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f454:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f458:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f45e:	230d      	movs	r3, #13
 800f460:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f462:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f464:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f46c:	230e      	movs	r3, #14
 800f46e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f470:	4b08      	ldr	r3, [pc, #32]	; (800f494 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f472:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f476:	f107 0210 	add.w	r2, r7, #16
 800f47a:	4611      	mov	r1, r2
 800f47c:	4618      	mov	r0, r3
 800f47e:	f005 faee 	bl	8014a5e <RegionGetPhyParam>
 800f482:	4603      	mov	r3, r0
 800f484:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	b2db      	uxtb	r3, r3
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3718      	adds	r7, #24
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	20000ba4 	.word	0x20000ba4

0800f498 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	4603      	mov	r3, r0
 800f4a0:	71fb      	strb	r3, [r7, #7]
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	71bb      	strb	r3, [r7, #6]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f4b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff ffc6 	bl	800f448 <GetMaxAppPayloadWithoutFOptsLength>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	797b      	ldrb	r3, [r7, #5]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	4413      	add	r3, r2
 800f4ca:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f4cc:	89ba      	ldrh	r2, [r7, #12]
 800f4ce:	89fb      	ldrh	r3, [r7, #14]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d804      	bhi.n	800f4de <ValidatePayloadLength+0x46>
 800f4d4:	89bb      	ldrh	r3, [r7, #12]
 800f4d6:	2bff      	cmp	r3, #255	; 0xff
 800f4d8:	d801      	bhi.n	800f4de <ValidatePayloadLength+0x46>
    {
        return true;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e000      	b.n	800f4e0 <ValidatePayloadLength+0x48>
    }
    return false;
 800f4de:	2300      	movs	r3, #0
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f4e8:	b590      	push	{r4, r7, lr}
 800f4ea:	b0a5      	sub	sp, #148	; 0x94
 800f4ec:	af02      	add	r7, sp, #8
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	4611      	mov	r1, r2
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	70fb      	strb	r3, [r7, #3]
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	70bb      	strb	r3, [r7, #2]
 800f4fe:	4613      	mov	r3, r2
 800f500:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f508:	2300      	movs	r3, #0
 800f50a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f50e:	2300      	movs	r3, #0
 800f510:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f514:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 84ab 	beq.w	800fe74 <ProcessMacCommands+0x98c>
 800f51e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f522:	2b01      	cmp	r3, #1
 800f524:	f040 84ac 	bne.w	800fe80 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f528:	f000 bca4 	b.w	800fe74 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f52c:	78fb      	ldrb	r3, [r7, #3]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	4413      	add	r3, r2
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	4618      	mov	r0, r3
 800f536:	f003 fe45 	bl	80131c4 <LoRaMacCommandsGetCmdSize>
 800f53a:	4603      	mov	r3, r0
 800f53c:	461a      	mov	r2, r3
 800f53e:	78fb      	ldrb	r3, [r7, #3]
 800f540:	441a      	add	r2, r3
 800f542:	78bb      	ldrb	r3, [r7, #2]
 800f544:	429a      	cmp	r2, r3
 800f546:	f300 849d 	bgt.w	800fe84 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f54a:	78fb      	ldrb	r3, [r7, #3]
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	70fa      	strb	r2, [r7, #3]
 800f550:	461a      	mov	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4413      	add	r3, r2
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	3b02      	subs	r3, #2
 800f55a:	2b11      	cmp	r3, #17
 800f55c:	f200 8494 	bhi.w	800fe88 <ProcessMacCommands+0x9a0>
 800f560:	a201      	add	r2, pc, #4	; (adr r2, 800f568 <ProcessMacCommands+0x80>)
 800f562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f566:	bf00      	nop
 800f568:	0800f5b1 	.word	0x0800f5b1
 800f56c:	0800f5f3 	.word	0x0800f5f3
 800f570:	0800f76f 	.word	0x0800f76f
 800f574:	0800f7ad 	.word	0x0800f7ad
 800f578:	0800f8a5 	.word	0x0800f8a5
 800f57c:	0800f8f5 	.word	0x0800f8f5
 800f580:	0800f9b1 	.word	0x0800f9b1
 800f584:	0800fa07 	.word	0x0800fa07
 800f588:	0800faed 	.word	0x0800faed
 800f58c:	0800fe89 	.word	0x0800fe89
 800f590:	0800fe89 	.word	0x0800fe89
 800f594:	0800fb95 	.word	0x0800fb95
 800f598:	0800fe89 	.word	0x0800fe89
 800f59c:	0800fe89 	.word	0x0800fe89
 800f5a0:	0800fcb5 	.word	0x0800fcb5
 800f5a4:	0800fce9 	.word	0x0800fce9
 800f5a8:	0800fd79 	.word	0x0800fd79
 800f5ac:	0800fdef 	.word	0x0800fdef
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f5b0:	2005      	movs	r0, #5
 800f5b2:	f003 ffdf 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f000 845b 	beq.w	800fe74 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f5be:	2105      	movs	r1, #5
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	f003 ff4b 	bl	801345c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f5c6:	78fb      	ldrb	r3, [r7, #3]
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	70fa      	strb	r2, [r7, #3]
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	781a      	ldrb	r2, [r3, #0]
 800f5d4:	4bb0      	ldr	r3, [pc, #704]	; (800f898 <ProcessMacCommands+0x3b0>)
 800f5d6:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f5da:	78fb      	ldrb	r3, [r7, #3]
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	70fa      	strb	r2, [r7, #3]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	781a      	ldrb	r2, [r3, #0]
 800f5e8:	4bab      	ldr	r3, [pc, #684]	; (800f898 <ProcessMacCommands+0x3b0>)
 800f5ea:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 800f5ee:	f000 bc41 	b.w	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800f60a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f60e:	f083 0301 	eor.w	r3, r3, #1
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 80a5 	beq.w	800f764 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800f61a:	2301      	movs	r3, #1
 800f61c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f620:	78fb      	ldrb	r3, [r7, #3]
 800f622:	3b01      	subs	r3, #1
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	4413      	add	r3, r2
 800f628:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f62a:	4b9c      	ldr	r3, [pc, #624]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f62c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800f630:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f634:	4b99      	ldr	r3, [pc, #612]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f636:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f63a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f63e:	4b97      	ldr	r3, [pc, #604]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f640:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f644:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f648:	4b94      	ldr	r3, [pc, #592]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f64a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f64e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f652:	4b92      	ldr	r3, [pc, #584]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f654:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f658:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f65c:	4b8f      	ldr	r3, [pc, #572]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f65e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800f662:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f664:	4b8d      	ldr	r3, [pc, #564]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f666:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d008      	beq.n	800f680 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f66e:	78ba      	ldrb	r2, [r7, #2]
 800f670:	78fb      	ldrb	r3, [r7, #3]
 800f672:	1ad3      	subs	r3, r2, r3
 800f674:	b2db      	uxtb	r3, r3
 800f676:	3301      	adds	r3, #1
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800f67e:	e002      	b.n	800f686 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f680:	2305      	movs	r3, #5
 800f682:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f686:	4b85      	ldr	r3, [pc, #532]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f688:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f68c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f690:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f694:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	4623      	mov	r3, r4
 800f6a6:	f005 fa97 	bl	8014bd8 <RegionLinkAdrReq>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f6b0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f6b4:	f003 0307 	and.w	r3, r3, #7
 800f6b8:	2b07      	cmp	r3, #7
 800f6ba:	d119      	bne.n	800f6f0 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f6bc:	4b77      	ldr	r3, [pc, #476]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f6be:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800f6c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	da03      	bge.n	800f6d2 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f6ca:	4b74      	ldr	r3, [pc, #464]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f6d2:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f6d6:	4b71      	ldr	r3, [pc, #452]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f6d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f6dc:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f6e0:	4b6e      	ldr	r3, [pc, #440]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f6e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f6e6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f6ea:	4b6c      	ldr	r3, [pc, #432]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f6ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f6f6:	e00b      	b.n	800f710 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f6f8:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	4619      	mov	r1, r3
 800f700:	2003      	movs	r0, #3
 800f702:	f003 fbff 	bl	8012f04 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f706:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f70a:	3301      	adds	r3, #1
 800f70c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f710:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f714:	4a62      	ldr	r2, [pc, #392]	; (800f8a0 <ProcessMacCommands+0x3b8>)
 800f716:	fba2 2303 	umull	r2, r3, r2, r3
 800f71a:	089b      	lsrs	r3, r3, #2
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f722:	429a      	cmp	r2, r3
 800f724:	d3e8      	bcc.n	800f6f8 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f726:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f72a:	78fb      	ldrb	r3, [r7, #3]
 800f72c:	4413      	add	r3, r2
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	3b01      	subs	r3, #1
 800f732:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f734:	78fa      	ldrb	r2, [r7, #3]
 800f736:	78bb      	ldrb	r3, [r7, #2]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d20a      	bcs.n	800f752 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f73c:	78fb      	ldrb	r3, [r7, #3]
 800f73e:	1c5a      	adds	r2, r3, #1
 800f740:	70fa      	strb	r2, [r7, #3]
 800f742:	461a      	mov	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4413      	add	r3, r2
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	f43f af68 	beq.w	800f620 <ProcessMacCommands+0x138>
 800f750:	e000      	b.n	800f754 <ProcessMacCommands+0x26c>
                            break;
 800f752:	bf00      	nop

                    if( macIndex < commandsSize )
 800f754:	78fa      	ldrb	r2, [r7, #3]
 800f756:	78bb      	ldrb	r3, [r7, #2]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d206      	bcs.n	800f76a <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f75c:	78fb      	ldrb	r3, [r7, #3]
 800f75e:	3b01      	subs	r3, #1
 800f760:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f762:	e002      	b.n	800f76a <ProcessMacCommands+0x282>
                    macIndex += 4;
 800f764:	78fb      	ldrb	r3, [r7, #3]
 800f766:	3304      	adds	r3, #4
 800f768:	70fb      	strb	r3, [r7, #3]
                break;
 800f76a:	bf00      	nop
 800f76c:	e382      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	70fa      	strb	r2, [r7, #3]
 800f774:	461a      	mov	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4413      	add	r3, r2
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	f003 030f 	and.w	r3, r3, #15
 800f780:	b2da      	uxtb	r2, r3
 800f782:	4b46      	ldr	r3, [pc, #280]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f784:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f788:	4b44      	ldr	r3, [pc, #272]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f78a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800f78e:	461a      	mov	r2, r3
 800f790:	2301      	movs	r3, #1
 800f792:	4093      	lsls	r3, r2
 800f794:	b29a      	uxth	r2, r3
 800f796:	4b41      	ldr	r3, [pc, #260]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f798:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f79c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	2004      	movs	r0, #4
 800f7a6:	f003 fbad 	bl	8012f04 <LoRaMacCommandsAddCmd>
                break;
 800f7aa:	e363      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f7ac:	2307      	movs	r3, #7
 800f7ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f7b2:	78fb      	ldrb	r3, [r7, #3]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	091b      	lsrs	r3, r3, #4
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	b25b      	sxtb	r3, r3
 800f7c0:	f003 0307 	and.w	r3, r3, #7
 800f7c4:	b25b      	sxtb	r3, r3
 800f7c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f7ca:	78fb      	ldrb	r3, [r7, #3]
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	b25b      	sxtb	r3, r3
 800f7d4:	f003 030f 	and.w	r3, r3, #15
 800f7d8:	b25b      	sxtb	r3, r3
 800f7da:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f7de:	78fb      	ldrb	r3, [r7, #3]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	70fa      	strb	r2, [r7, #3]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f7f4:	78fb      	ldrb	r3, [r7, #3]
 800f7f6:	1c5a      	adds	r2, r3, #1
 800f7f8:	70fa      	strb	r2, [r7, #3]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4413      	add	r3, r2
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	021a      	lsls	r2, r3, #8
 800f804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f806:	4313      	orrs	r3, r2
 800f808:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	1c5a      	adds	r2, r3, #1
 800f80e:	70fa      	strb	r2, [r7, #3]
 800f810:	461a      	mov	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4413      	add	r3, r2
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	041a      	lsls	r2, r3, #16
 800f81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81c:	4313      	orrs	r3, r2
 800f81e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f822:	2264      	movs	r2, #100	; 0x64
 800f824:	fb02 f303 	mul.w	r3, r2, r3
 800f828:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f82a:	4b1c      	ldr	r3, [pc, #112]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f82c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f830:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f834:	4611      	mov	r1, r2
 800f836:	4618      	mov	r0, r3
 800f838:	f005 f9e8 	bl	8014c0c <RegionRxParamSetupReq>
 800f83c:	4603      	mov	r3, r0
 800f83e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f842:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f846:	f003 0307 	and.w	r3, r3, #7
 800f84a:	2b07      	cmp	r3, #7
 800f84c:	d117      	bne.n	800f87e <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f84e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f852:	b2da      	uxtb	r2, r3
 800f854:	4b11      	ldr	r3, [pc, #68]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f856:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f85a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	4b0e      	ldr	r3, [pc, #56]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f868:	4a0c      	ldr	r2, [pc, #48]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f86a:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f86e:	4a0b      	ldr	r2, [pc, #44]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f870:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f872:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f876:	b2da      	uxtb	r2, r3
 800f878:	4b08      	ldr	r3, [pc, #32]	; (800f89c <ProcessMacCommands+0x3b4>)
 800f87a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 800f87e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f882:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f886:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f88a:	2201      	movs	r2, #1
 800f88c:	4619      	mov	r1, r3
 800f88e:	2005      	movs	r0, #5
 800f890:	f003 fb38 	bl	8012f04 <LoRaMacCommandsAddCmd>
                break;
 800f894:	bf00      	nop
 800f896:	e2ed      	b.n	800fe74 <ProcessMacCommands+0x98c>
 800f898:	20000688 	.word	0x20000688
 800f89c:	20000ba4 	.word	0x20000ba4
 800f8a0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f8a4:	23ff      	movs	r3, #255	; 0xff
 800f8a6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f8aa:	4bb7      	ldr	r3, [pc, #732]	; (800fb88 <ProcessMacCommands+0x6a0>)
 800f8ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00d      	beq.n	800f8d0 <ProcessMacCommands+0x3e8>
 800f8b4:	4bb4      	ldr	r3, [pc, #720]	; (800fb88 <ProcessMacCommands+0x6a0>)
 800f8b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d007      	beq.n	800f8d0 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f8c0:	4bb1      	ldr	r3, [pc, #708]	; (800fb88 <ProcessMacCommands+0x6a0>)
 800f8c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4798      	blx	r3
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f8d0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f8d4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f8d8:	787b      	ldrb	r3, [r7, #1]
 800f8da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f8e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	2006      	movs	r0, #6
 800f8ee:	f003 fb09 	bl	8012f04 <LoRaMacCommandsAddCmd>
                break;
 800f8f2:	e2bf      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f8f4:	2303      	movs	r3, #3
 800f8f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f8fa:	78fb      	ldrb	r3, [r7, #3]
 800f8fc:	1c5a      	adds	r2, r3, #1
 800f8fe:	70fa      	strb	r2, [r7, #3]
 800f900:	461a      	mov	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4413      	add	r3, r2
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	b25b      	sxtb	r3, r3
 800f90a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f90e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f912:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f914:	78fb      	ldrb	r3, [r7, #3]
 800f916:	1c5a      	adds	r2, r3, #1
 800f918:	70fa      	strb	r2, [r7, #3]
 800f91a:	461a      	mov	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4413      	add	r3, r2
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f924:	78fb      	ldrb	r3, [r7, #3]
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	70fa      	strb	r2, [r7, #3]
 800f92a:	461a      	mov	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4413      	add	r3, r2
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	021a      	lsls	r2, r3, #8
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	4313      	orrs	r3, r2
 800f938:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f93a:	78fb      	ldrb	r3, [r7, #3]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	70fa      	strb	r2, [r7, #3]
 800f940:	461a      	mov	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4413      	add	r3, r2
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	041a      	lsls	r2, r3, #16
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	4313      	orrs	r3, r2
 800f94e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f952:	2264      	movs	r2, #100	; 0x64
 800f954:	fb02 f303 	mul.w	r3, r2, r3
 800f958:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f95e:	78fb      	ldrb	r3, [r7, #3]
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	70fa      	strb	r2, [r7, #3]
 800f964:	461a      	mov	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4413      	add	r3, r2
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	b25b      	sxtb	r3, r3
 800f96e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f972:	4b86      	ldr	r3, [pc, #536]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800f974:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f978:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f97c:	4611      	mov	r1, r2
 800f97e:	4618      	mov	r0, r3
 800f980:	f005 f957 	bl	8014c32 <RegionNewChannelReq>
 800f984:	4603      	mov	r3, r0
 800f986:	b2db      	uxtb	r3, r3
 800f988:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f98c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f990:	b25b      	sxtb	r3, r3
 800f992:	2b00      	cmp	r3, #0
 800f994:	db0a      	blt.n	800f9ac <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 800f996:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f99a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f99e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	2007      	movs	r0, #7
 800f9a8:	f003 faac 	bl	8012f04 <LoRaMacCommandsAddCmd>
                }
                break;
 800f9ac:	bf00      	nop
 800f9ae:	e261      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f9b0:	78fb      	ldrb	r3, [r7, #3]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	70fa      	strb	r2, [r7, #3]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	f003 030f 	and.w	r3, r3, #15
 800f9c2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f9c6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d104      	bne.n	800f9d8 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800f9ce:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f9d8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f9dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f9e0:	fb02 f303 	mul.w	r3, r2, r3
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b69      	ldr	r3, [pc, #420]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800f9e8:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f9ea:	4b68      	ldr	r3, [pc, #416]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800f9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f9f2:	4a66      	ldr	r2, [pc, #408]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800f9f4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f9f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	2008      	movs	r0, #8
 800fa00:	f003 fa80 	bl	8012f04 <LoRaMacCommandsAddCmd>
                break;
 800fa04:	e236      	b.n	800fe74 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	70fa      	strb	r2, [r7, #3]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fa24:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fa28:	f003 0320 	and.w	r3, r3, #32
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fa30:	2301      	movs	r3, #1
 800fa32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fa36:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fa3a:	f003 0310 	and.w	r3, r3, #16
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d002      	beq.n	800fa48 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fa42:	2301      	movs	r3, #1
 800fa44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fa48:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fa4c:	f003 030f 	and.w	r3, r3, #15
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fa56:	4b4d      	ldr	r3, [pc, #308]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fa58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fa5c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fa60:	4611      	mov	r1, r2
 800fa62:	4618      	mov	r0, r3
 800fa64:	f005 f8f8 	bl	8014c58 <RegionTxParamSetupReq>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa6e:	d03b      	beq.n	800fae8 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fa70:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fa74:	4b45      	ldr	r3, [pc, #276]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fa76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fa7a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800fa7e:	4b43      	ldr	r3, [pc, #268]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fa80:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fa84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4b41      	ldr	r3, [pc, #260]	; (800fb90 <ProcessMacCommands+0x6a8>)
 800fa8c:	5c9b      	ldrb	r3, [r3, r2]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7f0 fe9c 	bl	80007cc <__aeabi_ui2f>
 800fa94:	4603      	mov	r3, r0
 800fa96:	4a3d      	ldr	r2, [pc, #244]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fa98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fa9c:	2302      	movs	r3, #2
 800fa9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800faa2:	4b3a      	ldr	r3, [pc, #232]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800faa4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800faa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800faac:	4b37      	ldr	r3, [pc, #220]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800faae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fab2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fab6:	4611      	mov	r1, r2
 800fab8:	4618      	mov	r0, r3
 800faba:	f004 ffd0 	bl	8014a5e <RegionGetPhyParam>
 800fabe:	4603      	mov	r3, r0
 800fac0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac4:	b25a      	sxtb	r2, r3
 800fac6:	4b31      	ldr	r3, [pc, #196]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fac8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800facc:	4293      	cmp	r3, r2
 800face:	bfb8      	it	lt
 800fad0:	4613      	movlt	r3, r2
 800fad2:	b25a      	sxtb	r2, r3
 800fad4:	4b2d      	ldr	r3, [pc, #180]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fada:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fade:	2200      	movs	r2, #0
 800fae0:	4619      	mov	r1, r3
 800fae2:	2009      	movs	r0, #9
 800fae4:	f003 fa0e 	bl	8012f04 <LoRaMacCommandsAddCmd>
                }
                break;
 800fae8:	bf00      	nop
 800faea:	e1c3      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800faec:	2303      	movs	r3, #3
 800faee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800faf2:	78fb      	ldrb	r3, [r7, #3]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	70fa      	strb	r2, [r7, #3]
 800faf8:	461a      	mov	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4413      	add	r3, r2
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fb04:	78fb      	ldrb	r3, [r7, #3]
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	70fa      	strb	r2, [r7, #3]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4413      	add	r3, r2
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fb14:	78fb      	ldrb	r3, [r7, #3]
 800fb16:	1c5a      	adds	r2, r3, #1
 800fb18:	70fa      	strb	r2, [r7, #3]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4413      	add	r3, r2
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	021a      	lsls	r2, r3, #8
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	4313      	orrs	r3, r2
 800fb28:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fb2a:	78fb      	ldrb	r3, [r7, #3]
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	70fa      	strb	r2, [r7, #3]
 800fb30:	461a      	mov	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4413      	add	r3, r2
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	041a      	lsls	r2, r3, #16
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	2264      	movs	r2, #100	; 0x64
 800fb44:	fb02 f303 	mul.w	r3, r2, r3
 800fb48:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fb4a:	4b10      	ldr	r3, [pc, #64]	; (800fb8c <ProcessMacCommands+0x6a4>)
 800fb4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fb50:	f107 0220 	add.w	r2, r7, #32
 800fb54:	4611      	mov	r1, r2
 800fb56:	4618      	mov	r0, r3
 800fb58:	f005 f891 	bl	8014c7e <RegionDlChannelReq>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800fb64:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fb68:	b25b      	sxtb	r3, r3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	db0a      	blt.n	800fb84 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 800fb6e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fb72:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fb76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	200a      	movs	r0, #10
 800fb80:	f003 f9c0 	bl	8012f04 <LoRaMacCommandsAddCmd>
                }
                break;
 800fb84:	bf00      	nop
 800fb86:	e175      	b.n	800fe74 <ProcessMacCommands+0x98c>
 800fb88:	20000688 	.word	0x20000688
 800fb8c:	20000ba4 	.word	0x20000ba4
 800fb90:	0801cb38 	.word	0x0801cb38
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fb94:	2009      	movs	r0, #9
 800fb96:	f003 fced 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 8084 	beq.w	800fcaa <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fba2:	2109      	movs	r1, #9
 800fba4:	2000      	movs	r0, #0
 800fba6:	f003 fc59 	bl	801345c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800fbaa:	f107 0318 	add.w	r3, r7, #24
 800fbae:	2200      	movs	r2, #0
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800fbb4:	f107 0310 	add.w	r3, r7, #16
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800fbbe:	f107 0308 	add.w	r3, r7, #8
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800fbc8:	78fb      	ldrb	r3, [r7, #3]
 800fbca:	1c5a      	adds	r2, r3, #1
 800fbcc:	70fa      	strb	r2, [r7, #3]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800fbd8:	78fb      	ldrb	r3, [r7, #3]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	70fa      	strb	r2, [r7, #3]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	021a      	lsls	r2, r3, #8
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fbee:	78fb      	ldrb	r3, [r7, #3]
 800fbf0:	1c5a      	adds	r2, r3, #1
 800fbf2:	70fa      	strb	r2, [r7, #3]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	041a      	lsls	r2, r3, #16
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fc04:	78fb      	ldrb	r3, [r7, #3]
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	70fa      	strb	r2, [r7, #3]
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4413      	add	r3, r2
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	061a      	lsls	r2, r3, #24
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	70fa      	strb	r2, [r7, #3]
 800fc20:	461a      	mov	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4413      	add	r3, r2
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	b21b      	sxth	r3, r3
 800fc2a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800fc2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fc30:	461a      	mov	r2, r3
 800fc32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc36:	fb02 f303 	mul.w	r3, r2, r3
 800fc3a:	121b      	asrs	r3, r3, #8
 800fc3c:	b21b      	sxth	r3, r3
 800fc3e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800fc40:	f107 0310 	add.w	r3, r7, #16
 800fc44:	f107 0218 	add.w	r2, r7, #24
 800fc48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc4c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	4b8f      	ldr	r3, [pc, #572]	; (800fe90 <ProcessMacCommands+0x9a8>)
 800fc54:	4413      	add	r3, r2
 800fc56:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800fc58:	f107 0308 	add.w	r3, r7, #8
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f00a fee9 	bl	801aa34 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800fc62:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800fc66:	4b8b      	ldr	r3, [pc, #556]	; (800fe94 <ProcessMacCommands+0x9ac>)
 800fc68:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800fc6c:	9200      	str	r2, [sp, #0]
 800fc6e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800fc72:	f107 0210 	add.w	r2, r7, #16
 800fc76:	ca06      	ldmia	r2, {r1, r2}
 800fc78:	f00a fe75 	bl	801a966 <SysTimeSub>
 800fc7c:	f107 0010 	add.w	r0, r7, #16
 800fc80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc86:	f107 0208 	add.w	r2, r7, #8
 800fc8a:	ca06      	ldmia	r2, {r1, r2}
 800fc8c:	f00a fe32 	bl	801a8f4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800fc90:	f107 0310 	add.w	r3, r7, #16
 800fc94:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc98:	f00a fe9e 	bl	801a9d8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fc9c:	f002 ffd0 	bl	8012c40 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fca0:	4b7c      	ldr	r3, [pc, #496]	; (800fe94 <ProcessMacCommands+0x9ac>)
 800fca2:	2201      	movs	r2, #1
 800fca4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800fca8:	e0e4      	b.n	800fe74 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fcaa:	4b7a      	ldr	r3, [pc, #488]	; (800fe94 <ProcessMacCommands+0x9ac>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 800fcb2:	e0df      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800fcb4:	200c      	movs	r0, #12
 800fcb6:	f003 fc5d 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 80d9 	beq.w	800fe74 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800fcc2:	210c      	movs	r1, #12
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	f003 fbc9 	bl	801345c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800fcca:	4b72      	ldr	r3, [pc, #456]	; (800fe94 <ProcessMacCommands+0x9ac>)
 800fccc:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800fcd0:	2b04      	cmp	r3, #4
 800fcd2:	f000 80cf 	beq.w	800fe74 <ProcessMacCommands+0x98c>
 800fcd6:	4b6f      	ldr	r3, [pc, #444]	; (800fe94 <ProcessMacCommands+0x9ac>)
 800fcd8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800fcdc:	2b05      	cmp	r3, #5
 800fcde:	f000 80c9 	beq.w	800fe74 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800fce2:	f002 ff8e 	bl	8012c02 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800fce6:	e0c5      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fce8:	2303      	movs	r3, #3
 800fcea:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fcf2:	78fb      	ldrb	r3, [r7, #3]
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	70fa      	strb	r2, [r7, #3]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fd02:	78fb      	ldrb	r3, [r7, #3]
 800fd04:	1c5a      	adds	r2, r3, #1
 800fd06:	70fa      	strb	r2, [r7, #3]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	021b      	lsls	r3, r3, #8
 800fd12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fd14:	4313      	orrs	r3, r2
 800fd16:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fd18:	78fb      	ldrb	r3, [r7, #3]
 800fd1a:	1c5a      	adds	r2, r3, #1
 800fd1c:	70fa      	strb	r2, [r7, #3]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4413      	add	r3, r2
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	041b      	lsls	r3, r3, #16
 800fd28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800fd2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd30:	2264      	movs	r2, #100	; 0x64
 800fd32:	fb02 f303 	mul.w	r3, r2, r3
 800fd36:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fd38:	78fb      	ldrb	r3, [r7, #3]
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	70fa      	strb	r2, [r7, #3]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4413      	add	r3, r2
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	f003 030f 	and.w	r3, r3, #15
 800fd4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fd4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fd52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fd54:	4618      	mov	r0, r3
 800fd56:	f002 ff5a 	bl	8012c0e <LoRaMacClassBPingSlotChannelReq>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800fd60:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fd64:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800fd68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	4619      	mov	r1, r3
 800fd70:	2011      	movs	r0, #17
 800fd72:	f003 f8c7 	bl	8012f04 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800fd76:	e07d      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800fd78:	200d      	movs	r0, #13
 800fd7a:	f003 fbfb 	bl	8013574 <LoRaMacConfirmQueueIsCmdActive>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d077      	beq.n	800fe74 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800fd84:	210d      	movs	r1, #13
 800fd86:	2000      	movs	r0, #0
 800fd88:	f003 fb68 	bl	801345c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800fd92:	2300      	movs	r3, #0
 800fd94:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800fd98:	78fb      	ldrb	r3, [r7, #3]
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	70fa      	strb	r2, [r7, #3]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4413      	add	r3, r2
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800fdaa:	78fb      	ldrb	r3, [r7, #3]
 800fdac:	1c5a      	adds	r2, r3, #1
 800fdae:	70fa      	strb	r2, [r7, #3]
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	021b      	lsls	r3, r3, #8
 800fdba:	b21a      	sxth	r2, r3
 800fdbc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	b21b      	sxth	r3, r3
 800fdc4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800fdc8:	78fb      	ldrb	r3, [r7, #3]
 800fdca:	1c5a      	adds	r2, r3, #1
 800fdcc:	70fa      	strb	r2, [r7, #3]
 800fdce:	461a      	mov	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fdda:	4b2f      	ldr	r3, [pc, #188]	; (800fe98 <ProcessMacCommands+0x9b0>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800fde2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fde6:	4618      	mov	r0, r3
 800fde8:	f002 ff1d 	bl	8012c26 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800fdec:	e042      	b.n	800fe74 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800fdf4:	78fb      	ldrb	r3, [r7, #3]
 800fdf6:	1c5a      	adds	r2, r3, #1
 800fdf8:	70fa      	strb	r2, [r7, #3]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4413      	add	r3, r2
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fe06:	78fb      	ldrb	r3, [r7, #3]
 800fe08:	1c5a      	adds	r2, r3, #1
 800fe0a:	70fa      	strb	r2, [r7, #3]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4413      	add	r3, r2
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	021b      	lsls	r3, r3, #8
 800fe16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fe20:	78fb      	ldrb	r3, [r7, #3]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	70fa      	strb	r2, [r7, #3]
 800fe26:	461a      	mov	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	041b      	lsls	r3, r3, #16
 800fe30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe34:	4313      	orrs	r3, r2
 800fe36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800fe3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe3e:	2264      	movs	r2, #100	; 0x64
 800fe40:	fb02 f303 	mul.w	r3, r2, r3
 800fe44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fe48:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800fe4c:	f002 fefe 	bl	8012c4c <LoRaMacClassBBeaconFreqReq>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 800fe56:	2301      	movs	r3, #1
 800fe58:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800fe5c:	e002      	b.n	800fe64 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800fe64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fe68:	2201      	movs	r2, #1
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	2013      	movs	r0, #19
 800fe6e:	f003 f849 	bl	8012f04 <LoRaMacCommandsAddCmd>
                }
                break;
 800fe72:	bf00      	nop
    while( macIndex < commandsSize )
 800fe74:	78fa      	ldrb	r2, [r7, #3]
 800fe76:	78bb      	ldrb	r3, [r7, #2]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	f4ff ab57 	bcc.w	800f52c <ProcessMacCommands+0x44>
 800fe7e:	e004      	b.n	800fe8a <ProcessMacCommands+0x9a2>
        return;
 800fe80:	bf00      	nop
 800fe82:	e002      	b.n	800fe8a <ProcessMacCommands+0x9a2>
            return;
 800fe84:	bf00      	nop
 800fe86:	e000      	b.n	800fe8a <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fe88:	bf00      	nop
        }
    }
}
 800fe8a:	378c      	adds	r7, #140	; 0x8c
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd90      	pop	{r4, r7, pc}
 800fe90:	12d53d80 	.word	0x12d53d80
 800fe94:	20000688 	.word	0x20000688
 800fe98:	200017d4 	.word	0x200017d4

0800fe9c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08e      	sub	sp, #56	; 0x38
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	607a      	str	r2, [r7, #4]
 800fea6:	461a      	mov	r2, r3
 800fea8:	460b      	mov	r3, r1
 800feaa:	72fb      	strb	r3, [r7, #11]
 800feac:	4613      	mov	r3, r2
 800feae:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800feb0:	2303      	movs	r3, #3
 800feb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800feb6:	4b66      	ldr	r3, [pc, #408]	; (8010050 <Send+0x1b4>)
 800feb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800febc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fec0:	4b63      	ldr	r3, [pc, #396]	; (8010050 <Send+0x1b4>)
 800fec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fec6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800feca:	4b61      	ldr	r3, [pc, #388]	; (8010050 <Send+0x1b4>)
 800fecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fece:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fed0:	4b5f      	ldr	r3, [pc, #380]	; (8010050 <Send+0x1b4>)
 800fed2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800feda:	2307      	movs	r3, #7
 800fedc:	e0b4      	b.n	8010048 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fede:	4b5c      	ldr	r3, [pc, #368]	; (8010050 <Send+0x1b4>)
 800fee0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d102      	bne.n	800feee <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fee8:	4b59      	ldr	r3, [pc, #356]	; (8010050 <Send+0x1b4>)
 800feea:	2200      	movs	r2, #0
 800feec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fef4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fef8:	f36f 0303 	bfc	r3, #0, #4
 800fefc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ff00:	4b53      	ldr	r3, [pc, #332]	; (8010050 <Send+0x1b4>)
 800ff02:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800ff06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff0a:	f362 13c7 	bfi	r3, r2, #7, #1
 800ff0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ff12:	4b4f      	ldr	r3, [pc, #316]	; (8010050 <Send+0x1b4>)
 800ff14:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d106      	bne.n	800ff2a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800ff1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff20:	f043 0310 	orr.w	r3, r3, #16
 800ff24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800ff28:	e005      	b.n	800ff36 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800ff2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff2e:	f36f 1304 	bfc	r3, #4, #1
 800ff32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800ff36:	4b46      	ldr	r3, [pc, #280]	; (8010050 <Send+0x1b4>)
 800ff38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d005      	beq.n	800ff4c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800ff40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff44:	f043 0320 	orr.w	r3, r3, #32
 800ff48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ff50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bf14      	ite	ne
 800ff5e:	2301      	movne	r3, #1
 800ff60:	2300      	moveq	r3, #0
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ff66:	4b3a      	ldr	r3, [pc, #232]	; (8010050 <Send+0x1b4>)
 800ff68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ff6c:	4b38      	ldr	r3, [pc, #224]	; (8010050 <Send+0x1b4>)
 800ff6e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800ff72:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ff74:	4b36      	ldr	r3, [pc, #216]	; (8010050 <Send+0x1b4>)
 800ff76:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800ff7a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ff7c:	4b34      	ldr	r3, [pc, #208]	; (8010050 <Send+0x1b4>)
 800ff7e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ff82:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ff86:	4b32      	ldr	r3, [pc, #200]	; (8010050 <Send+0x1b4>)
 800ff88:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ff8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ff90:	4b2f      	ldr	r3, [pc, #188]	; (8010050 <Send+0x1b4>)
 800ff92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ff96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800ff9a:	4b2d      	ldr	r3, [pc, #180]	; (8010050 <Send+0x1b4>)
 800ff9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ffa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ffa4:	4b2a      	ldr	r3, [pc, #168]	; (8010050 <Send+0x1b4>)
 800ffa6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ffaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800ffae:	f107 0014 	add.w	r0, r7, #20
 800ffb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	4b26      	ldr	r3, [pc, #152]	; (8010054 <Send+0x1b8>)
 800ffba:	4a27      	ldr	r2, [pc, #156]	; (8010058 <Send+0x1bc>)
 800ffbc:	4927      	ldr	r1, [pc, #156]	; (801005c <Send+0x1c0>)
 800ffbe:	f002 fcbf 	bl	8012940 <LoRaMacAdrCalcNext>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ffca:	f362 1386 	bfi	r3, r2, #6, #1
 800ffce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800ffd2:	7afa      	ldrb	r2, [r7, #11]
 800ffd4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ffd8:	893b      	ldrh	r3, [r7, #8]
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f000 fc72 	bl	80108c8 <PrepareFrame>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ffea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d003      	beq.n	800fffa <Send+0x15e>
 800fff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fff6:	2b0a      	cmp	r3, #10
 800fff8:	d107      	bne.n	801000a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800fffa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 f962 	bl	80102c8 <ScheduleTx>
 8010004:	4603      	mov	r3, r0
 8010006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801000a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00a      	beq.n	8010028 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010012:	4a0f      	ldr	r2, [pc, #60]	; (8010050 <Send+0x1b4>)
 8010014:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010018:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801001c:	4a0c      	ldr	r2, [pc, #48]	; (8010050 <Send+0x1b4>)
 801001e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010022:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010026:	e00d      	b.n	8010044 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010028:	4b09      	ldr	r3, [pc, #36]	; (8010050 <Send+0x1b4>)
 801002a:	2200      	movs	r2, #0
 801002c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010032:	4a07      	ldr	r2, [pc, #28]	; (8010050 <Send+0x1b4>)
 8010034:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010036:	f003 f80b 	bl	8013050 <LoRaMacCommandsRemoveNoneStickyCmds>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d001      	beq.n	8010044 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010040:	2313      	movs	r3, #19
 8010042:	e001      	b.n	8010048 <Send+0x1ac>
        }
    }
    return status;
 8010044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010048:	4618      	mov	r0, r3
 801004a:	3730      	adds	r7, #48	; 0x30
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	20000ba4 	.word	0x20000ba4
 8010054:	20000c0c 	.word	0x20000c0c
 8010058:	20000bdc 	.word	0x20000bdc
 801005c:	20000bdd 	.word	0x20000bdd

08010060 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	4603      	mov	r3, r0
 8010068:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801006a:	2300      	movs	r3, #0
 801006c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801006e:	2300      	movs	r3, #0
 8010070:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010072:	2301      	movs	r3, #1
 8010074:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010076:	79fb      	ldrb	r3, [r7, #7]
 8010078:	2bff      	cmp	r3, #255	; 0xff
 801007a:	d11f      	bne.n	80100bc <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801007c:	2000      	movs	r0, #0
 801007e:	f7ff f8f9 	bl	800f274 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010082:	4b15      	ldr	r3, [pc, #84]	; (80100d8 <SendReJoinReq+0x78>)
 8010084:	2200      	movs	r2, #0
 8010086:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801008a:	4b13      	ldr	r3, [pc, #76]	; (80100d8 <SendReJoinReq+0x78>)
 801008c:	4a13      	ldr	r2, [pc, #76]	; (80100dc <SendReJoinReq+0x7c>)
 801008e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010092:	4b11      	ldr	r3, [pc, #68]	; (80100d8 <SendReJoinReq+0x78>)
 8010094:	22ff      	movs	r2, #255	; 0xff
 8010096:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801009a:	7b3b      	ldrb	r3, [r7, #12]
 801009c:	f36f 1347 	bfc	r3, #5, #3
 80100a0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80100a2:	7b3a      	ldrb	r2, [r7, #12]
 80100a4:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <SendReJoinReq+0x78>)
 80100a6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80100aa:	480d      	ldr	r0, [pc, #52]	; (80100e0 <SendReJoinReq+0x80>)
 80100ac:	f7fb ff38 	bl	800bf20 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80100b0:	480c      	ldr	r0, [pc, #48]	; (80100e4 <SendReJoinReq+0x84>)
 80100b2:	f7fb ff05 	bl	800bec0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80100b6:	2300      	movs	r3, #0
 80100b8:	73fb      	strb	r3, [r7, #15]

            break;
 80100ba:	e002      	b.n	80100c2 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80100bc:	2302      	movs	r3, #2
 80100be:	73bb      	strb	r3, [r7, #14]
            break;
 80100c0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80100c2:	7bfb      	ldrb	r3, [r7, #15]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 f8ff 	bl	80102c8 <ScheduleTx>
 80100ca:	4603      	mov	r3, r0
 80100cc:	73bb      	strb	r3, [r7, #14]
    return status;
 80100ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	20000688 	.word	0x20000688
 80100dc:	2000068a 	.word	0x2000068a
 80100e0:	20000796 	.word	0x20000796
 80100e4:	2000079e 	.word	0x2000079e

080100e8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80100ec:	f002 fd38 	bl	8012b60 <LoRaMacClassBIsBeaconExpected>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80100f6:	230e      	movs	r3, #14
 80100f8:	e013      	b.n	8010122 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80100fa:	4b0b      	ldr	r3, [pc, #44]	; (8010128 <CheckForClassBCollision+0x40>)
 80100fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010100:	2b01      	cmp	r3, #1
 8010102:	d10d      	bne.n	8010120 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010104:	f002 fd33 	bl	8012b6e <LoRaMacClassBIsPingExpected>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801010e:	230f      	movs	r3, #15
 8010110:	e007      	b.n	8010122 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010112:	f002 fd33 	bl	8012b7c <LoRaMacClassBIsMulticastExpected>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d001      	beq.n	8010120 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801011c:	230f      	movs	r3, #15
 801011e:	e000      	b.n	8010122 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	20000ba4 	.word	0x20000ba4

0801012c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801012c:	b590      	push	{r4, r7, lr}
 801012e:	b083      	sub	sp, #12
 8010130:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010132:	4b2d      	ldr	r3, [pc, #180]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010134:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010138:	4b2b      	ldr	r3, [pc, #172]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 801013a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801013e:	4b2a      	ldr	r3, [pc, #168]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010140:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8010144:	4b28      	ldr	r3, [pc, #160]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010146:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801014a:	4b27      	ldr	r3, [pc, #156]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 801014c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010150:	b25b      	sxtb	r3, r3
 8010152:	f004 fdd9 	bl	8014d08 <RegionApplyDrOffset>
 8010156:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010158:	b259      	sxtb	r1, r3
 801015a:	4b23      	ldr	r3, [pc, #140]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 801015c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010160:	4b21      	ldr	r3, [pc, #132]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010164:	4821      	ldr	r0, [pc, #132]	; (80101ec <ComputeRxWindowParameters+0xc0>)
 8010166:	9000      	str	r0, [sp, #0]
 8010168:	4620      	mov	r0, r4
 801016a:	f004 fcef 	bl	8014b4c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801016e:	4b1e      	ldr	r3, [pc, #120]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010170:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010174:	4b1c      	ldr	r3, [pc, #112]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010176:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801017a:	b259      	sxtb	r1, r3
 801017c:	4b1a      	ldr	r3, [pc, #104]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 801017e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010182:	4b19      	ldr	r3, [pc, #100]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010186:	4c1a      	ldr	r4, [pc, #104]	; (80101f0 <ComputeRxWindowParameters+0xc4>)
 8010188:	9400      	str	r4, [sp, #0]
 801018a:	f004 fcdf 	bl	8014b4c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801018e:	4b16      	ldr	r3, [pc, #88]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 8010190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010192:	4a18      	ldr	r2, [pc, #96]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 8010194:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010198:	4413      	add	r3, r2
 801019a:	4a16      	ldr	r2, [pc, #88]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 801019c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80101a0:	4b11      	ldr	r3, [pc, #68]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 80101a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101a4:	4a13      	ldr	r2, [pc, #76]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101a6:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80101aa:	4413      	add	r3, r2
 80101ac:	4a11      	ldr	r2, [pc, #68]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101ae:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80101b2:	4b10      	ldr	r3, [pc, #64]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80101b8:	2b04      	cmp	r3, #4
 80101ba:	d011      	beq.n	80101e0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80101bc:	4b0a      	ldr	r3, [pc, #40]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 80101be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101c0:	4a0c      	ldr	r2, [pc, #48]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101c2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80101c6:	4413      	add	r3, r2
 80101c8:	4a0a      	ldr	r2, [pc, #40]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101ca:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80101ce:	4b06      	ldr	r3, [pc, #24]	; (80101e8 <ComputeRxWindowParameters+0xbc>)
 80101d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101d2:	4a08      	ldr	r2, [pc, #32]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101d4:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80101d8:	4413      	add	r3, r2
 80101da:	4a06      	ldr	r2, [pc, #24]	; (80101f4 <ComputeRxWindowParameters+0xc8>)
 80101dc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80101e0:	bf00      	nop
 80101e2:	3704      	adds	r7, #4
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd90      	pop	{r4, r7, pc}
 80101e8:	20000ba4 	.word	0x20000ba4
 80101ec:	20000a40 	.word	0x20000a40
 80101f0:	20000a58 	.word	0x20000a58
 80101f4:	20000688 	.word	0x20000688

080101f8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010202:	4b13      	ldr	r3, [pc, #76]	; (8010250 <VerifyTxFrame+0x58>)
 8010204:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01b      	beq.n	8010244 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801020c:	1d3b      	adds	r3, r7, #4
 801020e:	4618      	mov	r0, r3
 8010210:	f002 ff6e 	bl	80130f0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801021a:	2313      	movs	r3, #19
 801021c:	e013      	b.n	8010246 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801021e:	4b0d      	ldr	r3, [pc, #52]	; (8010254 <VerifyTxFrame+0x5c>)
 8010220:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010224:	4a0a      	ldr	r2, [pc, #40]	; (8010250 <VerifyTxFrame+0x58>)
 8010226:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	b2d2      	uxtb	r2, r2
 801022e:	4618      	mov	r0, r3
 8010230:	f7ff f932 	bl	800f498 <ValidatePayloadLength>
 8010234:	4603      	mov	r3, r0
 8010236:	f083 0301 	eor.w	r3, r3, #1
 801023a:	b2db      	uxtb	r3, r3
 801023c:	2b00      	cmp	r3, #0
 801023e:	d001      	beq.n	8010244 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010240:	2308      	movs	r3, #8
 8010242:	e000      	b.n	8010246 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	20000ba4 	.word	0x20000ba4
 8010254:	20000688 	.word	0x20000688

08010258 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801025e:	4b18      	ldr	r3, [pc, #96]	; (80102c0 <SerializeTxFrame+0x68>)
 8010260:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010264:	2b00      	cmp	r3, #0
 8010266:	d002      	beq.n	801026e <SerializeTxFrame+0x16>
 8010268:	2b04      	cmp	r3, #4
 801026a:	d011      	beq.n	8010290 <SerializeTxFrame+0x38>
 801026c:	e021      	b.n	80102b2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801026e:	4815      	ldr	r0, [pc, #84]	; (80102c4 <SerializeTxFrame+0x6c>)
 8010270:	f004 fa6c 	bl	801474c <LoRaMacSerializerJoinRequest>
 8010274:	4603      	mov	r3, r0
 8010276:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801027e:	2311      	movs	r3, #17
 8010280:	e01a      	b.n	80102b8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <SerializeTxFrame+0x68>)
 8010284:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010288:	b29a      	uxth	r2, r3
 801028a:	4b0d      	ldr	r3, [pc, #52]	; (80102c0 <SerializeTxFrame+0x68>)
 801028c:	801a      	strh	r2, [r3, #0]
            break;
 801028e:	e012      	b.n	80102b6 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010290:	480c      	ldr	r0, [pc, #48]	; (80102c4 <SerializeTxFrame+0x6c>)
 8010292:	f004 fadd 	bl	8014850 <LoRaMacSerializerData>
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80102a0:	2311      	movs	r3, #17
 80102a2:	e009      	b.n	80102b8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80102a4:	4b06      	ldr	r3, [pc, #24]	; (80102c0 <SerializeTxFrame+0x68>)
 80102a6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	4b04      	ldr	r3, [pc, #16]	; (80102c0 <SerializeTxFrame+0x68>)
 80102ae:	801a      	strh	r2, [r3, #0]
            break;
 80102b0:	e001      	b.n	80102b6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80102b2:	2303      	movs	r3, #3
 80102b4:	e000      	b.n	80102b8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	20000688 	.word	0x20000688
 80102c4:	20000790 	.word	0x20000790

080102c8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b090      	sub	sp, #64	; 0x40
 80102cc:	af02      	add	r7, sp, #8
 80102ce:	4603      	mov	r3, r0
 80102d0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80102d2:	2303      	movs	r3, #3
 80102d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80102d8:	f7ff ff06 	bl	80100e8 <CheckForClassBCollision>
 80102dc:	4603      	mov	r3, r0
 80102de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80102e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d002      	beq.n	80102f0 <ScheduleTx+0x28>
    {
        return status;
 80102ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ee:	e092      	b.n	8010416 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80102f0:	f000 f8f8 	bl	80104e4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80102f4:	f7ff ffb0 	bl	8010258 <SerializeTxFrame>
 80102f8:	4603      	mov	r3, r0
 80102fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80102fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010302:	2b00      	cmp	r3, #0
 8010304:	d002      	beq.n	801030c <ScheduleTx+0x44>
    {
        return status;
 8010306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801030a:	e084      	b.n	8010416 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801030c:	4b44      	ldr	r3, [pc, #272]	; (8010420 <ScheduleTx+0x158>)
 801030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010310:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010312:	4b43      	ldr	r3, [pc, #268]	; (8010420 <ScheduleTx+0x158>)
 8010314:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010318:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801031a:	4b41      	ldr	r3, [pc, #260]	; (8010420 <ScheduleTx+0x158>)
 801031c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010320:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010326:	4618      	mov	r0, r3
 8010328:	f00a fbbc 	bl	801aaa4 <SysTimeGetMcuTime>
 801032c:	4638      	mov	r0, r7
 801032e:	4b3c      	ldr	r3, [pc, #240]	; (8010420 <ScheduleTx+0x158>)
 8010330:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010334:	9200      	str	r2, [sp, #0]
 8010336:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801033a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801033e:	ca06      	ldmia	r2, {r1, r2}
 8010340:	f00a fb11 	bl	801a966 <SysTimeSub>
 8010344:	f107 0320 	add.w	r3, r7, #32
 8010348:	463a      	mov	r2, r7
 801034a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801034e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010352:	4b33      	ldr	r3, [pc, #204]	; (8010420 <ScheduleTx+0x158>)
 8010354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010356:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010358:	2300      	movs	r3, #0
 801035a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801035e:	2301      	movs	r3, #1
 8010360:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010362:	4b30      	ldr	r3, [pc, #192]	; (8010424 <ScheduleTx+0x15c>)
 8010364:	881b      	ldrh	r3, [r3, #0]
 8010366:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010368:	4b2d      	ldr	r3, [pc, #180]	; (8010420 <ScheduleTx+0x158>)
 801036a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801036e:	2b00      	cmp	r3, #0
 8010370:	d104      	bne.n	801037c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010372:	2301      	movs	r3, #1
 8010374:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010378:	2300      	movs	r3, #0
 801037a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801037c:	4b28      	ldr	r3, [pc, #160]	; (8010420 <ScheduleTx+0x158>)
 801037e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010382:	f107 0114 	add.w	r1, r7, #20
 8010386:	4b28      	ldr	r3, [pc, #160]	; (8010428 <ScheduleTx+0x160>)
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	4b28      	ldr	r3, [pc, #160]	; (801042c <ScheduleTx+0x164>)
 801038c:	4a28      	ldr	r2, [pc, #160]	; (8010430 <ScheduleTx+0x168>)
 801038e:	f004 fca3 	bl	8014cd8 <RegionNextChannel>
 8010392:	4603      	mov	r3, r0
 8010394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801039c:	2b00      	cmp	r3, #0
 801039e:	d025      	beq.n	80103ec <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80103a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103a4:	2b0b      	cmp	r3, #11
 80103a6:	d11e      	bne.n	80103e6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80103a8:	4b1e      	ldr	r3, [pc, #120]	; (8010424 <ScheduleTx+0x15c>)
 80103aa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d01c      	beq.n	80103ec <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80103b2:	7bfb      	ldrb	r3, [r7, #15]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d013      	beq.n	80103e0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80103b8:	4b1a      	ldr	r3, [pc, #104]	; (8010424 <ScheduleTx+0x15c>)
 80103ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103be:	f043 0320 	orr.w	r3, r3, #32
 80103c2:	4a18      	ldr	r2, [pc, #96]	; (8010424 <ScheduleTx+0x15c>)
 80103c4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80103c8:	4b16      	ldr	r3, [pc, #88]	; (8010424 <ScheduleTx+0x15c>)
 80103ca:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80103ce:	4619      	mov	r1, r3
 80103d0:	4818      	ldr	r0, [pc, #96]	; (8010434 <ScheduleTx+0x16c>)
 80103d2:	f00b f907 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80103d6:	4817      	ldr	r0, [pc, #92]	; (8010434 <ScheduleTx+0x16c>)
 80103d8:	f00b f826 	bl	801b428 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	e01a      	b.n	8010416 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80103e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103e4:	e017      	b.n	8010416 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80103e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103ea:	e014      	b.n	8010416 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80103ec:	f7ff fe9e 	bl	801012c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80103f0:	f7ff ff02 	bl	80101f8 <VerifyTxFrame>
 80103f4:	4603      	mov	r3, r0
 80103f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80103fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <ScheduleTx+0x140>
    {
        return status;
 8010402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010406:	e006      	b.n	8010416 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010408:	4b06      	ldr	r3, [pc, #24]	; (8010424 <ScheduleTx+0x15c>)
 801040a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 801040e:	4618      	mov	r0, r3
 8010410:	f000 fb76 	bl	8010b00 <SendFrameOnChannel>
 8010414:	4603      	mov	r3, r0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3738      	adds	r7, #56	; 0x38
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	20000ba4 	.word	0x20000ba4
 8010424:	20000688 	.word	0x20000688
 8010428:	20000bd4 	.word	0x20000bd4
 801042c:	20000b1c 	.word	0x20000b1c
 8010430:	20000aa3 	.word	0x20000aa3
 8010434:	200009f0 	.word	0x200009f0

08010438 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	4603      	mov	r3, r0
 8010440:	460a      	mov	r2, r1
 8010442:	71fb      	strb	r3, [r7, #7]
 8010444:	4613      	mov	r3, r2
 8010446:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010448:	2312      	movs	r3, #18
 801044a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801044c:	2300      	movs	r3, #0
 801044e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010450:	4b22      	ldr	r3, [pc, #136]	; (80104dc <SecureFrame+0xa4>)
 8010452:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010456:	2b00      	cmp	r3, #0
 8010458:	d002      	beq.n	8010460 <SecureFrame+0x28>
 801045a:	2b04      	cmp	r3, #4
 801045c:	d011      	beq.n	8010482 <SecureFrame+0x4a>
 801045e:	e036      	b.n	80104ce <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010460:	481f      	ldr	r0, [pc, #124]	; (80104e0 <SecureFrame+0xa8>)
 8010462:	f003 fd3f 	bl	8013ee4 <LoRaMacCryptoPrepareJoinRequest>
 8010466:	4603      	mov	r3, r0
 8010468:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801046a:	7bfb      	ldrb	r3, [r7, #15]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d001      	beq.n	8010474 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010470:	2311      	movs	r3, #17
 8010472:	e02f      	b.n	80104d4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010474:	4b19      	ldr	r3, [pc, #100]	; (80104dc <SecureFrame+0xa4>)
 8010476:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801047a:	b29a      	uxth	r2, r3
 801047c:	4b17      	ldr	r3, [pc, #92]	; (80104dc <SecureFrame+0xa4>)
 801047e:	801a      	strh	r2, [r3, #0]
            break;
 8010480:	e027      	b.n	80104d2 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010482:	f107 0308 	add.w	r3, r7, #8
 8010486:	4618      	mov	r0, r3
 8010488:	f003 fc66 	bl	8013d58 <LoRaMacCryptoGetFCntUp>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010492:	2312      	movs	r3, #18
 8010494:	e01e      	b.n	80104d4 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010496:	4b11      	ldr	r3, [pc, #68]	; (80104dc <SecureFrame+0xa4>)
 8010498:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	3b01      	subs	r3, #1
 80104a4:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80104a6:	68b8      	ldr	r0, [r7, #8]
 80104a8:	79ba      	ldrb	r2, [r7, #6]
 80104aa:	79f9      	ldrb	r1, [r7, #7]
 80104ac:	4b0c      	ldr	r3, [pc, #48]	; (80104e0 <SecureFrame+0xa8>)
 80104ae:	f003 fe41 	bl	8014134 <LoRaMacCryptoSecureMessage>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80104bc:	2311      	movs	r3, #17
 80104be:	e009      	b.n	80104d4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80104c0:	4b06      	ldr	r3, [pc, #24]	; (80104dc <SecureFrame+0xa4>)
 80104c2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	4b04      	ldr	r3, [pc, #16]	; (80104dc <SecureFrame+0xa4>)
 80104ca:	801a      	strh	r2, [r3, #0]
            break;
 80104cc:	e001      	b.n	80104d2 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80104ce:	2303      	movs	r3, #3
 80104d0:	e000      	b.n	80104d4 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	20000688 	.word	0x20000688
 80104e0:	20000790 	.word	0x20000790

080104e4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80104e4:	b480      	push	{r7}
 80104e6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80104e8:	4b09      	ldr	r3, [pc, #36]	; (8010510 <CalculateBackOff+0x2c>)
 80104ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10a      	bne.n	8010506 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80104f0:	4b07      	ldr	r3, [pc, #28]	; (8010510 <CalculateBackOff+0x2c>)
 80104f2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80104f6:	3b01      	subs	r3, #1
 80104f8:	4a06      	ldr	r2, [pc, #24]	; (8010514 <CalculateBackOff+0x30>)
 80104fa:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 80104fe:	fb02 f303 	mul.w	r3, r2, r3
 8010502:	4a03      	ldr	r2, [pc, #12]	; (8010510 <CalculateBackOff+0x2c>)
 8010504:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010506:	bf00      	nop
 8010508:	46bd      	mov	sp, r7
 801050a:	bc80      	pop	{r7}
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	20000ba4 	.word	0x20000ba4
 8010514:	20000688 	.word	0x20000688

08010518 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	4603      	mov	r3, r0
 8010520:	7139      	strb	r1, [r7, #4]
 8010522:	71fb      	strb	r3, [r7, #7]
 8010524:	4613      	mov	r3, r2
 8010526:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d002      	beq.n	8010534 <RemoveMacCommands+0x1c>
 801052e:	79fb      	ldrb	r3, [r7, #7]
 8010530:	2b01      	cmp	r3, #1
 8010532:	d10d      	bne.n	8010550 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010534:	79bb      	ldrb	r3, [r7, #6]
 8010536:	2b01      	cmp	r3, #1
 8010538:	d108      	bne.n	801054c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801053a:	793b      	ldrb	r3, [r7, #4]
 801053c:	f003 0320 	and.w	r3, r3, #32
 8010540:	b2db      	uxtb	r3, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	d004      	beq.n	8010550 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010546:	f002 fda7 	bl	8013098 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801054a:	e001      	b.n	8010550 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801054c:	f002 fda4 	bl	8013098 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010558:	b5b0      	push	{r4, r5, r7, lr}
 801055a:	b092      	sub	sp, #72	; 0x48
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8010562:	79fb      	ldrb	r3, [r7, #7]
 8010564:	f083 0301 	eor.w	r3, r3, #1
 8010568:	b2db      	uxtb	r3, r3
 801056a:	2b00      	cmp	r3, #0
 801056c:	d003      	beq.n	8010576 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801056e:	4b88      	ldr	r3, [pc, #544]	; (8010790 <ResetMacParameters+0x238>)
 8010570:	2200      	movs	r2, #0
 8010572:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010576:	4b86      	ldr	r3, [pc, #536]	; (8010790 <ResetMacParameters+0x238>)
 8010578:	2200      	movs	r2, #0
 801057a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801057c:	4b85      	ldr	r3, [pc, #532]	; (8010794 <ResetMacParameters+0x23c>)
 801057e:	2200      	movs	r2, #0
 8010580:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010584:	4b83      	ldr	r3, [pc, #524]	; (8010794 <ResetMacParameters+0x23c>)
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 801058c:	4b81      	ldr	r3, [pc, #516]	; (8010794 <ResetMacParameters+0x23c>)
 801058e:	2200      	movs	r2, #0
 8010590:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010594:	4b7e      	ldr	r3, [pc, #504]	; (8010790 <ResetMacParameters+0x238>)
 8010596:	2200      	movs	r2, #0
 8010598:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801059c:	4b7c      	ldr	r3, [pc, #496]	; (8010790 <ResetMacParameters+0x238>)
 801059e:	2201      	movs	r2, #1
 80105a0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80105a4:	4b7a      	ldr	r3, [pc, #488]	; (8010790 <ResetMacParameters+0x238>)
 80105a6:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80105aa:	4b79      	ldr	r3, [pc, #484]	; (8010790 <ResetMacParameters+0x238>)
 80105ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80105b0:	4b77      	ldr	r3, [pc, #476]	; (8010790 <ResetMacParameters+0x238>)
 80105b2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80105b6:	4b76      	ldr	r3, [pc, #472]	; (8010790 <ResetMacParameters+0x238>)
 80105b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80105bc:	4b74      	ldr	r3, [pc, #464]	; (8010790 <ResetMacParameters+0x238>)
 80105be:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80105c2:	4b73      	ldr	r3, [pc, #460]	; (8010790 <ResetMacParameters+0x238>)
 80105c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80105c8:	4b71      	ldr	r3, [pc, #452]	; (8010790 <ResetMacParameters+0x238>)
 80105ca:	4a71      	ldr	r2, [pc, #452]	; (8010790 <ResetMacParameters+0x238>)
 80105cc:	336c      	adds	r3, #108	; 0x6c
 80105ce:	32b4      	adds	r2, #180	; 0xb4
 80105d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105d4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80105d8:	4b6d      	ldr	r3, [pc, #436]	; (8010790 <ResetMacParameters+0x238>)
 80105da:	4a6d      	ldr	r2, [pc, #436]	; (8010790 <ResetMacParameters+0x238>)
 80105dc:	3374      	adds	r3, #116	; 0x74
 80105de:	32bc      	adds	r2, #188	; 0xbc
 80105e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105e4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80105e8:	4b69      	ldr	r3, [pc, #420]	; (8010790 <ResetMacParameters+0x238>)
 80105ea:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80105ee:	4b68      	ldr	r3, [pc, #416]	; (8010790 <ResetMacParameters+0x238>)
 80105f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80105f4:	4b66      	ldr	r3, [pc, #408]	; (8010790 <ResetMacParameters+0x238>)
 80105f6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80105fa:	4b65      	ldr	r3, [pc, #404]	; (8010790 <ResetMacParameters+0x238>)
 80105fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010600:	4b63      	ldr	r3, [pc, #396]	; (8010790 <ResetMacParameters+0x238>)
 8010602:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010606:	4a62      	ldr	r2, [pc, #392]	; (8010790 <ResetMacParameters+0x238>)
 8010608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801060c:	4b60      	ldr	r3, [pc, #384]	; (8010790 <ResetMacParameters+0x238>)
 801060e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010612:	4a5f      	ldr	r2, [pc, #380]	; (8010790 <ResetMacParameters+0x238>)
 8010614:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010618:	4b5d      	ldr	r3, [pc, #372]	; (8010790 <ResetMacParameters+0x238>)
 801061a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801061e:	4b5c      	ldr	r3, [pc, #368]	; (8010790 <ResetMacParameters+0x238>)
 8010620:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010624:	4b5a      	ldr	r3, [pc, #360]	; (8010790 <ResetMacParameters+0x238>)
 8010626:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801062a:	4b59      	ldr	r3, [pc, #356]	; (8010790 <ResetMacParameters+0x238>)
 801062c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8010630:	4b58      	ldr	r3, [pc, #352]	; (8010794 <ResetMacParameters+0x23c>)
 8010632:	2200      	movs	r2, #0
 8010634:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010638:	4b55      	ldr	r3, [pc, #340]	; (8010790 <ResetMacParameters+0x238>)
 801063a:	2200      	movs	r2, #0
 801063c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010640:	4b53      	ldr	r3, [pc, #332]	; (8010790 <ResetMacParameters+0x238>)
 8010642:	2200      	movs	r2, #0
 8010644:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8010648:	4b51      	ldr	r3, [pc, #324]	; (8010790 <ResetMacParameters+0x238>)
 801064a:	2200      	movs	r2, #0
 801064c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010650:	4b4f      	ldr	r3, [pc, #316]	; (8010790 <ResetMacParameters+0x238>)
 8010652:	2200      	movs	r2, #0
 8010654:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010658:	4b4d      	ldr	r3, [pc, #308]	; (8010790 <ResetMacParameters+0x238>)
 801065a:	2200      	movs	r2, #0
 801065c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010660:	4b4b      	ldr	r3, [pc, #300]	; (8010790 <ResetMacParameters+0x238>)
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010668:	4b49      	ldr	r3, [pc, #292]	; (8010790 <ResetMacParameters+0x238>)
 801066a:	2200      	movs	r2, #0
 801066c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010670:	4b47      	ldr	r3, [pc, #284]	; (8010790 <ResetMacParameters+0x238>)
 8010672:	2200      	movs	r2, #0
 8010674:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010678:	4b45      	ldr	r3, [pc, #276]	; (8010790 <ResetMacParameters+0x238>)
 801067a:	2200      	movs	r2, #0
 801067c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010680:	4b43      	ldr	r3, [pc, #268]	; (8010790 <ResetMacParameters+0x238>)
 8010682:	2200      	movs	r2, #0
 8010684:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010688:	4b41      	ldr	r3, [pc, #260]	; (8010790 <ResetMacParameters+0x238>)
 801068a:	2200      	movs	r2, #0
 801068c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010690:	2301      	movs	r3, #1
 8010692:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010694:	4b40      	ldr	r3, [pc, #256]	; (8010798 <ResetMacParameters+0x240>)
 8010696:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010698:	4b40      	ldr	r3, [pc, #256]	; (801079c <ResetMacParameters+0x244>)
 801069a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 801069c:	4b40      	ldr	r3, [pc, #256]	; (80107a0 <ResetMacParameters+0x248>)
 801069e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80106a0:	4b3b      	ldr	r3, [pc, #236]	; (8010790 <ResetMacParameters+0x238>)
 80106a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80106a6:	f107 020c 	add.w	r2, r7, #12
 80106aa:	4611      	mov	r1, r2
 80106ac:	4618      	mov	r0, r3
 80106ae:	f004 f9ff 	bl	8014ab0 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80106b2:	4b38      	ldr	r3, [pc, #224]	; (8010794 <ResetMacParameters+0x23c>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80106ba:	4b36      	ldr	r3, [pc, #216]	; (8010794 <ResetMacParameters+0x23c>)
 80106bc:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80106c0:	4b34      	ldr	r3, [pc, #208]	; (8010794 <ResetMacParameters+0x23c>)
 80106c2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80106c6:	4b32      	ldr	r3, [pc, #200]	; (8010790 <ResetMacParameters+0x238>)
 80106c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ca:	4a32      	ldr	r2, [pc, #200]	; (8010794 <ResetMacParameters+0x23c>)
 80106cc:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80106d0:	4b2f      	ldr	r3, [pc, #188]	; (8010790 <ResetMacParameters+0x238>)
 80106d2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80106d6:	4b2f      	ldr	r3, [pc, #188]	; (8010794 <ResetMacParameters+0x23c>)
 80106d8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80106dc:	4b2c      	ldr	r3, [pc, #176]	; (8010790 <ResetMacParameters+0x238>)
 80106de:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80106e2:	4b2c      	ldr	r3, [pc, #176]	; (8010794 <ResetMacParameters+0x23c>)
 80106e4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80106e8:	4b2a      	ldr	r3, [pc, #168]	; (8010794 <ResetMacParameters+0x23c>)
 80106ea:	2200      	movs	r2, #0
 80106ec:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80106f0:	4b28      	ldr	r3, [pc, #160]	; (8010794 <ResetMacParameters+0x23c>)
 80106f2:	2201      	movs	r2, #1
 80106f4:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80106f8:	4b25      	ldr	r3, [pc, #148]	; (8010790 <ResetMacParameters+0x238>)
 80106fa:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80106fe:	4b25      	ldr	r3, [pc, #148]	; (8010794 <ResetMacParameters+0x23c>)
 8010700:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010704:	4a23      	ldr	r2, [pc, #140]	; (8010794 <ResetMacParameters+0x23c>)
 8010706:	4b23      	ldr	r3, [pc, #140]	; (8010794 <ResetMacParameters+0x23c>)
 8010708:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801070c:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8010710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010714:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010718:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801071c:	4b1d      	ldr	r3, [pc, #116]	; (8010794 <ResetMacParameters+0x23c>)
 801071e:	2201      	movs	r2, #1
 8010720:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010724:	4b1b      	ldr	r3, [pc, #108]	; (8010794 <ResetMacParameters+0x23c>)
 8010726:	2202      	movs	r2, #2
 8010728:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801072c:	2300      	movs	r3, #0
 801072e:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8010730:	2300      	movs	r3, #0
 8010732:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8010734:	4b17      	ldr	r3, [pc, #92]	; (8010794 <ResetMacParameters+0x23c>)
 8010736:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801073a:	2b00      	cmp	r3, #0
 801073c:	d009      	beq.n	8010752 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801073e:	4b15      	ldr	r3, [pc, #84]	; (8010794 <ResetMacParameters+0x23c>)
 8010740:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010748:	4b12      	ldr	r3, [pc, #72]	; (8010794 <ResetMacParameters+0x23c>)
 801074a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801074e:	695b      	ldr	r3, [r3, #20]
 8010750:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010752:	4b14      	ldr	r3, [pc, #80]	; (80107a4 <ResetMacParameters+0x24c>)
 8010754:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010756:	4b14      	ldr	r3, [pc, #80]	; (80107a8 <ResetMacParameters+0x250>)
 8010758:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801075a:	4b14      	ldr	r3, [pc, #80]	; (80107ac <ResetMacParameters+0x254>)
 801075c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801075e:	4b14      	ldr	r3, [pc, #80]	; (80107b0 <ResetMacParameters+0x258>)
 8010760:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010762:	4b14      	ldr	r3, [pc, #80]	; (80107b4 <ResetMacParameters+0x25c>)
 8010764:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010766:	4b14      	ldr	r3, [pc, #80]	; (80107b8 <ResetMacParameters+0x260>)
 8010768:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801076a:	4b14      	ldr	r3, [pc, #80]	; (80107bc <ResetMacParameters+0x264>)
 801076c:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801076e:	4b14      	ldr	r3, [pc, #80]	; (80107c0 <ResetMacParameters+0x268>)
 8010770:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010772:	4b14      	ldr	r3, [pc, #80]	; (80107c4 <ResetMacParameters+0x26c>)
 8010774:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010776:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801077a:	f107 031c 	add.w	r3, r7, #28
 801077e:	4a12      	ldr	r2, [pc, #72]	; (80107c8 <ResetMacParameters+0x270>)
 8010780:	4618      	mov	r0, r3
 8010782:	f002 f996 	bl	8012ab2 <LoRaMacClassBInit>
}
 8010786:	bf00      	nop
 8010788:	3748      	adds	r7, #72	; 0x48
 801078a:	46bd      	mov	sp, r7
 801078c:	bdb0      	pop	{r4, r5, r7, pc}
 801078e:	bf00      	nop
 8010790:	20000ba4 	.word	0x20000ba4
 8010794:	20000688 	.word	0x20000688
 8010798:	20000dc8 	.word	0x20000dc8
 801079c:	20000ddc 	.word	0x20000ddc
 80107a0:	2000173c 	.word	0x2000173c
 80107a4:	20000af0 	.word	0x20000af0
 80107a8:	20000aa8 	.word	0x20000aa8
 80107ac:	20000adc 	.word	0x20000adc
 80107b0:	20000b19 	.word	0x20000b19
 80107b4:	20000c88 	.word	0x20000c88
 80107b8:	20000bec 	.word	0x20000bec
 80107bc:	20000bf0 	.word	0x20000bf0
 80107c0:	20000c8c 	.word	0x20000c8c
 80107c4:	20000cd4 	.word	0x20000cd4
 80107c8:	20001158 	.word	0x20001158

080107cc <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f00a fe94 	bl	801b504 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80107dc:	4b11      	ldr	r3, [pc, #68]	; (8010824 <RxWindowSetup+0x58>)
 80107de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80107e2:	4b11      	ldr	r3, [pc, #68]	; (8010828 <RxWindowSetup+0x5c>)
 80107e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80107e8:	4a10      	ldr	r2, [pc, #64]	; (801082c <RxWindowSetup+0x60>)
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f004 f9c7 	bl	8014b80 <RegionRxConfig>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d010      	beq.n	801081a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80107f8:	4b0d      	ldr	r3, [pc, #52]	; (8010830 <RxWindowSetup+0x64>)
 80107fa:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80107fe:	4b0c      	ldr	r3, [pc, #48]	; (8010830 <RxWindowSetup+0x64>)
 8010800:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010804:	4b07      	ldr	r3, [pc, #28]	; (8010824 <RxWindowSetup+0x58>)
 8010806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010808:	4a07      	ldr	r2, [pc, #28]	; (8010828 <RxWindowSetup+0x5c>)
 801080a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801080c:	4610      	mov	r0, r2
 801080e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	7cda      	ldrb	r2, [r3, #19]
 8010814:	4b06      	ldr	r3, [pc, #24]	; (8010830 <RxWindowSetup+0x64>)
 8010816:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801081a:	bf00      	nop
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	0801cbcc 	.word	0x0801cbcc
 8010828:	20000ba4 	.word	0x20000ba4
 801082c:	20000aac 	.word	0x20000aac
 8010830:	20000688 	.word	0x20000688

08010834 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b083      	sub	sp, #12
 8010838:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801083a:	4b1e      	ldr	r3, [pc, #120]	; (80108b4 <OpenContinuousRxCWindow+0x80>)
 801083c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010840:	4b1c      	ldr	r3, [pc, #112]	; (80108b4 <OpenContinuousRxCWindow+0x80>)
 8010842:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010846:	b259      	sxtb	r1, r3
 8010848:	4b1a      	ldr	r3, [pc, #104]	; (80108b4 <OpenContinuousRxCWindow+0x80>)
 801084a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801084e:	4b19      	ldr	r3, [pc, #100]	; (80108b4 <OpenContinuousRxCWindow+0x80>)
 8010850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010852:	4c19      	ldr	r4, [pc, #100]	; (80108b8 <OpenContinuousRxCWindow+0x84>)
 8010854:	9400      	str	r4, [sp, #0]
 8010856:	f004 f979 	bl	8014b4c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801085a:	4b18      	ldr	r3, [pc, #96]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 801085c:	2202      	movs	r2, #2
 801085e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010862:	4b14      	ldr	r3, [pc, #80]	; (80108b4 <OpenContinuousRxCWindow+0x80>)
 8010864:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8010868:	4b14      	ldr	r3, [pc, #80]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 801086a:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 8010870:	2201      	movs	r2, #1
 8010872:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010876:	4b0f      	ldr	r3, [pc, #60]	; (80108b4 <OpenContinuousRxCWindow+0x80>)
 8010878:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801087c:	4a10      	ldr	r2, [pc, #64]	; (80108c0 <OpenContinuousRxCWindow+0x8c>)
 801087e:	490e      	ldr	r1, [pc, #56]	; (80108b8 <OpenContinuousRxCWindow+0x84>)
 8010880:	4618      	mov	r0, r3
 8010882:	f004 f97d 	bl	8014b80 <RegionRxConfig>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00f      	beq.n	80108ac <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801088c:	4b0b      	ldr	r3, [pc, #44]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 801088e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8010892:	4b0a      	ldr	r3, [pc, #40]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 8010894:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8010898:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <OpenContinuousRxCWindow+0x90>)
 801089a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801089c:	2000      	movs	r0, #0
 801089e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80108a0:	4b06      	ldr	r3, [pc, #24]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 80108a2:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80108a6:	4b05      	ldr	r3, [pc, #20]	; (80108bc <OpenContinuousRxCWindow+0x88>)
 80108a8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80108ac:	bf00      	nop
 80108ae:	3704      	adds	r7, #4
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd90      	pop	{r4, r7, pc}
 80108b4:	20000ba4 	.word	0x20000ba4
 80108b8:	20000a70 	.word	0x20000a70
 80108bc:	20000688 	.word	0x20000688
 80108c0:	20000aac 	.word	0x20000aac
 80108c4:	0801cbcc 	.word	0x0801cbcc

080108c8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b088      	sub	sp, #32
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	603b      	str	r3, [r7, #0]
 80108d4:	4613      	mov	r3, r2
 80108d6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80108d8:	4b82      	ldr	r3, [pc, #520]	; (8010ae4 <PrepareFrame+0x21c>)
 80108da:	2200      	movs	r2, #0
 80108dc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80108de:	4b81      	ldr	r3, [pc, #516]	; (8010ae4 <PrepareFrame+0x21c>)
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 80108e6:	2300      	movs	r3, #0
 80108e8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80108f8:	2300      	movs	r3, #0
 80108fa:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80108fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80108fe:	461a      	mov	r2, r3
 8010900:	6839      	ldr	r1, [r7, #0]
 8010902:	4879      	ldr	r0, [pc, #484]	; (8010ae8 <PrepareFrame+0x220>)
 8010904:	f006 fc63 	bl	80171ce <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801090a:	b2da      	uxtb	r2, r3
 801090c:	4b75      	ldr	r3, [pc, #468]	; (8010ae4 <PrepareFrame+0x21c>)
 801090e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	781a      	ldrb	r2, [r3, #0]
 8010916:	4b73      	ldr	r3, [pc, #460]	; (8010ae4 <PrepareFrame+0x21c>)
 8010918:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010922:	b2db      	uxtb	r3, r3
 8010924:	2b07      	cmp	r3, #7
 8010926:	f000 80b9 	beq.w	8010a9c <PrepareFrame+0x1d4>
 801092a:	2b07      	cmp	r3, #7
 801092c:	f300 80d0 	bgt.w	8010ad0 <PrepareFrame+0x208>
 8010930:	2b02      	cmp	r3, #2
 8010932:	d006      	beq.n	8010942 <PrepareFrame+0x7a>
 8010934:	2b04      	cmp	r3, #4
 8010936:	f040 80cb 	bne.w	8010ad0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801093a:	4b6a      	ldr	r3, [pc, #424]	; (8010ae4 <PrepareFrame+0x21c>)
 801093c:	2201      	movs	r2, #1
 801093e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010942:	4b68      	ldr	r3, [pc, #416]	; (8010ae4 <PrepareFrame+0x21c>)
 8010944:	2204      	movs	r2, #4
 8010946:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801094a:	4b66      	ldr	r3, [pc, #408]	; (8010ae4 <PrepareFrame+0x21c>)
 801094c:	4a67      	ldr	r2, [pc, #412]	; (8010aec <PrepareFrame+0x224>)
 801094e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010952:	4b64      	ldr	r3, [pc, #400]	; (8010ae4 <PrepareFrame+0x21c>)
 8010954:	22ff      	movs	r2, #255	; 0xff
 8010956:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	781a      	ldrb	r2, [r3, #0]
 801095e:	4b61      	ldr	r3, [pc, #388]	; (8010ae4 <PrepareFrame+0x21c>)
 8010960:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010964:	4a5f      	ldr	r2, [pc, #380]	; (8010ae4 <PrepareFrame+0x21c>)
 8010966:	79fb      	ldrb	r3, [r7, #7]
 8010968:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801096c:	4b60      	ldr	r3, [pc, #384]	; (8010af0 <PrepareFrame+0x228>)
 801096e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010972:	4a5c      	ldr	r2, [pc, #368]	; (8010ae4 <PrepareFrame+0x21c>)
 8010974:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	781a      	ldrb	r2, [r3, #0]
 801097c:	4b59      	ldr	r3, [pc, #356]	; (8010ae4 <PrepareFrame+0x21c>)
 801097e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010982:	4b58      	ldr	r3, [pc, #352]	; (8010ae4 <PrepareFrame+0x21c>)
 8010984:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010988:	4b56      	ldr	r3, [pc, #344]	; (8010ae4 <PrepareFrame+0x21c>)
 801098a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801098e:	4b55      	ldr	r3, [pc, #340]	; (8010ae4 <PrepareFrame+0x21c>)
 8010990:	4a55      	ldr	r2, [pc, #340]	; (8010ae8 <PrepareFrame+0x220>)
 8010992:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010996:	f107 0318 	add.w	r3, r7, #24
 801099a:	4618      	mov	r0, r3
 801099c:	f003 f9dc 	bl	8013d58 <LoRaMacCryptoGetFCntUp>
 80109a0:	4603      	mov	r3, r0
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d001      	beq.n	80109aa <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80109a6:	2312      	movs	r3, #18
 80109a8:	e098      	b.n	8010adc <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	4b4d      	ldr	r3, [pc, #308]	; (8010ae4 <PrepareFrame+0x21c>)
 80109b0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 80109b4:	4b4b      	ldr	r3, [pc, #300]	; (8010ae4 <PrepareFrame+0x21c>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80109bc:	4b49      	ldr	r3, [pc, #292]	; (8010ae4 <PrepareFrame+0x21c>)
 80109be:	2200      	movs	r2, #0
 80109c0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80109c4:	69bb      	ldr	r3, [r7, #24]
 80109c6:	4a47      	ldr	r2, [pc, #284]	; (8010ae4 <PrepareFrame+0x21c>)
 80109c8:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80109cc:	f107 0314 	add.w	r3, r7, #20
 80109d0:	4618      	mov	r0, r3
 80109d2:	f002 fb8d 	bl	80130f0 <LoRaMacCommandsGetSizeSerializedCmds>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80109dc:	2313      	movs	r3, #19
 80109de:	e07d      	b.n	8010adc <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d076      	beq.n	8010ad4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80109e6:	4b42      	ldr	r3, [pc, #264]	; (8010af0 <PrepareFrame+0x228>)
 80109e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fe fd2b 	bl	800f448 <GetMaxAppPayloadWithoutFOptsLength>
 80109f2:	4603      	mov	r3, r0
 80109f4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80109f6:	4b3b      	ldr	r3, [pc, #236]	; (8010ae4 <PrepareFrame+0x21c>)
 80109f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d01d      	beq.n	8010a3c <PrepareFrame+0x174>
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	2b0f      	cmp	r3, #15
 8010a04:	d81a      	bhi.n	8010a3c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010a06:	f107 0314 	add.w	r3, r7, #20
 8010a0a:	4a3a      	ldr	r2, [pc, #232]	; (8010af4 <PrepareFrame+0x22c>)
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	200f      	movs	r0, #15
 8010a10:	f002 fb84 	bl	801311c <LoRaMacCommandsSerializeCmds>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010a1a:	2313      	movs	r3, #19
 8010a1c:	e05e      	b.n	8010adc <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f003 030f 	and.w	r3, r3, #15
 8010a24:	b2d9      	uxtb	r1, r3
 8010a26:	68ba      	ldr	r2, [r7, #8]
 8010a28:	7813      	ldrb	r3, [r2, #0]
 8010a2a:	f361 0303 	bfi	r3, r1, #0, #4
 8010a2e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	781a      	ldrb	r2, [r3, #0]
 8010a34:	4b2b      	ldr	r3, [pc, #172]	; (8010ae4 <PrepareFrame+0x21c>)
 8010a36:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010a3a:	e04b      	b.n	8010ad4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010a3c:	4b29      	ldr	r3, [pc, #164]	; (8010ae4 <PrepareFrame+0x21c>)
 8010a3e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d010      	beq.n	8010a68 <PrepareFrame+0x1a0>
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2b0f      	cmp	r3, #15
 8010a4a:	d90d      	bls.n	8010a68 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010a4c:	7ffb      	ldrb	r3, [r7, #31]
 8010a4e:	f107 0114 	add.w	r1, r7, #20
 8010a52:	4a29      	ldr	r2, [pc, #164]	; (8010af8 <PrepareFrame+0x230>)
 8010a54:	4618      	mov	r0, r3
 8010a56:	f002 fb61 	bl	801311c <LoRaMacCommandsSerializeCmds>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010a60:	2313      	movs	r3, #19
 8010a62:	e03b      	b.n	8010adc <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010a64:	230a      	movs	r3, #10
 8010a66:	e039      	b.n	8010adc <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010a68:	7ffb      	ldrb	r3, [r7, #31]
 8010a6a:	f107 0114 	add.w	r1, r7, #20
 8010a6e:	4a22      	ldr	r2, [pc, #136]	; (8010af8 <PrepareFrame+0x230>)
 8010a70:	4618      	mov	r0, r3
 8010a72:	f002 fb53 	bl	801311c <LoRaMacCommandsSerializeCmds>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d001      	beq.n	8010a80 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010a7c:	2313      	movs	r3, #19
 8010a7e:	e02d      	b.n	8010adc <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <PrepareFrame+0x21c>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010a88:	4b16      	ldr	r3, [pc, #88]	; (8010ae4 <PrepareFrame+0x21c>)
 8010a8a:	4a1b      	ldr	r2, [pc, #108]	; (8010af8 <PrepareFrame+0x230>)
 8010a8c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	4b13      	ldr	r3, [pc, #76]	; (8010ae4 <PrepareFrame+0x21c>)
 8010a96:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010a9a:	e01b      	b.n	8010ad4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d01a      	beq.n	8010ad8 <PrepareFrame+0x210>
 8010aa2:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <PrepareFrame+0x21c>)
 8010aa4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d015      	beq.n	8010ad8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010aac:	4813      	ldr	r0, [pc, #76]	; (8010afc <PrepareFrame+0x234>)
 8010aae:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <PrepareFrame+0x21c>)
 8010ab0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	6839      	ldr	r1, [r7, #0]
 8010aba:	f006 fb88 	bl	80171ce <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010abe:	4b09      	ldr	r3, [pc, #36]	; (8010ae4 <PrepareFrame+0x21c>)
 8010ac0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	4b06      	ldr	r3, [pc, #24]	; (8010ae4 <PrepareFrame+0x21c>)
 8010acc:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010ace:	e003      	b.n	8010ad8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	e003      	b.n	8010adc <PrepareFrame+0x214>
            break;
 8010ad4:	bf00      	nop
 8010ad6:	e000      	b.n	8010ada <PrepareFrame+0x212>
            break;
 8010ad8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	20000688 	.word	0x20000688
 8010ae8:	200007c0 	.word	0x200007c0
 8010aec:	2000068a 	.word	0x2000068a
 8010af0:	20000ba4 	.word	0x20000ba4
 8010af4:	200007a0 	.word	0x200007a0
 8010af8:	20000b24 	.word	0x20000b24
 8010afc:	2000068b 	.word	0x2000068b

08010b00 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b08a      	sub	sp, #40	; 0x28
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	4603      	mov	r3, r0
 8010b08:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010b14:	79fb      	ldrb	r3, [r7, #7]
 8010b16:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b18:	4b4b      	ldr	r3, [pc, #300]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b1a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b1e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010b20:	4b49      	ldr	r3, [pc, #292]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b22:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010b26:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010b28:	4b47      	ldr	r3, [pc, #284]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b2e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010b30:	4b45      	ldr	r3, [pc, #276]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b36:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010b38:	4b44      	ldr	r3, [pc, #272]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b3a:	881b      	ldrh	r3, [r3, #0]
 8010b3c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b3e:	4b42      	ldr	r3, [pc, #264]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b40:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010b44:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010b46:	4b40      	ldr	r3, [pc, #256]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b48:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010b4c:	f107 020f 	add.w	r2, r7, #15
 8010b50:	f107 0110 	add.w	r1, r7, #16
 8010b54:	4b3e      	ldr	r3, [pc, #248]	; (8010c50 <SendFrameOnChannel+0x150>)
 8010b56:	f004 f828 	bl	8014baa <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010b5a:	4b3c      	ldr	r3, [pc, #240]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b62:	4b39      	ldr	r3, [pc, #228]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010b64:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b68:	b2da      	uxtb	r2, r3
 8010b6a:	4b38      	ldr	r3, [pc, #224]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b6c:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8010b70:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010b74:	4b35      	ldr	r3, [pc, #212]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b76:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	4a33      	ldr	r2, [pc, #204]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b7e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010b82:	4b32      	ldr	r3, [pc, #200]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b84:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010b88:	4a30      	ldr	r2, [pc, #192]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b8a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010b8e:	4b2f      	ldr	r3, [pc, #188]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b90:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010b94:	4a2d      	ldr	r2, [pc, #180]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010b96:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010b9a:	f001 fff6 	bl	8012b8a <LoRaMacClassBIsBeaconModeActive>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d00b      	beq.n	8010bbc <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010ba4:	4b29      	ldr	r3, [pc, #164]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010ba6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010baa:	4618      	mov	r0, r3
 8010bac:	f002 f858 	bl	8012c60 <LoRaMacClassBIsUplinkCollision>
 8010bb0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010bb2:	6a3b      	ldr	r3, [r7, #32]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010bb8:	2310      	movs	r3, #16
 8010bba:	e040      	b.n	8010c3e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010bbc:	4b22      	ldr	r3, [pc, #136]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010bbe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d101      	bne.n	8010bca <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010bc6:	f002 f855 	bl	8012c74 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010bca:	f001 ffef 	bl	8012bac <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010bce:	4b1e      	ldr	r3, [pc, #120]	; (8010c48 <SendFrameOnChannel+0x148>)
 8010bd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	4a1d      	ldr	r2, [pc, #116]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010bd8:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8010bdc:	4611      	mov	r1, r2
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7ff fc2a 	bl	8010438 <SecureFrame>
 8010be4:	4603      	mov	r3, r0
 8010be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8010bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d002      	beq.n	8010bf8 <SendFrameOnChannel+0xf8>
    {
        return status;
 8010bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bf6:	e022      	b.n	8010c3e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010bf8:	4b14      	ldr	r3, [pc, #80]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010bfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010bfe:	f043 0302 	orr.w	r3, r3, #2
 8010c02:	4a12      	ldr	r2, [pc, #72]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c04:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8010c08:	4b10      	ldr	r3, [pc, #64]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c0a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010c0e:	3301      	adds	r3, #1
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	4b0e      	ldr	r3, [pc, #56]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c14:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010c18:	4b0c      	ldr	r3, [pc, #48]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c1a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8010c1e:	4b0b      	ldr	r3, [pc, #44]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c20:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8010c24:	4b09      	ldr	r3, [pc, #36]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c26:	2200      	movs	r2, #0
 8010c28:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010c2c:	4b09      	ldr	r3, [pc, #36]	; (8010c54 <SendFrameOnChannel+0x154>)
 8010c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c30:	4a06      	ldr	r2, [pc, #24]	; (8010c4c <SendFrameOnChannel+0x14c>)
 8010c32:	8812      	ldrh	r2, [r2, #0]
 8010c34:	b2d2      	uxtb	r2, r2
 8010c36:	4611      	mov	r1, r2
 8010c38:	4807      	ldr	r0, [pc, #28]	; (8010c58 <SendFrameOnChannel+0x158>)
 8010c3a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3728      	adds	r7, #40	; 0x28
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	20000ba4 	.word	0x20000ba4
 8010c4c:	20000688 	.word	0x20000688
 8010c50:	20000aa4 	.word	0x20000aa4
 8010c54:	0801cbcc 	.word	0x0801cbcc
 8010c58:	2000068a 	.word	0x2000068a

08010c5c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	6039      	str	r1, [r7, #0]
 8010c66:	80fb      	strh	r3, [r7, #6]
 8010c68:	4613      	mov	r3, r2
 8010c6a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010c6c:	4b09      	ldr	r3, [pc, #36]	; (8010c94 <SetTxContinuousWave+0x38>)
 8010c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c70:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010c74:	88fa      	ldrh	r2, [r7, #6]
 8010c76:	6838      	ldr	r0, [r7, #0]
 8010c78:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010c7a:	4b07      	ldr	r3, [pc, #28]	; (8010c98 <SetTxContinuousWave+0x3c>)
 8010c7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c80:	f043 0302 	orr.w	r3, r3, #2
 8010c84:	4a04      	ldr	r2, [pc, #16]	; (8010c98 <SetTxContinuousWave+0x3c>)
 8010c86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	0801cbcc 	.word	0x0801cbcc
 8010c98:	20000688 	.word	0x20000688

08010c9c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010ca6:	4b49      	ldr	r3, [pc, #292]	; (8010dcc <RestoreNvmData+0x130>)
 8010ca8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d001      	beq.n	8010cb4 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e087      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010cb4:	2124      	movs	r1, #36	; 0x24
 8010cb6:	4846      	ldr	r0, [pc, #280]	; (8010dd0 <RestoreNvmData+0x134>)
 8010cb8:	f006 fade 	bl	8017278 <Crc32>
 8010cbc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010cbe:	4b44      	ldr	r3, [pc, #272]	; (8010dd0 <RestoreNvmData+0x134>)
 8010cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d001      	beq.n	8010ccc <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010cc8:	2317      	movs	r3, #23
 8010cca:	e07b      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010ccc:	211c      	movs	r1, #28
 8010cce:	4841      	ldr	r0, [pc, #260]	; (8010dd4 <RestoreNvmData+0x138>)
 8010cd0:	f006 fad2 	bl	8017278 <Crc32>
 8010cd4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010cd6:	4b3e      	ldr	r3, [pc, #248]	; (8010dd0 <RestoreNvmData+0x134>)
 8010cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d001      	beq.n	8010ce4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ce0:	2317      	movs	r3, #23
 8010ce2:	e06f      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010ce8:	483b      	ldr	r0, [pc, #236]	; (8010dd8 <RestoreNvmData+0x13c>)
 8010cea:	f006 fac5 	bl	8017278 <Crc32>
 8010cee:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010cf0:	4b37      	ldr	r3, [pc, #220]	; (8010dd0 <RestoreNvmData+0x134>)
 8010cf2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d001      	beq.n	8010d00 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010cfc:	2317      	movs	r3, #23
 8010cfe:	e061      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010d00:	21d4      	movs	r1, #212	; 0xd4
 8010d02:	4836      	ldr	r0, [pc, #216]	; (8010ddc <RestoreNvmData+0x140>)
 8010d04:	f006 fab8 	bl	8017278 <Crc32>
 8010d08:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8010d0a:	4b31      	ldr	r3, [pc, #196]	; (8010dd0 <RestoreNvmData+0x134>)
 8010d0c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d001      	beq.n	8010d1a <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010d16:	2317      	movs	r3, #23
 8010d18:	e054      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8010d1a:	2110      	movs	r1, #16
 8010d1c:	4830      	ldr	r0, [pc, #192]	; (8010de0 <RestoreNvmData+0x144>)
 8010d1e:	f006 faab 	bl	8017278 <Crc32>
 8010d22:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010d24:	4b2a      	ldr	r3, [pc, #168]	; (8010dd0 <RestoreNvmData+0x134>)
 8010d26:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d001      	beq.n	8010d34 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010d30:	2317      	movs	r3, #23
 8010d32:	e047      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8010d34:	f44f 715e 	mov.w	r1, #888	; 0x378
 8010d38:	482a      	ldr	r0, [pc, #168]	; (8010de4 <RestoreNvmData+0x148>)
 8010d3a:	f006 fa9d 	bl	8017278 <Crc32>
 8010d3e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8010d40:	4b23      	ldr	r3, [pc, #140]	; (8010dd0 <RestoreNvmData+0x134>)
 8010d42:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d001      	beq.n	8010d50 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010d4c:	2317      	movs	r3, #23
 8010d4e:	e039      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010d50:	2114      	movs	r1, #20
 8010d52:	4825      	ldr	r0, [pc, #148]	; (8010de8 <RestoreNvmData+0x14c>)
 8010d54:	f006 fa90 	bl	8017278 <Crc32>
 8010d58:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010d5a:	4b1d      	ldr	r3, [pc, #116]	; (8010dd0 <RestoreNvmData+0x134>)
 8010d5c:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d001      	beq.n	8010d6a <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010d66:	2317      	movs	r3, #23
 8010d68:	e02c      	b.n	8010dc4 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010d6a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010d6e:	4918      	ldr	r1, [pc, #96]	; (8010dd0 <RestoreNvmData+0x134>)
 8010d70:	481e      	ldr	r0, [pc, #120]	; (8010dec <RestoreNvmData+0x150>)
 8010d72:	f006 fa2c 	bl	80171ce <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010d76:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	4814      	ldr	r0, [pc, #80]	; (8010dd0 <RestoreNvmData+0x134>)
 8010d7e:	f006 fa61 	bl	8017244 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010d82:	4b12      	ldr	r3, [pc, #72]	; (8010dcc <RestoreNvmData+0x130>)
 8010d84:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010d88:	4b10      	ldr	r3, [pc, #64]	; (8010dcc <RestoreNvmData+0x130>)
 8010d8a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010d8e:	4b17      	ldr	r3, [pc, #92]	; (8010dec <RestoreNvmData+0x150>)
 8010d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d92:	4a0e      	ldr	r2, [pc, #56]	; (8010dcc <RestoreNvmData+0x130>)
 8010d94:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010d98:	4b14      	ldr	r3, [pc, #80]	; (8010dec <RestoreNvmData+0x150>)
 8010d9a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010d9e:	4b0b      	ldr	r3, [pc, #44]	; (8010dcc <RestoreNvmData+0x130>)
 8010da0:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010da4:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <RestoreNvmData+0x130>)
 8010da6:	2201      	movs	r2, #1
 8010da8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010dac:	4b07      	ldr	r3, [pc, #28]	; (8010dcc <RestoreNvmData+0x130>)
 8010dae:	2202      	movs	r2, #2
 8010db0:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010db4:	4b0e      	ldr	r3, [pc, #56]	; (8010df0 <RestoreNvmData+0x154>)
 8010db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010db8:	4a0c      	ldr	r2, [pc, #48]	; (8010dec <RestoreNvmData+0x150>)
 8010dba:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	20000688 	.word	0x20000688
 8010dd0:	20001170 	.word	0x20001170
 8010dd4:	20001198 	.word	0x20001198
 8010dd8:	200011b8 	.word	0x200011b8
 8010ddc:	200012bc 	.word	0x200012bc
 8010de0:	20001394 	.word	0x20001394
 8010de4:	200013a8 	.word	0x200013a8
 8010de8:	20001724 	.word	0x20001724
 8010dec:	20000ba4 	.word	0x20000ba4
 8010df0:	0801cbcc 	.word	0x0801cbcc

08010df4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <DetermineFrameType+0x16>
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d101      	bne.n	8010e0e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e0a:	2303      	movs	r3, #3
 8010e0c:	e03b      	b.n	8010e86 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	7b1b      	ldrb	r3, [r3, #12]
 8010e12:	f003 030f 	and.w	r3, r3, #15
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d008      	beq.n	8010e2e <DetermineFrameType+0x3a>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	701a      	strb	r2, [r3, #0]
 8010e2c:	e02a      	b.n	8010e84 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d103      	bne.n	8010e40 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	701a      	strb	r2, [r3, #0]
 8010e3e:	e021      	b.n	8010e84 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	7b1b      	ldrb	r3, [r3, #12]
 8010e44:	f003 030f 	and.w	r3, r3, #15
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d108      	bne.n	8010e60 <DetermineFrameType+0x6c>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d103      	bne.n	8010e60 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	2202      	movs	r2, #2
 8010e5c:	701a      	strb	r2, [r3, #0]
 8010e5e:	e011      	b.n	8010e84 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	7b1b      	ldrb	r3, [r3, #12]
 8010e64:	f003 030f 	and.w	r3, r3, #15
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d108      	bne.n	8010e80 <DetermineFrameType+0x8c>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d003      	beq.n	8010e80 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	2203      	movs	r2, #3
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	e001      	b.n	8010e84 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010e80:	2318      	movs	r3, #24
 8010e82:	e000      	b.n	8010e86 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	370c      	adds	r7, #12
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bc80      	pop	{r7}
 8010e8e:	4770      	bx	lr

08010e90 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	4603      	mov	r3, r0
 8010e98:	460a      	mov	r2, r1
 8010e9a:	71fb      	strb	r3, [r7, #7]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010ea0:	79fa      	ldrb	r2, [r7, #7]
 8010ea2:	79bb      	ldrb	r3, [r7, #6]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d301      	bcc.n	8010eac <CheckRetrans+0x1c>
    {
        return true;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	e000      	b.n	8010eae <CheckRetrans+0x1e>
    }
    return false;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bc80      	pop	{r7}
 8010eb6:	4770      	bx	lr

08010eb8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010ebc:	4b12      	ldr	r3, [pc, #72]	; (8010f08 <CheckRetransUnconfirmedUplink+0x50>)
 8010ebe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010ec2:	4a12      	ldr	r2, [pc, #72]	; (8010f0c <CheckRetransUnconfirmedUplink+0x54>)
 8010ec4:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8010ec8:	4611      	mov	r1, r2
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ff ffe0 	bl	8010e90 <CheckRetrans>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e014      	b.n	8010f04 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010eda:	4b0b      	ldr	r3, [pc, #44]	; (8010f08 <CheckRetransUnconfirmedUplink+0x50>)
 8010edc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010ee0:	f003 0302 	and.w	r3, r3, #2
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00b      	beq.n	8010f02 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010eea:	4b07      	ldr	r3, [pc, #28]	; (8010f08 <CheckRetransUnconfirmedUplink+0x50>)
 8010eec:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d004      	beq.n	8010efe <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010ef4:	4b04      	ldr	r3, [pc, #16]	; (8010f08 <CheckRetransUnconfirmedUplink+0x50>)
 8010ef6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d101      	bne.n	8010f02 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8010efe:	2301      	movs	r3, #1
 8010f00:	e000      	b.n	8010f04 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8010f02:	2300      	movs	r3, #0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	20000688 	.word	0x20000688
 8010f0c:	20000ba4 	.word	0x20000ba4

08010f10 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010f14:	4b10      	ldr	r3, [pc, #64]	; (8010f58 <CheckRetransConfirmedUplink+0x48>)
 8010f16:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010f1a:	4a10      	ldr	r2, [pc, #64]	; (8010f5c <CheckRetransConfirmedUplink+0x4c>)
 8010f1c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8010f20:	4611      	mov	r1, r2
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff ffb4 	bl	8010e90 <CheckRetrans>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d001      	beq.n	8010f32 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e00f      	b.n	8010f52 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010f32:	4b09      	ldr	r3, [pc, #36]	; (8010f58 <CheckRetransConfirmedUplink+0x48>)
 8010f34:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010f38:	f003 0302 	and.w	r3, r3, #2
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d006      	beq.n	8010f50 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010f42:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <CheckRetransConfirmedUplink+0x48>)
 8010f44:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d001      	beq.n	8010f50 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	e000      	b.n	8010f52 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	20000688 	.word	0x20000688
 8010f5c:	20000ba4 	.word	0x20000ba4

08010f60 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f6e:	d002      	beq.n	8010f76 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	3301      	adds	r3, #1
 8010f74:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010f76:	687b      	ldr	r3, [r7, #4]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bc80      	pop	{r7}
 8010f80:	4770      	bx	lr
	...

08010f84 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010f88:	4b1a      	ldr	r3, [pc, #104]	; (8010ff4 <StopRetransmission+0x70>)
 8010f8a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010f8e:	f003 0302 	and.w	r3, r3, #2
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d009      	beq.n	8010fac <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010f98:	4b16      	ldr	r3, [pc, #88]	; (8010ff4 <StopRetransmission+0x70>)
 8010f9a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d011      	beq.n	8010fc6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010fa2:	4b14      	ldr	r3, [pc, #80]	; (8010ff4 <StopRetransmission+0x70>)
 8010fa4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	d00c      	beq.n	8010fc6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010fac:	4b12      	ldr	r3, [pc, #72]	; (8010ff8 <StopRetransmission+0x74>)
 8010fae:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d007      	beq.n	8010fc6 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010fb6:	4b10      	ldr	r3, [pc, #64]	; (8010ff8 <StopRetransmission+0x74>)
 8010fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7ff ffd0 	bl	8010f60 <IncreaseAdrAckCounter>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	4a0d      	ldr	r2, [pc, #52]	; (8010ff8 <StopRetransmission+0x74>)
 8010fc4:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010fc6:	4b0b      	ldr	r3, [pc, #44]	; (8010ff4 <StopRetransmission+0x70>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8010fce:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <StopRetransmission+0x70>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010fd6:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <StopRetransmission+0x70>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010fde:	4b05      	ldr	r3, [pc, #20]	; (8010ff4 <StopRetransmission+0x70>)
 8010fe0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010fe4:	f023 0302 	bic.w	r3, r3, #2
 8010fe8:	4a02      	ldr	r2, [pc, #8]	; (8010ff4 <StopRetransmission+0x70>)
 8010fea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010fee:	2301      	movs	r3, #1
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	20000688 	.word	0x20000688
 8010ff8:	20000ba4 	.word	0x20000ba4

08010ffc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011000:	4b08      	ldr	r3, [pc, #32]	; (8011024 <OnMacProcessNotify+0x28>)
 8011002:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011006:	2b00      	cmp	r3, #0
 8011008:	d00a      	beq.n	8011020 <OnMacProcessNotify+0x24>
 801100a:	4b06      	ldr	r3, [pc, #24]	; (8011024 <OnMacProcessNotify+0x28>)
 801100c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011010:	695b      	ldr	r3, [r3, #20]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d004      	beq.n	8011020 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011016:	4b03      	ldr	r3, [pc, #12]	; (8011024 <OnMacProcessNotify+0x28>)
 8011018:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801101c:	695b      	ldr	r3, [r3, #20]
 801101e:	4798      	blx	r3
    }
}
 8011020:	bf00      	nop
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20000688 	.word	0x20000688

08011028 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	4603      	mov	r3, r0
 8011030:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011032:	4b0b      	ldr	r3, [pc, #44]	; (8011060 <CallNvmDataChangeCallback+0x38>)
 8011034:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011038:	2b00      	cmp	r3, #0
 801103a:	d00c      	beq.n	8011056 <CallNvmDataChangeCallback+0x2e>
 801103c:	4b08      	ldr	r3, [pc, #32]	; (8011060 <CallNvmDataChangeCallback+0x38>)
 801103e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d006      	beq.n	8011056 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011048:	4b05      	ldr	r3, [pc, #20]	; (8011060 <CallNvmDataChangeCallback+0x38>)
 801104a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801104e:	691b      	ldr	r3, [r3, #16]
 8011050:	88fa      	ldrh	r2, [r7, #6]
 8011052:	4610      	mov	r0, r2
 8011054:	4798      	blx	r3
    }
}
 8011056:	bf00      	nop
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	20000688 	.word	0x20000688

08011064 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011064:	b480      	push	{r7}
 8011066:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011068:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <IsRequestPending+0x34>)
 801106a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801106e:	f003 0304 	and.w	r3, r3, #4
 8011072:	b2db      	uxtb	r3, r3
 8011074:	2b00      	cmp	r3, #0
 8011076:	d107      	bne.n	8011088 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011078:	4b07      	ldr	r3, [pc, #28]	; (8011098 <IsRequestPending+0x34>)
 801107a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801107e:	f003 0301 	and.w	r3, r3, #1
 8011082:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <IsRequestPending+0x28>
    {
        return 1;
 8011088:	2301      	movs	r3, #1
 801108a:	e000      	b.n	801108e <IsRequestPending+0x2a>
    }
    return 0;
 801108c:	2300      	movs	r3, #0
}
 801108e:	4618      	mov	r0, r3
 8011090:	46bd      	mov	sp, r7
 8011092:	bc80      	pop	{r7}
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	20000688 	.word	0x20000688

0801109c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801109c:	b590      	push	{r4, r7, lr}
 801109e:	b091      	sub	sp, #68	; 0x44
 80110a0:	af02      	add	r7, sp, #8
 80110a2:	6178      	str	r0, [r7, #20]
 80110a4:	6139      	str	r1, [r7, #16]
 80110a6:	4613      	mov	r3, r2
 80110a8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <LoRaMacInitialization+0x1a>
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d101      	bne.n	80110ba <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80110b6:	2303      	movs	r3, #3
 80110b8:	e27a      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00b      	beq.n	80110da <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d007      	beq.n	80110da <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d003      	beq.n	80110da <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80110da:	2303      	movs	r3, #3
 80110dc:	e268      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80110de:	7bfb      	ldrb	r3, [r7, #15]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f003 fcac 	bl	8014a3e <RegionIsActive>
 80110e6:	4603      	mov	r3, r0
 80110e8:	f083 0301 	eor.w	r3, r3, #1
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d001      	beq.n	80110f6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80110f2:	2309      	movs	r3, #9
 80110f4:	e25c      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80110f6:	6978      	ldr	r0, [r7, #20]
 80110f8:	f002 f932 	bl	8013360 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80110fc:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011100:	2100      	movs	r1, #0
 8011102:	48c7      	ldr	r0, [pc, #796]	; (8011420 <LoRaMacInitialization+0x384>)
 8011104:	f006 f89e 	bl	8017244 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011108:	f240 521c 	movw	r2, #1308	; 0x51c
 801110c:	2100      	movs	r1, #0
 801110e:	48c5      	ldr	r0, [pc, #788]	; (8011424 <LoRaMacInitialization+0x388>)
 8011110:	f006 f898 	bl	8017244 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011114:	4ac2      	ldr	r2, [pc, #776]	; (8011420 <LoRaMacInitialization+0x384>)
 8011116:	7bfb      	ldrb	r3, [r7, #15]
 8011118:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801111c:	4bc0      	ldr	r3, [pc, #768]	; (8011420 <LoRaMacInitialization+0x384>)
 801111e:	2200      	movs	r2, #0
 8011120:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8011124:	4bbe      	ldr	r3, [pc, #760]	; (8011420 <LoRaMacInitialization+0x384>)
 8011126:	2200      	movs	r2, #0
 8011128:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801112c:	4bbc      	ldr	r3, [pc, #752]	; (8011420 <LoRaMacInitialization+0x384>)
 801112e:	4abe      	ldr	r2, [pc, #760]	; (8011428 <LoRaMacInitialization+0x38c>)
 8011130:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011134:	2300      	movs	r3, #0
 8011136:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801113a:	4bbc      	ldr	r3, [pc, #752]	; (801142c <LoRaMacInitialization+0x390>)
 801113c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801113e:	4bbc      	ldr	r3, [pc, #752]	; (8011430 <LoRaMacInitialization+0x394>)
 8011140:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011142:	4bbc      	ldr	r3, [pc, #752]	; (8011434 <LoRaMacInitialization+0x398>)
 8011144:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011146:	4bb6      	ldr	r3, [pc, #728]	; (8011420 <LoRaMacInitialization+0x384>)
 8011148:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801114c:	f107 021c 	add.w	r2, r7, #28
 8011150:	4611      	mov	r1, r2
 8011152:	4618      	mov	r0, r3
 8011154:	f003 fcac 	bl	8014ab0 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011158:	230f      	movs	r3, #15
 801115a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801115e:	4bb0      	ldr	r3, [pc, #704]	; (8011420 <LoRaMacInitialization+0x384>)
 8011160:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011164:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011168:	4611      	mov	r1, r2
 801116a:	4618      	mov	r0, r3
 801116c:	f003 fc77 	bl	8014a5e <RegionGetPhyParam>
 8011170:	4603      	mov	r3, r0
 8011172:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	2b00      	cmp	r3, #0
 8011178:	bf14      	ite	ne
 801117a:	2301      	movne	r3, #1
 801117c:	2300      	moveq	r3, #0
 801117e:	b2da      	uxtb	r2, r3
 8011180:	4ba7      	ldr	r3, [pc, #668]	; (8011420 <LoRaMacInitialization+0x384>)
 8011182:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011186:	230a      	movs	r3, #10
 8011188:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801118c:	4ba4      	ldr	r3, [pc, #656]	; (8011420 <LoRaMacInitialization+0x384>)
 801118e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011192:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011196:	4611      	mov	r1, r2
 8011198:	4618      	mov	r0, r3
 801119a:	f003 fc60 	bl	8014a5e <RegionGetPhyParam>
 801119e:	4603      	mov	r3, r0
 80111a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	b25a      	sxtb	r2, r3
 80111a6:	4b9e      	ldr	r3, [pc, #632]	; (8011420 <LoRaMacInitialization+0x384>)
 80111a8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80111ac:	2306      	movs	r3, #6
 80111ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80111b2:	4b9b      	ldr	r3, [pc, #620]	; (8011420 <LoRaMacInitialization+0x384>)
 80111b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80111bc:	4611      	mov	r1, r2
 80111be:	4618      	mov	r0, r3
 80111c0:	f003 fc4d 	bl	8014a5e <RegionGetPhyParam>
 80111c4:	4603      	mov	r3, r0
 80111c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80111c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ca:	b25a      	sxtb	r2, r3
 80111cc:	4b94      	ldr	r3, [pc, #592]	; (8011420 <LoRaMacInitialization+0x384>)
 80111ce:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80111d2:	2310      	movs	r3, #16
 80111d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80111d8:	4b91      	ldr	r3, [pc, #580]	; (8011420 <LoRaMacInitialization+0x384>)
 80111da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80111e2:	4611      	mov	r1, r2
 80111e4:	4618      	mov	r0, r3
 80111e6:	f003 fc3a 	bl	8014a5e <RegionGetPhyParam>
 80111ea:	4603      	mov	r3, r0
 80111ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80111ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f0:	4a8b      	ldr	r2, [pc, #556]	; (8011420 <LoRaMacInitialization+0x384>)
 80111f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80111f6:	2311      	movs	r3, #17
 80111f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80111fc:	4b88      	ldr	r3, [pc, #544]	; (8011420 <LoRaMacInitialization+0x384>)
 80111fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011202:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f003 fc28 	bl	8014a5e <RegionGetPhyParam>
 801120e:	4603      	mov	r3, r0
 8011210:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	4a82      	ldr	r2, [pc, #520]	; (8011420 <LoRaMacInitialization+0x384>)
 8011216:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801121a:	2312      	movs	r3, #18
 801121c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011220:	4b7f      	ldr	r3, [pc, #508]	; (8011420 <LoRaMacInitialization+0x384>)
 8011222:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011226:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801122a:	4611      	mov	r1, r2
 801122c:	4618      	mov	r0, r3
 801122e:	f003 fc16 	bl	8014a5e <RegionGetPhyParam>
 8011232:	4603      	mov	r3, r0
 8011234:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	4a79      	ldr	r2, [pc, #484]	; (8011420 <LoRaMacInitialization+0x384>)
 801123a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801123e:	2313      	movs	r3, #19
 8011240:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011244:	4b76      	ldr	r3, [pc, #472]	; (8011420 <LoRaMacInitialization+0x384>)
 8011246:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801124a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801124e:	4611      	mov	r1, r2
 8011250:	4618      	mov	r0, r3
 8011252:	f003 fc04 	bl	8014a5e <RegionGetPhyParam>
 8011256:	4603      	mov	r3, r0
 8011258:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125c:	4a70      	ldr	r2, [pc, #448]	; (8011420 <LoRaMacInitialization+0x384>)
 801125e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011262:	2314      	movs	r3, #20
 8011264:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011268:	4b6d      	ldr	r3, [pc, #436]	; (8011420 <LoRaMacInitialization+0x384>)
 801126a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801126e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011272:	4611      	mov	r1, r2
 8011274:	4618      	mov	r0, r3
 8011276:	f003 fbf2 	bl	8014a5e <RegionGetPhyParam>
 801127a:	4603      	mov	r3, r0
 801127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011280:	4a67      	ldr	r2, [pc, #412]	; (8011420 <LoRaMacInitialization+0x384>)
 8011282:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011286:	2316      	movs	r3, #22
 8011288:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801128c:	4b64      	ldr	r3, [pc, #400]	; (8011420 <LoRaMacInitialization+0x384>)
 801128e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011292:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011296:	4611      	mov	r1, r2
 8011298:	4618      	mov	r0, r3
 801129a:	f003 fbe0 	bl	8014a5e <RegionGetPhyParam>
 801129e:	4603      	mov	r3, r0
 80112a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80112a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	4b5e      	ldr	r3, [pc, #376]	; (8011420 <LoRaMacInitialization+0x384>)
 80112a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80112ac:	2317      	movs	r3, #23
 80112ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112b2:	4b5b      	ldr	r3, [pc, #364]	; (8011420 <LoRaMacInitialization+0x384>)
 80112b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80112bc:	4611      	mov	r1, r2
 80112be:	4618      	mov	r0, r3
 80112c0:	f003 fbcd 	bl	8014a5e <RegionGetPhyParam>
 80112c4:	4603      	mov	r3, r0
 80112c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80112c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ca:	4a55      	ldr	r2, [pc, #340]	; (8011420 <LoRaMacInitialization+0x384>)
 80112cc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80112d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d2:	4a53      	ldr	r2, [pc, #332]	; (8011420 <LoRaMacInitialization+0x384>)
 80112d4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80112d8:	2318      	movs	r3, #24
 80112da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112de:	4b50      	ldr	r3, [pc, #320]	; (8011420 <LoRaMacInitialization+0x384>)
 80112e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80112e8:	4611      	mov	r1, r2
 80112ea:	4618      	mov	r0, r3
 80112ec:	f003 fbb7 	bl	8014a5e <RegionGetPhyParam>
 80112f0:	4603      	mov	r3, r0
 80112f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	b2da      	uxtb	r2, r3
 80112f8:	4b49      	ldr	r3, [pc, #292]	; (8011420 <LoRaMacInitialization+0x384>)
 80112fa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	b2da      	uxtb	r2, r3
 8011302:	4b47      	ldr	r3, [pc, #284]	; (8011420 <LoRaMacInitialization+0x384>)
 8011304:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011308:	231d      	movs	r3, #29
 801130a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801130e:	4b44      	ldr	r3, [pc, #272]	; (8011420 <LoRaMacInitialization+0x384>)
 8011310:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011314:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011318:	4611      	mov	r1, r2
 801131a:	4618      	mov	r0, r3
 801131c:	f003 fb9f 	bl	8014a5e <RegionGetPhyParam>
 8011320:	4603      	mov	r3, r0
 8011322:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011326:	b2da      	uxtb	r2, r3
 8011328:	4b3d      	ldr	r3, [pc, #244]	; (8011420 <LoRaMacInitialization+0x384>)
 801132a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801132e:	231e      	movs	r3, #30
 8011330:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011334:	4b3a      	ldr	r3, [pc, #232]	; (8011420 <LoRaMacInitialization+0x384>)
 8011336:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801133a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801133e:	4611      	mov	r1, r2
 8011340:	4618      	mov	r0, r3
 8011342:	f003 fb8c 	bl	8014a5e <RegionGetPhyParam>
 8011346:	4603      	mov	r3, r0
 8011348:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	b2da      	uxtb	r2, r3
 801134e:	4b34      	ldr	r3, [pc, #208]	; (8011420 <LoRaMacInitialization+0x384>)
 8011350:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011354:	231f      	movs	r3, #31
 8011356:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801135a:	4b31      	ldr	r3, [pc, #196]	; (8011420 <LoRaMacInitialization+0x384>)
 801135c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011360:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011364:	4611      	mov	r1, r2
 8011366:	4618      	mov	r0, r3
 8011368:	f003 fb79 	bl	8014a5e <RegionGetPhyParam>
 801136c:	4603      	mov	r3, r0
 801136e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	4a2b      	ldr	r2, [pc, #172]	; (8011420 <LoRaMacInitialization+0x384>)
 8011374:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011378:	2320      	movs	r3, #32
 801137a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801137e:	4b28      	ldr	r3, [pc, #160]	; (8011420 <LoRaMacInitialization+0x384>)
 8011380:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011384:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011388:	4611      	mov	r1, r2
 801138a:	4618      	mov	r0, r3
 801138c:	f003 fb67 	bl	8014a5e <RegionGetPhyParam>
 8011390:	4603      	mov	r3, r0
 8011392:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011396:	4a22      	ldr	r2, [pc, #136]	; (8011420 <LoRaMacInitialization+0x384>)
 8011398:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801139c:	230b      	movs	r3, #11
 801139e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113a2:	4b1f      	ldr	r3, [pc, #124]	; (8011420 <LoRaMacInitialization+0x384>)
 80113a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80113a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113ac:	4611      	mov	r1, r2
 80113ae:	4618      	mov	r0, r3
 80113b0:	f003 fb55 	bl	8014a5e <RegionGetPhyParam>
 80113b4:	4603      	mov	r3, r0
 80113b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	4b18      	ldr	r3, [pc, #96]	; (8011420 <LoRaMacInitialization+0x384>)
 80113be:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80113c2:	230c      	movs	r3, #12
 80113c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113c8:	4b15      	ldr	r3, [pc, #84]	; (8011420 <LoRaMacInitialization+0x384>)
 80113ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80113ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113d2:	4611      	mov	r1, r2
 80113d4:	4618      	mov	r0, r3
 80113d6:	f003 fb42 	bl	8014a5e <RegionGetPhyParam>
 80113da:	4603      	mov	r3, r0
 80113dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80113de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e0:	b29a      	uxth	r2, r3
 80113e2:	4b0f      	ldr	r3, [pc, #60]	; (8011420 <LoRaMacInitialization+0x384>)
 80113e4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80113e8:	4b0d      	ldr	r3, [pc, #52]	; (8011420 <LoRaMacInitialization+0x384>)
 80113ea:	2201      	movs	r2, #1
 80113ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80113f0:	4b0b      	ldr	r3, [pc, #44]	; (8011420 <LoRaMacInitialization+0x384>)
 80113f2:	220a      	movs	r2, #10
 80113f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80113f8:	4b09      	ldr	r3, [pc, #36]	; (8011420 <LoRaMacInitialization+0x384>)
 80113fa:	2206      	movs	r2, #6
 80113fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011400:	4b07      	ldr	r3, [pc, #28]	; (8011420 <LoRaMacInitialization+0x384>)
 8011402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011406:	4a06      	ldr	r2, [pc, #24]	; (8011420 <LoRaMacInitialization+0x384>)
 8011408:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801140a:	4b05      	ldr	r3, [pc, #20]	; (8011420 <LoRaMacInitialization+0x384>)
 801140c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8011410:	4b03      	ldr	r3, [pc, #12]	; (8011420 <LoRaMacInitialization+0x384>)
 8011412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011416:	4b02      	ldr	r3, [pc, #8]	; (8011420 <LoRaMacInitialization+0x384>)
 8011418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801141c:	e00c      	b.n	8011438 <LoRaMacInitialization+0x39c>
 801141e:	bf00      	nop
 8011420:	20000ba4 	.word	0x20000ba4
 8011424:	20000688 	.word	0x20000688
 8011428:	01000400 	.word	0x01000400
 801142c:	20000dc8 	.word	0x20000dc8
 8011430:	20000ddc 	.word	0x20000ddc
 8011434:	2000173c 	.word	0x2000173c
 8011438:	4a5f      	ldr	r2, [pc, #380]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801143a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801143c:	4b5e      	ldr	r3, [pc, #376]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801143e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011442:	4a5d      	ldr	r2, [pc, #372]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011444:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011446:	4b5c      	ldr	r3, [pc, #368]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801144c:	4a5a      	ldr	r2, [pc, #360]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801144e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011450:	4b59      	ldr	r3, [pc, #356]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011456:	4a58      	ldr	r2, [pc, #352]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011458:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801145a:	4b57      	ldr	r3, [pc, #348]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801145c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011460:	4a55      	ldr	r2, [pc, #340]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011462:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011464:	4b54      	ldr	r3, [pc, #336]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011466:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801146a:	4b53      	ldr	r3, [pc, #332]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801146c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011470:	4b51      	ldr	r3, [pc, #324]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011472:	2201      	movs	r2, #1
 8011474:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011478:	4a50      	ldr	r2, [pc, #320]	; (80115bc <LoRaMacInitialization+0x520>)
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8011480:	2000      	movs	r0, #0
 8011482:	f7ff f869 	bl	8010558 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011486:	4b4c      	ldr	r3, [pc, #304]	; (80115b8 <LoRaMacInitialization+0x51c>)
 8011488:	2201      	movs	r2, #1
 801148a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 801148e:	4a4b      	ldr	r2, [pc, #300]	; (80115bc <LoRaMacInitialization+0x520>)
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011496:	4b49      	ldr	r3, [pc, #292]	; (80115bc <LoRaMacInitialization+0x520>)
 8011498:	2200      	movs	r2, #0
 801149a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 801149e:	4b47      	ldr	r3, [pc, #284]	; (80115bc <LoRaMacInitialization+0x520>)
 80114a0:	2201      	movs	r2, #1
 80114a2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80114a6:	4b44      	ldr	r3, [pc, #272]	; (80115b8 <LoRaMacInitialization+0x51c>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80114ac:	4b42      	ldr	r3, [pc, #264]	; (80115b8 <LoRaMacInitialization+0x51c>)
 80114ae:	2200      	movs	r2, #0
 80114b0:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80114b2:	2300      	movs	r3, #0
 80114b4:	9300      	str	r3, [sp, #0]
 80114b6:	4b42      	ldr	r3, [pc, #264]	; (80115c0 <LoRaMacInitialization+0x524>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80114be:	4841      	ldr	r0, [pc, #260]	; (80115c4 <LoRaMacInitialization+0x528>)
 80114c0:	f009 ff7c 	bl	801b3bc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80114c4:	2300      	movs	r3, #0
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	4b3f      	ldr	r3, [pc, #252]	; (80115c8 <LoRaMacInitialization+0x52c>)
 80114ca:	2200      	movs	r2, #0
 80114cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80114d0:	483e      	ldr	r0, [pc, #248]	; (80115cc <LoRaMacInitialization+0x530>)
 80114d2:	f009 ff73 	bl	801b3bc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80114d6:	2300      	movs	r3, #0
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	4b3d      	ldr	r3, [pc, #244]	; (80115d0 <LoRaMacInitialization+0x534>)
 80114dc:	2200      	movs	r2, #0
 80114de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80114e2:	483c      	ldr	r0, [pc, #240]	; (80115d4 <LoRaMacInitialization+0x538>)
 80114e4:	f009 ff6a 	bl	801b3bc <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80114e8:	2300      	movs	r3, #0
 80114ea:	9300      	str	r3, [sp, #0]
 80114ec:	4b3a      	ldr	r3, [pc, #232]	; (80115d8 <LoRaMacInitialization+0x53c>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80114f4:	4839      	ldr	r0, [pc, #228]	; (80115dc <LoRaMacInitialization+0x540>)
 80114f6:	f009 ff61 	bl	801b3bc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80114fa:	4c2f      	ldr	r4, [pc, #188]	; (80115b8 <LoRaMacInitialization+0x51c>)
 80114fc:	463b      	mov	r3, r7
 80114fe:	4618      	mov	r0, r3
 8011500:	f009 fad0 	bl	801aaa4 <SysTimeGetMcuTime>
 8011504:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8011508:	463a      	mov	r2, r7
 801150a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801150e:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011512:	4b33      	ldr	r3, [pc, #204]	; (80115e0 <LoRaMacInitialization+0x544>)
 8011514:	2200      	movs	r2, #0
 8011516:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011518:	4b28      	ldr	r3, [pc, #160]	; (80115bc <LoRaMacInitialization+0x520>)
 801151a:	4a32      	ldr	r2, [pc, #200]	; (80115e4 <LoRaMacInitialization+0x548>)
 801151c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011520:	4b26      	ldr	r3, [pc, #152]	; (80115bc <LoRaMacInitialization+0x520>)
 8011522:	4a31      	ldr	r2, [pc, #196]	; (80115e8 <LoRaMacInitialization+0x54c>)
 8011524:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011528:	4b24      	ldr	r3, [pc, #144]	; (80115bc <LoRaMacInitialization+0x520>)
 801152a:	4a30      	ldr	r2, [pc, #192]	; (80115ec <LoRaMacInitialization+0x550>)
 801152c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011530:	4b22      	ldr	r3, [pc, #136]	; (80115bc <LoRaMacInitialization+0x520>)
 8011532:	4a2f      	ldr	r2, [pc, #188]	; (80115f0 <LoRaMacInitialization+0x554>)
 8011534:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011538:	4b20      	ldr	r3, [pc, #128]	; (80115bc <LoRaMacInitialization+0x520>)
 801153a:	4a2e      	ldr	r2, [pc, #184]	; (80115f4 <LoRaMacInitialization+0x558>)
 801153c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011540:	4b2d      	ldr	r3, [pc, #180]	; (80115f8 <LoRaMacInitialization+0x55c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	482d      	ldr	r0, [pc, #180]	; (80115fc <LoRaMacInitialization+0x560>)
 8011546:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011548:	482d      	ldr	r0, [pc, #180]	; (8011600 <LoRaMacInitialization+0x564>)
 801154a:	f7fa fa2b 	bl	800b9a4 <SecureElementInit>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d001      	beq.n	8011558 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011554:	2311      	movs	r3, #17
 8011556:	e02b      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011558:	4817      	ldr	r0, [pc, #92]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801155a:	f002 fbc1 	bl	8013ce0 <LoRaMacCryptoInit>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011564:	2311      	movs	r3, #17
 8011566:	e023      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011568:	f001 fcbc 	bl	8012ee4 <LoRaMacCommandsInit>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d001      	beq.n	8011576 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011572:	2313      	movs	r3, #19
 8011574:	e01c      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011576:	4823      	ldr	r0, [pc, #140]	; (8011604 <LoRaMacInitialization+0x568>)
 8011578:	f002 fc52 	bl	8013e20 <LoRaMacCryptoSetMulticastReference>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011582:	2311      	movs	r3, #17
 8011584:	e014      	b.n	80115b0 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011586:	4b1c      	ldr	r3, [pc, #112]	; (80115f8 <LoRaMacInitialization+0x55c>)
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	4798      	blx	r3
 801158c:	4603      	mov	r3, r0
 801158e:	4618      	mov	r0, r3
 8011590:	f005 fdf8 	bl	8017184 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011594:	4b18      	ldr	r3, [pc, #96]	; (80115f8 <LoRaMacInitialization+0x55c>)
 8011596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011598:	4a07      	ldr	r2, [pc, #28]	; (80115b8 <LoRaMacInitialization+0x51c>)
 801159a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801159e:	4610      	mov	r0, r2
 80115a0:	4798      	blx	r3
    Radio.Sleep( );
 80115a2:	4b15      	ldr	r3, [pc, #84]	; (80115f8 <LoRaMacInitialization+0x55c>)
 80115a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80115a8:	2001      	movs	r0, #1
 80115aa:	f7fd fa7d 	bl	800eaa8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	373c      	adds	r7, #60	; 0x3c
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd90      	pop	{r4, r7, pc}
 80115b8:	20000ba4 	.word	0x20000ba4
 80115bc:	20000688 	.word	0x20000688
 80115c0:	0800f035 	.word	0x0800f035
 80115c4:	200009f0 	.word	0x200009f0
 80115c8:	0800f0c5 	.word	0x0800f0c5
 80115cc:	20000a08 	.word	0x20000a08
 80115d0:	0800f13d 	.word	0x0800f13d
 80115d4:	20000a20 	.word	0x20000a20
 80115d8:	0800f1bd 	.word	0x0800f1bd
 80115dc:	20000a88 	.word	0x20000a88
 80115e0:	200017cc 	.word	0x200017cc
 80115e4:	0800dae5 	.word	0x0800dae5
 80115e8:	0800db41 	.word	0x0800db41
 80115ec:	0800dbe1 	.word	0x0800dbe1
 80115f0:	0800dbb5 	.word	0x0800dbb5
 80115f4:	0800dbfd 	.word	0x0800dbfd
 80115f8:	0801cbcc 	.word	0x0801cbcc
 80115fc:	200009d4 	.word	0x200009d4
 8011600:	20000cf0 	.word	0x20000cf0
 8011604:	20000c8c 	.word	0x20000c8c

08011608 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011608:	b580      	push	{r7, lr}
 801160a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801160c:	4b04      	ldr	r3, [pc, #16]	; (8011620 <LoRaMacStart+0x18>)
 801160e:	2200      	movs	r2, #0
 8011610:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8011614:	f7fc fb08 	bl	800dc28 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	20000688 	.word	0x20000688

08011624 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011628:	f7fd fa06 	bl	800ea38 <LoRaMacIsBusy>
 801162c:	4603      	mov	r3, r0
 801162e:	f083 0301 	eor.w	r3, r3, #1
 8011632:	b2db      	uxtb	r3, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00d      	beq.n	8011654 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011638:	4b0b      	ldr	r3, [pc, #44]	; (8011668 <LoRaMacStop+0x44>)
 801163a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801163e:	2b02      	cmp	r3, #2
 8011640:	d102      	bne.n	8011648 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8011642:	4b0a      	ldr	r3, [pc, #40]	; (801166c <LoRaMacStop+0x48>)
 8011644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011646:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011648:	4b09      	ldr	r3, [pc, #36]	; (8011670 <LoRaMacStop+0x4c>)
 801164a:	2201      	movs	r2, #1
 801164c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011650:	2300      	movs	r3, #0
 8011652:	e007      	b.n	8011664 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011654:	4b06      	ldr	r3, [pc, #24]	; (8011670 <LoRaMacStop+0x4c>)
 8011656:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801165a:	2b01      	cmp	r3, #1
 801165c:	d101      	bne.n	8011662 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	e000      	b.n	8011664 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8011662:	2301      	movs	r3, #1
}
 8011664:	4618      	mov	r0, r3
 8011666:	bd80      	pop	{r7, pc}
 8011668:	20000ba4 	.word	0x20000ba4
 801166c:	0801cbcc 	.word	0x0801cbcc
 8011670:	20000688 	.word	0x20000688

08011674 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011674:	b580      	push	{r7, lr}
 8011676:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011678:	4812      	ldr	r0, [pc, #72]	; (80116c4 <LoRaMacHalt+0x50>)
 801167a:	f009 ff43 	bl	801b504 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801167e:	4812      	ldr	r0, [pc, #72]	; (80116c8 <LoRaMacHalt+0x54>)
 8011680:	f009 ff40 	bl	801b504 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011684:	4811      	ldr	r0, [pc, #68]	; (80116cc <LoRaMacHalt+0x58>)
 8011686:	f009 ff3d 	bl	801b504 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801168a:	4811      	ldr	r0, [pc, #68]	; (80116d0 <LoRaMacHalt+0x5c>)
 801168c:	f009 ff3a 	bl	801b504 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011690:	f001 fa8c 	bl	8012bac <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011694:	4b0f      	ldr	r3, [pc, #60]	; (80116d4 <LoRaMacHalt+0x60>)
 8011696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011698:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801169a:	4b0f      	ldr	r3, [pc, #60]	; (80116d8 <LoRaMacHalt+0x64>)
 801169c:	2200      	movs	r2, #0
 801169e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80116a2:	480e      	ldr	r0, [pc, #56]	; (80116dc <LoRaMacHalt+0x68>)
 80116a4:	f7fd fba2 	bl	800edec <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80116a8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80116ac:	490b      	ldr	r1, [pc, #44]	; (80116dc <LoRaMacHalt+0x68>)
 80116ae:	480c      	ldr	r0, [pc, #48]	; (80116e0 <LoRaMacHalt+0x6c>)
 80116b0:	f005 fd8d 	bl	80171ce <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80116b4:	4b08      	ldr	r3, [pc, #32]	; (80116d8 <LoRaMacHalt+0x64>)
 80116b6:	2201      	movs	r2, #1
 80116b8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80116bc:	2300      	movs	r3, #0
}
 80116be:	4618      	mov	r0, r3
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	200009f0 	.word	0x200009f0
 80116c8:	20000a08 	.word	0x20000a08
 80116cc:	20000a20 	.word	0x20000a20
 80116d0:	20000a88 	.word	0x20000a88
 80116d4:	0801cbcc 	.word	0x0801cbcc
 80116d8:	20000688 	.word	0x20000688
 80116dc:	20000ba4 	.word	0x20000ba4
 80116e0:	20001170 	.word	0x20001170

080116e4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80116e4:	b590      	push	{r4, r7, lr}
 80116e6:	b08d      	sub	sp, #52	; 0x34
 80116e8:	af02      	add	r7, sp, #8
 80116ea:	4603      	mov	r3, r0
 80116ec:	6039      	str	r1, [r7, #0]
 80116ee:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80116f0:	4b42      	ldr	r3, [pc, #264]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 80116f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80116f6:	4b41      	ldr	r3, [pc, #260]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 80116f8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80116fc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80116fe:	4b3f      	ldr	r3, [pc, #252]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 8011700:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8011704:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011706:	4b3e      	ldr	r3, [pc, #248]	; (8011800 <LoRaMacQueryTxPossible+0x11c>)
 8011708:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801170c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801170e:	2300      	movs	r3, #0
 8011710:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d101      	bne.n	801171c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011718:	2303      	movs	r3, #3
 801171a:	e06b      	b.n	80117f4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801171c:	2300      	movs	r3, #0
 801171e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011720:	4b36      	ldr	r3, [pc, #216]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 8011722:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011726:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011728:	4b34      	ldr	r3, [pc, #208]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 801172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801172c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801172e:	4b33      	ldr	r3, [pc, #204]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 8011730:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8011734:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011736:	4b31      	ldr	r3, [pc, #196]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 8011738:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801173c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801173e:	4b2f      	ldr	r3, [pc, #188]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 8011740:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011744:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011748:	4b2c      	ldr	r3, [pc, #176]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 801174a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801174e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011752:	4b2b      	ldr	r3, [pc, #172]	; (8011800 <LoRaMacQueryTxPossible+0x11c>)
 8011754:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801175c:	4b27      	ldr	r3, [pc, #156]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 801175e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011766:	4b25      	ldr	r3, [pc, #148]	; (80117fc <LoRaMacQueryTxPossible+0x118>)
 8011768:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801176c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011770:	f107 040d 	add.w	r4, r7, #13
 8011774:	f107 020e 	add.w	r2, r7, #14
 8011778:	f107 010f 	add.w	r1, r7, #15
 801177c:	f107 0014 	add.w	r0, r7, #20
 8011780:	f107 0310 	add.w	r3, r7, #16
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	4623      	mov	r3, r4
 8011788:	f001 f8da 	bl	8012940 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011790:	4618      	mov	r0, r3
 8011792:	f7fd fe59 	bl	800f448 <GetMaxAppPayloadWithoutFOptsLength>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801179e:	f107 0308 	add.w	r3, r7, #8
 80117a2:	4618      	mov	r0, r3
 80117a4:	f001 fca4 	bl	80130f0 <LoRaMacCommandsGetSizeSerializedCmds>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d001      	beq.n	80117b2 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80117ae:	2313      	movs	r3, #19
 80117b0:	e020      	b.n	80117f4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	2b0f      	cmp	r3, #15
 80117b6:	d819      	bhi.n	80117ec <LoRaMacQueryTxPossible+0x108>
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	785b      	ldrb	r3, [r3, #1]
 80117bc:	461a      	mov	r2, r3
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d313      	bcc.n	80117ec <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	785a      	ldrb	r2, [r3, #1]
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	1ad3      	subs	r3, r2, r3
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	785b      	ldrb	r3, [r3, #1]
 80117d8:	4619      	mov	r1, r3
 80117da:	79fa      	ldrb	r2, [r7, #7]
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	4413      	add	r3, r2
 80117e0:	4299      	cmp	r1, r3
 80117e2:	d301      	bcc.n	80117e8 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80117e4:	2300      	movs	r3, #0
 80117e6:	e005      	b.n	80117f4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80117e8:	2308      	movs	r3, #8
 80117ea:	e003      	b.n	80117f4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2200      	movs	r2, #0
 80117f0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80117f2:	2308      	movs	r3, #8
    }
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	372c      	adds	r7, #44	; 0x2c
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd90      	pop	{r4, r7, pc}
 80117fc:	20000ba4 	.word	0x20000ba4
 8011800:	20000688 	.word	0x20000688

08011804 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011804:	b590      	push	{r4, r7, lr}
 8011806:	b087      	sub	sp, #28
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801180c:	2300      	movs	r3, #0
 801180e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011816:	2303      	movs	r3, #3
 8011818:	e1c4      	b.n	8011ba4 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	2b41      	cmp	r3, #65	; 0x41
 8011820:	f200 81b9 	bhi.w	8011b96 <LoRaMacMibGetRequestConfirm+0x392>
 8011824:	a201      	add	r2, pc, #4	; (adr r2, 801182c <LoRaMacMibGetRequestConfirm+0x28>)
 8011826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182a:	bf00      	nop
 801182c:	08011935 	.word	0x08011935
 8011830:	08011941 	.word	0x08011941
 8011834:	0801194d 	.word	0x0801194d
 8011838:	08011959 	.word	0x08011959
 801183c:	08011965 	.word	0x08011965
 8011840:	08011971 	.word	0x08011971
 8011844:	0801197d 	.word	0x0801197d
 8011848:	08011b97 	.word	0x08011b97
 801184c:	08011b97 	.word	0x08011b97
 8011850:	08011b97 	.word	0x08011b97
 8011854:	08011b97 	.word	0x08011b97
 8011858:	08011b97 	.word	0x08011b97
 801185c:	08011b97 	.word	0x08011b97
 8011860:	08011b97 	.word	0x08011b97
 8011864:	08011b97 	.word	0x08011b97
 8011868:	08011991 	.word	0x08011991
 801186c:	0801199d 	.word	0x0801199d
 8011870:	080119a9 	.word	0x080119a9
 8011874:	080119cb 	.word	0x080119cb
 8011878:	080119dd 	.word	0x080119dd
 801187c:	080119ef 	.word	0x080119ef
 8011880:	08011a01 	.word	0x08011a01
 8011884:	08011a35 	.word	0x08011a35
 8011888:	08011a13 	.word	0x08011a13
 801188c:	08011a57 	.word	0x08011a57
 8011890:	08011a63 	.word	0x08011a63
 8011894:	08011a6d 	.word	0x08011a6d
 8011898:	08011a77 	.word	0x08011a77
 801189c:	08011a81 	.word	0x08011a81
 80118a0:	08011a8b 	.word	0x08011a8b
 80118a4:	08011a95 	.word	0x08011a95
 80118a8:	08011ac1 	.word	0x08011ac1
 80118ac:	08011acd 	.word	0x08011acd
 80118b0:	08011ae5 	.word	0x08011ae5
 80118b4:	08011ad9 	.word	0x08011ad9
 80118b8:	08011af1 	.word	0x08011af1
 80118bc:	08011afb 	.word	0x08011afb
 80118c0:	08011b07 	.word	0x08011b07
 80118c4:	08011b23 	.word	0x08011b23
 80118c8:	08011b13 	.word	0x08011b13
 80118cc:	08011b1b 	.word	0x08011b1b
 80118d0:	08011b97 	.word	0x08011b97
 80118d4:	08011b2f 	.word	0x08011b2f
 80118d8:	08011b97 	.word	0x08011b97
 80118dc:	08011b97 	.word	0x08011b97
 80118e0:	08011b97 	.word	0x08011b97
 80118e4:	08011b97 	.word	0x08011b97
 80118e8:	08011b97 	.word	0x08011b97
 80118ec:	08011b97 	.word	0x08011b97
 80118f0:	08011b97 	.word	0x08011b97
 80118f4:	08011b97 	.word	0x08011b97
 80118f8:	08011b97 	.word	0x08011b97
 80118fc:	08011b97 	.word	0x08011b97
 8011900:	08011b97 	.word	0x08011b97
 8011904:	08011b97 	.word	0x08011b97
 8011908:	08011b97 	.word	0x08011b97
 801190c:	08011b97 	.word	0x08011b97
 8011910:	08011b97 	.word	0x08011b97
 8011914:	08011b43 	.word	0x08011b43
 8011918:	08011b4f 	.word	0x08011b4f
 801191c:	08011b5b 	.word	0x08011b5b
 8011920:	08011b67 	.word	0x08011b67
 8011924:	08011b73 	.word	0x08011b73
 8011928:	08011b7f 	.word	0x08011b7f
 801192c:	08011b8b 	.word	0x08011b8b
 8011930:	08011b91 	.word	0x08011b91
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011934:	4b9d      	ldr	r3, [pc, #628]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011936:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	711a      	strb	r2, [r3, #4]
            break;
 801193e:	e130      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011940:	4b9a      	ldr	r3, [pc, #616]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011942:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	711a      	strb	r2, [r3, #4]
            break;
 801194a:	e12a      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	4618      	mov	r0, r3
 8011952:	f7fa fab5 	bl	800bec0 <SecureElementGetDevEui>
            break;
 8011956:	e124      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	4618      	mov	r0, r3
 801195e:	f7fa fadf 	bl	800bf20 <SecureElementGetJoinEui>
            break;
 8011962:	e11e      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011964:	4b91      	ldr	r3, [pc, #580]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011966:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	711a      	strb	r2, [r3, #4]
            break;
 801196e:	e118      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011970:	4b8e      	ldr	r3, [pc, #568]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011972:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	605a      	str	r2, [r3, #4]
            break;
 801197a:	e112      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801197c:	4b8b      	ldr	r3, [pc, #556]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 801197e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	3304      	adds	r3, #4
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fa fafb 	bl	800bf84 <SecureElementGetDevAddr>
            break;
 801198e:	e108      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011990:	4b86      	ldr	r3, [pc, #536]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011992:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	711a      	strb	r2, [r3, #4]
            break;
 801199a:	e102      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801199c:	4b83      	ldr	r3, [pc, #524]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 801199e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	711a      	strb	r2, [r3, #4]
            break;
 80119a6:	e0fc      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80119a8:	231c      	movs	r3, #28
 80119aa:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119ac:	4b7f      	ldr	r3, [pc, #508]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 80119ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119b2:	f107 0210 	add.w	r2, r7, #16
 80119b6:	4611      	mov	r1, r2
 80119b8:	4618      	mov	r0, r3
 80119ba:	f003 f850 	bl	8014a5e <RegionGetPhyParam>
 80119be:	4603      	mov	r3, r0
 80119c0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80119c2:	68fa      	ldr	r2, [r7, #12]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	605a      	str	r2, [r3, #4]
            break;
 80119c8:	e0eb      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4a77      	ldr	r2, [pc, #476]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 80119ce:	3304      	adds	r3, #4
 80119d0:	326c      	adds	r2, #108	; 0x6c
 80119d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119d6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80119da:	e0e2      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	4a73      	ldr	r2, [pc, #460]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 80119e0:	3304      	adds	r3, #4
 80119e2:	32b4      	adds	r2, #180	; 0xb4
 80119e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119e8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80119ec:	e0d9      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	4a6e      	ldr	r2, [pc, #440]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 80119f2:	3304      	adds	r3, #4
 80119f4:	3274      	adds	r2, #116	; 0x74
 80119f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119fa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80119fe:	e0d0      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4a6a      	ldr	r2, [pc, #424]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a04:	3304      	adds	r3, #4
 8011a06:	32bc      	adds	r2, #188	; 0xbc
 8011a08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a0c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011a10:	e0c7      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011a12:	231a      	movs	r3, #26
 8011a14:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a16:	4b65      	ldr	r3, [pc, #404]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a1c:	f107 0210 	add.w	r2, r7, #16
 8011a20:	4611      	mov	r1, r2
 8011a22:	4618      	mov	r0, r3
 8011a24:	f003 f81b 	bl	8014a5e <RegionGetPhyParam>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	605a      	str	r2, [r3, #4]
            break;
 8011a32:	e0b6      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011a34:	2319      	movs	r3, #25
 8011a36:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a38:	4b5c      	ldr	r3, [pc, #368]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a3e:	f107 0210 	add.w	r2, r7, #16
 8011a42:	4611      	mov	r1, r2
 8011a44:	4618      	mov	r0, r3
 8011a46:	f003 f80a 	bl	8014a5e <RegionGetPhyParam>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	605a      	str	r2, [r3, #4]
            break;
 8011a54:	e0a5      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011a56:	4b55      	ldr	r3, [pc, #340]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a58:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	711a      	strb	r2, [r3, #4]
            break;
 8011a60:	e09f      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011a62:	4b52      	ldr	r3, [pc, #328]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	605a      	str	r2, [r3, #4]
            break;
 8011a6a:	e09a      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011a6c:	4b4f      	ldr	r3, [pc, #316]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	605a      	str	r2, [r3, #4]
            break;
 8011a74:	e095      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011a76:	4b4d      	ldr	r3, [pc, #308]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	605a      	str	r2, [r3, #4]
            break;
 8011a7e:	e090      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011a80:	4b4a      	ldr	r3, [pc, #296]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	605a      	str	r2, [r3, #4]
            break;
 8011a88:	e08b      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011a8a:	4b48      	ldr	r3, [pc, #288]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	605a      	str	r2, [r3, #4]
            break;
 8011a92:	e086      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011a94:	2302      	movs	r3, #2
 8011a96:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a98:	4b44      	ldr	r3, [pc, #272]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011a9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011a9e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011aa0:	4b42      	ldr	r3, [pc, #264]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011aa6:	f107 0210 	add.w	r2, r7, #16
 8011aaa:	4611      	mov	r1, r2
 8011aac:	4618      	mov	r0, r3
 8011aae:	f002 ffd6 	bl	8014a5e <RegionGetPhyParam>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	b25a      	sxtb	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	711a      	strb	r2, [r3, #4]
            break;
 8011abe:	e070      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011ac0:	4b3a      	ldr	r3, [pc, #232]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011ac2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	711a      	strb	r2, [r3, #4]
            break;
 8011aca:	e06a      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011acc:	4b37      	ldr	r3, [pc, #220]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011ace:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	711a      	strb	r2, [r3, #4]
            break;
 8011ad6:	e064      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011ad8:	4b34      	ldr	r3, [pc, #208]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011ada:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	711a      	strb	r2, [r3, #4]
            break;
 8011ae2:	e05e      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011ae4:	4b31      	ldr	r3, [pc, #196]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011ae6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	711a      	strb	r2, [r3, #4]
            break;
 8011aee:	e058      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011af0:	4b2e      	ldr	r3, [pc, #184]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	605a      	str	r2, [r3, #4]
            break;
 8011af8:	e053      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011afa:	4b2c      	ldr	r3, [pc, #176]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011afc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	711a      	strb	r2, [r3, #4]
            break;
 8011b04:	e04d      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011b06:	4b29      	ldr	r3, [pc, #164]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b08:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	605a      	str	r2, [r3, #4]
            break;
 8011b10:	e047      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4a25      	ldr	r2, [pc, #148]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b16:	605a      	str	r2, [r3, #4]
            break;
 8011b18:	e043      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4a24      	ldr	r2, [pc, #144]	; (8011bb0 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8011b1e:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8011b20:	e03f      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011b22:	4b22      	ldr	r3, [pc, #136]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b24:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	605a      	str	r2, [r3, #4]
            break;
 8011b2c:	e039      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4a1e      	ldr	r2, [pc, #120]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b32:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8011b36:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011b38:	687c      	ldr	r4, [r7, #4]
 8011b3a:	f003 f907 	bl	8014d4c <RegionGetVersion>
 8011b3e:	60a0      	str	r0, [r4, #8]
            break;
 8011b40:	e02f      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011b42:	4b1a      	ldr	r3, [pc, #104]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	605a      	str	r2, [r3, #4]
            break;
 8011b4c:	e029      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011b4e:	4b17      	ldr	r3, [pc, #92]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b50:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	711a      	strb	r2, [r3, #4]
            break;
 8011b58:	e023      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011b5a:	4b14      	ldr	r3, [pc, #80]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b5c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	809a      	strh	r2, [r3, #4]
            break;
 8011b64:	e01d      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011b66:	4b11      	ldr	r3, [pc, #68]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b68:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	809a      	strh	r2, [r3, #4]
            break;
 8011b70:	e017      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8011b72:	4b0e      	ldr	r3, [pc, #56]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b74:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	809a      	strh	r2, [r3, #4]
            break;
 8011b7c:	e011      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8011b7e:	4b0b      	ldr	r3, [pc, #44]	; (8011bac <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011b80:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	809a      	strh	r2, [r3, #4]
            break;
 8011b88:	e00b      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011b8a:	2318      	movs	r3, #24
 8011b8c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011b8e:	e008      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011b90:	2318      	movs	r3, #24
 8011b92:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011b94:	e005      	b.n	8011ba2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f001 f81f 	bl	8012bda <LoRaMacClassBMibGetRequestConfirm>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8011ba0:	bf00      	nop
        }
    }
    return status;
 8011ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	371c      	adds	r7, #28
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd90      	pop	{r4, r7, pc}
 8011bac:	20000ba4 	.word	0x20000ba4
 8011bb0:	20001170 	.word	0x20001170

08011bb4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b086      	sub	sp, #24
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d101      	bne.n	8011bca <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bc6:	2303      	movs	r3, #3
 8011bc8:	e396      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011bca:	4bbd      	ldr	r3, [pc, #756]	; (8011ec0 <LoRaMacMibSetRequestConfirm+0x30c>)
 8011bcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bd0:	f003 0302 	and.w	r3, r3, #2
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	e38d      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	2b41      	cmp	r3, #65	; 0x41
 8011be2:	f200 835d 	bhi.w	80122a0 <LoRaMacMibSetRequestConfirm+0x6ec>
 8011be6:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <LoRaMacMibSetRequestConfirm+0x38>)
 8011be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bec:	08011cf5 	.word	0x08011cf5
 8011bf0:	08011d05 	.word	0x08011d05
 8011bf4:	08011d1f 	.word	0x08011d1f
 8011bf8:	08011d37 	.word	0x08011d37
 8011bfc:	08011d4f 	.word	0x08011d4f
 8011c00:	08011d5b 	.word	0x08011d5b
 8011c04:	08011d67 	.word	0x08011d67
 8011c08:	08011d91 	.word	0x08011d91
 8011c0c:	08011db7 	.word	0x08011db7
 8011c10:	08011ddd 	.word	0x08011ddd
 8011c14:	08011e03 	.word	0x08011e03
 8011c18:	08011e29 	.word	0x08011e29
 8011c1c:	08011e4f 	.word	0x08011e4f
 8011c20:	08011e75 	.word	0x08011e75
 8011c24:	08011e9b 	.word	0x08011e9b
 8011c28:	08011ec9 	.word	0x08011ec9
 8011c2c:	08011ee9 	.word	0x08011ee9
 8011c30:	080122a1 	.word	0x080122a1
 8011c34:	08011ef5 	.word	0x08011ef5
 8011c38:	08011f65 	.word	0x08011f65
 8011c3c:	08011fa5 	.word	0x08011fa5
 8011c40:	08012007 	.word	0x08012007
 8011c44:	08012077 	.word	0x08012077
 8011c48:	08012047 	.word	0x08012047
 8011c4c:	080120a7 	.word	0x080120a7
 8011c50:	080120c9 	.word	0x080120c9
 8011c54:	080120d3 	.word	0x080120d3
 8011c58:	080120dd 	.word	0x080120dd
 8011c5c:	080120e7 	.word	0x080120e7
 8011c60:	080120f1 	.word	0x080120f1
 8011c64:	080122a1 	.word	0x080122a1
 8011c68:	080120fb 	.word	0x080120fb
 8011c6c:	0801212d 	.word	0x0801212d
 8011c70:	080121a1 	.word	0x080121a1
 8011c74:	08012167 	.word	0x08012167
 8011c78:	080121d3 	.word	0x080121d3
 8011c7c:	080121e9 	.word	0x080121e9
 8011c80:	08012201 	.word	0x08012201
 8011c84:	0801220d 	.word	0x0801220d
 8011c88:	08012219 	.word	0x08012219
 8011c8c:	080122a1 	.word	0x080122a1
 8011c90:	08012223 	.word	0x08012223
 8011c94:	080122a1 	.word	0x080122a1
 8011c98:	080122a1 	.word	0x080122a1
 8011c9c:	080122a1 	.word	0x080122a1
 8011ca0:	080122a1 	.word	0x080122a1
 8011ca4:	080122a1 	.word	0x080122a1
 8011ca8:	080122a1 	.word	0x080122a1
 8011cac:	080122a1 	.word	0x080122a1
 8011cb0:	080122a1 	.word	0x080122a1
 8011cb4:	080122a1 	.word	0x080122a1
 8011cb8:	080122a1 	.word	0x080122a1
 8011cbc:	080122a1 	.word	0x080122a1
 8011cc0:	080122a1 	.word	0x080122a1
 8011cc4:	080122a1 	.word	0x080122a1
 8011cc8:	080122a1 	.word	0x080122a1
 8011ccc:	080122a1 	.word	0x080122a1
 8011cd0:	080122a1 	.word	0x080122a1
 8011cd4:	0801224d 	.word	0x0801224d
 8011cd8:	08012259 	.word	0x08012259
 8011cdc:	08012265 	.word	0x08012265
 8011ce0:	08012271 	.word	0x08012271
 8011ce4:	0801227d 	.word	0x0801227d
 8011ce8:	08012289 	.word	0x08012289
 8011cec:	08012295 	.word	0x08012295
 8011cf0:	0801229b 	.word	0x0801229b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	791b      	ldrb	r3, [r3, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fd fabb 	bl	800f274 <SwitchClass>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	75fb      	strb	r3, [r7, #23]
            break;
 8011d02:	e2ee      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	791b      	ldrb	r3, [r3, #4]
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	d005      	beq.n	8011d18 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	791a      	ldrb	r2, [r3, #4]
 8011d10:	4b6c      	ldr	r3, [pc, #432]	; (8011ec4 <LoRaMacMibSetRequestConfirm+0x310>)
 8011d12:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d16:	e2e4      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d18:	2303      	movs	r3, #3
 8011d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8011d1c:	e2e1      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fa f8b4 	bl	800be90 <SecureElementSetDevEui>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	f000 82be 	beq.w	80122ac <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d30:	2303      	movs	r3, #3
 8011d32:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d34:	e2ba      	b.n	80122ac <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fa f8d8 	bl	800bef0 <SecureElementSetJoinEui>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	f000 82b4 	beq.w	80122b0 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d48:	2303      	movs	r3, #3
 8011d4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d4c:	e2b0      	b.n	80122b0 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	791a      	ldrb	r2, [r3, #4]
 8011d52:	4b5c      	ldr	r3, [pc, #368]	; (8011ec4 <LoRaMacMibSetRequestConfirm+0x310>)
 8011d54:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8011d58:	e2c3      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	4a59      	ldr	r2, [pc, #356]	; (8011ec4 <LoRaMacMibSetRequestConfirm+0x310>)
 8011d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8011d64:	e2bd      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8011d66:	4b57      	ldr	r3, [pc, #348]	; (8011ec4 <LoRaMacMibSetRequestConfirm+0x310>)
 8011d68:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4619      	mov	r1, r3
 8011d72:	4610      	mov	r0, r2
 8011d74:	f7fa f8ec 	bl	800bf50 <SecureElementSetDevAddr>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d002      	beq.n	8011d84 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d7e:	2303      	movs	r3, #3
 8011d80:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8011d82:	e2ae      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	4a4e      	ldr	r2, [pc, #312]	; (8011ec4 <LoRaMacMibSetRequestConfirm+0x310>)
 8011d8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8011d8e:	e2a8      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00b      	beq.n	8011db0 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	2000      	movs	r0, #0
 8011da0:	f002 f868 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f000 8284 	beq.w	80122b4 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011dac:	2311      	movs	r3, #17
 8011dae:	e2a3      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011db0:	2303      	movs	r3, #3
 8011db2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011db4:	e27e      	b.n	80122b4 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d00b      	beq.n	8011dd6 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	2001      	movs	r0, #1
 8011dc6:	f002 f855 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	f000 8273 	beq.w	80122b8 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011dd2:	2311      	movs	r3, #17
 8011dd4:	e290      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dd6:	2303      	movs	r3, #3
 8011dd8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011dda:	e26d      	b.n	80122b8 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00b      	beq.n	8011dfc <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	4619      	mov	r1, r3
 8011dea:	2008      	movs	r0, #8
 8011dec:	f002 f842 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 8262 	beq.w	80122bc <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011df8:	2311      	movs	r3, #17
 8011dfa:	e27d      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e00:	e25c      	b.n	80122bc <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00b      	beq.n	8011e22 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	4619      	mov	r1, r3
 8011e10:	2009      	movs	r0, #9
 8011e12:	f002 f82f 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f000 8251 	beq.w	80122c0 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e1e:	2311      	movs	r3, #17
 8011e20:	e26a      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e22:	2303      	movs	r3, #3
 8011e24:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e26:	e24b      	b.n	80122c0 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	4619      	mov	r1, r3
 8011e36:	200c      	movs	r0, #12
 8011e38:	f002 f81c 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f000 8240 	beq.w	80122c4 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e44:	2311      	movs	r3, #17
 8011e46:	e257      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e48:	2303      	movs	r3, #3
 8011e4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e4c:	e23a      	b.n	80122c4 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d00b      	beq.n	8011e6e <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	200d      	movs	r0, #13
 8011e5e:	f002 f809 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 822f 	beq.w	80122c8 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e6a:	2311      	movs	r3, #17
 8011e6c:	e244      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e6e:	2303      	movs	r3, #3
 8011e70:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e72:	e229      	b.n	80122c8 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00b      	beq.n	8011e94 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	4619      	mov	r1, r3
 8011e82:	200e      	movs	r0, #14
 8011e84:	f001 fff6 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	f000 821e 	beq.w	80122cc <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e90:	2311      	movs	r3, #17
 8011e92:	e231      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e94:	2303      	movs	r3, #3
 8011e96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e98:	e218      	b.n	80122cc <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d00b      	beq.n	8011eba <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	200f      	movs	r0, #15
 8011eaa:	f001 ffe3 	bl	8013e74 <LoRaMacCryptoSetKey>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	f000 820d 	beq.w	80122d0 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eb6:	2311      	movs	r3, #17
 8011eb8:	e21e      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011eba:	2303      	movs	r3, #3
 8011ebc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ebe:	e207      	b.n	80122d0 <LoRaMacMibSetRequestConfirm+0x71c>
 8011ec0:	20000688 	.word	0x20000688
 8011ec4:	20000ba4 	.word	0x20000ba4
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	791a      	ldrb	r2, [r3, #4]
 8011ecc:	4bb2      	ldr	r3, [pc, #712]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011ece:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011ed2:	4bb2      	ldr	r3, [pc, #712]	; (801219c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8011ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ed6:	4ab0      	ldr	r2, [pc, #704]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011ed8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8011edc:	4610      	mov	r0, r2
 8011ede:	4798      	blx	r3
            Radio.Sleep( );
 8011ee0:	4bae      	ldr	r3, [pc, #696]	; (801219c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8011ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee4:	4798      	blx	r3
            break;
 8011ee6:	e1fc      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	791a      	ldrb	r2, [r3, #4]
 8011eec:	4baa      	ldr	r3, [pc, #680]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011eee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8011ef2:	e1f6      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	7a1b      	ldrb	r3, [r3, #8]
 8011ef8:	b25b      	sxtb	r3, r3
 8011efa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011efc:	4ba6      	ldr	r3, [pc, #664]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011efe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011f02:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011f04:	4ba4      	ldr	r3, [pc, #656]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011f06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011f0a:	f107 0108 	add.w	r1, r7, #8
 8011f0e:	2207      	movs	r2, #7
 8011f10:	4618      	mov	r0, r3
 8011f12:	f002 fddf 	bl	8014ad4 <RegionVerify>
 8011f16:	4603      	mov	r3, r0
 8011f18:	f083 0301 	eor.w	r3, r3, #1
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d002      	beq.n	8011f28 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f22:	2303      	movs	r3, #3
 8011f24:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8011f26:	e1dc      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011f2e:	4b9a      	ldr	r3, [pc, #616]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011f30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011f34:	f107 0108 	add.w	r1, r7, #8
 8011f38:	2200      	movs	r2, #0
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f002 fdca 	bl	8014ad4 <RegionVerify>
 8011f40:	4603      	mov	r3, r0
 8011f42:	f083 0301 	eor.w	r3, r3, #1
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f4c:	2303      	movs	r3, #3
 8011f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8011f50:	e1c7      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011f52:	4b91      	ldr	r3, [pc, #580]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	336c      	adds	r3, #108	; 0x6c
 8011f58:	3204      	adds	r2, #4
 8011f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f5e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011f62:	e1be      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	7a1b      	ldrb	r3, [r3, #8]
 8011f68:	b25b      	sxtb	r3, r3
 8011f6a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f6c:	4b8a      	ldr	r3, [pc, #552]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011f6e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011f72:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011f74:	4b88      	ldr	r3, [pc, #544]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011f76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011f7a:	f107 0108 	add.w	r1, r7, #8
 8011f7e:	2207      	movs	r2, #7
 8011f80:	4618      	mov	r0, r3
 8011f82:	f002 fda7 	bl	8014ad4 <RegionVerify>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d008      	beq.n	8011f9e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011f8c:	4b82      	ldr	r3, [pc, #520]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	33b4      	adds	r3, #180	; 0xb4
 8011f92:	3204      	adds	r2, #4
 8011f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f98:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011f9c:	e1a1      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f9e:	2303      	movs	r3, #3
 8011fa0:	75fb      	strb	r3, [r7, #23]
            break;
 8011fa2:	e19e      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	7a1b      	ldrb	r3, [r3, #8]
 8011fa8:	b25b      	sxtb	r3, r3
 8011faa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011fac:	4b7a      	ldr	r3, [pc, #488]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011fae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011fb2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011fb4:	4b78      	ldr	r3, [pc, #480]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011fb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011fba:	f107 0108 	add.w	r1, r7, #8
 8011fbe:	2207      	movs	r2, #7
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f002 fd87 	bl	8014ad4 <RegionVerify>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d019      	beq.n	8012000 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011fcc:	4b72      	ldr	r3, [pc, #456]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	3374      	adds	r3, #116	; 0x74
 8011fd2:	3204      	adds	r2, #4
 8011fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011fdc:	4b6e      	ldr	r3, [pc, #440]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011fde:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	f040 8176 	bne.w	80122d4 <LoRaMacMibSetRequestConfirm+0x720>
 8011fe8:	4b6b      	ldr	r3, [pc, #428]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011fea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f000 8170 	beq.w	80122d4 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011ff4:	4b69      	ldr	r3, [pc, #420]	; (801219c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8011ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011ffa:	f7fe fc1b 	bl	8010834 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011ffe:	e169      	b.n	80122d4 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012000:	2303      	movs	r3, #3
 8012002:	75fb      	strb	r3, [r7, #23]
            break;
 8012004:	e166      	b.n	80122d4 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	7a1b      	ldrb	r3, [r3, #8]
 801200a:	b25b      	sxtb	r3, r3
 801200c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801200e:	4b62      	ldr	r3, [pc, #392]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012010:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012014:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012016:	4b60      	ldr	r3, [pc, #384]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012018:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801201c:	f107 0108 	add.w	r1, r7, #8
 8012020:	2207      	movs	r2, #7
 8012022:	4618      	mov	r0, r3
 8012024:	f002 fd56 	bl	8014ad4 <RegionVerify>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d008      	beq.n	8012040 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801202e:	4b5a      	ldr	r3, [pc, #360]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	33bc      	adds	r3, #188	; 0xbc
 8012034:	3204      	adds	r2, #4
 8012036:	e892 0003 	ldmia.w	r2, {r0, r1}
 801203a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801203e:	e150      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012040:	2303      	movs	r3, #3
 8012042:	75fb      	strb	r3, [r7, #23]
            break;
 8012044:	e14d      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801204c:	2301      	movs	r3, #1
 801204e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012050:	4b51      	ldr	r3, [pc, #324]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012052:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012056:	f107 020c 	add.w	r2, r7, #12
 801205a:	4611      	mov	r1, r2
 801205c:	4618      	mov	r0, r3
 801205e:	f002 fd62 	bl	8014b26 <RegionChanMaskSet>
 8012062:	4603      	mov	r3, r0
 8012064:	f083 0301 	eor.w	r3, r3, #1
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	f000 8134 	beq.w	80122d8 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012070:	2303      	movs	r3, #3
 8012072:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012074:	e130      	b.n	80122d8 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801207c:	2300      	movs	r3, #0
 801207e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012080:	4b45      	ldr	r3, [pc, #276]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012082:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012086:	f107 020c 	add.w	r2, r7, #12
 801208a:	4611      	mov	r1, r2
 801208c:	4618      	mov	r0, r3
 801208e:	f002 fd4a 	bl	8014b26 <RegionChanMaskSet>
 8012092:	4603      	mov	r3, r0
 8012094:	f083 0301 	eor.w	r3, r3, #1
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	f000 811e 	beq.w	80122dc <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120a0:	2303      	movs	r3, #3
 80120a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120a4:	e11a      	b.n	80122dc <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	791b      	ldrb	r3, [r3, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d009      	beq.n	80120c2 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80120b2:	2b0f      	cmp	r3, #15
 80120b4:	d805      	bhi.n	80120c2 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	791a      	ldrb	r2, [r3, #4]
 80120ba:	4b37      	ldr	r3, [pc, #220]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80120bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80120c0:	e10f      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120c2:	2303      	movs	r3, #3
 80120c4:	75fb      	strb	r3, [r7, #23]
            break;
 80120c6:	e10c      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	4a32      	ldr	r2, [pc, #200]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80120ce:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80120d0:	e107      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	4a30      	ldr	r2, [pc, #192]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80120d8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80120da:	e102      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	4a2d      	ldr	r2, [pc, #180]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80120e2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80120e4:	e0fd      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	4a2b      	ldr	r2, [pc, #172]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80120ec:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 80120ee:	e0f8      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	4a28      	ldr	r2, [pc, #160]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80120f6:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 80120f8:	e0f3      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012100:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012102:	4b25      	ldr	r3, [pc, #148]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012104:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012108:	f107 0108 	add.w	r1, r7, #8
 801210c:	2206      	movs	r2, #6
 801210e:	4618      	mov	r0, r3
 8012110:	f002 fce0 	bl	8014ad4 <RegionVerify>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d005      	beq.n	8012126 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801211a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801211e:	4b1e      	ldr	r3, [pc, #120]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012120:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012124:	e0dd      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012126:	2303      	movs	r3, #3
 8012128:	75fb      	strb	r3, [r7, #23]
            break;
 801212a:	e0da      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012132:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012134:	4b18      	ldr	r3, [pc, #96]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012136:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801213a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801213c:	4b16      	ldr	r3, [pc, #88]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801213e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012142:	f107 0108 	add.w	r1, r7, #8
 8012146:	2205      	movs	r2, #5
 8012148:	4618      	mov	r0, r3
 801214a:	f002 fcc3 	bl	8014ad4 <RegionVerify>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d005      	beq.n	8012160 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012154:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012158:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801215a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801215e:	e0c0      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012160:	2303      	movs	r3, #3
 8012162:	75fb      	strb	r3, [r7, #23]
            break;
 8012164:	e0bd      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801216c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801216e:	4b0a      	ldr	r3, [pc, #40]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012170:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012174:	f107 0108 	add.w	r1, r7, #8
 8012178:	220a      	movs	r2, #10
 801217a:	4618      	mov	r0, r3
 801217c:	f002 fcaa 	bl	8014ad4 <RegionVerify>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d005      	beq.n	8012192 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012186:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801218a:	4b03      	ldr	r3, [pc, #12]	; (8012198 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801218c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012190:	e0a7      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012192:	2303      	movs	r3, #3
 8012194:	75fb      	strb	r3, [r7, #23]
            break;
 8012196:	e0a4      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
 8012198:	20000ba4 	.word	0x20000ba4
 801219c:	0801cbcc 	.word	0x0801cbcc
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80121a6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80121a8:	4b55      	ldr	r3, [pc, #340]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80121ae:	f107 0108 	add.w	r1, r7, #8
 80121b2:	2209      	movs	r2, #9
 80121b4:	4618      	mov	r0, r3
 80121b6:	f002 fc8d 	bl	8014ad4 <RegionVerify>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d005      	beq.n	80121cc <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80121c0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80121c4:	4b4e      	ldr	r3, [pc, #312]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121ca:	e08a      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121cc:	2303      	movs	r3, #3
 80121ce:	75fb      	strb	r3, [r7, #23]
            break;
 80121d0:	e087      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	4a4a      	ldr	r2, [pc, #296]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80121dc:	4b48      	ldr	r3, [pc, #288]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80121e2:	4a47      	ldr	r2, [pc, #284]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121e4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80121e6:	e07c      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	791a      	ldrb	r2, [r3, #4]
 80121ec:	4b44      	ldr	r3, [pc, #272]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80121f2:	4b43      	ldr	r3, [pc, #268]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121f4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80121f8:	4b41      	ldr	r3, [pc, #260]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 80121fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 80121fe:	e070      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	4a3e      	ldr	r2, [pc, #248]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012206:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801220a:	e06a      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	4a3b      	ldr	r2, [pc, #236]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012212:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012216:	e064      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012218:	f7fe fd40 	bl	8010c9c <RestoreNvmData>
 801221c:	4603      	mov	r3, r0
 801221e:	75fb      	strb	r3, [r7, #23]
            break;
 8012220:	e05f      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	799b      	ldrb	r3, [r3, #6]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d80d      	bhi.n	8012246 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801222a:	4a35      	ldr	r2, [pc, #212]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6858      	ldr	r0, [r3, #4]
 8012238:	f001 fd7e 	bl	8013d38 <LoRaMacCryptoSetLrWanVersion>
 801223c:	4603      	mov	r3, r0
 801223e:	2b00      	cmp	r3, #0
 8012240:	d04e      	beq.n	80122e0 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012242:	2311      	movs	r3, #17
 8012244:	e058      	b.n	80122f8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012246:	2303      	movs	r3, #3
 8012248:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801224a:	e049      	b.n	80122e0 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	4a2b      	ldr	r2, [pc, #172]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8012256:	e044      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	791a      	ldrb	r2, [r3, #4]
 801225c:	4b28      	ldr	r3, [pc, #160]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 801225e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8012262:	e03e      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	889a      	ldrh	r2, [r3, #4]
 8012268:	4b25      	ldr	r3, [pc, #148]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 801226a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 801226e:	e038      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	889a      	ldrh	r2, [r3, #4]
 8012274:	4b22      	ldr	r3, [pc, #136]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012276:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 801227a:	e032      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	889a      	ldrh	r2, [r3, #4]
 8012280:	4b1f      	ldr	r3, [pc, #124]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012282:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8012286:	e02c      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	889a      	ldrh	r2, [r3, #4]
 801228c:	4b1c      	ldr	r3, [pc, #112]	; (8012300 <LoRaMacMibSetRequestConfirm+0x74c>)
 801228e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8012292:	e026      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012294:	2318      	movs	r3, #24
 8012296:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012298:	e023      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801229a:	2318      	movs	r3, #24
 801229c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801229e:	e020      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 fca4 	bl	8012bee <LoRaMacMibClassBSetRequestConfirm>
 80122a6:	4603      	mov	r3, r0
 80122a8:	75fb      	strb	r3, [r7, #23]
            break;
 80122aa:	e01a      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122ac:	bf00      	nop
 80122ae:	e018      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122b0:	bf00      	nop
 80122b2:	e016      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122b4:	bf00      	nop
 80122b6:	e014      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122b8:	bf00      	nop
 80122ba:	e012      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122bc:	bf00      	nop
 80122be:	e010      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122c0:	bf00      	nop
 80122c2:	e00e      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122c4:	bf00      	nop
 80122c6:	e00c      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122c8:	bf00      	nop
 80122ca:	e00a      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122cc:	bf00      	nop
 80122ce:	e008      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122d0:	bf00      	nop
 80122d2:	e006      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122d4:	bf00      	nop
 80122d6:	e004      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122d8:	bf00      	nop
 80122da:	e002      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122dc:	bf00      	nop
 80122de:	e000      	b.n	80122e2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80122e0:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80122e2:	7dfb      	ldrb	r3, [r7, #23]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d106      	bne.n	80122f6 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80122e8:	4a06      	ldr	r2, [pc, #24]	; (8012304 <LoRaMacMibSetRequestConfirm+0x750>)
 80122ea:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80122ee:	f043 0320 	orr.w	r3, r3, #32
 80122f2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 80122f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3718      	adds	r7, #24
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20000ba4 	.word	0x20000ba4
 8012304:	20000688 	.word	0x20000688

08012308 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b08a      	sub	sp, #40	; 0x28
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012310:	2302      	movs	r3, #2
 8012312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012316:	2300      	movs	r3, #0
 8012318:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d101      	bne.n	8012324 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012320:	2303      	movs	r3, #3
 8012322:	e17e      	b.n	8012622 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2200      	movs	r2, #0
 8012328:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801232a:	f7fc fb85 	bl	800ea38 <LoRaMacIsBusy>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d001      	beq.n	8012338 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012334:	2301      	movs	r3, #1
 8012336:	e174      	b.n	8012622 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012338:	f001 f994 	bl	8013664 <LoRaMacConfirmQueueIsFull>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d001      	beq.n	8012346 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012342:	2301      	movs	r3, #1
 8012344:	e16d      	b.n	8012622 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012346:	f001 f981 	bl	801364c <LoRaMacConfirmQueueGetCnt>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	d104      	bne.n	801235a <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012350:	2214      	movs	r2, #20
 8012352:	2100      	movs	r1, #0
 8012354:	48b5      	ldr	r0, [pc, #724]	; (801262c <LoRaMacMlmeRequest+0x324>)
 8012356:	f004 ff75 	bl	8017244 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801235a:	4bb5      	ldr	r3, [pc, #724]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 801235c:	2201      	movs	r2, #1
 801235e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012362:	4ab3      	ldr	r2, [pc, #716]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 8012364:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012368:	f043 0304 	orr.w	r3, r3, #4
 801236c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012378:	2301      	movs	r3, #1
 801237a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801237e:	2300      	movs	r3, #0
 8012380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012384:	2300      	movs	r3, #0
 8012386:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	3b01      	subs	r3, #1
 8012390:	2b0c      	cmp	r3, #12
 8012392:	f200 811a 	bhi.w	80125ca <LoRaMacMlmeRequest+0x2c2>
 8012396:	a201      	add	r2, pc, #4	; (adr r2, 801239c <LoRaMacMlmeRequest+0x94>)
 8012398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801239c:	080123d1 	.word	0x080123d1
 80123a0:	080125cb 	.word	0x080125cb
 80123a4:	080125cb 	.word	0x080125cb
 80123a8:	080125cb 	.word	0x080125cb
 80123ac:	080124af 	.word	0x080124af
 80123b0:	080124d3 	.word	0x080124d3
 80123b4:	080125cb 	.word	0x080125cb
 80123b8:	080125cb 	.word	0x080125cb
 80123bc:	080124f1 	.word	0x080124f1
 80123c0:	080125cb 	.word	0x080125cb
 80123c4:	08012599 	.word	0x08012599
 80123c8:	0801252d 	.word	0x0801252d
 80123cc:	08012577 	.word	0x08012577
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80123d0:	4b97      	ldr	r3, [pc, #604]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 80123d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123d6:	f003 0320 	and.w	r3, r3, #32
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d001      	beq.n	80123e2 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80123de:	2301      	movs	r3, #1
 80123e0:	e11f      	b.n	8012622 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	791b      	ldrb	r3, [r3, #4]
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d135      	bne.n	8012456 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 80123ea:	2000      	movs	r0, #0
 80123ec:	f7fe f8b4 	bl	8010558 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80123f0:	4b90      	ldr	r3, [pc, #576]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 80123f2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	795b      	ldrb	r3, [r3, #5]
 80123fa:	b25b      	sxtb	r3, r3
 80123fc:	2200      	movs	r2, #0
 80123fe:	4619      	mov	r1, r3
 8012400:	f002 fc50 	bl	8014ca4 <RegionAlternateDr>
 8012404:	4603      	mov	r3, r0
 8012406:	461a      	mov	r2, r3
 8012408:	4b8a      	ldr	r3, [pc, #552]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 801240a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012414:	4b87      	ldr	r3, [pc, #540]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 8012416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801241a:	2307      	movs	r3, #7
 801241c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012420:	20ff      	movs	r0, #255	; 0xff
 8012422:	f7fd fe1d 	bl	8010060 <SendReJoinReq>
 8012426:	4603      	mov	r3, r0
 8012428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 801242c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012430:	2b00      	cmp	r3, #0
 8012432:	f000 80cc 	beq.w	80125ce <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012436:	4b7f      	ldr	r3, [pc, #508]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 8012438:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	795b      	ldrb	r3, [r3, #5]
 8012440:	b25b      	sxtb	r3, r3
 8012442:	2201      	movs	r2, #1
 8012444:	4619      	mov	r1, r3
 8012446:	f002 fc2d 	bl	8014ca4 <RegionAlternateDr>
 801244a:	4603      	mov	r3, r0
 801244c:	461a      	mov	r2, r3
 801244e:	4b79      	ldr	r3, [pc, #484]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 8012450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012454:	e0bb      	b.n	80125ce <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	791b      	ldrb	r3, [r3, #4]
 801245a:	2b01      	cmp	r3, #1
 801245c:	f040 80b7 	bne.w	80125ce <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012460:	4b74      	ldr	r3, [pc, #464]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 8012462:	2200      	movs	r2, #0
 8012464:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012468:	2302      	movs	r3, #2
 801246a:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801246c:	4b71      	ldr	r3, [pc, #452]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 801246e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012472:	f107 020c 	add.w	r2, r7, #12
 8012476:	4611      	mov	r1, r2
 8012478:	4618      	mov	r0, r3
 801247a:	f002 fb19 	bl	8014ab0 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	791a      	ldrb	r2, [r3, #4]
 8012482:	4b6c      	ldr	r3, [pc, #432]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 8012484:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 801248e:	2301      	movs	r3, #1
 8012490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8012494:	f7fe fdb2 	bl	8010ffc <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012498:	4a65      	ldr	r2, [pc, #404]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 801249a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801249e:	f043 0310 	orr.w	r3, r3, #16
 80124a2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 80124a6:	2300      	movs	r3, #0
 80124a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80124ac:	e08f      	b.n	80125ce <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80124b4:	f107 031c 	add.w	r3, r7, #28
 80124b8:	2200      	movs	r2, #0
 80124ba:	4619      	mov	r1, r3
 80124bc:	2002      	movs	r0, #2
 80124be:	f000 fd21 	bl	8012f04 <LoRaMacCommandsAddCmd>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	f000 8084 	beq.w	80125d2 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124ca:	2313      	movs	r3, #19
 80124cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80124d0:	e07f      	b.n	80125d2 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	8898      	ldrh	r0, [r3, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6899      	ldr	r1, [r3, #8]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	461a      	mov	r2, r3
 80124e4:	f7fe fbba 	bl	8010c5c <SetTxContinuousWave>
 80124e8:	4603      	mov	r3, r0
 80124ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80124ee:	e077      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80124f6:	f107 0308 	add.w	r3, r7, #8
 80124fa:	4619      	mov	r1, r3
 80124fc:	200d      	movs	r0, #13
 80124fe:	f000 fd81 	bl	8013004 <LoRaMacCommandsGetCmd>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d103      	bne.n	8012510 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8012508:	2300      	movs	r3, #0
 801250a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 801250e:	e062      	b.n	80125d6 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012510:	f107 031c 	add.w	r3, r7, #28
 8012514:	2200      	movs	r2, #0
 8012516:	4619      	mov	r1, r3
 8012518:	200d      	movs	r0, #13
 801251a:	f000 fcf3 	bl	8012f04 <LoRaMacCommandsAddCmd>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d058      	beq.n	80125d6 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012524:	2313      	movs	r3, #19
 8012526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801252a:	e054      	b.n	80125d6 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801252c:	4b41      	ldr	r3, [pc, #260]	; (8012634 <LoRaMacMlmeRequest+0x32c>)
 801252e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012532:	2b00      	cmp	r3, #0
 8012534:	d151      	bne.n	80125da <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	791b      	ldrb	r3, [r3, #4]
 801253a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	791b      	ldrb	r3, [r3, #4]
 8012542:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012546:	b2db      	uxtb	r3, r3
 8012548:	4618      	mov	r0, r3
 801254a:	f000 fb25 	bl	8012b98 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801254e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012552:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012554:	2300      	movs	r3, #0
 8012556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801255a:	f107 031c 	add.w	r3, r7, #28
 801255e:	2201      	movs	r2, #1
 8012560:	4619      	mov	r1, r3
 8012562:	2010      	movs	r0, #16
 8012564:	f000 fcce 	bl	8012f04 <LoRaMacCommandsAddCmd>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d035      	beq.n	80125da <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801256e:	2313      	movs	r3, #19
 8012570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012574:	e031      	b.n	80125da <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012576:	2300      	movs	r3, #0
 8012578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801257c:	f107 031c 	add.w	r3, r7, #28
 8012580:	2200      	movs	r2, #0
 8012582:	4619      	mov	r1, r3
 8012584:	2012      	movs	r0, #18
 8012586:	f000 fcbd 	bl	8012f04 <LoRaMacCommandsAddCmd>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d026      	beq.n	80125de <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012590:	2313      	movs	r3, #19
 8012592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012596:	e022      	b.n	80125de <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012598:	2301      	movs	r3, #1
 801259a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801259e:	f000 fab1 	bl	8012b04 <LoRaMacClassBIsAcquisitionInProgress>
 80125a2:	4603      	mov	r3, r0
 80125a4:	f083 0301 	eor.w	r3, r3, #1
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d009      	beq.n	80125c2 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80125ae:	2000      	movs	r0, #0
 80125b0:	f000 fa8a 	bl	8012ac8 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80125b4:	2000      	movs	r0, #0
 80125b6:	f000 faac 	bl	8012b12 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80125c0:	e00e      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 80125c2:	2301      	movs	r3, #1
 80125c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80125c8:	e00a      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 80125ca:	bf00      	nop
 80125cc:	e008      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80125ce:	bf00      	nop
 80125d0:	e006      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80125d2:	bf00      	nop
 80125d4:	e004      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80125d6:	bf00      	nop
 80125d8:	e002      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80125da:	bf00      	nop
 80125dc:	e000      	b.n	80125e0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80125de:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80125e0:	4b13      	ldr	r3, [pc, #76]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 80125e2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80125ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d010      	beq.n	8012614 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80125f2:	f001 f82b 	bl	801364c <LoRaMacConfirmQueueGetCnt>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d110      	bne.n	801261e <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 80125fc:	4b0c      	ldr	r3, [pc, #48]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 80125fe:	2200      	movs	r2, #0
 8012600:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012604:	4a0a      	ldr	r2, [pc, #40]	; (8012630 <LoRaMacMlmeRequest+0x328>)
 8012606:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801260a:	f36f 0382 	bfc	r3, #2, #1
 801260e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012612:	e004      	b.n	801261e <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012614:	f107 0320 	add.w	r3, r7, #32
 8012618:	4618      	mov	r0, r3
 801261a:	f000 fec3 	bl	80133a4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801261e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012622:	4618      	mov	r0, r3
 8012624:	3728      	adds	r7, #40	; 0x28
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
 801262a:	bf00      	nop
 801262c:	20000adc 	.word	0x20000adc
 8012630:	20000688 	.word	0x20000688
 8012634:	20000ba4 	.word	0x20000ba4

08012638 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012638:	b5b0      	push	{r4, r5, r7, lr}
 801263a:	b092      	sub	sp, #72	; 0x48
 801263c:	af02      	add	r7, sp, #8
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	460b      	mov	r3, r1
 8012642:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012644:	2302      	movs	r3, #2
 8012646:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801264a:	2300      	movs	r3, #0
 801264c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8012650:	2300      	movs	r3, #0
 8012652:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012654:	2300      	movs	r3, #0
 8012656:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 801265a:	2300      	movs	r3, #0
 801265c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012666:	2303      	movs	r3, #3
 8012668:	e113      	b.n	8012892 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012670:	f7fc f9e2 	bl	800ea38 <LoRaMacIsBusy>
 8012674:	4603      	mov	r3, r0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801267a:	2301      	movs	r3, #1
 801267c:	e109      	b.n	8012892 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f107 040c 	add.w	r4, r7, #12
 8012684:	461d      	mov	r5, r3
 8012686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801268a:	682b      	ldr	r3, [r5, #0]
 801268c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 801268e:	2300      	movs	r3, #0
 8012690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012694:	2214      	movs	r2, #20
 8012696:	2100      	movs	r1, #0
 8012698:	4880      	ldr	r0, [pc, #512]	; (801289c <LoRaMacMcpsRequest+0x264>)
 801269a:	f004 fdd3 	bl	8017244 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801269e:	4b80      	ldr	r3, [pc, #512]	; (80128a0 <LoRaMacMcpsRequest+0x268>)
 80126a0:	2201      	movs	r2, #1
 80126a2:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80126a6:	4b7f      	ldr	r3, [pc, #508]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80126a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d111      	bne.n	80126d4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80126b0:	4b7c      	ldr	r3, [pc, #496]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80126b2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80126b6:	2b02      	cmp	r3, #2
 80126b8:	d10c      	bne.n	80126d4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80126ba:	4b7a      	ldr	r3, [pc, #488]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80126bc:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 80126c0:	f083 0301 	eor.w	r3, r3, #1
 80126c4:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d004      	beq.n	80126d4 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80126ca:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d101      	bne.n	80126d4 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80126d0:	2301      	movs	r3, #1
 80126d2:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80126d4:	7b3b      	ldrb	r3, [r7, #12]
 80126d6:	2b03      	cmp	r3, #3
 80126d8:	d030      	beq.n	801273c <LoRaMacMcpsRequest+0x104>
 80126da:	2b03      	cmp	r3, #3
 80126dc:	dc3f      	bgt.n	801275e <LoRaMacMcpsRequest+0x126>
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d002      	beq.n	80126e8 <LoRaMacMcpsRequest+0xb0>
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d015      	beq.n	8012712 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80126e6:	e03a      	b.n	801275e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 80126e8:	2301      	movs	r3, #1
 80126ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80126ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80126f2:	2202      	movs	r2, #2
 80126f4:	f362 1347 	bfi	r3, r2, #5, #3
 80126f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80126fc:	7c3b      	ldrb	r3, [r7, #16]
 80126fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012706:	8b3b      	ldrh	r3, [r7, #24]
 8012708:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801270a:	7ebb      	ldrb	r3, [r7, #26]
 801270c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012710:	e026      	b.n	8012760 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012712:	2301      	movs	r3, #1
 8012714:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012718:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801271c:	2204      	movs	r2, #4
 801271e:	f362 1347 	bfi	r3, r2, #5, #3
 8012722:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8012726:	7c3b      	ldrb	r3, [r7, #16]
 8012728:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012730:	8b3b      	ldrh	r3, [r7, #24]
 8012732:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012734:	7ebb      	ldrb	r3, [r7, #26]
 8012736:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801273a:	e011      	b.n	8012760 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801273c:	2301      	movs	r3, #1
 801273e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012746:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801274a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012752:	8abb      	ldrh	r3, [r7, #20]
 8012754:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012756:	7dbb      	ldrb	r3, [r7, #22]
 8012758:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801275c:	e000      	b.n	8012760 <LoRaMacMcpsRequest+0x128>
            break;
 801275e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012760:	2302      	movs	r3, #2
 8012762:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012766:	4b4f      	ldr	r3, [pc, #316]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 8012768:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801276c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012770:	4b4c      	ldr	r3, [pc, #304]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 8012772:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012776:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801277a:	4611      	mov	r1, r2
 801277c:	4618      	mov	r0, r3
 801277e:	f002 f96e 	bl	8014a5e <RegionGetPhyParam>
 8012782:	4603      	mov	r3, r0
 8012784:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012788:	b25b      	sxtb	r3, r3
 801278a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 801278e:	4293      	cmp	r3, r2
 8012790:	bfb8      	it	lt
 8012792:	4613      	movlt	r3, r2
 8012794:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012798:	4b42      	ldr	r3, [pc, #264]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 801279a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801279e:	4a41      	ldr	r2, [pc, #260]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127a0:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80127a4:	4a3f      	ldr	r2, [pc, #252]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127a6:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fc fae0 	bl	800ed70 <CheckForMinimumAbpDatarate>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d002      	beq.n	80127bc <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80127b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 80127bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d05f      	beq.n	8012884 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80127c4:	4b37      	ldr	r3, [pc, #220]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127c6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80127ca:	f083 0301 	eor.w	r3, r3, #1
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10e      	bne.n	80127f2 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80127d4:	4b33      	ldr	r3, [pc, #204]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127d6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80127da:	4a32      	ldr	r2, [pc, #200]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127dc:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80127e0:	4a30      	ldr	r2, [pc, #192]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127e2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fc fac2 	bl	800ed70 <CheckForMinimumAbpDatarate>
 80127ec:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d01c      	beq.n	801282c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 80127f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80127f6:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80127fa:	4b2a      	ldr	r3, [pc, #168]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 80127fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012804:	4b27      	ldr	r3, [pc, #156]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 8012806:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801280a:	f107 0120 	add.w	r1, r7, #32
 801280e:	2205      	movs	r2, #5
 8012810:	4618      	mov	r0, r3
 8012812:	f002 f95f 	bl	8014ad4 <RegionVerify>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d005      	beq.n	8012828 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801281c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012820:	4b20      	ldr	r3, [pc, #128]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 8012822:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012826:	e001      	b.n	801282c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012828:	2303      	movs	r3, #3
 801282a:	e032      	b.n	8012892 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801282c:	4b1d      	ldr	r3, [pc, #116]	; (80128a4 <LoRaMacMcpsRequest+0x26c>)
 801282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012832:	4a1b      	ldr	r2, [pc, #108]	; (80128a0 <LoRaMacMcpsRequest+0x268>)
 8012834:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8012838:	4611      	mov	r1, r2
 801283a:	4618      	mov	r0, r3
 801283c:	f7fc fb84 	bl	800ef48 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8012840:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012842:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8012846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801284a:	78fb      	ldrb	r3, [r7, #3]
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	4613      	mov	r3, r2
 8012850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012852:	f7fd fb23 	bl	800fe9c <Send>
 8012856:	4603      	mov	r3, r0
 8012858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 801285c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012860:	2b00      	cmp	r3, #0
 8012862:	d10b      	bne.n	801287c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012864:	7b3a      	ldrb	r2, [r7, #12]
 8012866:	4b0e      	ldr	r3, [pc, #56]	; (80128a0 <LoRaMacMcpsRequest+0x268>)
 8012868:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801286c:	4a0c      	ldr	r2, [pc, #48]	; (80128a0 <LoRaMacMcpsRequest+0x268>)
 801286e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012872:	f043 0301 	orr.w	r3, r3, #1
 8012876:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801287a:	e003      	b.n	8012884 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801287c:	4b08      	ldr	r3, [pc, #32]	; (80128a0 <LoRaMacMcpsRequest+0x268>)
 801287e:	2200      	movs	r2, #0
 8012880:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012884:	4b06      	ldr	r3, [pc, #24]	; (80128a0 <LoRaMacMcpsRequest+0x268>)
 8012886:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	611a      	str	r2, [r3, #16]

    return status;
 801288e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012892:	4618      	mov	r0, r3
 8012894:	3740      	adds	r7, #64	; 0x40
 8012896:	46bd      	mov	sp, r7
 8012898:	bdb0      	pop	{r4, r5, r7, pc}
 801289a:	bf00      	nop
 801289c:	20000ac8 	.word	0x20000ac8
 80128a0:	20000688 	.word	0x20000688
 80128a4:	20000ba4 	.word	0x20000ba4

080128a8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80128b2:	79fb      	ldrb	r3, [r7, #7]
 80128b4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80128b6:	4b0d      	ldr	r3, [pc, #52]	; (80128ec <LoRaMacTestSetDutyCycleOn+0x44>)
 80128b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128bc:	f107 010c 	add.w	r1, r7, #12
 80128c0:	220f      	movs	r2, #15
 80128c2:	4618      	mov	r0, r3
 80128c4:	f002 f906 	bl	8014ad4 <RegionVerify>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00a      	beq.n	80128e4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80128ce:	4a07      	ldr	r2, [pc, #28]	; (80128ec <LoRaMacTestSetDutyCycleOn+0x44>)
 80128d0:	79fb      	ldrb	r3, [r7, #7]
 80128d2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80128d6:	4a06      	ldr	r2, [pc, #24]	; (80128f0 <LoRaMacTestSetDutyCycleOn+0x48>)
 80128d8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80128dc:	f043 0320 	orr.w	r3, r3, #32
 80128e0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80128e4:	bf00      	nop
 80128e6:	3710      	adds	r7, #16
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20000ba4 	.word	0x20000ba4
 80128f0:	20000688 	.word	0x20000688

080128f4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80128f8:	f7fe fe94 	bl	8011624 <LoRaMacStop>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d112      	bne.n	8012928 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012902:	480b      	ldr	r0, [pc, #44]	; (8012930 <LoRaMacDeInitialization+0x3c>)
 8012904:	f008 fdfe 	bl	801b504 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012908:	480a      	ldr	r0, [pc, #40]	; (8012934 <LoRaMacDeInitialization+0x40>)
 801290a:	f008 fdfb 	bl	801b504 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801290e:	480a      	ldr	r0, [pc, #40]	; (8012938 <LoRaMacDeInitialization+0x44>)
 8012910:	f008 fdf8 	bl	801b504 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012914:	f000 f94a 	bl	8012bac <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8012918:	2000      	movs	r0, #0
 801291a:	f7fd fe1d 	bl	8010558 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801291e:	4b07      	ldr	r3, [pc, #28]	; (801293c <LoRaMacDeInitialization+0x48>)
 8012920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012922:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	e000      	b.n	801292a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012928:	2301      	movs	r3, #1
    }
}
 801292a:	4618      	mov	r0, r3
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	200009f0 	.word	0x200009f0
 8012934:	20000a08 	.word	0x20000a08
 8012938:	20000a20 	.word	0x20000a20
 801293c:	0801cbcc 	.word	0x0801cbcc

08012940 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b08c      	sub	sp, #48	; 0x30
 8012944:	af00      	add	r7, sp, #0
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	60b9      	str	r1, [r7, #8]
 801294a:	607a      	str	r2, [r7, #4]
 801294c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801294e:	2300      	movs	r3, #0
 8012950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	7b1b      	ldrb	r3, [r3, #12]
 8012958:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	7b5b      	ldrb	r3, [r3, #13]
 8012960:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	7b9b      	ldrb	r3, [r3, #14]
 8012968:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	685a      	ldr	r2, [r3, #4]
 8012970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012972:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	785b      	ldrb	r3, [r3, #1]
 8012978:	2b00      	cmp	r3, #0
 801297a:	f000 8088 	beq.w	8012a8e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801297e:	2302      	movs	r3, #2
 8012980:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	7bdb      	ldrb	r3, [r3, #15]
 8012988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	7c1b      	ldrb	r3, [r3, #16]
 8012990:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012994:	4611      	mov	r1, r2
 8012996:	4618      	mov	r0, r3
 8012998:	f002 f861 	bl	8014a5e <RegionGetPhyParam>
 801299c:	4603      	mov	r3, r0
 801299e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80129a0:	6a3b      	ldr	r3, [r7, #32]
 80129a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80129a6:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80129aa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80129ae:	4293      	cmp	r3, r2
 80129b0:	bfb8      	it	lt
 80129b2:	4613      	movlt	r3, r2
 80129b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	8912      	ldrh	r2, [r2, #8]
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d302      	bcc.n	80129ca <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80129c4:	2301      	movs	r3, #1
 80129c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	68fa      	ldr	r2, [r7, #12]
 80129d0:	8912      	ldrh	r2, [r2, #8]
 80129d2:	4611      	mov	r1, r2
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	8952      	ldrh	r2, [r2, #10]
 80129d8:	440a      	add	r2, r1
 80129da:	4293      	cmp	r3, r2
 80129dc:	d30f      	bcc.n	80129fe <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80129de:	230a      	movs	r3, #10
 80129e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	7c1b      	ldrb	r3, [r3, #16]
 80129e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80129ec:	4611      	mov	r1, r2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f002 f835 	bl	8014a5e <RegionGetPhyParam>
 80129f4:	4603      	mov	r3, r0
 80129f6:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80129f8:	6a3b      	ldr	r3, [r7, #32]
 80129fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	68fa      	ldr	r2, [r7, #12]
 8012a04:	8912      	ldrh	r2, [r2, #8]
 8012a06:	4611      	mov	r1, r2
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	8952      	ldrh	r2, [r2, #10]
 8012a0c:	0052      	lsls	r2, r2, #1
 8012a0e:	440a      	add	r2, r1
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d33c      	bcc.n	8012a8e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	8912      	ldrh	r2, [r2, #8]
 8012a1c:	1a9b      	subs	r3, r3, r2
 8012a1e:	68fa      	ldr	r2, [r7, #12]
 8012a20:	8952      	ldrh	r2, [r2, #10]
 8012a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a26:	fb01 f202 	mul.w	r2, r1, r2
 8012a2a:	1a9b      	subs	r3, r3, r2
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d12e      	bne.n	8012a8e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012a30:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8012a34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d110      	bne.n	8012a5e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d009      	beq.n	8012a58 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012a44:	2302      	movs	r3, #2
 8012a46:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	7c1b      	ldrb	r3, [r3, #16]
 8012a4c:	f107 0210 	add.w	r2, r7, #16
 8012a50:	4611      	mov	r1, r2
 8012a52:	4618      	mov	r0, r3
 8012a54:	f002 f82c 	bl	8014ab0 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012a5e:	2321      	movs	r3, #33	; 0x21
 8012a60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8012a64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012a68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	7bdb      	ldrb	r3, [r3, #15]
 8012a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	7c1b      	ldrb	r3, [r3, #16]
 8012a78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012a7c:	4611      	mov	r1, r2
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f001 ffed 	bl	8014a5e <RegionGetPhyParam>
 8012a84:	4603      	mov	r3, r0
 8012a86:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012a88:	6a3b      	ldr	r3, [r7, #32]
 8012a8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8012a94:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a9c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012aa4:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3730      	adds	r7, #48	; 0x30
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012ab2:	b480      	push	{r7}
 8012ab4:	b085      	sub	sp, #20
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	60f8      	str	r0, [r7, #12]
 8012aba:	60b9      	str	r1, [r7, #8]
 8012abc:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012abe:	bf00      	nop
 8012ac0:	3714      	adds	r7, #20
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bc80      	pop	{r7}
 8012ac6:	4770      	bx	lr

08012ac8 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	4603      	mov	r3, r0
 8012ad0:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ad2:	bf00      	nop
 8012ad4:	370c      	adds	r7, #12
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bc80      	pop	{r7}
 8012ada:	4770      	bx	lr

08012adc <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ae6:	bf00      	nop
 8012ae8:	370c      	adds	r7, #12
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bc80      	pop	{r7}
 8012aee:	4770      	bx	lr

08012af0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012af0:	b480      	push	{r7}
 8012af2:	b083      	sub	sp, #12
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	4603      	mov	r3, r0
 8012af8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012afa:	bf00      	nop
 8012afc:	370c      	adds	r7, #12
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bc80      	pop	{r7}
 8012b02:	4770      	bx	lr

08012b04 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012b04:	b480      	push	{r7}
 8012b06:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012b08:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bc80      	pop	{r7}
 8012b10:	4770      	bx	lr

08012b12 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012b12:	b480      	push	{r7}
 8012b14:	b083      	sub	sp, #12
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b1a:	bf00      	nop
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bc80      	pop	{r7}
 8012b22:	4770      	bx	lr

08012b24 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b2c:	bf00      	nop
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bc80      	pop	{r7}
 8012b34:	4770      	bx	lr

08012b36 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012b36:	b480      	push	{r7}
 8012b38:	b083      	sub	sp, #12
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b3e:	bf00      	nop
 8012b40:	370c      	adds	r7, #12
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bc80      	pop	{r7}
 8012b46:	4770      	bx	lr

08012b48 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	460b      	mov	r3, r1
 8012b52:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012b54:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bc80      	pop	{r7}
 8012b5e:	4770      	bx	lr

08012b60 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012b60:	b480      	push	{r7}
 8012b62:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b64:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bc80      	pop	{r7}
 8012b6c:	4770      	bx	lr

08012b6e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012b6e:	b480      	push	{r7}
 8012b70:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b72:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bc80      	pop	{r7}
 8012b7a:	4770      	bx	lr

08012b7c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b80:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bc80      	pop	{r7}
 8012b88:	4770      	bx	lr

08012b8a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b8e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bc80      	pop	{r7}
 8012b96:	4770      	bx	lr

08012b98 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ba2:	bf00      	nop
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bc80      	pop	{r7}
 8012baa:	4770      	bx	lr

08012bac <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012bac:	b480      	push	{r7}
 8012bae:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bb0:	bf00      	nop
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bc80      	pop	{r7}
 8012bb6:	4770      	bx	lr

08012bb8 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012bb8:	b480      	push	{r7}
 8012bba:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bbc:	bf00      	nop
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bc80      	pop	{r7}
 8012bc2:	4770      	bx	lr

08012bc4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b083      	sub	sp, #12
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	4603      	mov	r3, r0
 8012bcc:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012bce:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	370c      	adds	r7, #12
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bc80      	pop	{r7}
 8012bd8:	4770      	bx	lr

08012bda <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012bda:	b480      	push	{r7}
 8012bdc:	b083      	sub	sp, #12
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012be2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bc80      	pop	{r7}
 8012bec:	4770      	bx	lr

08012bee <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012bee:	b480      	push	{r7}
 8012bf0:	b083      	sub	sp, #12
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012bf6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	370c      	adds	r7, #12
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bc80      	pop	{r7}
 8012c00:	4770      	bx	lr

08012c02 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012c02:	b480      	push	{r7}
 8012c04:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c06:	bf00      	nop
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bc80      	pop	{r7}
 8012c0c:	4770      	bx	lr

08012c0e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012c0e:	b480      	push	{r7}
 8012c10:	b083      	sub	sp, #12
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	4603      	mov	r3, r0
 8012c16:	6039      	str	r1, [r7, #0]
 8012c18:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012c1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	370c      	adds	r7, #12
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bc80      	pop	{r7}
 8012c24:	4770      	bx	lr

08012c26 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012c26:	b480      	push	{r7}
 8012c28:	b083      	sub	sp, #12
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	603a      	str	r2, [r7, #0]
 8012c30:	80fb      	strh	r3, [r7, #6]
 8012c32:	460b      	mov	r3, r1
 8012c34:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c36:	bf00      	nop
 8012c38:	370c      	adds	r7, #12
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bc80      	pop	{r7}
 8012c3e:	4770      	bx	lr

08012c40 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012c40:	b480      	push	{r7}
 8012c42:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c44:	bf00      	nop
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bc80      	pop	{r7}
 8012c4a:	4770      	bx	lr

08012c4c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012c54:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	370c      	adds	r7, #12
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bc80      	pop	{r7}
 8012c5e:	4770      	bx	lr

08012c60 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012c68:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	370c      	adds	r7, #12
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bc80      	pop	{r7}
 8012c72:	4770      	bx	lr

08012c74 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012c74:	b480      	push	{r7}
 8012c76:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c78:	bf00      	nop
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bc80      	pop	{r7}
 8012c7e:	4770      	bx	lr

08012c80 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bc80      	pop	{r7}
 8012c94:	4770      	bx	lr

08012c96 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012c96:	b480      	push	{r7}
 8012c98:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c9a:	bf00      	nop
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bc80      	pop	{r7}
 8012ca0:	4770      	bx	lr

08012ca2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012ca2:	b480      	push	{r7}
 8012ca4:	b085      	sub	sp, #20
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012cae:	2300      	movs	r3, #0
 8012cb0:	81fb      	strh	r3, [r7, #14]
 8012cb2:	e00a      	b.n	8012cca <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012cb4:	89fb      	ldrh	r3, [r7, #14]
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	4413      	add	r3, r2
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <IsSlotFree+0x22>
        {
            return false;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	e006      	b.n	8012cd2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012cc4:	89fb      	ldrh	r3, [r7, #14]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	81fb      	strh	r3, [r7, #14]
 8012cca:	89fb      	ldrh	r3, [r7, #14]
 8012ccc:	2b0f      	cmp	r3, #15
 8012cce:	d9f1      	bls.n	8012cb4 <IsSlotFree+0x12>
        }
    }
    return true;
 8012cd0:	2301      	movs	r3, #1
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3714      	adds	r7, #20
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bc80      	pop	{r7}
 8012cda:	4770      	bx	lr

08012cdc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012ce6:	e007      	b.n	8012cf8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012ce8:	79fb      	ldrb	r3, [r7, #7]
 8012cea:	3301      	adds	r3, #1
 8012cec:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012cee:	79fb      	ldrb	r3, [r7, #7]
 8012cf0:	2b20      	cmp	r3, #32
 8012cf2:	d101      	bne.n	8012cf8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	e012      	b.n	8012d1e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012cf8:	79fb      	ldrb	r3, [r7, #7]
 8012cfa:	011b      	lsls	r3, r3, #4
 8012cfc:	3308      	adds	r3, #8
 8012cfe:	4a0a      	ldr	r2, [pc, #40]	; (8012d28 <MallocNewMacCommandSlot+0x4c>)
 8012d00:	4413      	add	r3, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ff ffcd 	bl	8012ca2 <IsSlotFree>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	f083 0301 	eor.w	r3, r3, #1
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d1e9      	bne.n	8012ce8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012d14:	79fb      	ldrb	r3, [r7, #7]
 8012d16:	011b      	lsls	r3, r3, #4
 8012d18:	3308      	adds	r3, #8
 8012d1a:	4a03      	ldr	r2, [pc, #12]	; (8012d28 <MallocNewMacCommandSlot+0x4c>)
 8012d1c:	4413      	add	r3, r2
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	200017e4 	.word	0x200017e4

08012d2c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d101      	bne.n	8012d3e <FreeMacCommandSlot+0x12>
    {
        return false;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	e005      	b.n	8012d4a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012d3e:	2210      	movs	r2, #16
 8012d40:	2100      	movs	r1, #0
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f004 fa7e 	bl	8017244 <memset1>

    return true;
 8012d48:	2301      	movs	r3, #1
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3708      	adds	r7, #8
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012d52:	b480      	push	{r7}
 8012d54:	b083      	sub	sp, #12
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d101      	bne.n	8012d64 <LinkedListInit+0x12>
    {
        return false;
 8012d60:	2300      	movs	r3, #0
 8012d62:	e006      	b.n	8012d72 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2200      	movs	r2, #0
 8012d68:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	605a      	str	r2, [r3, #4]

    return true;
 8012d70:	2301      	movs	r3, #1
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	370c      	adds	r7, #12
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bc80      	pop	{r7}
 8012d7a:	4770      	bx	lr

08012d7c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d002      	beq.n	8012d92 <LinkedListAdd+0x16>
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d101      	bne.n	8012d96 <LinkedListAdd+0x1a>
    {
        return false;
 8012d92:	2300      	movs	r3, #0
 8012d94:	e015      	b.n	8012dc2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d102      	bne.n	8012da4 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	683a      	ldr	r2, [r7, #0]
 8012da2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d003      	beq.n	8012db4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	683a      	ldr	r2, [r7, #0]
 8012db2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	2200      	movs	r2, #0
 8012db8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	605a      	str	r2, [r3, #4]

    return true;
 8012dc0:	2301      	movs	r3, #1
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bc80      	pop	{r7}
 8012dca:	4770      	bx	lr

08012dcc <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b085      	sub	sp, #20
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d002      	beq.n	8012de2 <LinkedListGetPrevious+0x16>
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d101      	bne.n	8012de6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012de2:	2300      	movs	r3, #0
 8012de4:	e016      	b.n	8012e14 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012dec:	683a      	ldr	r2, [r7, #0]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d00c      	beq.n	8012e0e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012df4:	e002      	b.n	8012dfc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d007      	beq.n	8012e12 <LinkedListGetPrevious+0x46>
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	683a      	ldr	r2, [r7, #0]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d1f4      	bne.n	8012df6 <LinkedListGetPrevious+0x2a>
 8012e0c:	e001      	b.n	8012e12 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012e12:	68fb      	ldr	r3, [r7, #12]
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3714      	adds	r7, #20
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bc80      	pop	{r7}
 8012e1c:	4770      	bx	lr

08012e1e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012e1e:	b580      	push	{r7, lr}
 8012e20:	b084      	sub	sp, #16
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
 8012e26:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d002      	beq.n	8012e34 <LinkedListRemove+0x16>
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d101      	bne.n	8012e38 <LinkedListRemove+0x1a>
    {
        return false;
 8012e34:	2300      	movs	r3, #0
 8012e36:	e020      	b.n	8012e7a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012e38:	6839      	ldr	r1, [r7, #0]
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f7ff ffc6 	bl	8012dcc <LinkedListGetPrevious>
 8012e40:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	683a      	ldr	r2, [r7, #0]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d103      	bne.n	8012e54 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	683a      	ldr	r2, [r7, #0]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d102      	bne.n	8012e64 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d003      	beq.n	8012e72 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	2200      	movs	r2, #0
 8012e76:	601a      	str	r2, [r3, #0]

    return true;
 8012e78:	2301      	movs	r3, #1
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3710      	adds	r7, #16
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
	...

08012e84 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	2b11      	cmp	r3, #17
 8012e92:	bf8c      	ite	hi
 8012e94:	2201      	movhi	r2, #1
 8012e96:	2200      	movls	r2, #0
 8012e98:	b2d2      	uxtb	r2, r2
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	d10d      	bne.n	8012eba <IsSticky+0x36>
 8012e9e:	4a0a      	ldr	r2, [pc, #40]	; (8012ec8 <IsSticky+0x44>)
 8012ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	bf14      	ite	ne
 8012eac:	2301      	movne	r3, #1
 8012eae:	2300      	moveq	r3, #0
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e000      	b.n	8012ebc <IsSticky+0x38>
        default:
            return false;
 8012eba:	2300      	movs	r3, #0
    }
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bc80      	pop	{r7}
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop
 8012ec8:	00020720 	.word	0x00020720

08012ecc <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8012ed6:	2300      	movs	r3, #0
    }
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	370c      	adds	r7, #12
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bc80      	pop	{r7}
 8012ee0:	4770      	bx	lr
	...

08012ee4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012ee8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8012eec:	2100      	movs	r1, #0
 8012eee:	4804      	ldr	r0, [pc, #16]	; (8012f00 <LoRaMacCommandsInit+0x1c>)
 8012ef0:	f004 f9a8 	bl	8017244 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012ef4:	4802      	ldr	r0, [pc, #8]	; (8012f00 <LoRaMacCommandsInit+0x1c>)
 8012ef6:	f7ff ff2c 	bl	8012d52 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012efa:	2300      	movs	r3, #0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	200017e4 	.word	0x200017e4

08012f04 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b086      	sub	sp, #24
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
 8012f10:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d101      	bne.n	8012f1c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012f18:	2301      	movs	r3, #1
 8012f1a:	e03b      	b.n	8012f94 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012f1c:	f7ff fede 	bl	8012cdc <MallocNewMacCommandSlot>
 8012f20:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d101      	bne.n	8012f2c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012f28:	2302      	movs	r3, #2
 8012f2a:	e033      	b.n	8012f94 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012f2c:	6979      	ldr	r1, [r7, #20]
 8012f2e:	481b      	ldr	r0, [pc, #108]	; (8012f9c <LoRaMacCommandsAddCmd+0x98>)
 8012f30:	f7ff ff24 	bl	8012d7c <LinkedListAdd>
 8012f34:	4603      	mov	r3, r0
 8012f36:	f083 0301 	eor.w	r3, r3, #1
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012f40:	2305      	movs	r3, #5
 8012f42:	e027      	b.n	8012f94 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	7bfa      	ldrb	r2, [r7, #15]
 8012f48:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	687a      	ldr	r2, [r7, #4]
 8012f4e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	3305      	adds	r3, #5
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	b292      	uxth	r2, r2
 8012f58:	68b9      	ldr	r1, [r7, #8]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f004 f937 	bl	80171ce <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012f60:	7bfb      	ldrb	r3, [r7, #15]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff ff8e 	bl	8012e84 <IsSticky>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8012f70:	7bfb      	ldrb	r3, [r7, #15]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff ffaa 	bl	8012ecc <IsConfirmationRequired>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012f80:	4b06      	ldr	r3, [pc, #24]	; (8012f9c <LoRaMacCommandsAddCmd+0x98>)
 8012f82:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4413      	add	r3, r2
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	4a03      	ldr	r2, [pc, #12]	; (8012f9c <LoRaMacCommandsAddCmd+0x98>)
 8012f8e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3718      	adds	r7, #24
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	200017e4 	.word	0x200017e4

08012fa0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d101      	bne.n	8012fb2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	e021      	b.n	8012ff6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012fb2:	6879      	ldr	r1, [r7, #4]
 8012fb4:	4812      	ldr	r0, [pc, #72]	; (8013000 <LoRaMacCommandsRemoveCmd+0x60>)
 8012fb6:	f7ff ff32 	bl	8012e1e <LinkedListRemove>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	f083 0301 	eor.w	r3, r3, #1
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d001      	beq.n	8012fca <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012fc6:	2303      	movs	r3, #3
 8012fc8:	e015      	b.n	8012ff6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012fca:	4b0d      	ldr	r3, [pc, #52]	; (8013000 <LoRaMacCommandsRemoveCmd+0x60>)
 8012fcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	1ad3      	subs	r3, r2, r3
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	4a09      	ldr	r2, [pc, #36]	; (8013000 <LoRaMacCommandsRemoveCmd+0x60>)
 8012fda:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7ff fea4 	bl	8012d2c <FreeMacCommandSlot>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	f083 0301 	eor.w	r3, r3, #1
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012ff0:	2305      	movs	r3, #5
 8012ff2:	e000      	b.n	8012ff6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	200017e4 	.word	0x200017e4

08013004 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8013004:	b480      	push	{r7}
 8013006:	b085      	sub	sp, #20
 8013008:	af00      	add	r7, sp, #0
 801300a:	4603      	mov	r3, r0
 801300c:	6039      	str	r1, [r7, #0]
 801300e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013010:	4b0e      	ldr	r3, [pc, #56]	; (801304c <LoRaMacCommandsGetCmd+0x48>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013016:	e002      	b.n	801301e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d004      	beq.n	801302e <LoRaMacCommandsGetCmd+0x2a>
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	791b      	ldrb	r3, [r3, #4]
 8013028:	79fa      	ldrb	r2, [r7, #7]
 801302a:	429a      	cmp	r2, r3
 801302c:	d1f4      	bne.n	8013018 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d101      	bne.n	801303e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801303a:	2303      	movs	r3, #3
 801303c:	e000      	b.n	8013040 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801303e:	2300      	movs	r3, #0
}
 8013040:	4618      	mov	r0, r3
 8013042:	3714      	adds	r7, #20
 8013044:	46bd      	mov	sp, r7
 8013046:	bc80      	pop	{r7}
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	200017e4 	.word	0x200017e4

08013050 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013056:	4b0f      	ldr	r3, [pc, #60]	; (8013094 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801305c:	e012      	b.n	8013084 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	7b1b      	ldrb	r3, [r3, #12]
 8013062:	f083 0301 	eor.w	r3, r3, #1
 8013066:	b2db      	uxtb	r3, r3
 8013068:	2b00      	cmp	r3, #0
 801306a:	d008      	beq.n	801307e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff ff94 	bl	8012fa0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	607b      	str	r3, [r7, #4]
 801307c:	e002      	b.n	8013084 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d1e9      	bne.n	801305e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3708      	adds	r7, #8
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	200017e4 	.word	0x200017e4

08013098 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801309e:	4b13      	ldr	r3, [pc, #76]	; (80130ec <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80130a4:	e01a      	b.n	80130dc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	791b      	ldrb	r3, [r3, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7ff fee7 	bl	8012e84 <IsSticky>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d00d      	beq.n	80130d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	791b      	ldrb	r3, [r3, #4]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff ff03 	bl	8012ecc <IsConfirmationRequired>
 80130c6:	4603      	mov	r3, r0
 80130c8:	f083 0301 	eor.w	r3, r3, #1
 80130cc:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d002      	beq.n	80130d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff ff64 	bl	8012fa0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d1e1      	bne.n	80130a6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80130e2:	2300      	movs	r3, #0
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3708      	adds	r7, #8
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	200017e4 	.word	0x200017e4

080130f0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d101      	bne.n	8013102 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80130fe:	2301      	movs	r3, #1
 8013100:	e005      	b.n	801310e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013102:	4b05      	ldr	r3, [pc, #20]	; (8013118 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013104:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801310c:	2300      	movs	r3, #0
}
 801310e:	4618      	mov	r0, r3
 8013110:	370c      	adds	r7, #12
 8013112:	46bd      	mov	sp, r7
 8013114:	bc80      	pop	{r7}
 8013116:	4770      	bx	lr
 8013118:	200017e4 	.word	0x200017e4

0801311c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b088      	sub	sp, #32
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013128:	4b25      	ldr	r3, [pc, #148]	; (80131c0 <LoRaMacCommandsSerializeCmds+0xa4>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d002      	beq.n	801313e <LoRaMacCommandsSerializeCmds+0x22>
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d126      	bne.n	801318c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801313e:	2301      	movs	r3, #1
 8013140:	e039      	b.n	80131b6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013142:	7efb      	ldrb	r3, [r7, #27]
 8013144:	68fa      	ldr	r2, [r7, #12]
 8013146:	1ad2      	subs	r2, r2, r3
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	3301      	adds	r3, #1
 801314e:	429a      	cmp	r2, r3
 8013150:	d320      	bcc.n	8013194 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013152:	7efb      	ldrb	r3, [r7, #27]
 8013154:	1c5a      	adds	r2, r3, #1
 8013156:	76fa      	strb	r2, [r7, #27]
 8013158:	461a      	mov	r2, r3
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4413      	add	r3, r2
 801315e:	69fa      	ldr	r2, [r7, #28]
 8013160:	7912      	ldrb	r2, [r2, #4]
 8013162:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013164:	7efb      	ldrb	r3, [r7, #27]
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	18d0      	adds	r0, r2, r3
 801316a:	69fb      	ldr	r3, [r7, #28]
 801316c:	1d59      	adds	r1, r3, #5
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	689b      	ldr	r3, [r3, #8]
 8013172:	b29b      	uxth	r3, r3
 8013174:	461a      	mov	r2, r3
 8013176:	f004 f82a 	bl	80171ce <memcpy1>
            itr += curElement->PayloadSize;
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	b2da      	uxtb	r2, r3
 8013180:	7efb      	ldrb	r3, [r7, #27]
 8013182:	4413      	add	r3, r2
 8013184:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d1d7      	bne.n	8013142 <LoRaMacCommandsSerializeCmds+0x26>
 8013192:	e009      	b.n	80131a8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013194:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013196:	e007      	b.n	80131a8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801319e:	69f8      	ldr	r0, [r7, #28]
 80131a0:	f7ff fefe 	bl	8012fa0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1f4      	bne.n	8013198 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80131ae:	68b8      	ldr	r0, [r7, #8]
 80131b0:	f7ff ff9e 	bl	80130f0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80131b4:	2300      	movs	r3, #0
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	3720      	adds	r7, #32
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	200017e4 	.word	0x200017e4

080131c4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	4603      	mov	r3, r0
 80131cc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80131ce:	2300      	movs	r3, #0
 80131d0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80131d2:	79fb      	ldrb	r3, [r7, #7]
 80131d4:	3b02      	subs	r3, #2
 80131d6:	2b11      	cmp	r3, #17
 80131d8:	d850      	bhi.n	801327c <LoRaMacCommandsGetCmdSize+0xb8>
 80131da:	a201      	add	r2, pc, #4	; (adr r2, 80131e0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80131dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e0:	08013229 	.word	0x08013229
 80131e4:	0801322f 	.word	0x0801322f
 80131e8:	08013235 	.word	0x08013235
 80131ec:	0801323b 	.word	0x0801323b
 80131f0:	08013241 	.word	0x08013241
 80131f4:	08013247 	.word	0x08013247
 80131f8:	0801324d 	.word	0x0801324d
 80131fc:	08013253 	.word	0x08013253
 8013200:	08013259 	.word	0x08013259
 8013204:	0801327d 	.word	0x0801327d
 8013208:	0801327d 	.word	0x0801327d
 801320c:	0801325f 	.word	0x0801325f
 8013210:	0801327d 	.word	0x0801327d
 8013214:	0801327d 	.word	0x0801327d
 8013218:	08013265 	.word	0x08013265
 801321c:	0801326b 	.word	0x0801326b
 8013220:	08013271 	.word	0x08013271
 8013224:	08013277 	.word	0x08013277
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013228:	2303      	movs	r3, #3
 801322a:	73fb      	strb	r3, [r7, #15]
            break;
 801322c:	e027      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801322e:	2305      	movs	r3, #5
 8013230:	73fb      	strb	r3, [r7, #15]
            break;
 8013232:	e024      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013234:	2302      	movs	r3, #2
 8013236:	73fb      	strb	r3, [r7, #15]
            break;
 8013238:	e021      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801323a:	2305      	movs	r3, #5
 801323c:	73fb      	strb	r3, [r7, #15]
            break;
 801323e:	e01e      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013240:	2301      	movs	r3, #1
 8013242:	73fb      	strb	r3, [r7, #15]
            break;
 8013244:	e01b      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013246:	2306      	movs	r3, #6
 8013248:	73fb      	strb	r3, [r7, #15]
            break;
 801324a:	e018      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801324c:	2302      	movs	r3, #2
 801324e:	73fb      	strb	r3, [r7, #15]
            break;
 8013250:	e015      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013252:	2302      	movs	r3, #2
 8013254:	73fb      	strb	r3, [r7, #15]
            break;
 8013256:	e012      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013258:	2305      	movs	r3, #5
 801325a:	73fb      	strb	r3, [r7, #15]
            break;
 801325c:	e00f      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801325e:	2306      	movs	r3, #6
 8013260:	73fb      	strb	r3, [r7, #15]
            break;
 8013262:	e00c      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013264:	2301      	movs	r3, #1
 8013266:	73fb      	strb	r3, [r7, #15]
            break;
 8013268:	e009      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801326a:	2305      	movs	r3, #5
 801326c:	73fb      	strb	r3, [r7, #15]
            break;
 801326e:	e006      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013270:	2304      	movs	r3, #4
 8013272:	73fb      	strb	r3, [r7, #15]
            break;
 8013274:	e003      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013276:	2304      	movs	r3, #4
 8013278:	73fb      	strb	r3, [r7, #15]
            break;
 801327a:	e000      	b.n	801327e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801327c:	bf00      	nop
        }
    }
    return cidSize;
 801327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013280:	4618      	mov	r0, r3
 8013282:	3714      	adds	r7, #20
 8013284:	46bd      	mov	sp, r7
 8013286:	bc80      	pop	{r7}
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop

0801328c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	4a07      	ldr	r2, [pc, #28]	; (80132b4 <IncreaseBufferPointer+0x28>)
 8013298:	4293      	cmp	r3, r2
 801329a:	d102      	bne.n	80132a2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801329c:	4b06      	ldr	r3, [pc, #24]	; (80132b8 <IncreaseBufferPointer+0x2c>)
 801329e:	607b      	str	r3, [r7, #4]
 80132a0:	e002      	b.n	80132a8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	3304      	adds	r3, #4
 80132a6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80132a8:	687b      	ldr	r3, [r7, #4]
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	370c      	adds	r7, #12
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bc80      	pop	{r7}
 80132b2:	4770      	bx	lr
 80132b4:	20001a0c 	.word	0x20001a0c
 80132b8:	200019fc 	.word	0x200019fc

080132bc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	4603      	mov	r3, r0
 80132c4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80132c6:	79fb      	ldrb	r3, [r7, #7]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <IsListEmpty+0x14>
    {
        return true;
 80132cc:	2301      	movs	r3, #1
 80132ce:	e000      	b.n	80132d2 <IsListEmpty+0x16>
    }
    return false;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bc80      	pop	{r7}
 80132da:	4770      	bx	lr

080132dc <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	4603      	mov	r3, r0
 80132e4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80132e6:	79fb      	ldrb	r3, [r7, #7]
 80132e8:	2b04      	cmp	r3, #4
 80132ea:	d901      	bls.n	80132f0 <IsListFull+0x14>
    {
        return true;
 80132ec:	2301      	movs	r3, #1
 80132ee:	e000      	b.n	80132f2 <IsListFull+0x16>
    }
    return false;
 80132f0:	2300      	movs	r3, #0
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bc80      	pop	{r7}
 80132fa:	4770      	bx	lr

080132fc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b086      	sub	sp, #24
 8013300:	af00      	add	r7, sp, #0
 8013302:	4603      	mov	r3, r0
 8013304:	60b9      	str	r1, [r7, #8]
 8013306:	607a      	str	r2, [r7, #4]
 8013308:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801330e:	4b13      	ldr	r3, [pc, #76]	; (801335c <GetElement+0x60>)
 8013310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013314:	4618      	mov	r0, r3
 8013316:	f7ff ffd1 	bl	80132bc <IsListEmpty>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d001      	beq.n	8013324 <GetElement+0x28>
    {
        return NULL;
 8013320:	2300      	movs	r3, #0
 8013322:	e017      	b.n	8013354 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013324:	2300      	movs	r3, #0
 8013326:	74fb      	strb	r3, [r7, #19]
 8013328:	e00d      	b.n	8013346 <GetElement+0x4a>
    {
        if( element->Request == request )
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	7bfa      	ldrb	r2, [r7, #15]
 8013330:	429a      	cmp	r2, r3
 8013332:	d101      	bne.n	8013338 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	e00d      	b.n	8013354 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013338:	6978      	ldr	r0, [r7, #20]
 801333a:	f7ff ffa7 	bl	801328c <IncreaseBufferPointer>
 801333e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013340:	7cfb      	ldrb	r3, [r7, #19]
 8013342:	3301      	adds	r3, #1
 8013344:	74fb      	strb	r3, [r7, #19]
 8013346:	4b05      	ldr	r3, [pc, #20]	; (801335c <GetElement+0x60>)
 8013348:	f893 3020 	ldrb.w	r3, [r3, #32]
 801334c:	7cfa      	ldrb	r2, [r7, #19]
 801334e:	429a      	cmp	r2, r3
 8013350:	d3eb      	bcc.n	801332a <GetElement+0x2e>
    }

    return NULL;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3718      	adds	r7, #24
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	200019f0 	.word	0x200019f0

08013360 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013368:	4a0c      	ldr	r2, [pc, #48]	; (801339c <LoRaMacConfirmQueueInit+0x3c>)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801336e:	4b0b      	ldr	r3, [pc, #44]	; (801339c <LoRaMacConfirmQueueInit+0x3c>)
 8013370:	2200      	movs	r2, #0
 8013372:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013376:	4b09      	ldr	r3, [pc, #36]	; (801339c <LoRaMacConfirmQueueInit+0x3c>)
 8013378:	4a09      	ldr	r2, [pc, #36]	; (80133a0 <LoRaMacConfirmQueueInit+0x40>)
 801337a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801337c:	4b07      	ldr	r3, [pc, #28]	; (801339c <LoRaMacConfirmQueueInit+0x3c>)
 801337e:	4a08      	ldr	r2, [pc, #32]	; (80133a0 <LoRaMacConfirmQueueInit+0x40>)
 8013380:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013382:	2214      	movs	r2, #20
 8013384:	21ff      	movs	r1, #255	; 0xff
 8013386:	4806      	ldr	r0, [pc, #24]	; (80133a0 <LoRaMacConfirmQueueInit+0x40>)
 8013388:	f003 ff5c 	bl	8017244 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801338c:	4b03      	ldr	r3, [pc, #12]	; (801339c <LoRaMacConfirmQueueInit+0x3c>)
 801338e:	2201      	movs	r2, #1
 8013390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013394:	bf00      	nop
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	200019f0 	.word	0x200019f0
 80133a0:	200019fc 	.word	0x200019fc

080133a4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80133ac:	4b19      	ldr	r3, [pc, #100]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7ff ff92 	bl	80132dc <IsListFull>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d001      	beq.n	80133c2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80133be:	2300      	movs	r3, #0
 80133c0:	e024      	b.n	801340c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80133c2:	4b14      	ldr	r3, [pc, #80]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	7812      	ldrb	r2, [r2, #0]
 80133ca:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80133cc:	4b11      	ldr	r3, [pc, #68]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133ce:	689b      	ldr	r3, [r3, #8]
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	7852      	ldrb	r2, [r2, #1]
 80133d4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80133d6:	4b0f      	ldr	r3, [pc, #60]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133d8:	689b      	ldr	r3, [r3, #8]
 80133da:	687a      	ldr	r2, [r7, #4]
 80133dc:	78d2      	ldrb	r2, [r2, #3]
 80133de:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80133e0:	4b0c      	ldr	r3, [pc, #48]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133e2:	689b      	ldr	r3, [r3, #8]
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	7892      	ldrb	r2, [r2, #2]
 80133e8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80133ea:	4b0a      	ldr	r3, [pc, #40]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133f0:	3301      	adds	r3, #1
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	4b07      	ldr	r3, [pc, #28]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133f6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80133fa:	4b06      	ldr	r3, [pc, #24]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	4618      	mov	r0, r3
 8013400:	f7ff ff44 	bl	801328c <IncreaseBufferPointer>
 8013404:	4603      	mov	r3, r0
 8013406:	4a03      	ldr	r2, [pc, #12]	; (8013414 <LoRaMacConfirmQueueAdd+0x70>)
 8013408:	6093      	str	r3, [r2, #8]

    return true;
 801340a:	2301      	movs	r3, #1
}
 801340c:	4618      	mov	r0, r3
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	200019f0 	.word	0x200019f0

08013418 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801341c:	4b0e      	ldr	r3, [pc, #56]	; (8013458 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801341e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013422:	4618      	mov	r0, r3
 8013424:	f7ff ff4a 	bl	80132bc <IsListEmpty>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801342e:	2300      	movs	r3, #0
 8013430:	e010      	b.n	8013454 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013432:	4b09      	ldr	r3, [pc, #36]	; (8013458 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013438:	3b01      	subs	r3, #1
 801343a:	b2da      	uxtb	r2, r3
 801343c:	4b06      	ldr	r3, [pc, #24]	; (8013458 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801343e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013442:	4b05      	ldr	r3, [pc, #20]	; (8013458 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff ff20 	bl	801328c <IncreaseBufferPointer>
 801344c:	4603      	mov	r3, r0
 801344e:	4a02      	ldr	r2, [pc, #8]	; (8013458 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013450:	6053      	str	r3, [r2, #4]

    return true;
 8013452:	2301      	movs	r3, #1
}
 8013454:	4618      	mov	r0, r3
 8013456:	bd80      	pop	{r7, pc}
 8013458:	200019f0 	.word	0x200019f0

0801345c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b084      	sub	sp, #16
 8013460:	af00      	add	r7, sp, #0
 8013462:	4603      	mov	r3, r0
 8013464:	460a      	mov	r2, r1
 8013466:	71fb      	strb	r3, [r7, #7]
 8013468:	4613      	mov	r3, r2
 801346a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801346c:	2300      	movs	r3, #0
 801346e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013470:	4b10      	ldr	r3, [pc, #64]	; (80134b4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff ff20 	bl	80132bc <IsListEmpty>
 801347c:	4603      	mov	r3, r0
 801347e:	f083 0301 	eor.w	r3, r3, #1
 8013482:	b2db      	uxtb	r3, r3
 8013484:	2b00      	cmp	r3, #0
 8013486:	d011      	beq.n	80134ac <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013488:	4b0a      	ldr	r3, [pc, #40]	; (80134b4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801348a:	6859      	ldr	r1, [r3, #4]
 801348c:	4b09      	ldr	r3, [pc, #36]	; (80134b4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801348e:	689a      	ldr	r2, [r3, #8]
 8013490:	79bb      	ldrb	r3, [r7, #6]
 8013492:	4618      	mov	r0, r3
 8013494:	f7ff ff32 	bl	80132fc <GetElement>
 8013498:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d005      	beq.n	80134ac <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	79fa      	ldrb	r2, [r7, #7]
 80134a4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2201      	movs	r2, #1
 80134aa:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80134ac:	bf00      	nop
 80134ae:	3710      	adds	r7, #16
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	200019f0 	.word	0x200019f0

080134b8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	4603      	mov	r3, r0
 80134c0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80134c2:	2300      	movs	r3, #0
 80134c4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80134c6:	4b10      	ldr	r3, [pc, #64]	; (8013508 <LoRaMacConfirmQueueGetStatus+0x50>)
 80134c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7ff fef5 	bl	80132bc <IsListEmpty>
 80134d2:	4603      	mov	r3, r0
 80134d4:	f083 0301 	eor.w	r3, r3, #1
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d00e      	beq.n	80134fc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80134de:	4b0a      	ldr	r3, [pc, #40]	; (8013508 <LoRaMacConfirmQueueGetStatus+0x50>)
 80134e0:	6859      	ldr	r1, [r3, #4]
 80134e2:	4b09      	ldr	r3, [pc, #36]	; (8013508 <LoRaMacConfirmQueueGetStatus+0x50>)
 80134e4:	689a      	ldr	r2, [r3, #8]
 80134e6:	79fb      	ldrb	r3, [r7, #7]
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7ff ff07 	bl	80132fc <GetElement>
 80134ee:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d002      	beq.n	80134fc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	785b      	ldrb	r3, [r3, #1]
 80134fa:	e000      	b.n	80134fe <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80134fc:	2301      	movs	r3, #1
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3710      	adds	r7, #16
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	200019f0 	.word	0x200019f0

0801350c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	4603      	mov	r3, r0
 8013514:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013516:	4b16      	ldr	r3, [pc, #88]	; (8013570 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801351c:	4a14      	ldr	r2, [pc, #80]	; (8013570 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801351e:	79fb      	ldrb	r3, [r7, #7]
 8013520:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013524:	4b12      	ldr	r3, [pc, #72]	; (8013570 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013526:	f893 3020 	ldrb.w	r3, [r3, #32]
 801352a:	4618      	mov	r0, r3
 801352c:	f7ff fec6 	bl	80132bc <IsListEmpty>
 8013530:	4603      	mov	r3, r0
 8013532:	f083 0301 	eor.w	r3, r3, #1
 8013536:	b2db      	uxtb	r3, r3
 8013538:	2b00      	cmp	r3, #0
 801353a:	d015      	beq.n	8013568 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	79fa      	ldrb	r2, [r7, #7]
 8013540:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	78db      	ldrb	r3, [r3, #3]
 8013546:	f083 0301 	eor.w	r3, r3, #1
 801354a:	b2db      	uxtb	r3, r3
 801354c:	2b00      	cmp	r3, #0
 801354e:	d002      	beq.n	8013556 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2201      	movs	r2, #1
 8013554:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013556:	68f8      	ldr	r0, [r7, #12]
 8013558:	f7ff fe98 	bl	801328c <IncreaseBufferPointer>
 801355c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801355e:	4b04      	ldr	r3, [pc, #16]	; (8013570 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	429a      	cmp	r2, r3
 8013566:	d1e9      	bne.n	801353c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013568:	bf00      	nop
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	200019f0 	.word	0x200019f0

08013574 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
 801357a:	4603      	mov	r3, r0
 801357c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801357e:	4b09      	ldr	r3, [pc, #36]	; (80135a4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013580:	6859      	ldr	r1, [r3, #4]
 8013582:	4b08      	ldr	r3, [pc, #32]	; (80135a4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013584:	689a      	ldr	r2, [r3, #8]
 8013586:	79fb      	ldrb	r3, [r7, #7]
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff feb7 	bl	80132fc <GetElement>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013594:	2301      	movs	r3, #1
 8013596:	e000      	b.n	801359a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013598:	2300      	movs	r3, #0
}
 801359a:	4618      	mov	r0, r3
 801359c:	3708      	adds	r7, #8
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	200019f0 	.word	0x200019f0

080135a8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80135b0:	4b25      	ldr	r3, [pc, #148]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80135b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135b6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80135b8:	2300      	movs	r3, #0
 80135ba:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80135bc:	f107 0308 	add.w	r3, r7, #8
 80135c0:	2204      	movs	r2, #4
 80135c2:	2100      	movs	r1, #0
 80135c4:	4618      	mov	r0, r3
 80135c6:	f003 fe3d 	bl	8017244 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80135ca:	2300      	movs	r3, #0
 80135cc:	73fb      	strb	r3, [r7, #15]
 80135ce:	e032      	b.n	8013636 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80135d0:	4b1d      	ldr	r3, [pc, #116]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	781a      	ldrb	r2, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80135da:	4b1b      	ldr	r3, [pc, #108]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	785a      	ldrb	r2, [r3, #1]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80135e4:	4b18      	ldr	r3, [pc, #96]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	789b      	ldrb	r3, [r3, #2]
 80135ea:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80135ec:	7b7b      	ldrb	r3, [r7, #13]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d005      	beq.n	80135fe <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80135f2:	4b15      	ldr	r3, [pc, #84]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	689b      	ldr	r3, [r3, #8]
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	4798      	blx	r3
 80135fc:	e00b      	b.n	8013616 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80135fe:	4b12      	ldr	r3, [pc, #72]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013606:	4b10      	ldr	r3, [pc, #64]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	785b      	ldrb	r3, [r3, #1]
 801360c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801360e:	4b0e      	ldr	r3, [pc, #56]	; (8013648 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	78db      	ldrb	r3, [r3, #3]
 8013614:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013616:	f7ff feff 	bl	8013418 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801361a:	7b7b      	ldrb	r3, [r7, #13]
 801361c:	f083 0301 	eor.w	r3, r3, #1
 8013620:	b2db      	uxtb	r3, r3
 8013622:	2b00      	cmp	r3, #0
 8013624:	d004      	beq.n	8013630 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013626:	f107 0308 	add.w	r3, r7, #8
 801362a:	4618      	mov	r0, r3
 801362c:	f7ff feba 	bl	80133a4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	3301      	adds	r3, #1
 8013634:	73fb      	strb	r3, [r7, #15]
 8013636:	7bfa      	ldrb	r2, [r7, #15]
 8013638:	7bbb      	ldrb	r3, [r7, #14]
 801363a:	429a      	cmp	r2, r3
 801363c:	d3c8      	bcc.n	80135d0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801363e:	bf00      	nop
 8013640:	bf00      	nop
 8013642:	3710      	adds	r7, #16
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}
 8013648:	200019f0 	.word	0x200019f0

0801364c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801364c:	b480      	push	{r7}
 801364e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013650:	4b03      	ldr	r3, [pc, #12]	; (8013660 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013652:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013656:	4618      	mov	r0, r3
 8013658:	46bd      	mov	sp, r7
 801365a:	bc80      	pop	{r7}
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	200019f0 	.word	0x200019f0

08013664 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013664:	b580      	push	{r7, lr}
 8013666:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013668:	4b06      	ldr	r3, [pc, #24]	; (8013684 <LoRaMacConfirmQueueIsFull+0x20>)
 801366a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff fe34 	bl	80132dc <IsListFull>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d001      	beq.n	801367e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801367a:	2301      	movs	r3, #1
 801367c:	e000      	b.n	8013680 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801367e:	2300      	movs	r3, #0
    }
}
 8013680:	4618      	mov	r0, r3
 8013682:	bd80      	pop	{r7, pc}
 8013684:	200019f0 	.word	0x200019f0

08013688 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b08e      	sub	sp, #56	; 0x38
 801368c:	af00      	add	r7, sp, #0
 801368e:	60f8      	str	r0, [r7, #12]
 8013690:	607b      	str	r3, [r7, #4]
 8013692:	460b      	mov	r3, r1
 8013694:	817b      	strh	r3, [r7, #10]
 8013696:	4613      	mov	r3, r2
 8013698:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d101      	bne.n	80136a4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80136a0:	2309      	movs	r3, #9
 80136a2:	e086      	b.n	80137b2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80136aa:	2301      	movs	r3, #1
 80136ac:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80136ae:	2300      	movs	r3, #0
 80136b0:	623b      	str	r3, [r7, #32]
 80136b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136b6:	2200      	movs	r2, #0
 80136b8:	601a      	str	r2, [r3, #0]
 80136ba:	605a      	str	r2, [r3, #4]
 80136bc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80136be:	2300      	movs	r3, #0
 80136c0:	613b      	str	r3, [r7, #16]
 80136c2:	f107 0314 	add.w	r3, r7, #20
 80136c6:	2200      	movs	r2, #0
 80136c8:	601a      	str	r2, [r3, #0]
 80136ca:	605a      	str	r2, [r3, #4]
 80136cc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80136ce:	2301      	movs	r3, #1
 80136d0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80136d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80136d6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	0a1b      	lsrs	r3, r3, #8
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	0c1b      	lsrs	r3, r3, #16
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	0e1b      	lsrs	r3, r3, #24
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80136f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80136fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136fe:	0a1b      	lsrs	r3, r3, #8
 8013700:	b2db      	uxtb	r3, r3
 8013702:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013706:	0c1b      	lsrs	r3, r3, #16
 8013708:	b2db      	uxtb	r3, r3
 801370a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801370e:	0e1b      	lsrs	r3, r3, #24
 8013710:	b2db      	uxtb	r3, r3
 8013712:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013714:	e048      	b.n	80137a8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013716:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013718:	b2db      	uxtb	r3, r3
 801371a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801371c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801371e:	3301      	adds	r3, #1
 8013720:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013722:	f107 0320 	add.w	r3, r7, #32
 8013726:	7a7a      	ldrb	r2, [r7, #9]
 8013728:	f107 0010 	add.w	r0, r7, #16
 801372c:	2110      	movs	r1, #16
 801372e:	f7f8 fa79 	bl	800bc24 <SecureElementAesEncrypt>
 8013732:	4603      	mov	r3, r0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d001      	beq.n	801373c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013738:	230e      	movs	r3, #14
 801373a:	e03a      	b.n	80137b2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801373c:	2300      	movs	r3, #0
 801373e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013742:	e01e      	b.n	8013782 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013744:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801374c:	4413      	add	r3, r2
 801374e:	461a      	mov	r2, r3
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	4413      	add	r3, r2
 8013754:	7819      	ldrb	r1, [r3, #0]
 8013756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801375a:	3338      	adds	r3, #56	; 0x38
 801375c:	443b      	add	r3, r7
 801375e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013762:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801376a:	4403      	add	r3, r0
 801376c:	4618      	mov	r0, r3
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	4403      	add	r3, r0
 8013772:	404a      	eors	r2, r1
 8013774:	b2d2      	uxtb	r2, r2
 8013776:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801377c:	3301      	adds	r3, #1
 801377e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013786:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801378a:	2a10      	cmp	r2, #16
 801378c:	bfa8      	it	ge
 801378e:	2210      	movge	r2, #16
 8013790:	b212      	sxth	r2, r2
 8013792:	4293      	cmp	r3, r2
 8013794:	dbd6      	blt.n	8013744 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013796:	897b      	ldrh	r3, [r7, #10]
 8013798:	3b10      	subs	r3, #16
 801379a:	b29b      	uxth	r3, r3
 801379c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801379e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137a2:	3310      	adds	r3, #16
 80137a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80137a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	dcb2      	bgt.n	8013716 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3738      	adds	r7, #56	; 0x38
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}

080137ba <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80137ba:	b490      	push	{r4, r7}
 80137bc:	b082      	sub	sp, #8
 80137be:	af00      	add	r7, sp, #0
 80137c0:	4604      	mov	r4, r0
 80137c2:	4608      	mov	r0, r1
 80137c4:	4611      	mov	r1, r2
 80137c6:	461a      	mov	r2, r3
 80137c8:	4623      	mov	r3, r4
 80137ca:	80fb      	strh	r3, [r7, #6]
 80137cc:	4603      	mov	r3, r0
 80137ce:	717b      	strb	r3, [r7, #5]
 80137d0:	460b      	mov	r3, r1
 80137d2:	713b      	strb	r3, [r7, #4]
 80137d4:	4613      	mov	r3, r2
 80137d6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d101      	bne.n	80137e2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137de:	2309      	movs	r3, #9
 80137e0:	e04e      	b.n	8013880 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	2249      	movs	r2, #73	; 0x49
 80137e6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	3301      	adds	r3, #1
 80137ec:	2200      	movs	r2, #0
 80137ee:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	3302      	adds	r3, #2
 80137f4:	2200      	movs	r2, #0
 80137f6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	3303      	adds	r3, #3
 80137fc:	2200      	movs	r2, #0
 80137fe:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013800:	69bb      	ldr	r3, [r7, #24]
 8013802:	3304      	adds	r3, #4
 8013804:	2200      	movs	r2, #0
 8013806:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	3305      	adds	r3, #5
 801380c:	78fa      	ldrb	r2, [r7, #3]
 801380e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	3306      	adds	r3, #6
 8013814:	693a      	ldr	r2, [r7, #16]
 8013816:	b2d2      	uxtb	r2, r2
 8013818:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	0a1a      	lsrs	r2, r3, #8
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	3307      	adds	r3, #7
 8013822:	b2d2      	uxtb	r2, r2
 8013824:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	0c1a      	lsrs	r2, r3, #16
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	3308      	adds	r3, #8
 801382e:	b2d2      	uxtb	r2, r2
 8013830:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	0e1a      	lsrs	r2, r3, #24
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	3309      	adds	r3, #9
 801383a:	b2d2      	uxtb	r2, r2
 801383c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	330a      	adds	r3, #10
 8013842:	697a      	ldr	r2, [r7, #20]
 8013844:	b2d2      	uxtb	r2, r2
 8013846:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	0a1a      	lsrs	r2, r3, #8
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	330b      	adds	r3, #11
 8013850:	b2d2      	uxtb	r2, r2
 8013852:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	0c1a      	lsrs	r2, r3, #16
 8013858:	69bb      	ldr	r3, [r7, #24]
 801385a:	330c      	adds	r3, #12
 801385c:	b2d2      	uxtb	r2, r2
 801385e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	0e1a      	lsrs	r2, r3, #24
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	330d      	adds	r3, #13
 8013868:	b2d2      	uxtb	r2, r2
 801386a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	330e      	adds	r3, #14
 8013870:	2200      	movs	r2, #0
 8013872:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	330f      	adds	r3, #15
 8013878:	88fa      	ldrh	r2, [r7, #6]
 801387a:	b2d2      	uxtb	r2, r2
 801387c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801387e:	2300      	movs	r3, #0
}
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bc90      	pop	{r4, r7}
 8013888:	4770      	bx	lr

0801388a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801388a:	b590      	push	{r4, r7, lr}
 801388c:	b08b      	sub	sp, #44	; 0x2c
 801388e:	af04      	add	r7, sp, #16
 8013890:	6078      	str	r0, [r7, #4]
 8013892:	4608      	mov	r0, r1
 8013894:	4611      	mov	r1, r2
 8013896:	461a      	mov	r2, r3
 8013898:	4603      	mov	r3, r0
 801389a:	807b      	strh	r3, [r7, #2]
 801389c:	460b      	mov	r3, r1
 801389e:	707b      	strb	r3, [r7, #1]
 80138a0:	4613      	mov	r3, r2
 80138a2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d002      	beq.n	80138b0 <ComputeCmacB0+0x26>
 80138aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d101      	bne.n	80138b4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138b0:	2309      	movs	r3, #9
 80138b2:	e024      	b.n	80138fe <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80138b4:	887b      	ldrh	r3, [r7, #2]
 80138b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138ba:	d901      	bls.n	80138c0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80138bc:	230d      	movs	r3, #13
 80138be:	e01e      	b.n	80138fe <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80138c0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80138c4:	783a      	ldrb	r2, [r7, #0]
 80138c6:	7879      	ldrb	r1, [r7, #1]
 80138c8:	8878      	ldrh	r0, [r7, #2]
 80138ca:	f107 0308 	add.w	r3, r7, #8
 80138ce:	9302      	str	r3, [sp, #8]
 80138d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d2:	9301      	str	r3, [sp, #4]
 80138d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d6:	9300      	str	r3, [sp, #0]
 80138d8:	4623      	mov	r3, r4
 80138da:	f7ff ff6e 	bl	80137ba <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80138de:	887a      	ldrh	r2, [r7, #2]
 80138e0:	7879      	ldrb	r1, [r7, #1]
 80138e2:	f107 0008 	add.w	r0, r7, #8
 80138e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e8:	9300      	str	r3, [sp, #0]
 80138ea:	460b      	mov	r3, r1
 80138ec:	6879      	ldr	r1, [r7, #4]
 80138ee:	f7f8 f953 	bl	800bb98 <SecureElementComputeAesCmac>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d001      	beq.n	80138fc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80138f8:	230e      	movs	r3, #14
 80138fa:	e000      	b.n	80138fe <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80138fc:	2300      	movs	r3, #0
}
 80138fe:	4618      	mov	r0, r3
 8013900:	371c      	adds	r7, #28
 8013902:	46bd      	mov	sp, r7
 8013904:	bd90      	pop	{r4, r7, pc}

08013906 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013906:	b590      	push	{r4, r7, lr}
 8013908:	b0cd      	sub	sp, #308	; 0x134
 801390a:	af04      	add	r7, sp, #16
 801390c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8013910:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8013914:	6020      	str	r0, [r4, #0]
 8013916:	460c      	mov	r4, r1
 8013918:	4610      	mov	r0, r2
 801391a:	4619      	mov	r1, r3
 801391c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013920:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013924:	4622      	mov	r2, r4
 8013926:	801a      	strh	r2, [r3, #0]
 8013928:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801392c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013930:	4602      	mov	r2, r0
 8013932:	701a      	strb	r2, [r3, #0]
 8013934:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013938:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801393c:	460a      	mov	r2, r1
 801393e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013940:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013944:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d101      	bne.n	8013952 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801394e:	2309      	movs	r3, #9
 8013950:	e063      	b.n	8013a1a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013952:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013956:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801395a:	881b      	ldrh	r3, [r3, #0]
 801395c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013960:	d901      	bls.n	8013966 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013962:	230d      	movs	r3, #13
 8013964:	e059      	b.n	8013a1a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013966:	f107 030c 	add.w	r3, r7, #12
 801396a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801396e:	2100      	movs	r1, #0
 8013970:	4618      	mov	r0, r3
 8013972:	f003 fc67 	bl	8017244 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013976:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801397a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801397e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013982:	781a      	ldrb	r2, [r3, #0]
 8013984:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013988:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801398c:	7819      	ldrb	r1, [r3, #0]
 801398e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013992:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013996:	8818      	ldrh	r0, [r3, #0]
 8013998:	f107 030c 	add.w	r3, r7, #12
 801399c:	9302      	str	r3, [sp, #8]
 801399e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80139a2:	9301      	str	r3, [sp, #4]
 80139a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	4623      	mov	r3, r4
 80139ac:	f7ff ff05 	bl	80137ba <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80139b0:	f107 030c 	add.w	r3, r7, #12
 80139b4:	3310      	adds	r3, #16
 80139b6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80139ba:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80139be:	8812      	ldrh	r2, [r2, #0]
 80139c0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80139c4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80139c8:	6809      	ldr	r1, [r1, #0]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f003 fbff 	bl	80171ce <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80139d0:	2306      	movs	r3, #6
 80139d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80139d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80139da:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80139de:	881b      	ldrh	r3, [r3, #0]
 80139e0:	3310      	adds	r3, #16
 80139e2:	4619      	mov	r1, r3
 80139e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80139e8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	f107 000c 	add.w	r0, r7, #12
 80139f2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80139f6:	f7f8 f8e9 	bl	800bbcc <SecureElementVerifyAesCmac>
 80139fa:	4603      	mov	r3, r0
 80139fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013a00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d101      	bne.n	8013a0c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	e006      	b.n	8013a1a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013a0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d101      	bne.n	8013a18 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013a14:	2301      	movs	r3, #1
 8013a16:	e000      	b.n	8013a1a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a18:	230e      	movs	r3, #14
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd90      	pop	{r4, r7, pc}

08013a24 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013a24:	b480      	push	{r7}
 8013a26:	b085      	sub	sp, #20
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	6039      	str	r1, [r7, #0]
 8013a2e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013a30:	2300      	movs	r3, #0
 8013a32:	73fb      	strb	r3, [r7, #15]
 8013a34:	e011      	b.n	8013a5a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013a36:	7bfb      	ldrb	r3, [r7, #15]
 8013a38:	4a0c      	ldr	r2, [pc, #48]	; (8013a6c <GetKeyAddrItem+0x48>)
 8013a3a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013a3e:	79fa      	ldrb	r2, [r7, #7]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d107      	bne.n	8013a54 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013a44:	7bfb      	ldrb	r3, [r7, #15]
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	4a08      	ldr	r2, [pc, #32]	; (8013a6c <GetKeyAddrItem+0x48>)
 8013a4a:	441a      	add	r2, r3
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013a50:	2300      	movs	r3, #0
 8013a52:	e006      	b.n	8013a62 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013a54:	7bfb      	ldrb	r3, [r7, #15]
 8013a56:	3301      	adds	r3, #1
 8013a58:	73fb      	strb	r3, [r7, #15]
 8013a5a:	7bfb      	ldrb	r3, [r7, #15]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d9ea      	bls.n	8013a36 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013a60:	230b      	movs	r3, #11
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3714      	adds	r7, #20
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bc80      	pop	{r7}
 8013a6a:	4770      	bx	lr
 8013a6c:	20000110 	.word	0x20000110

08013a70 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b088      	sub	sp, #32
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	60b9      	str	r1, [r7, #8]
 8013a78:	607a      	str	r2, [r7, #4]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	73fb      	strb	r3, [r7, #15]
 8013a80:	4613      	mov	r3, r2
 8013a82:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013a84:	2300      	movs	r3, #0
 8013a86:	613b      	str	r3, [r7, #16]
 8013a88:	f107 0314 	add.w	r3, r7, #20
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	601a      	str	r2, [r3, #0]
 8013a90:	605a      	str	r2, [r3, #4]
 8013a92:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8013a94:	7bfb      	ldrb	r3, [r7, #15]
 8013a96:	2b08      	cmp	r3, #8
 8013a98:	d002      	beq.n	8013aa0 <DeriveSessionKey10x+0x30>
 8013a9a:	2b09      	cmp	r3, #9
 8013a9c:	d003      	beq.n	8013aa6 <DeriveSessionKey10x+0x36>
 8013a9e:	e005      	b.n	8013aac <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	743b      	strb	r3, [r7, #16]
            break;
 8013aa4:	e004      	b.n	8013ab0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013aa6:	2302      	movs	r3, #2
 8013aa8:	743b      	strb	r3, [r7, #16]
            break;
 8013aaa:	e001      	b.n	8013ab0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013aac:	230a      	movs	r3, #10
 8013aae:	e02a      	b.n	8013b06 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	0a1b      	lsrs	r3, r3, #8
 8013aba:	b2db      	uxtb	r3, r3
 8013abc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	0c1b      	lsrs	r3, r3, #16
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	0a1b      	lsrs	r3, r3, #8
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	0c1b      	lsrs	r3, r3, #16
 8013ad8:	b2db      	uxtb	r3, r3
 8013ada:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013adc:	89bb      	ldrh	r3, [r7, #12]
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013ae2:	89bb      	ldrh	r3, [r7, #12]
 8013ae4:	0a1b      	lsrs	r3, r3, #8
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013aec:	7bfa      	ldrb	r2, [r7, #15]
 8013aee:	f107 0310 	add.w	r3, r7, #16
 8013af2:	2101      	movs	r1, #1
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f8 f915 	bl	800bd24 <SecureElementDeriveAndStoreKey>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d001      	beq.n	8013b04 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b00:	230e      	movs	r3, #14
 8013b02:	e000      	b.n	8013b06 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3720      	adds	r7, #32
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
	...

08013b10 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	6039      	str	r1, [r7, #0]
 8013b1a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013b22:	2309      	movs	r3, #9
 8013b24:	e029      	b.n	8013b7a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8013b26:	79fb      	ldrb	r3, [r7, #7]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d822      	bhi.n	8013b74 <GetLastFcntDown+0x64>
 8013b2e:	a201      	add	r2, pc, #4	; (adr r2, 8013b34 <GetLastFcntDown+0x24>)
 8013b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b34:	08013b45 	.word	0x08013b45
 8013b38:	08013b51 	.word	0x08013b51
 8013b3c:	08013b5d 	.word	0x08013b5d
 8013b40:	08013b69 	.word	0x08013b69
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013b44:	4b0f      	ldr	r3, [pc, #60]	; (8013b84 <GetLastFcntDown+0x74>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	691a      	ldr	r2, [r3, #16]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	601a      	str	r2, [r3, #0]
            break;
 8013b4e:	e013      	b.n	8013b78 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013b50:	4b0c      	ldr	r3, [pc, #48]	; (8013b84 <GetLastFcntDown+0x74>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	695a      	ldr	r2, [r3, #20]
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	601a      	str	r2, [r3, #0]
            break;
 8013b5a:	e00d      	b.n	8013b78 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013b5c:	4b09      	ldr	r3, [pc, #36]	; (8013b84 <GetLastFcntDown+0x74>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	699a      	ldr	r2, [r3, #24]
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	601a      	str	r2, [r3, #0]
            break;
 8013b66:	e007      	b.n	8013b78 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013b68:	4b06      	ldr	r3, [pc, #24]	; (8013b84 <GetLastFcntDown+0x74>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	69da      	ldr	r2, [r3, #28]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	601a      	str	r2, [r3, #0]
            break;
 8013b72:	e001      	b.n	8013b78 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013b74:	2305      	movs	r3, #5
 8013b76:	e000      	b.n	8013b7a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bc80      	pop	{r7}
 8013b82:	4770      	bx	lr
 8013b84:	20001a14 	.word	0x20001a14

08013b88 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	6039      	str	r1, [r7, #0]
 8013b92:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013b94:	2300      	movs	r3, #0
 8013b96:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013b98:	f107 020c 	add.w	r2, r7, #12
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	4611      	mov	r1, r2
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ff ffb5 	bl	8013b10 <GetLastFcntDown>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d001      	beq.n	8013bb0 <CheckFCntDown+0x28>
    {
        return false;
 8013bac:	2300      	movs	r3, #0
 8013bae:	e00a      	b.n	8013bc6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	683a      	ldr	r2, [r7, #0]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d803      	bhi.n	8013bc0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8013bb8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bbe:	d101      	bne.n	8013bc4 <CheckFCntDown+0x3c>
    {
        return true;
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e000      	b.n	8013bc6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013bc4:	2300      	movs	r3, #0
    }
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3710      	adds	r7, #16
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
	...

08013bd0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	6039      	str	r1, [r7, #0]
 8013bda:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013bdc:	79fb      	ldrb	r3, [r7, #7]
 8013bde:	3b01      	subs	r3, #1
 8013be0:	2b03      	cmp	r3, #3
 8013be2:	d82b      	bhi.n	8013c3c <UpdateFCntDown+0x6c>
 8013be4:	a201      	add	r2, pc, #4	; (adr r2, 8013bec <UpdateFCntDown+0x1c>)
 8013be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bea:	bf00      	nop
 8013bec:	08013bfd 	.word	0x08013bfd
 8013bf0:	08013c0f 	.word	0x08013c0f
 8013bf4:	08013c21 	.word	0x08013c21
 8013bf8:	08013c33 	.word	0x08013c33
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013bfc:	4b12      	ldr	r3, [pc, #72]	; (8013c48 <UpdateFCntDown+0x78>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8013c04:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <UpdateFCntDown+0x78>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	683a      	ldr	r2, [r7, #0]
 8013c0a:	621a      	str	r2, [r3, #32]
            break;
 8013c0c:	e017      	b.n	8013c3e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013c0e:	4b0e      	ldr	r3, [pc, #56]	; (8013c48 <UpdateFCntDown+0x78>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	683a      	ldr	r2, [r7, #0]
 8013c14:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8013c16:	4b0c      	ldr	r3, [pc, #48]	; (8013c48 <UpdateFCntDown+0x78>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	683a      	ldr	r2, [r7, #0]
 8013c1c:	621a      	str	r2, [r3, #32]
            break;
 8013c1e:	e00e      	b.n	8013c3e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013c20:	4b09      	ldr	r3, [pc, #36]	; (8013c48 <UpdateFCntDown+0x78>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	683a      	ldr	r2, [r7, #0]
 8013c26:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8013c28:	4b07      	ldr	r3, [pc, #28]	; (8013c48 <UpdateFCntDown+0x78>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	621a      	str	r2, [r3, #32]
            break;
 8013c30:	e005      	b.n	8013c3e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013c32:	4b05      	ldr	r3, [pc, #20]	; (8013c48 <UpdateFCntDown+0x78>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	683a      	ldr	r2, [r7, #0]
 8013c38:	61da      	str	r2, [r3, #28]
            break;
 8013c3a:	e000      	b.n	8013c3e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013c3c:	bf00      	nop
    }
}
 8013c3e:	bf00      	nop
 8013c40:	370c      	adds	r7, #12
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bc80      	pop	{r7}
 8013c46:	4770      	bx	lr
 8013c48:	20001a14 	.word	0x20001a14

08013c4c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013c52:	4b18      	ldr	r3, [pc, #96]	; (8013cb4 <ResetFCnts+0x68>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2200      	movs	r2, #0
 8013c58:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013c5a:	4b16      	ldr	r3, [pc, #88]	; (8013cb4 <ResetFCnts+0x68>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c62:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013c64:	4b13      	ldr	r3, [pc, #76]	; (8013cb4 <ResetFCnts+0x68>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c6c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013c6e:	4b11      	ldr	r3, [pc, #68]	; (8013cb4 <ResetFCnts+0x68>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c76:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013c78:	4b0e      	ldr	r3, [pc, #56]	; (8013cb4 <ResetFCnts+0x68>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	4b0d      	ldr	r3, [pc, #52]	; (8013cb4 <ResetFCnts+0x68>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	6992      	ldr	r2, [r2, #24]
 8013c82:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013c84:	2300      	movs	r3, #0
 8013c86:	607b      	str	r3, [r7, #4]
 8013c88:	e00b      	b.n	8013ca2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8013c8a:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <ResetFCnts+0x68>)
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	3306      	adds	r3, #6
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	4413      	add	r3, r2
 8013c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c9a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	607b      	str	r3, [r7, #4]
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	ddf0      	ble.n	8013c8a <ResetFCnts+0x3e>
    }
}
 8013ca8:	bf00      	nop
 8013caa:	bf00      	nop
 8013cac:	370c      	adds	r7, #12
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bc80      	pop	{r7}
 8013cb2:	4770      	bx	lr
 8013cb4:	20001a14 	.word	0x20001a14

08013cb8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8013cc0:	4b06      	ldr	r3, [pc, #24]	; (8013cdc <IsJoinNonce10xOk+0x24>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	689b      	ldr	r3, [r3, #8]
 8013cc6:	687a      	ldr	r2, [r7, #4]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	bf8c      	ite	hi
 8013ccc:	2301      	movhi	r3, #1
 8013cce:	2300      	movls	r3, #0
 8013cd0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	370c      	adds	r7, #12
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bc80      	pop	{r7}
 8013cda:	4770      	bx	lr
 8013cdc:	20001a14 	.word	0x20001a14

08013ce0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d101      	bne.n	8013cf2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013cee:	2308      	movs	r3, #8
 8013cf0:	e01c      	b.n	8013d2c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013cf2:	4a10      	ldr	r2, [pc, #64]	; (8013d34 <LoRaMacCryptoInit+0x54>)
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013cf8:	4b0e      	ldr	r3, [pc, #56]	; (8013d34 <LoRaMacCryptoInit+0x54>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2228      	movs	r2, #40	; 0x28
 8013cfe:	2100      	movs	r1, #0
 8013d00:	4618      	mov	r0, r3
 8013d02:	f003 fa9f 	bl	8017244 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013d06:	4b0b      	ldr	r3, [pc, #44]	; (8013d34 <LoRaMacCryptoInit+0x54>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013d0e:	4b09      	ldr	r3, [pc, #36]	; (8013d34 <LoRaMacCryptoInit+0x54>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2201      	movs	r2, #1
 8013d14:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013d16:	4b07      	ldr	r3, [pc, #28]	; (8013d34 <LoRaMacCryptoInit+0x54>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013d1e:	4b05      	ldr	r3, [pc, #20]	; (8013d34 <LoRaMacCryptoInit+0x54>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2200      	movs	r2, #0
 8013d24:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013d26:	f7ff ff91 	bl	8013c4c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013d2a:	2300      	movs	r3, #0
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	20001a14 	.word	0x20001a14

08013d38 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013d40:	4b04      	ldr	r3, [pc, #16]	; (8013d54 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	370c      	adds	r7, #12
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bc80      	pop	{r7}
 8013d52:	4770      	bx	lr
 8013d54:	20001a14 	.word	0x20001a14

08013d58 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d66:	2309      	movs	r3, #9
 8013d68:	e006      	b.n	8013d78 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013d6a:	4b06      	ldr	r3, [pc, #24]	; (8013d84 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	68db      	ldr	r3, [r3, #12]
 8013d70:	1c5a      	adds	r2, r3, #1
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013d76:	2300      	movs	r3, #0
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bc80      	pop	{r7}
 8013d80:	4770      	bx	lr
 8013d82:	bf00      	nop
 8013d84:	20001a14 	.word	0x20001a14

08013d88 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b088      	sub	sp, #32
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	4603      	mov	r3, r0
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
 8013d94:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013d9e:	2312      	movs	r3, #18
 8013da0:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d101      	bne.n	8013dac <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013da8:	2309      	movs	r3, #9
 8013daa:	e035      	b.n	8013e18 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013dac:	f107 0214 	add.w	r2, r7, #20
 8013db0:	7bfb      	ldrb	r3, [r7, #15]
 8013db2:	4611      	mov	r1, r2
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7ff feab 	bl	8013b10 <GetLastFcntDown>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013dbe:	7efb      	ldrb	r3, [r7, #27]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d001      	beq.n	8013dc8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013dc4:	7efb      	ldrb	r3, [r7, #27]
 8013dc6:	e027      	b.n	8013e18 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dce:	d103      	bne.n	8013dd8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	e01e      	b.n	8013e16 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	68ba      	ldr	r2, [r7, #8]
 8013dde:	1ad3      	subs	r3, r2, r3
 8013de0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013de2:	69fb      	ldr	r3, [r7, #28]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	dd05      	ble.n	8013df4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013de8:	697a      	ldr	r2, [r7, #20]
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	441a      	add	r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	601a      	str	r2, [r3, #0]
 8013df2:	e010      	b.n	8013e16 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d104      	bne.n	8013e04 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013dfa:	697a      	ldr	r2, [r7, #20]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013e00:	2307      	movs	r3, #7
 8013e02:	e009      	b.n	8013e18 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	0c1b      	lsrs	r3, r3, #16
 8013e08:	041b      	lsls	r3, r3, #16
 8013e0a:	68ba      	ldr	r2, [r7, #8]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3720      	adds	r7, #32
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013e20:	b480      	push	{r7}
 8013e22:	b085      	sub	sp, #20
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d101      	bne.n	8013e32 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e2e:	2309      	movs	r3, #9
 8013e30:	e019      	b.n	8013e66 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e32:	2300      	movs	r3, #0
 8013e34:	60fb      	str	r3, [r7, #12]
 8013e36:	e012      	b.n	8013e5e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013e38:	4b0d      	ldr	r3, [pc, #52]	; (8013e70 <LoRaMacCryptoSetMulticastReference+0x50>)
 8013e3a:	6819      	ldr	r1, [r3, #0]
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	4613      	mov	r3, r2
 8013e40:	005b      	lsls	r3, r3, #1
 8013e42:	4413      	add	r3, r2
 8013e44:	011b      	lsls	r3, r3, #4
 8013e46:	461a      	mov	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	4413      	add	r3, r2
 8013e4c:	68fa      	ldr	r2, [r7, #12]
 8013e4e:	3206      	adds	r2, #6
 8013e50:	0092      	lsls	r2, r2, #2
 8013e52:	440a      	add	r2, r1
 8013e54:	3204      	adds	r2, #4
 8013e56:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	60fb      	str	r3, [r7, #12]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	dde9      	ble.n	8013e38 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3714      	adds	r7, #20
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bc80      	pop	{r7}
 8013e6e:	4770      	bx	lr
 8013e70:	20001a14 	.word	0x20001a14

08013e74 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	6039      	str	r1, [r7, #0]
 8013e7e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013e80:	79fb      	ldrb	r3, [r7, #7]
 8013e82:	6839      	ldr	r1, [r7, #0]
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7f7 fe29 	bl	800badc <SecureElementSetKey>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d001      	beq.n	8013e94 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e90:	230e      	movs	r3, #14
 8013e92:	e021      	b.n	8013ed8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d11d      	bne.n	8013ed6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013e9a:	4b11      	ldr	r3, [pc, #68]	; (8013ee0 <LoRaMacCryptoSetKey+0x6c>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	789b      	ldrb	r3, [r3, #2]
 8013ea0:	210b      	movs	r1, #11
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f000 fa58 	bl	8014358 <LoRaMacCryptoDeriveLifeTimeKey>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d001      	beq.n	8013eb2 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013eae:	230e      	movs	r3, #14
 8013eb0:	e012      	b.n	8013ed8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013eb2:	210c      	movs	r1, #12
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	f000 fa4f 	bl	8014358 <LoRaMacCryptoDeriveLifeTimeKey>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d001      	beq.n	8013ec4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ec0:	230e      	movs	r3, #14
 8013ec2:	e009      	b.n	8013ed8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013ec4:	210a      	movs	r1, #10
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	f000 fa46 	bl	8014358 <LoRaMacCryptoDeriveLifeTimeKey>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d001      	beq.n	8013ed6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ed2:	230e      	movs	r3, #14
 8013ed4:	e000      	b.n	8013ed8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013ed6:	2300      	movs	r3, #0
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	20001a14 	.word	0x20001a14

08013ee4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b086      	sub	sp, #24
 8013ee8:	af02      	add	r7, sp, #8
 8013eea:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ef2:	2309      	movs	r3, #9
 8013ef4:	e02d      	b.n	8013f52 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8013efa:	4b18      	ldr	r3, [pc, #96]	; (8013f5c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	889a      	ldrh	r2, [r3, #4]
 8013f00:	3201      	adds	r2, #1
 8013f02:	b292      	uxth	r2, r2
 8013f04:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013f06:	4b15      	ldr	r3, [pc, #84]	; (8013f5c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	889a      	ldrh	r2, [r3, #4]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 fc1b 	bl	801474c <LoRaMacSerializerJoinRequest>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d001      	beq.n	8013f20 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013f1c:	2310      	movs	r3, #16
 8013f1e:	e018      	b.n	8013f52 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6819      	ldr	r1, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	3318      	adds	r3, #24
 8013f28:	7bfa      	ldrb	r2, [r7, #15]
 8013f2a:	9300      	str	r3, [sp, #0]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	2213      	movs	r2, #19
 8013f30:	2000      	movs	r0, #0
 8013f32:	f7f7 fe31 	bl	800bb98 <SecureElementComputeAesCmac>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d001      	beq.n	8013f40 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f3c:	230e      	movs	r3, #14
 8013f3e:	e008      	b.n	8013f52 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f000 fc03 	bl	801474c <LoRaMacSerializerJoinRequest>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d001      	beq.n	8013f50 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013f4c:	2310      	movs	r3, #16
 8013f4e:	e000      	b.n	8013f52 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f50:	2300      	movs	r3, #0
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3710      	adds	r7, #16
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	20001a14 	.word	0x20001a14

08013f60 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013f60:	b590      	push	{r4, r7, lr}
 8013f62:	b097      	sub	sp, #92	; 0x5c
 8013f64:	af04      	add	r7, sp, #16
 8013f66:	4603      	mov	r3, r0
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	607a      	str	r2, [r7, #4]
 8013f6c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d002      	beq.n	8013f7a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d101      	bne.n	8013f7e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f7a:	2309      	movs	r3, #9
 8013f7c:	e0d3      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013f7e:	2312      	movs	r3, #18
 8013f80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013f84:	2300      	movs	r3, #0
 8013f86:	617b      	str	r3, [r7, #20]
 8013f88:	f107 0318 	add.w	r3, r7, #24
 8013f8c:	221d      	movs	r2, #29
 8013f8e:	2100      	movs	r1, #0
 8013f90:	4618      	mov	r0, r3
 8013f92:	f007 ff39 	bl	801be08 <memset>
    uint8_t versionMinor         = 0;
 8013f96:	2300      	movs	r3, #0
 8013f98:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013f9a:	4b65      	ldr	r3, [pc, #404]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	889b      	ldrh	r3, [r3, #4]
 8013fa0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681c      	ldr	r4, [r3, #0]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	791b      	ldrb	r3, [r3, #4]
 8013fac:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013fb0:	7bf8      	ldrb	r0, [r7, #15]
 8013fb2:	f107 0213 	add.w	r2, r7, #19
 8013fb6:	9202      	str	r2, [sp, #8]
 8013fb8:	f107 0214 	add.w	r2, r7, #20
 8013fbc:	9201      	str	r2, [sp, #4]
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	4623      	mov	r3, r4
 8013fc2:	460a      	mov	r2, r1
 8013fc4:	68b9      	ldr	r1, [r7, #8]
 8013fc6:	f7f7 feed 	bl	800bda4 <SecureElementProcessJoinAccept>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d001      	beq.n	8013fd4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fd0:	230e      	movs	r3, #14
 8013fd2:	e0a8      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6818      	ldr	r0, [r3, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	791b      	ldrb	r3, [r3, #4]
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	f107 0314 	add.w	r3, r7, #20
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	f003 f8f3 	bl	80171ce <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f000 f9f0 	bl	80143ce <LoRaMacParserJoinAccept>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d001      	beq.n	8013ff8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013ff4:	230f      	movs	r3, #15
 8013ff6:	e096      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	799b      	ldrb	r3, [r3, #6]
 8014002:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	79db      	ldrb	r3, [r3, #7]
 8014008:	021b      	lsls	r3, r3, #8
 801400a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801400c:	4313      	orrs	r3, r2
 801400e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7a1b      	ldrb	r3, [r3, #8]
 8014014:	041b      	lsls	r3, r3, #16
 8014016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014018:	4313      	orrs	r3, r2
 801401a:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801401c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801401e:	f7ff fe4b 	bl	8013cb8 <IsJoinNonce10xOk>
 8014022:	4603      	mov	r3, r0
 8014024:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8014028:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801402c:	2b00      	cmp	r3, #0
 801402e:	d010      	beq.n	8014052 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014030:	4b3f      	ldr	r3, [pc, #252]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014036:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8014038:	7cfb      	ldrb	r3, [r7, #19]
 801403a:	210b      	movs	r1, #11
 801403c:	4618      	mov	r0, r3
 801403e:	f000 f98b 	bl	8014358 <LoRaMacCryptoDeriveLifeTimeKey>
 8014042:	4603      	mov	r3, r0
 8014044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014048:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801404c:	2b00      	cmp	r3, #0
 801404e:	d005      	beq.n	801405c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8014050:	e001      	b.n	8014056 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014052:	2303      	movs	r3, #3
 8014054:	e067      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8014056:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801405a:	e064      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801405c:	210c      	movs	r1, #12
 801405e:	2000      	movs	r0, #0
 8014060:	f000 f97a 	bl	8014358 <LoRaMacCryptoDeriveLifeTimeKey>
 8014064:	4603      	mov	r3, r0
 8014066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801406a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801406e:	2b00      	cmp	r3, #0
 8014070:	d002      	beq.n	8014078 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8014072:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014076:	e056      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8014078:	210a      	movs	r1, #10
 801407a:	2000      	movs	r0, #0
 801407c:	f000 f96c 	bl	8014358 <LoRaMacCryptoDeriveLifeTimeKey>
 8014080:	4603      	mov	r3, r0
 8014082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014086:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801408a:	2b00      	cmp	r3, #0
 801408c:	d002      	beq.n	8014094 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801408e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014092:	e048      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	7a5b      	ldrb	r3, [r3, #9]
 8014098:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	7a9b      	ldrb	r3, [r3, #10]
 801409e:	021b      	lsls	r3, r3, #8
 80140a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140a2:	4313      	orrs	r3, r2
 80140a4:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	7adb      	ldrb	r3, [r3, #11]
 80140aa:	041b      	lsls	r3, r3, #16
 80140ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140ae:	4313      	orrs	r3, r2
 80140b0:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80140b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80140b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140ba:	2009      	movs	r0, #9
 80140bc:	f7ff fcd8 	bl	8013a70 <DeriveSessionKey10x>
 80140c0:	4603      	mov	r3, r0
 80140c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80140c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d002      	beq.n	80140d4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80140ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140d2:	e028      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80140d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80140d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140dc:	2008      	movs	r0, #8
 80140de:	f7ff fcc7 	bl	8013a70 <DeriveSessionKey10x>
 80140e2:	4603      	mov	r3, r0
 80140e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80140e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80140f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140f4:	e017      	b.n	8014126 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80140f6:	4b0e      	ldr	r3, [pc, #56]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	7cfa      	ldrb	r2, [r7, #19]
 80140fc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80140fe:	4b0c      	ldr	r3, [pc, #48]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2200      	movs	r2, #0
 8014104:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014106:	4b0a      	ldr	r3, [pc, #40]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801410e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014110:	4b07      	ldr	r3, [pc, #28]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014118:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801411a:	4b05      	ldr	r3, [pc, #20]	; (8014130 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014122:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	374c      	adds	r7, #76	; 0x4c
 801412a:	46bd      	mov	sp, r7
 801412c:	bd90      	pop	{r4, r7, pc}
 801412e:	bf00      	nop
 8014130:	20001a14 	.word	0x20001a14

08014134 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014134:	b590      	push	{r4, r7, lr}
 8014136:	b08b      	sub	sp, #44	; 0x2c
 8014138:	af04      	add	r7, sp, #16
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	607b      	str	r3, [r7, #4]
 801413e:	460b      	mov	r3, r1
 8014140:	72fb      	strb	r3, [r7, #11]
 8014142:	4613      	mov	r3, r2
 8014144:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014146:	2312      	movs	r3, #18
 8014148:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801414a:	2309      	movs	r3, #9
 801414c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014154:	2309      	movs	r3, #9
 8014156:	e05f      	b.n	8014218 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014158:	4b31      	ldr	r3, [pc, #196]	; (8014220 <LoRaMacCryptoSecureMessage+0xec>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	68db      	ldr	r3, [r3, #12]
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	429a      	cmp	r2, r3
 8014162:	d201      	bcs.n	8014168 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014164:	2306      	movs	r3, #6
 8014166:	e057      	b.n	8014218 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d101      	bne.n	8014176 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014172:	2308      	movs	r3, #8
 8014174:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014176:	4b2a      	ldr	r3, [pc, #168]	; (8014220 <LoRaMacCryptoSecureMessage+0xec>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	429a      	cmp	r2, r3
 8014180:	d916      	bls.n	80141b0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801418c:	b219      	sxth	r1, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	689c      	ldr	r4, [r3, #8]
 8014192:	7dfa      	ldrb	r2, [r7, #23]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	9301      	str	r3, [sp, #4]
 8014198:	2300      	movs	r3, #0
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	4623      	mov	r3, r4
 801419e:	f7ff fa73 	bl	8013688 <PayloadEncrypt>
 80141a2:	4603      	mov	r3, r0
 80141a4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141a6:	7dbb      	ldrb	r3, [r7, #22]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d001      	beq.n	80141b0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80141ac:	7dbb      	ldrb	r3, [r7, #22]
 80141ae:	e033      	b.n	8014218 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 fb4d 	bl	8014850 <LoRaMacSerializerData>
 80141b6:	4603      	mov	r3, r0
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d001      	beq.n	80141c0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80141bc:	2310      	movs	r3, #16
 80141be:	e02b      	b.n	8014218 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80141c0:	2308      	movs	r3, #8
 80141c2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6818      	ldr	r0, [r3, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	791b      	ldrb	r3, [r3, #4]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	3b04      	subs	r3, #4
 80141d0:	b299      	uxth	r1, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	689b      	ldr	r3, [r3, #8]
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	322c      	adds	r2, #44	; 0x2c
 80141da:	7dfc      	ldrb	r4, [r7, #23]
 80141dc:	9203      	str	r2, [sp, #12]
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	9202      	str	r2, [sp, #8]
 80141e2:	9301      	str	r3, [sp, #4]
 80141e4:	2300      	movs	r3, #0
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	2300      	movs	r3, #0
 80141ea:	4622      	mov	r2, r4
 80141ec:	f7ff fb4d 	bl	801388a <ComputeCmacB0>
 80141f0:	4603      	mov	r3, r0
 80141f2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141f4:	7dbb      	ldrb	r3, [r7, #22]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d001      	beq.n	80141fe <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80141fa:	7dbb      	ldrb	r3, [r7, #22]
 80141fc:	e00c      	b.n	8014218 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 fb26 	bl	8014850 <LoRaMacSerializerData>
 8014204:	4603      	mov	r3, r0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d001      	beq.n	801420e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801420a:	2310      	movs	r3, #16
 801420c:	e004      	b.n	8014218 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801420e:	4b04      	ldr	r3, [pc, #16]	; (8014220 <LoRaMacCryptoSecureMessage+0xec>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	371c      	adds	r7, #28
 801421c:	46bd      	mov	sp, r7
 801421e:	bd90      	pop	{r4, r7, pc}
 8014220:	20001a14 	.word	0x20001a14

08014224 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014224:	b590      	push	{r4, r7, lr}
 8014226:	b08b      	sub	sp, #44	; 0x2c
 8014228:	af04      	add	r7, sp, #16
 801422a:	60b9      	str	r1, [r7, #8]
 801422c:	607b      	str	r3, [r7, #4]
 801422e:	4603      	mov	r3, r0
 8014230:	73fb      	strb	r3, [r7, #15]
 8014232:	4613      	mov	r3, r2
 8014234:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014238:	2b00      	cmp	r3, #0
 801423a:	d101      	bne.n	8014240 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801423c:	2309      	movs	r3, #9
 801423e:	e084      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014240:	7bbb      	ldrb	r3, [r7, #14]
 8014242:	6879      	ldr	r1, [r7, #4]
 8014244:	4618      	mov	r0, r3
 8014246:	f7ff fc9f 	bl	8013b88 <CheckFCntDown>
 801424a:	4603      	mov	r3, r0
 801424c:	f083 0301 	eor.w	r3, r3, #1
 8014250:	b2db      	uxtb	r3, r3
 8014252:	2b00      	cmp	r3, #0
 8014254:	d001      	beq.n	801425a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014256:	2306      	movs	r3, #6
 8014258:	e077      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801425a:	2312      	movs	r3, #18
 801425c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801425e:	2309      	movs	r3, #9
 8014260:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014262:	2308      	movs	r3, #8
 8014264:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014268:	f000 f97c 	bl	8014564 <LoRaMacParserData>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d001      	beq.n	8014276 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014272:	230f      	movs	r3, #15
 8014274:	e069      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014276:	f107 0210 	add.w	r2, r7, #16
 801427a:	7bfb      	ldrb	r3, [r7, #15]
 801427c:	4611      	mov	r1, r2
 801427e:	4618      	mov	r0, r3
 8014280:	f7ff fbd0 	bl	8013a24 <GetKeyAddrItem>
 8014284:	4603      	mov	r3, r0
 8014286:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014288:	7d7b      	ldrb	r3, [r7, #21]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d001      	beq.n	8014292 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801428e:	7d7b      	ldrb	r3, [r7, #21]
 8014290:	e05b      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	785b      	ldrb	r3, [r3, #1]
 8014296:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	789b      	ldrb	r3, [r3, #2]
 801429c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	689b      	ldr	r3, [r3, #8]
 80142a2:	68ba      	ldr	r2, [r7, #8]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d001      	beq.n	80142ac <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80142a8:	2302      	movs	r3, #2
 80142aa:	e04e      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80142ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ae:	7b1b      	ldrb	r3, [r3, #12]
 80142b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	bf14      	ite	ne
 80142ba:	2301      	movne	r3, #1
 80142bc:	2300      	moveq	r3, #0
 80142be:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80142c0:	4b24      	ldr	r3, [pc, #144]	; (8014354 <LoRaMacCryptoUnsecureMessage+0x130>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	789b      	ldrb	r3, [r3, #2]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d101      	bne.n	80142ce <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80142ca:	2300      	movs	r3, #0
 80142cc:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80142ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d0:	6818      	ldr	r0, [r3, #0]
 80142d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d4:	791b      	ldrb	r3, [r3, #4]
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	3b04      	subs	r3, #4
 80142da:	b299      	uxth	r1, r3
 80142dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e0:	7dbc      	ldrb	r4, [r7, #22]
 80142e2:	7d3a      	ldrb	r2, [r7, #20]
 80142e4:	9303      	str	r3, [sp, #12]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	9302      	str	r3, [sp, #8]
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	9301      	str	r3, [sp, #4]
 80142ee:	2301      	movs	r3, #1
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	4623      	mov	r3, r4
 80142f4:	f7ff fb07 	bl	8013906 <VerifyCmacB0>
 80142f8:	4603      	mov	r3, r0
 80142fa:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142fc:	7d7b      	ldrb	r3, [r7, #21]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d001      	beq.n	8014306 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014302:	7d7b      	ldrb	r3, [r7, #21]
 8014304:	e021      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014308:	f893 3020 	ldrb.w	r3, [r3, #32]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d101      	bne.n	8014314 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014310:	2308      	movs	r3, #8
 8014312:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014316:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801431e:	b219      	sxth	r1, r3
 8014320:	7dfa      	ldrb	r2, [r7, #23]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	9301      	str	r3, [sp, #4]
 8014326:	2301      	movs	r3, #1
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	f7ff f9ac 	bl	8013688 <PayloadEncrypt>
 8014330:	4603      	mov	r3, r0
 8014332:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014334:	7d7b      	ldrb	r3, [r7, #21]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801433a:	7d7b      	ldrb	r3, [r7, #21]
 801433c:	e005      	b.n	801434a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801433e:	7bbb      	ldrb	r3, [r7, #14]
 8014340:	6879      	ldr	r1, [r7, #4]
 8014342:	4618      	mov	r0, r3
 8014344:	f7ff fc44 	bl	8013bd0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	371c      	adds	r7, #28
 801434e:	46bd      	mov	sp, r7
 8014350:	bd90      	pop	{r4, r7, pc}
 8014352:	bf00      	nop
 8014354:	20001a14 	.word	0x20001a14

08014358 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b088      	sub	sp, #32
 801435c:	af00      	add	r7, sp, #0
 801435e:	4603      	mov	r3, r0
 8014360:	460a      	mov	r2, r1
 8014362:	71fb      	strb	r3, [r7, #7]
 8014364:	4613      	mov	r3, r2
 8014366:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014368:	2300      	movs	r3, #0
 801436a:	60fb      	str	r3, [r7, #12]
 801436c:	f107 0310 	add.w	r3, r7, #16
 8014370:	2200      	movs	r2, #0
 8014372:	601a      	str	r2, [r3, #0]
 8014374:	605a      	str	r2, [r3, #4]
 8014376:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014378:	2300      	movs	r3, #0
 801437a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801437c:	79bb      	ldrb	r3, [r7, #6]
 801437e:	2b0c      	cmp	r3, #12
 8014380:	d00b      	beq.n	801439a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8014382:	2b0c      	cmp	r3, #12
 8014384:	dc0f      	bgt.n	80143a6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014386:	2b0a      	cmp	r3, #10
 8014388:	d00a      	beq.n	80143a0 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801438a:	2b0b      	cmp	r3, #11
 801438c:	d10b      	bne.n	80143a6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801438e:	79fb      	ldrb	r3, [r7, #7]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d10a      	bne.n	80143aa <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014394:	2320      	movs	r3, #32
 8014396:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014398:	e007      	b.n	80143aa <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801439a:	230b      	movs	r3, #11
 801439c:	77fb      	strb	r3, [r7, #31]
            break;
 801439e:	e005      	b.n	80143ac <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80143a0:	2330      	movs	r3, #48	; 0x30
 80143a2:	733b      	strb	r3, [r7, #12]
            break;
 80143a4:	e002      	b.n	80143ac <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80143a6:	230a      	movs	r3, #10
 80143a8:	e00d      	b.n	80143c6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80143aa:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80143ac:	79ba      	ldrb	r2, [r7, #6]
 80143ae:	7ff9      	ldrb	r1, [r7, #31]
 80143b0:	f107 030c 	add.w	r3, r7, #12
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f7 fcb5 	bl	800bd24 <SecureElementDeriveAndStoreKey>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d001      	beq.n	80143c4 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80143c0:	230e      	movs	r3, #14
 80143c2:	e000      	b.n	80143c6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3720      	adds	r7, #32
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b084      	sub	sp, #16
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d003      	beq.n	80143e4 <LoRaMacParserJoinAccept+0x16>
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d101      	bne.n	80143e8 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80143e4:	2302      	movs	r3, #2
 80143e6:	e0b9      	b.n	801455c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80143e8:	2300      	movs	r3, #0
 80143ea:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681a      	ldr	r2, [r3, #0]
 80143f0:	89fb      	ldrh	r3, [r7, #14]
 80143f2:	1c59      	adds	r1, r3, #1
 80143f4:	81f9      	strh	r1, [r7, #14]
 80143f6:	4413      	add	r3, r2
 80143f8:	781a      	ldrb	r2, [r3, #0]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	1d98      	adds	r0, r3, #6
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	89fb      	ldrh	r3, [r7, #14]
 8014408:	4413      	add	r3, r2
 801440a:	2203      	movs	r2, #3
 801440c:	4619      	mov	r1, r3
 801440e:	f002 fede 	bl	80171ce <memcpy1>
    bufItr = bufItr + 3;
 8014412:	89fb      	ldrh	r3, [r7, #14]
 8014414:	3303      	adds	r3, #3
 8014416:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f103 0009 	add.w	r0, r3, #9
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	89fb      	ldrh	r3, [r7, #14]
 8014424:	4413      	add	r3, r2
 8014426:	2203      	movs	r2, #3
 8014428:	4619      	mov	r1, r3
 801442a:	f002 fed0 	bl	80171ce <memcpy1>
    bufItr = bufItr + 3;
 801442e:	89fb      	ldrh	r3, [r7, #14]
 8014430:	3303      	adds	r3, #3
 8014432:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	89fb      	ldrh	r3, [r7, #14]
 801443a:	1c59      	adds	r1, r3, #1
 801443c:	81f9      	strh	r1, [r7, #14]
 801443e:	4413      	add	r3, r2
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	461a      	mov	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	89fb      	ldrh	r3, [r7, #14]
 801444e:	1c59      	adds	r1, r3, #1
 8014450:	81f9      	strh	r1, [r7, #14]
 8014452:	4413      	add	r3, r2
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	021a      	lsls	r2, r3, #8
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	431a      	orrs	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681a      	ldr	r2, [r3, #0]
 8014466:	89fb      	ldrh	r3, [r7, #14]
 8014468:	1c59      	adds	r1, r3, #1
 801446a:	81f9      	strh	r1, [r7, #14]
 801446c:	4413      	add	r3, r2
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	041a      	lsls	r2, r3, #16
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	431a      	orrs	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	89fb      	ldrh	r3, [r7, #14]
 8014482:	1c59      	adds	r1, r3, #1
 8014484:	81f9      	strh	r1, [r7, #14]
 8014486:	4413      	add	r3, r2
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	061a      	lsls	r2, r3, #24
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	431a      	orrs	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	89fb      	ldrh	r3, [r7, #14]
 801449c:	1c59      	adds	r1, r3, #1
 801449e:	81f9      	strh	r1, [r7, #14]
 80144a0:	4413      	add	r3, r2
 80144a2:	781a      	ldrb	r2, [r3, #0]
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	89fb      	ldrh	r3, [r7, #14]
 80144ae:	1c59      	adds	r1, r3, #1
 80144b0:	81f9      	strh	r1, [r7, #14]
 80144b2:	4413      	add	r3, r2
 80144b4:	781a      	ldrb	r2, [r3, #0]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	791b      	ldrb	r3, [r3, #4]
 80144be:	1f1a      	subs	r2, r3, #4
 80144c0:	89fb      	ldrh	r3, [r7, #14]
 80144c2:	1ad3      	subs	r3, r2, r3
 80144c4:	2b10      	cmp	r3, #16
 80144c6:	d10e      	bne.n	80144e6 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f103 0012 	add.w	r0, r3, #18
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	89fb      	ldrh	r3, [r7, #14]
 80144d4:	4413      	add	r3, r2
 80144d6:	2210      	movs	r2, #16
 80144d8:	4619      	mov	r1, r3
 80144da:	f002 fe78 	bl	80171ce <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80144de:	89fb      	ldrh	r3, [r7, #14]
 80144e0:	3310      	adds	r3, #16
 80144e2:	81fb      	strh	r3, [r7, #14]
 80144e4:	e008      	b.n	80144f8 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	791b      	ldrb	r3, [r3, #4]
 80144ea:	1f1a      	subs	r2, r3, #4
 80144ec:	89fb      	ldrh	r3, [r7, #14]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	dd01      	ble.n	80144f8 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80144f4:	2301      	movs	r3, #1
 80144f6:	e031      	b.n	801455c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681a      	ldr	r2, [r3, #0]
 80144fc:	89fb      	ldrh	r3, [r7, #14]
 80144fe:	1c59      	adds	r1, r3, #1
 8014500:	81f9      	strh	r1, [r7, #14]
 8014502:	4413      	add	r3, r2
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	461a      	mov	r2, r3
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681a      	ldr	r2, [r3, #0]
 8014510:	89fb      	ldrh	r3, [r7, #14]
 8014512:	1c59      	adds	r1, r3, #1
 8014514:	81f9      	strh	r1, [r7, #14]
 8014516:	4413      	add	r3, r2
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	021a      	lsls	r2, r3, #8
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014520:	431a      	orrs	r2, r3
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	89fb      	ldrh	r3, [r7, #14]
 801452c:	1c59      	adds	r1, r3, #1
 801452e:	81f9      	strh	r1, [r7, #14]
 8014530:	4413      	add	r3, r2
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	041a      	lsls	r2, r3, #16
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801453a:	431a      	orrs	r2, r3
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681a      	ldr	r2, [r3, #0]
 8014544:	89fb      	ldrh	r3, [r7, #14]
 8014546:	1c59      	adds	r1, r3, #1
 8014548:	81f9      	strh	r1, [r7, #14]
 801454a:	4413      	add	r3, r2
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	061a      	lsls	r2, r3, #24
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014554:	431a      	orrs	r2, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <LoRaMacParserData+0x16>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d101      	bne.n	801457e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801457a:	2302      	movs	r3, #2
 801457c:	e0e2      	b.n	8014744 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801457e:	2300      	movs	r3, #0
 8014580:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	89fb      	ldrh	r3, [r7, #14]
 8014588:	1c59      	adds	r1, r3, #1
 801458a:	81f9      	strh	r1, [r7, #14]
 801458c:	4413      	add	r3, r2
 801458e:	781a      	ldrb	r2, [r3, #0]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681a      	ldr	r2, [r3, #0]
 8014598:	89fb      	ldrh	r3, [r7, #14]
 801459a:	1c59      	adds	r1, r3, #1
 801459c:	81f9      	strh	r1, [r7, #14]
 801459e:	4413      	add	r3, r2
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	89fb      	ldrh	r3, [r7, #14]
 80145ae:	1c59      	adds	r1, r3, #1
 80145b0:	81f9      	strh	r1, [r7, #14]
 80145b2:	4413      	add	r3, r2
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	021a      	lsls	r2, r3, #8
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	431a      	orrs	r2, r3
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	89fb      	ldrh	r3, [r7, #14]
 80145c8:	1c59      	adds	r1, r3, #1
 80145ca:	81f9      	strh	r1, [r7, #14]
 80145cc:	4413      	add	r3, r2
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	041a      	lsls	r2, r3, #16
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	689b      	ldr	r3, [r3, #8]
 80145d6:	431a      	orrs	r2, r3
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	89fb      	ldrh	r3, [r7, #14]
 80145e2:	1c59      	adds	r1, r3, #1
 80145e4:	81f9      	strh	r1, [r7, #14]
 80145e6:	4413      	add	r3, r2
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	061a      	lsls	r2, r3, #24
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	431a      	orrs	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	89fb      	ldrh	r3, [r7, #14]
 80145fc:	1c59      	adds	r1, r3, #1
 80145fe:	81f9      	strh	r1, [r7, #14]
 8014600:	4413      	add	r3, r2
 8014602:	781a      	ldrb	r2, [r3, #0]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	89fb      	ldrh	r3, [r7, #14]
 801460e:	1c59      	adds	r1, r3, #1
 8014610:	81f9      	strh	r1, [r7, #14]
 8014612:	4413      	add	r3, r2
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	b29a      	uxth	r2, r3
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	89fb      	ldrh	r3, [r7, #14]
 8014622:	1c59      	adds	r1, r3, #1
 8014624:	81f9      	strh	r1, [r7, #14]
 8014626:	4413      	add	r3, r2
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	0219      	lsls	r1, r3, #8
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	89db      	ldrh	r3, [r3, #14]
 8014630:	b21a      	sxth	r2, r3
 8014632:	b20b      	sxth	r3, r1
 8014634:	4313      	orrs	r3, r2
 8014636:	b21b      	sxth	r3, r3
 8014638:	b29a      	uxth	r2, r3
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f103 0010 	add.w	r0, r3, #16
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	89fb      	ldrh	r3, [r7, #14]
 801464a:	18d1      	adds	r1, r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	7b1b      	ldrb	r3, [r3, #12]
 8014650:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014654:	b2db      	uxtb	r3, r3
 8014656:	b29b      	uxth	r3, r3
 8014658:	461a      	mov	r2, r3
 801465a:	f002 fdb8 	bl	80171ce <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	7b1b      	ldrb	r3, [r3, #12]
 8014662:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014666:	b2db      	uxtb	r3, r3
 8014668:	b29a      	uxth	r2, r3
 801466a:	89fb      	ldrh	r3, [r7, #14]
 801466c:	4413      	add	r3, r2
 801466e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2200      	movs	r2, #0
 8014674:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2200      	movs	r2, #0
 801467c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	791b      	ldrb	r3, [r3, #4]
 8014684:	461a      	mov	r2, r3
 8014686:	89fb      	ldrh	r3, [r7, #14]
 8014688:	1ad3      	subs	r3, r2, r3
 801468a:	2b04      	cmp	r3, #4
 801468c:	dd28      	ble.n	80146e0 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681a      	ldr	r2, [r3, #0]
 8014692:	89fb      	ldrh	r3, [r7, #14]
 8014694:	1c59      	adds	r1, r3, #1
 8014696:	81f9      	strh	r1, [r7, #14]
 8014698:	4413      	add	r3, r2
 801469a:	781a      	ldrb	r2, [r3, #0]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	791a      	ldrb	r2, [r3, #4]
 80146a6:	89fb      	ldrh	r3, [r7, #14]
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	1ad3      	subs	r3, r2, r3
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	3b04      	subs	r3, #4
 80146b0:	b2da      	uxtb	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	89fb      	ldrh	r3, [r7, #14]
 80146c2:	18d1      	adds	r1, r2, r3
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	461a      	mov	r2, r3
 80146ce:	f002 fd7e 	bl	80171ce <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146d8:	b29a      	uxth	r2, r3
 80146da:	89fb      	ldrh	r3, [r7, #14]
 80146dc:	4413      	add	r3, r2
 80146de:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681a      	ldr	r2, [r3, #0]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	791b      	ldrb	r3, [r3, #4]
 80146e8:	3b04      	subs	r3, #4
 80146ea:	4413      	add	r3, r2
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	461a      	mov	r2, r3
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6819      	ldr	r1, [r3, #0]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	791b      	ldrb	r3, [r3, #4]
 8014700:	3b03      	subs	r3, #3
 8014702:	440b      	add	r3, r1
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	021b      	lsls	r3, r3, #8
 8014708:	431a      	orrs	r2, r3
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6819      	ldr	r1, [r3, #0]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	791b      	ldrb	r3, [r3, #4]
 801471a:	3b02      	subs	r3, #2
 801471c:	440b      	add	r3, r1
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	041b      	lsls	r3, r3, #16
 8014722:	431a      	orrs	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6819      	ldr	r1, [r3, #0]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	791b      	ldrb	r3, [r3, #4]
 8014734:	3b01      	subs	r3, #1
 8014736:	440b      	add	r3, r1
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	061b      	lsls	r3, r3, #24
 801473c:	431a      	orrs	r2, r3
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014742:	2300      	movs	r3, #0
}
 8014744:	4618      	mov	r0, r3
 8014746:	3710      	adds	r7, #16
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d003      	beq.n	8014762 <LoRaMacSerializerJoinRequest+0x16>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d101      	bne.n	8014766 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014762:	2301      	movs	r3, #1
 8014764:	e070      	b.n	8014848 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014766:	2300      	movs	r3, #0
 8014768:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	791b      	ldrb	r3, [r3, #4]
 801476e:	2b16      	cmp	r3, #22
 8014770:	d801      	bhi.n	8014776 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014772:	2302      	movs	r3, #2
 8014774:	e068      	b.n	8014848 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	89fb      	ldrh	r3, [r7, #14]
 801477c:	1c59      	adds	r1, r3, #1
 801477e:	81f9      	strh	r1, [r7, #14]
 8014780:	4413      	add	r3, r2
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	7952      	ldrb	r2, [r2, #5]
 8014786:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	89fb      	ldrh	r3, [r7, #14]
 801478e:	18d0      	adds	r0, r2, r3
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	3306      	adds	r3, #6
 8014794:	2208      	movs	r2, #8
 8014796:	4619      	mov	r1, r3
 8014798:	f002 fd34 	bl	8017204 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801479c:	89fb      	ldrh	r3, [r7, #14]
 801479e:	3308      	adds	r3, #8
 80147a0:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681a      	ldr	r2, [r3, #0]
 80147a6:	89fb      	ldrh	r3, [r7, #14]
 80147a8:	18d0      	adds	r0, r2, r3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	330e      	adds	r3, #14
 80147ae:	2208      	movs	r2, #8
 80147b0:	4619      	mov	r1, r3
 80147b2:	f002 fd27 	bl	8017204 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80147b6:	89fb      	ldrh	r3, [r7, #14]
 80147b8:	3308      	adds	r3, #8
 80147ba:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	8ad9      	ldrh	r1, [r3, #22]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681a      	ldr	r2, [r3, #0]
 80147c4:	89fb      	ldrh	r3, [r7, #14]
 80147c6:	1c58      	adds	r0, r3, #1
 80147c8:	81f8      	strh	r0, [r7, #14]
 80147ca:	4413      	add	r3, r2
 80147cc:	b2ca      	uxtb	r2, r1
 80147ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	8adb      	ldrh	r3, [r3, #22]
 80147d4:	0a1b      	lsrs	r3, r3, #8
 80147d6:	b299      	uxth	r1, r3
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681a      	ldr	r2, [r3, #0]
 80147dc:	89fb      	ldrh	r3, [r7, #14]
 80147de:	1c58      	adds	r0, r3, #1
 80147e0:	81f8      	strh	r0, [r7, #14]
 80147e2:	4413      	add	r3, r2
 80147e4:	b2ca      	uxtb	r2, r1
 80147e6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6999      	ldr	r1, [r3, #24]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	89fb      	ldrh	r3, [r7, #14]
 80147f2:	1c58      	adds	r0, r3, #1
 80147f4:	81f8      	strh	r0, [r7, #14]
 80147f6:	4413      	add	r3, r2
 80147f8:	b2ca      	uxtb	r2, r1
 80147fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	699b      	ldr	r3, [r3, #24]
 8014800:	0a19      	lsrs	r1, r3, #8
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	89fb      	ldrh	r3, [r7, #14]
 8014808:	1c58      	adds	r0, r3, #1
 801480a:	81f8      	strh	r0, [r7, #14]
 801480c:	4413      	add	r3, r2
 801480e:	b2ca      	uxtb	r2, r1
 8014810:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	699b      	ldr	r3, [r3, #24]
 8014816:	0c19      	lsrs	r1, r3, #16
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681a      	ldr	r2, [r3, #0]
 801481c:	89fb      	ldrh	r3, [r7, #14]
 801481e:	1c58      	adds	r0, r3, #1
 8014820:	81f8      	strh	r0, [r7, #14]
 8014822:	4413      	add	r3, r2
 8014824:	b2ca      	uxtb	r2, r1
 8014826:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	699b      	ldr	r3, [r3, #24]
 801482c:	0e19      	lsrs	r1, r3, #24
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	89fb      	ldrh	r3, [r7, #14]
 8014834:	1c58      	adds	r0, r3, #1
 8014836:	81f8      	strh	r0, [r7, #14]
 8014838:	4413      	add	r3, r2
 801483a:	b2ca      	uxtb	r2, r1
 801483c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801483e:	89fb      	ldrh	r3, [r7, #14]
 8014840:	b2da      	uxtb	r2, r3
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014846:	2300      	movs	r3, #0
}
 8014848:	4618      	mov	r0, r3
 801484a:	3710      	adds	r7, #16
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b084      	sub	sp, #16
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d003      	beq.n	8014866 <LoRaMacSerializerData+0x16>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d101      	bne.n	801486a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014866:	2301      	movs	r3, #1
 8014868:	e0e5      	b.n	8014a36 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801486a:	2300      	movs	r3, #0
 801486c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801486e:	2308      	movs	r3, #8
 8014870:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	7b1b      	ldrb	r3, [r3, #12]
 8014876:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801487a:	b2db      	uxtb	r3, r3
 801487c:	b29a      	uxth	r2, r3
 801487e:	89bb      	ldrh	r3, [r7, #12]
 8014880:	4413      	add	r3, r2
 8014882:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801488a:	2b00      	cmp	r3, #0
 801488c:	d002      	beq.n	8014894 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801488e:	89bb      	ldrh	r3, [r7, #12]
 8014890:	3301      	adds	r3, #1
 8014892:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801489a:	b29a      	uxth	r2, r3
 801489c:	89bb      	ldrh	r3, [r7, #12]
 801489e:	4413      	add	r3, r2
 80148a0:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80148a2:	89bb      	ldrh	r3, [r7, #12]
 80148a4:	3304      	adds	r3, #4
 80148a6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	791b      	ldrb	r3, [r3, #4]
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	89ba      	ldrh	r2, [r7, #12]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d901      	bls.n	80148b8 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80148b4:	2302      	movs	r3, #2
 80148b6:	e0be      	b.n	8014a36 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	89fb      	ldrh	r3, [r7, #14]
 80148be:	1c59      	adds	r1, r3, #1
 80148c0:	81f9      	strh	r1, [r7, #14]
 80148c2:	4413      	add	r3, r2
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	7952      	ldrb	r2, [r2, #5]
 80148c8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6899      	ldr	r1, [r3, #8]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	89fb      	ldrh	r3, [r7, #14]
 80148d4:	1c58      	adds	r0, r3, #1
 80148d6:	81f8      	strh	r0, [r7, #14]
 80148d8:	4413      	add	r3, r2
 80148da:	b2ca      	uxtb	r2, r1
 80148dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	689b      	ldr	r3, [r3, #8]
 80148e2:	0a19      	lsrs	r1, r3, #8
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	89fb      	ldrh	r3, [r7, #14]
 80148ea:	1c58      	adds	r0, r3, #1
 80148ec:	81f8      	strh	r0, [r7, #14]
 80148ee:	4413      	add	r3, r2
 80148f0:	b2ca      	uxtb	r2, r1
 80148f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	689b      	ldr	r3, [r3, #8]
 80148f8:	0c19      	lsrs	r1, r3, #16
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	89fb      	ldrh	r3, [r7, #14]
 8014900:	1c58      	adds	r0, r3, #1
 8014902:	81f8      	strh	r0, [r7, #14]
 8014904:	4413      	add	r3, r2
 8014906:	b2ca      	uxtb	r2, r1
 8014908:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	689b      	ldr	r3, [r3, #8]
 801490e:	0e19      	lsrs	r1, r3, #24
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	89fb      	ldrh	r3, [r7, #14]
 8014916:	1c58      	adds	r0, r3, #1
 8014918:	81f8      	strh	r0, [r7, #14]
 801491a:	4413      	add	r3, r2
 801491c:	b2ca      	uxtb	r2, r1
 801491e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	89fb      	ldrh	r3, [r7, #14]
 8014926:	1c59      	adds	r1, r3, #1
 8014928:	81f9      	strh	r1, [r7, #14]
 801492a:	4413      	add	r3, r2
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	7b12      	ldrb	r2, [r2, #12]
 8014930:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	89d9      	ldrh	r1, [r3, #14]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	89fb      	ldrh	r3, [r7, #14]
 801493c:	1c58      	adds	r0, r3, #1
 801493e:	81f8      	strh	r0, [r7, #14]
 8014940:	4413      	add	r3, r2
 8014942:	b2ca      	uxtb	r2, r1
 8014944:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	89db      	ldrh	r3, [r3, #14]
 801494a:	0a1b      	lsrs	r3, r3, #8
 801494c:	b299      	uxth	r1, r3
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	89fb      	ldrh	r3, [r7, #14]
 8014954:	1c58      	adds	r0, r3, #1
 8014956:	81f8      	strh	r0, [r7, #14]
 8014958:	4413      	add	r3, r2
 801495a:	b2ca      	uxtb	r2, r1
 801495c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	89fb      	ldrh	r3, [r7, #14]
 8014964:	18d0      	adds	r0, r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f103 0110 	add.w	r1, r3, #16
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	7b1b      	ldrb	r3, [r3, #12]
 8014970:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014974:	b2db      	uxtb	r3, r3
 8014976:	b29b      	uxth	r3, r3
 8014978:	461a      	mov	r2, r3
 801497a:	f002 fc28 	bl	80171ce <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	7b1b      	ldrb	r3, [r3, #12]
 8014982:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014986:	b2db      	uxtb	r3, r3
 8014988:	b29a      	uxth	r2, r3
 801498a:	89fb      	ldrh	r3, [r7, #14]
 801498c:	4413      	add	r3, r2
 801498e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014996:	2b00      	cmp	r3, #0
 8014998:	d009      	beq.n	80149ae <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	89fb      	ldrh	r3, [r7, #14]
 80149a0:	1c59      	adds	r1, r3, #1
 80149a2:	81f9      	strh	r1, [r7, #14]
 80149a4:	4413      	add	r3, r2
 80149a6:	687a      	ldr	r2, [r7, #4]
 80149a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80149ac:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	89fb      	ldrh	r3, [r7, #14]
 80149b4:	18d0      	adds	r0, r2, r3
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	461a      	mov	r2, r3
 80149c4:	f002 fc03 	bl	80171ce <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	89fb      	ldrh	r3, [r7, #14]
 80149d2:	4413      	add	r3, r2
 80149d4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	89fb      	ldrh	r3, [r7, #14]
 80149e0:	1c58      	adds	r0, r3, #1
 80149e2:	81f8      	strh	r0, [r7, #14]
 80149e4:	4413      	add	r3, r2
 80149e6:	b2ca      	uxtb	r2, r1
 80149e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149ee:	0a19      	lsrs	r1, r3, #8
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	89fb      	ldrh	r3, [r7, #14]
 80149f6:	1c58      	adds	r0, r3, #1
 80149f8:	81f8      	strh	r0, [r7, #14]
 80149fa:	4413      	add	r3, r2
 80149fc:	b2ca      	uxtb	r2, r1
 80149fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	0c19      	lsrs	r1, r3, #16
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681a      	ldr	r2, [r3, #0]
 8014a0a:	89fb      	ldrh	r3, [r7, #14]
 8014a0c:	1c58      	adds	r0, r3, #1
 8014a0e:	81f8      	strh	r0, [r7, #14]
 8014a10:	4413      	add	r3, r2
 8014a12:	b2ca      	uxtb	r2, r1
 8014a14:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1a:	0e19      	lsrs	r1, r3, #24
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	89fb      	ldrh	r3, [r7, #14]
 8014a22:	1c58      	adds	r0, r3, #1
 8014a24:	81f8      	strh	r0, [r7, #14]
 8014a26:	4413      	add	r3, r2
 8014a28:	b2ca      	uxtb	r2, r1
 8014a2a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014a2c:	89fb      	ldrh	r3, [r7, #14]
 8014a2e:	b2da      	uxtb	r2, r3
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014a34:	2300      	movs	r3, #0
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}

08014a3e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014a3e:	b480      	push	{r7}
 8014a40:	b083      	sub	sp, #12
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	4603      	mov	r3, r0
 8014a46:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014a48:	79fb      	ldrb	r3, [r7, #7]
 8014a4a:	2b08      	cmp	r3, #8
 8014a4c:	d101      	bne.n	8014a52 <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8014a4e:	2301      	movs	r3, #1
 8014a50:	e000      	b.n	8014a54 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014a52:	2300      	movs	r3, #0
        }
    }
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bc80      	pop	{r7}
 8014a5c:	4770      	bx	lr

08014a5e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b084      	sub	sp, #16
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	4603      	mov	r3, r0
 8014a66:	6039      	str	r1, [r7, #0]
 8014a68:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014a6e:	79fb      	ldrb	r3, [r7, #7]
 8014a70:	2b08      	cmp	r3, #8
 8014a72:	d105      	bne.n	8014a80 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8014a74:	6838      	ldr	r0, [r7, #0]
 8014a76:	f001 fa11 	bl	8015e9c <RegionUS915GetPhyParam>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	60fb      	str	r3, [r7, #12]
 8014a7e:	e001      	b.n	8014a84 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	4618      	mov	r0, r3
 8014a88:	3710      	adds	r7, #16
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}

08014a8e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014a8e:	b580      	push	{r7, lr}
 8014a90:	b082      	sub	sp, #8
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	4603      	mov	r3, r0
 8014a96:	6039      	str	r1, [r7, #0]
 8014a98:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014a9a:	79fb      	ldrb	r3, [r7, #7]
 8014a9c:	2b08      	cmp	r3, #8
 8014a9e:	d103      	bne.n	8014aa8 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 8014aa0:	6838      	ldr	r0, [r7, #0]
 8014aa2:	f001 fb57 	bl	8016154 <RegionUS915SetBandTxDone>
 8014aa6:	e000      	b.n	8014aaa <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014aa8:	bf00      	nop
        }
    }
}
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	6039      	str	r1, [r7, #0]
 8014aba:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014abc:	79fb      	ldrb	r3, [r7, #7]
 8014abe:	2b08      	cmp	r3, #8
 8014ac0:	d103      	bne.n	8014aca <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8014ac2:	6838      	ldr	r0, [r7, #0]
 8014ac4:	f001 fb72 	bl	80161ac <RegionUS915InitDefaults>
 8014ac8:	e000      	b.n	8014acc <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014aca:	bf00      	nop
        }
    }
}
 8014acc:	bf00      	nop
 8014ace:	3708      	adds	r7, #8
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	4603      	mov	r3, r0
 8014adc:	6039      	str	r1, [r7, #0]
 8014ade:	71fb      	strb	r3, [r7, #7]
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014ae4:	79fb      	ldrb	r3, [r7, #7]
 8014ae6:	2b08      	cmp	r3, #8
 8014ae8:	d106      	bne.n	8014af8 <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8014aea:	79bb      	ldrb	r3, [r7, #6]
 8014aec:	4619      	mov	r1, r3
 8014aee:	6838      	ldr	r0, [r7, #0]
 8014af0:	f001 fc8e 	bl	8016410 <RegionUS915Verify>
 8014af4:	4603      	mov	r3, r0
 8014af6:	e000      	b.n	8014afa <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 8014af8:	2300      	movs	r3, #0
        }
    }
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3708      	adds	r7, #8
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}

08014b02 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014b02:	b580      	push	{r7, lr}
 8014b04:	b082      	sub	sp, #8
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	4603      	mov	r3, r0
 8014b0a:	6039      	str	r1, [r7, #0]
 8014b0c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b0e:	79fb      	ldrb	r3, [r7, #7]
 8014b10:	2b08      	cmp	r3, #8
 8014b12:	d103      	bne.n	8014b1c <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8014b14:	6838      	ldr	r0, [r7, #0]
 8014b16:	f001 fcf1 	bl	80164fc <RegionUS915ApplyCFList>
 8014b1a:	e000      	b.n	8014b1e <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014b1c:	bf00      	nop
        }
    }
}
 8014b1e:	bf00      	nop
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}

08014b26 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014b26:	b580      	push	{r7, lr}
 8014b28:	b082      	sub	sp, #8
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	6039      	str	r1, [r7, #0]
 8014b30:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b32:	79fb      	ldrb	r3, [r7, #7]
 8014b34:	2b08      	cmp	r3, #8
 8014b36:	d104      	bne.n	8014b42 <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8014b38:	6838      	ldr	r0, [r7, #0]
 8014b3a:	f001 fd53 	bl	80165e4 <RegionUS915ChanMaskSet>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	e000      	b.n	8014b44 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014b42:	2300      	movs	r3, #0
        }
    }
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3708      	adds	r7, #8
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}

08014b4c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b082      	sub	sp, #8
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	603b      	str	r3, [r7, #0]
 8014b54:	4603      	mov	r3, r0
 8014b56:	71fb      	strb	r3, [r7, #7]
 8014b58:	460b      	mov	r3, r1
 8014b5a:	71bb      	strb	r3, [r7, #6]
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014b60:	79fb      	ldrb	r3, [r7, #7]
 8014b62:	2b08      	cmp	r3, #8
 8014b64:	d107      	bne.n	8014b76 <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014b66:	7979      	ldrb	r1, [r7, #5]
 8014b68:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014b6c:	693b      	ldr	r3, [r7, #16]
 8014b6e:	683a      	ldr	r2, [r7, #0]
 8014b70:	f001 fda0 	bl	80166b4 <RegionUS915ComputeRxWindowParameters>
 8014b74:	e000      	b.n	8014b78 <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014b76:	bf00      	nop
        }
    }
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	4603      	mov	r3, r0
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
 8014b8c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014b8e:	7bfb      	ldrb	r3, [r7, #15]
 8014b90:	2b08      	cmp	r3, #8
 8014b92:	d105      	bne.n	8014ba0 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8014b94:	6879      	ldr	r1, [r7, #4]
 8014b96:	68b8      	ldr	r0, [r7, #8]
 8014b98:	f001 fdd6 	bl	8016748 <RegionUS915RxConfig>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	e000      	b.n	8014ba2 <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014ba0:	2300      	movs	r3, #0
        }
    }
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}

08014baa <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014baa:	b580      	push	{r7, lr}
 8014bac:	b084      	sub	sp, #16
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	603b      	str	r3, [r7, #0]
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014bba:	7bfb      	ldrb	r3, [r7, #15]
 8014bbc:	2b08      	cmp	r3, #8
 8014bbe:	d106      	bne.n	8014bce <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8014bc0:	683a      	ldr	r2, [r7, #0]
 8014bc2:	6879      	ldr	r1, [r7, #4]
 8014bc4:	68b8      	ldr	r0, [r7, #8]
 8014bc6:	f001 fe43 	bl	8016850 <RegionUS915TxConfig>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	e000      	b.n	8014bd0 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014bce:	2300      	movs	r3, #0
        }
    }
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3710      	adds	r7, #16
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b086      	sub	sp, #24
 8014bdc:	af02      	add	r7, sp, #8
 8014bde:	60b9      	str	r1, [r7, #8]
 8014be0:	607a      	str	r2, [r7, #4]
 8014be2:	603b      	str	r3, [r7, #0]
 8014be4:	4603      	mov	r3, r0
 8014be6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014be8:	7bfb      	ldrb	r3, [r7, #15]
 8014bea:	2b08      	cmp	r3, #8
 8014bec:	d109      	bne.n	8014c02 <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	9300      	str	r3, [sp, #0]
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	683a      	ldr	r2, [r7, #0]
 8014bf6:	6879      	ldr	r1, [r7, #4]
 8014bf8:	68b8      	ldr	r0, [r7, #8]
 8014bfa:	f001 fed3 	bl	80169a4 <RegionUS915LinkAdrReq>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	e000      	b.n	8014c04 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014c02:	2300      	movs	r3, #0
        }
    }
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	3710      	adds	r7, #16
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	4603      	mov	r3, r0
 8014c14:	6039      	str	r1, [r7, #0]
 8014c16:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c18:	79fb      	ldrb	r3, [r7, #7]
 8014c1a:	2b08      	cmp	r3, #8
 8014c1c:	d104      	bne.n	8014c28 <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8014c1e:	6838      	ldr	r0, [r7, #0]
 8014c20:	f002 f8da 	bl	8016dd8 <RegionUS915RxParamSetupReq>
 8014c24:	4603      	mov	r3, r0
 8014c26:	e000      	b.n	8014c2a <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014c28:	2300      	movs	r3, #0
        }
    }
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}

08014c32 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b082      	sub	sp, #8
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	4603      	mov	r3, r0
 8014c3a:	6039      	str	r1, [r7, #0]
 8014c3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c3e:	79fb      	ldrb	r3, [r7, #7]
 8014c40:	2b08      	cmp	r3, #8
 8014c42:	d104      	bne.n	8014c4e <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8014c44:	6838      	ldr	r0, [r7, #0]
 8014c46:	f002 f913 	bl	8016e70 <RegionUS915NewChannelReq>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	e000      	b.n	8014c50 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014c4e:	2300      	movs	r3, #0
        }
    }
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3708      	adds	r7, #8
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	4603      	mov	r3, r0
 8014c60:	6039      	str	r1, [r7, #0]
 8014c62:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c64:	79fb      	ldrb	r3, [r7, #7]
 8014c66:	2b08      	cmp	r3, #8
 8014c68:	d104      	bne.n	8014c74 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8014c6a:	6838      	ldr	r0, [r7, #0]
 8014c6c:	f002 f90b 	bl	8016e86 <RegionUS915TxParamSetupReq>
 8014c70:	4603      	mov	r3, r0
 8014c72:	e000      	b.n	8014c76 <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014c74:	2300      	movs	r3, #0
        }
    }
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3708      	adds	r7, #8
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b082      	sub	sp, #8
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	4603      	mov	r3, r0
 8014c86:	6039      	str	r1, [r7, #0]
 8014c88:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c8a:	79fb      	ldrb	r3, [r7, #7]
 8014c8c:	2b08      	cmp	r3, #8
 8014c8e:	d104      	bne.n	8014c9a <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8014c90:	6838      	ldr	r0, [r7, #0]
 8014c92:	f002 f903 	bl	8016e9c <RegionUS915DlChannelReq>
 8014c96:	4603      	mov	r3, r0
 8014c98:	e000      	b.n	8014c9c <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014c9a:	2300      	movs	r3, #0
        }
    }
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	4603      	mov	r3, r0
 8014cac:	71fb      	strb	r3, [r7, #7]
 8014cae:	460b      	mov	r3, r1
 8014cb0:	71bb      	strb	r3, [r7, #6]
 8014cb2:	4613      	mov	r3, r2
 8014cb4:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014cb6:	79fb      	ldrb	r3, [r7, #7]
 8014cb8:	2b08      	cmp	r3, #8
 8014cba:	d108      	bne.n	8014cce <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8014cbc:	797a      	ldrb	r2, [r7, #5]
 8014cbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014cc2:	4611      	mov	r1, r2
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f002 f8f5 	bl	8016eb4 <RegionUS915AlternateDr>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	e000      	b.n	8014cd0 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014cce:	2300      	movs	r3, #0
        }
    }
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60b9      	str	r1, [r7, #8]
 8014ce0:	607a      	str	r2, [r7, #4]
 8014ce2:	603b      	str	r3, [r7, #0]
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014ce8:	7bfb      	ldrb	r3, [r7, #15]
 8014cea:	2b08      	cmp	r3, #8
 8014cec:	d107      	bne.n	8014cfe <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8014cee:	69bb      	ldr	r3, [r7, #24]
 8014cf0:	683a      	ldr	r2, [r7, #0]
 8014cf2:	6879      	ldr	r1, [r7, #4]
 8014cf4:	68b8      	ldr	r0, [r7, #8]
 8014cf6:	f002 f913 	bl	8016f20 <RegionUS915NextChannel>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	e000      	b.n	8014d00 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014cfe:	2309      	movs	r3, #9
        }
    }
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3710      	adds	r7, #16
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014d08:	b590      	push	{r4, r7, lr}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	4604      	mov	r4, r0
 8014d10:	4608      	mov	r0, r1
 8014d12:	4611      	mov	r1, r2
 8014d14:	461a      	mov	r2, r3
 8014d16:	4623      	mov	r3, r4
 8014d18:	71fb      	strb	r3, [r7, #7]
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	71bb      	strb	r3, [r7, #6]
 8014d1e:	460b      	mov	r3, r1
 8014d20:	717b      	strb	r3, [r7, #5]
 8014d22:	4613      	mov	r3, r2
 8014d24:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014d26:	79fb      	ldrb	r3, [r7, #7]
 8014d28:	2b08      	cmp	r3, #8
 8014d2a:	d109      	bne.n	8014d40 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8014d2c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014d30:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014d34:	79bb      	ldrb	r3, [r7, #6]
 8014d36:	4618      	mov	r0, r3
 8014d38:	f002 f9e0 	bl	80170fc <RegionUS915ApplyDrOffset>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	e000      	b.n	8014d42 <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014d40:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	370c      	adds	r7, #12
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd90      	pop	{r4, r7, pc}
	...

08014d4c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014d52:	4b04      	ldr	r3, [pc, #16]	; (8014d64 <RegionGetVersion+0x18>)
 8014d54:	607b      	str	r3, [r7, #4]

    return version;
 8014d56:	687b      	ldr	r3, [r7, #4]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	370c      	adds	r7, #12
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bc80      	pop	{r7}
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	02010001 	.word	0x02010001

08014d68 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b087      	sub	sp, #28
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	4603      	mov	r3, r0
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
 8014d74:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <FindAvailable125kHzChannels+0x1a>
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d101      	bne.n	8014d86 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014d82:	2303      	movs	r3, #3
 8014d84:	e021      	b.n	8014dca <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	75fb      	strb	r3, [r7, #23]
 8014d90:	e017      	b.n	8014dc2 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8014d92:	89fa      	ldrh	r2, [r7, #14]
 8014d94:	7dfb      	ldrb	r3, [r7, #23]
 8014d96:	fa42 f303 	asr.w	r3, r2, r3
 8014d9a:	f003 0301 	and.w	r3, r3, #1
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d00c      	beq.n	8014dbc <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	461a      	mov	r2, r3
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	4413      	add	r3, r2
 8014dac:	7dfa      	ldrb	r2, [r7, #23]
 8014dae:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	3301      	adds	r3, #1
 8014db6:	b2da      	uxtb	r2, r3
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014dbc:	7dfb      	ldrb	r3, [r7, #23]
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	75fb      	strb	r3, [r7, #23]
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
 8014dc4:	2b07      	cmp	r3, #7
 8014dc6:	d9e4      	bls.n	8014d92 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8014dc8:	2300      	movs	r3, #0
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	371c      	adds	r7, #28
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bc80      	pop	{r7}
 8014dd2:	4770      	bx	lr

08014dd4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8014dd4:	b590      	push	{r4, r7, lr}
 8014dd6:	b089      	sub	sp, #36	; 0x24
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	60b9      	str	r1, [r7, #8]
 8014dde:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8014de0:	2300      	movs	r3, #0
 8014de2:	617b      	str	r3, [r7, #20]
 8014de4:	2300      	movs	r3, #0
 8014de6:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8014de8:	2300      	movs	r3, #0
 8014dea:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d005      	beq.n	8014dfe <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d002      	beq.n	8014dfe <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	e055      	b.n	8014eae <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	781b      	ldrb	r3, [r3, #0]
 8014e06:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8014e08:	7f7b      	ldrb	r3, [r7, #29]
 8014e0a:	085b      	lsrs	r3, r3, #1
 8014e0c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8014e0e:	7f7b      	ldrb	r3, [r7, #29]
 8014e10:	f003 0301 	and.w	r3, r3, #1
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d107      	bne.n	8014e2a <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8014e1a:	7f3b      	ldrb	r3, [r7, #28]
 8014e1c:	005b      	lsls	r3, r3, #1
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	4413      	add	r3, r2
 8014e22:	881b      	ldrh	r3, [r3, #0]
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	83fb      	strh	r3, [r7, #30]
 8014e28:	e006      	b.n	8014e38 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8014e2a:	7f3b      	ldrb	r3, [r7, #28]
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	4413      	add	r3, r2
 8014e32:	881b      	ldrh	r3, [r3, #0]
 8014e34:	0a1b      	lsrs	r3, r3, #8
 8014e36:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8014e38:	f107 0213 	add.w	r2, r7, #19
 8014e3c:	f107 0114 	add.w	r1, r7, #20
 8014e40:	8bfb      	ldrh	r3, [r7, #30]
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7ff ff90 	bl	8014d68 <FindAvailable125kHzChannels>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b03      	cmp	r3, #3
 8014e4c:	d101      	bne.n	8014e52 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014e4e:	2303      	movs	r3, #3
 8014e50:	e02d      	b.n	8014eae <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8014e52:	7cfb      	ldrb	r3, [r7, #19]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d011      	beq.n	8014e7c <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8014e58:	7f7b      	ldrb	r3, [r7, #29]
 8014e5a:	00db      	lsls	r3, r3, #3
 8014e5c:	b2dc      	uxtb	r4, r3
 8014e5e:	7cfb      	ldrb	r3, [r7, #19]
 8014e60:	3b01      	subs	r3, #1
 8014e62:	4619      	mov	r1, r3
 8014e64:	2000      	movs	r0, #0
 8014e66:	f002 f99b 	bl	80171a0 <randr>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	3320      	adds	r3, #32
 8014e6e:	443b      	add	r3, r7
 8014e70:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8014e74:	4423      	add	r3, r4
 8014e76:	b2da      	uxtb	r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8014e7c:	7f7b      	ldrb	r3, [r7, #29]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8014e82:	7f7b      	ldrb	r3, [r7, #29]
 8014e84:	2b07      	cmp	r3, #7
 8014e86:	d901      	bls.n	8014e8c <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8014e8c:	7cfb      	ldrb	r3, [r7, #19]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d104      	bne.n	8014e9c <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	7f7a      	ldrb	r2, [r7, #29]
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d1b5      	bne.n	8014e08 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8014e9c:	7cfb      	ldrb	r3, [r7, #19]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d004      	beq.n	8014eac <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	7f7a      	ldrb	r2, [r7, #29]
 8014ea6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	e000      	b.n	8014eae <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014eac:	2303      	movs	r3, #3
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3724      	adds	r7, #36	; 0x24
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd90      	pop	{r4, r7, pc}

08014eb6 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8014eb6:	b480      	push	{r7}
 8014eb8:	b085      	sub	sp, #20
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	60b9      	str	r1, [r7, #8]
 8014ec0:	607a      	str	r2, [r7, #4]
 8014ec2:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8014ec4:	7bfb      	ldrb	r3, [r7, #15]
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	fb03 f202 	mul.w	r2, r3, r2
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	4413      	add	r3, r2
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3714      	adds	r7, #20
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bc80      	pop	{r7}
 8014ed8:	4770      	bx	lr

08014eda <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014eda:	b480      	push	{r7}
 8014edc:	b087      	sub	sp, #28
 8014ede:	af00      	add	r7, sp, #0
 8014ee0:	60f8      	str	r0, [r7, #12]
 8014ee2:	4608      	mov	r0, r1
 8014ee4:	4639      	mov	r1, r7
 8014ee6:	e881 000c 	stmia.w	r1, {r2, r3}
 8014eea:	4603      	mov	r3, r0
 8014eec:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	881b      	ldrh	r3, [r3, #0]
 8014ef2:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014ef4:	7afb      	ldrb	r3, [r7, #11]
 8014ef6:	f083 0301 	eor.w	r3, r3, #1
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d01b      	beq.n	8014f38 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014f00:	f242 7310 	movw	r3, #10000	; 0x2710
 8014f04:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014f0c:	d202      	bcs.n	8014f14 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014f0e:	2364      	movs	r3, #100	; 0x64
 8014f10:	82bb      	strh	r3, [r7, #20]
 8014f12:	e00b      	b.n	8014f2c <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d803      	bhi.n	8014f26 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014f22:	82bb      	strh	r3, [r7, #20]
 8014f24:	e002      	b.n	8014f2c <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014f26:	f242 7310 	movw	r3, #10000	; 0x2710
 8014f2a:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014f2c:	8aba      	ldrh	r2, [r7, #20]
 8014f2e:	8afb      	ldrh	r3, [r7, #22]
 8014f30:	4293      	cmp	r3, r2
 8014f32:	bf38      	it	cc
 8014f34:	4613      	movcc	r3, r2
 8014f36:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014f38:	8afb      	ldrh	r3, [r7, #22]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014f42:	8afb      	ldrh	r3, [r7, #22]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	371c      	adds	r7, #28
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bc80      	pop	{r7}
 8014f4c:	4770      	bx	lr
	...

08014f50 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b08e      	sub	sp, #56	; 0x38
 8014f54:	af02      	add	r7, sp, #8
 8014f56:	60f8      	str	r0, [r7, #12]
 8014f58:	4608      	mov	r0, r1
 8014f5a:	4639      	mov	r1, r7
 8014f5c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f60:	4603      	mov	r3, r0
 8014f62:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014f6a:	4b4b      	ldr	r3, [pc, #300]	; (8015098 <SetMaxTimeCredits+0x148>)
 8014f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014f6e:	463b      	mov	r3, r7
 8014f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014f74:	f005 fdb6 	bl	801aae4 <SysTimeToMs>
 8014f78:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014f7a:	f107 0314 	add.w	r3, r7, #20
 8014f7e:	2200      	movs	r2, #0
 8014f80:	601a      	str	r2, [r3, #0]
 8014f82:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014f84:	7af9      	ldrb	r1, [r7, #11]
 8014f86:	463b      	mov	r3, r7
 8014f88:	cb0c      	ldmia	r3, {r2, r3}
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	f7ff ffa5 	bl	8014eda <GetDutyCycle>
 8014f90:	4603      	mov	r3, r0
 8014f92:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014f94:	7afb      	ldrb	r3, [r7, #11]
 8014f96:	f083 0301 	eor.w	r3, r3, #1
 8014f9a:	b2db      	uxtb	r3, r3
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d062      	beq.n	8015066 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014fa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014fa2:	2b64      	cmp	r3, #100	; 0x64
 8014fa4:	d105      	bne.n	8014fb2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014fa6:	4b3c      	ldr	r3, [pc, #240]	; (8015098 <SetMaxTimeCredits+0x148>)
 8014fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fae:	609a      	str	r2, [r3, #8]
 8014fb0:	e00b      	b.n	8014fca <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014fb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014fb8:	d105      	bne.n	8014fc6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8014fba:	4b38      	ldr	r3, [pc, #224]	; (801509c <SetMaxTimeCredits+0x14c>)
 8014fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fc2:	609a      	str	r2, [r3, #8]
 8014fc4:	e001      	b.n	8014fca <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8014fc6:	4b36      	ldr	r3, [pc, #216]	; (80150a0 <SetMaxTimeCredits+0x150>)
 8014fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	689a      	ldr	r2, [r3, #8]
 8014fce:	f107 031c 	add.w	r3, r7, #28
 8014fd2:	4611      	mov	r1, r2
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f005 fdad 	bl	801ab34 <SysTimeFromMs>
 8014fda:	f107 0014 	add.w	r0, r7, #20
 8014fde:	6a3b      	ldr	r3, [r7, #32]
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	463a      	mov	r2, r7
 8014fe6:	ca06      	ldmia	r2, {r1, r2}
 8014fe8:	f005 fcbd 	bl	801a966 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014fec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014ff0:	f083 0301 	eor.w	r3, r3, #1
 8014ff4:	b2db      	uxtb	r3, r3
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d006      	beq.n	8015008 <SetMaxTimeCredits+0xb8>
 8014ffa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014ffe:	f083 0301 	eor.w	r3, r3, #1
 8015002:	b2db      	uxtb	r3, r3
 8015004:	2b00      	cmp	r3, #0
 8015006:	d108      	bne.n	801501a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801500c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801500e:	429a      	cmp	r2, r3
 8015010:	d103      	bne.n	801501a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015012:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015014:	4a23      	ldr	r2, [pc, #140]	; (80150a4 <SetMaxTimeCredits+0x154>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d92f      	bls.n	801507a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801501e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	4a21      	ldr	r2, [pc, #132]	; (80150a8 <SetMaxTimeCredits+0x158>)
 8015024:	4293      	cmp	r3, r2
 8015026:	d928      	bls.n	801507a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801502e:	3b30      	subs	r3, #48	; 0x30
 8015030:	4a1e      	ldr	r2, [pc, #120]	; (80150ac <SetMaxTimeCredits+0x15c>)
 8015032:	fba2 2303 	umull	r2, r3, r2, r3
 8015036:	0c1b      	lsrs	r3, r3, #16
 8015038:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	4a1c      	ldr	r2, [pc, #112]	; (80150b0 <SetMaxTimeCredits+0x160>)
 801503e:	fb02 f303 	mul.w	r3, r2, r3
 8015042:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801504a:	3330      	adds	r3, #48	; 0x30
 801504c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801504e:	2300      	movs	r3, #0
 8015050:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015052:	f107 0314 	add.w	r3, r7, #20
 8015056:	e893 0003 	ldmia.w	r3, {r0, r1}
 801505a:	f005 fd43 	bl	801aae4 <SysTimeToMs>
 801505e:	4602      	mov	r2, r0
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	609a      	str	r2, [r3, #8]
 8015064:	e009      	b.n	801507a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015066:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801506a:	f083 0301 	eor.w	r3, r3, #1
 801506e:	b2db      	uxtb	r3, r3
 8015070:	2b00      	cmp	r3, #0
 8015072:	d002      	beq.n	801507a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015078:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d102      	bne.n	8015088 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015086:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801508c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801508e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015090:	4618      	mov	r0, r3
 8015092:	3730      	adds	r7, #48	; 0x30
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	001b7740 	.word	0x001b7740
 801509c:	0112a880 	.word	0x0112a880
 80150a0:	02932e00 	.word	0x02932e00
 80150a4:	0001517f 	.word	0x0001517f
 80150a8:	0001ec2f 	.word	0x0001ec2f
 80150ac:	c22e4507 	.word	0xc22e4507
 80150b0:	00015180 	.word	0x00015180

080150b4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af02      	add	r7, sp, #8
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	4608      	mov	r0, r1
 80150be:	4611      	mov	r1, r2
 80150c0:	461a      	mov	r2, r3
 80150c2:	4603      	mov	r3, r0
 80150c4:	70fb      	strb	r3, [r7, #3]
 80150c6:	460b      	mov	r3, r1
 80150c8:	70bb      	strb	r3, [r7, #2]
 80150ca:	4613      	mov	r3, r2
 80150cc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80150ce:	78f9      	ldrb	r1, [r7, #3]
 80150d0:	787b      	ldrb	r3, [r7, #1]
 80150d2:	9301      	str	r3, [sp, #4]
 80150d4:	78bb      	ldrb	r3, [r7, #2]
 80150d6:	9300      	str	r3, [sp, #0]
 80150d8:	f107 0318 	add.w	r3, r7, #24
 80150dc:	cb0c      	ldmia	r3, {r2, r3}
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f7ff ff36 	bl	8014f50 <SetMaxTimeCredits>
 80150e4:	4603      	mov	r3, r0
 80150e6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80150e8:	78fb      	ldrb	r3, [r7, #3]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00a      	beq.n	8015104 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	4618      	mov	r0, r3
 80150f4:	f006 fb32 	bl	801b75c <UTIL_TIMER_GetElapsedTime>
 80150f8:	4602      	mov	r2, r0
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	441a      	add	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	68da      	ldr	r2, [r3, #12]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	691b      	ldr	r3, [r3, #16]
 801510c:	429a      	cmp	r2, r3
 801510e:	d903      	bls.n	8015118 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	691a      	ldr	r2, [r3, #16]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	6a3a      	ldr	r2, [r7, #32]
 801511c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801511e:	89fb      	ldrh	r3, [r7, #14]
}
 8015120:	4618      	mov	r0, r3
 8015122:	3710      	adds	r7, #16
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015128:	b480      	push	{r7}
 801512a:	b085      	sub	sp, #20
 801512c:	af00      	add	r7, sp, #0
 801512e:	4603      	mov	r3, r0
 8015130:	460a      	mov	r2, r1
 8015132:	80fb      	strh	r3, [r7, #6]
 8015134:	4613      	mov	r3, r2
 8015136:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015138:	2300      	movs	r3, #0
 801513a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801513c:	2300      	movs	r3, #0
 801513e:	73bb      	strb	r3, [r7, #14]
 8015140:	e011      	b.n	8015166 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015142:	88fa      	ldrh	r2, [r7, #6]
 8015144:	7bbb      	ldrb	r3, [r7, #14]
 8015146:	2101      	movs	r1, #1
 8015148:	fa01 f303 	lsl.w	r3, r1, r3
 801514c:	401a      	ands	r2, r3
 801514e:	7bbb      	ldrb	r3, [r7, #14]
 8015150:	2101      	movs	r1, #1
 8015152:	fa01 f303 	lsl.w	r3, r1, r3
 8015156:	429a      	cmp	r2, r3
 8015158:	d102      	bne.n	8015160 <CountChannels+0x38>
        {
            nbActiveBits++;
 801515a:	7bfb      	ldrb	r3, [r7, #15]
 801515c:	3301      	adds	r3, #1
 801515e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015160:	7bbb      	ldrb	r3, [r7, #14]
 8015162:	3301      	adds	r3, #1
 8015164:	73bb      	strb	r3, [r7, #14]
 8015166:	7bba      	ldrb	r2, [r7, #14]
 8015168:	797b      	ldrb	r3, [r7, #5]
 801516a:	429a      	cmp	r2, r3
 801516c:	d3e9      	bcc.n	8015142 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3714      	adds	r7, #20
 8015174:	46bd      	mov	sp, r7
 8015176:	bc80      	pop	{r7}
 8015178:	4770      	bx	lr

0801517a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801517a:	b580      	push	{r7, lr}
 801517c:	b084      	sub	sp, #16
 801517e:	af00      	add	r7, sp, #0
 8015180:	6039      	str	r1, [r7, #0]
 8015182:	4611      	mov	r1, r2
 8015184:	461a      	mov	r2, r3
 8015186:	4603      	mov	r3, r0
 8015188:	71fb      	strb	r3, [r7, #7]
 801518a:	460b      	mov	r3, r1
 801518c:	71bb      	strb	r3, [r7, #6]
 801518e:	4613      	mov	r3, r2
 8015190:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015192:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015196:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801519a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801519e:	4618      	mov	r0, r3
 80151a0:	f000 f85d 	bl	801525e <RegionCommonValueInRange>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d101      	bne.n	80151ae <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80151aa:	2300      	movs	r3, #0
 80151ac:	e053      	b.n	8015256 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80151ae:	2300      	movs	r3, #0
 80151b0:	73fb      	strb	r3, [r7, #15]
 80151b2:	2300      	movs	r3, #0
 80151b4:	73bb      	strb	r3, [r7, #14]
 80151b6:	e049      	b.n	801524c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80151b8:	2300      	movs	r3, #0
 80151ba:	737b      	strb	r3, [r7, #13]
 80151bc:	e03d      	b.n	801523a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80151be:	7bbb      	ldrb	r3, [r7, #14]
 80151c0:	005b      	lsls	r3, r3, #1
 80151c2:	683a      	ldr	r2, [r7, #0]
 80151c4:	4413      	add	r3, r2
 80151c6:	881b      	ldrh	r3, [r3, #0]
 80151c8:	461a      	mov	r2, r3
 80151ca:	7b7b      	ldrb	r3, [r7, #13]
 80151cc:	fa42 f303 	asr.w	r3, r2, r3
 80151d0:	f003 0301 	and.w	r3, r3, #1
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d02d      	beq.n	8015234 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80151d8:	7bfa      	ldrb	r2, [r7, #15]
 80151da:	7b7b      	ldrb	r3, [r7, #13]
 80151dc:	4413      	add	r3, r2
 80151de:	461a      	mov	r2, r3
 80151e0:	4613      	mov	r3, r2
 80151e2:	005b      	lsls	r3, r3, #1
 80151e4:	4413      	add	r3, r2
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	461a      	mov	r2, r3
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	4413      	add	r3, r2
 80151ee:	7a1b      	ldrb	r3, [r3, #8]
 80151f0:	f343 0303 	sbfx	r3, r3, #0, #4
 80151f4:	b25b      	sxtb	r3, r3
 80151f6:	f003 030f 	and.w	r3, r3, #15
 80151fa:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80151fc:	7bfa      	ldrb	r2, [r7, #15]
 80151fe:	7b7b      	ldrb	r3, [r7, #13]
 8015200:	4413      	add	r3, r2
 8015202:	461a      	mov	r2, r3
 8015204:	4613      	mov	r3, r2
 8015206:	005b      	lsls	r3, r3, #1
 8015208:	4413      	add	r3, r2
 801520a:	009b      	lsls	r3, r3, #2
 801520c:	461a      	mov	r2, r3
 801520e:	69fb      	ldr	r3, [r7, #28]
 8015210:	4413      	add	r3, r2
 8015212:	7a1b      	ldrb	r3, [r3, #8]
 8015214:	f343 1303 	sbfx	r3, r3, #4, #4
 8015218:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801521a:	f003 030f 	and.w	r3, r3, #15
 801521e:	b25a      	sxtb	r2, r3
 8015220:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015224:	4618      	mov	r0, r3
 8015226:	f000 f81a 	bl	801525e <RegionCommonValueInRange>
 801522a:	4603      	mov	r3, r0
 801522c:	2b01      	cmp	r3, #1
 801522e:	d101      	bne.n	8015234 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015230:	2301      	movs	r3, #1
 8015232:	e010      	b.n	8015256 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015234:	7b7b      	ldrb	r3, [r7, #13]
 8015236:	3301      	adds	r3, #1
 8015238:	737b      	strb	r3, [r7, #13]
 801523a:	7b7b      	ldrb	r3, [r7, #13]
 801523c:	2b0f      	cmp	r3, #15
 801523e:	d9be      	bls.n	80151be <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015240:	7bfb      	ldrb	r3, [r7, #15]
 8015242:	3310      	adds	r3, #16
 8015244:	73fb      	strb	r3, [r7, #15]
 8015246:	7bbb      	ldrb	r3, [r7, #14]
 8015248:	3301      	adds	r3, #1
 801524a:	73bb      	strb	r3, [r7, #14]
 801524c:	7bfa      	ldrb	r2, [r7, #15]
 801524e:	79fb      	ldrb	r3, [r7, #7]
 8015250:	429a      	cmp	r2, r3
 8015252:	d3b1      	bcc.n	80151b8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015254:	2300      	movs	r3, #0
}
 8015256:	4618      	mov	r0, r3
 8015258:	3710      	adds	r7, #16
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}

0801525e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801525e:	b480      	push	{r7}
 8015260:	b083      	sub	sp, #12
 8015262:	af00      	add	r7, sp, #0
 8015264:	4603      	mov	r3, r0
 8015266:	71fb      	strb	r3, [r7, #7]
 8015268:	460b      	mov	r3, r1
 801526a:	71bb      	strb	r3, [r7, #6]
 801526c:	4613      	mov	r3, r2
 801526e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015270:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015274:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015278:	429a      	cmp	r2, r3
 801527a:	db07      	blt.n	801528c <RegionCommonValueInRange+0x2e>
 801527c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015280:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015284:	429a      	cmp	r2, r3
 8015286:	dc01      	bgt.n	801528c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015288:	2301      	movs	r3, #1
 801528a:	e000      	b.n	801528e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	bc80      	pop	{r7}
 8015296:	4770      	bx	lr

08015298 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015298:	b480      	push	{r7}
 801529a:	b085      	sub	sp, #20
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	460b      	mov	r3, r1
 80152a2:	70fb      	strb	r3, [r7, #3]
 80152a4:	4613      	mov	r3, r2
 80152a6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80152a8:	78fb      	ldrb	r3, [r7, #3]
 80152aa:	091b      	lsrs	r3, r3, #4
 80152ac:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80152ae:	78bb      	ldrb	r3, [r7, #2]
 80152b0:	091b      	lsrs	r3, r3, #4
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	7bfa      	ldrb	r2, [r7, #15]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d803      	bhi.n	80152c2 <RegionCommonChanDisable+0x2a>
 80152ba:	78fa      	ldrb	r2, [r7, #3]
 80152bc:	78bb      	ldrb	r3, [r7, #2]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d301      	bcc.n	80152c6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80152c2:	2300      	movs	r3, #0
 80152c4:	e017      	b.n	80152f6 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80152c6:	7bfb      	ldrb	r3, [r7, #15]
 80152c8:	005b      	lsls	r3, r3, #1
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	4413      	add	r3, r2
 80152ce:	881b      	ldrh	r3, [r3, #0]
 80152d0:	b21a      	sxth	r2, r3
 80152d2:	78fb      	ldrb	r3, [r7, #3]
 80152d4:	f003 030f 	and.w	r3, r3, #15
 80152d8:	2101      	movs	r1, #1
 80152da:	fa01 f303 	lsl.w	r3, r1, r3
 80152de:	b21b      	sxth	r3, r3
 80152e0:	43db      	mvns	r3, r3
 80152e2:	b21b      	sxth	r3, r3
 80152e4:	4013      	ands	r3, r2
 80152e6:	b219      	sxth	r1, r3
 80152e8:	7bfb      	ldrb	r3, [r7, #15]
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	4413      	add	r3, r2
 80152f0:	b28a      	uxth	r2, r1
 80152f2:	801a      	strh	r2, [r3, #0]

    return true;
 80152f4:	2301      	movs	r3, #1
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3714      	adds	r7, #20
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bc80      	pop	{r7}
 80152fe:	4770      	bx	lr

08015300 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b084      	sub	sp, #16
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	460b      	mov	r3, r1
 801530a:	70fb      	strb	r3, [r7, #3]
 801530c:	4613      	mov	r3, r2
 801530e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015310:	2300      	movs	r3, #0
 8015312:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d101      	bne.n	801531e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801531a:	2300      	movs	r3, #0
 801531c:	e018      	b.n	8015350 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801531e:	78fb      	ldrb	r3, [r7, #3]
 8015320:	73bb      	strb	r3, [r7, #14]
 8015322:	e010      	b.n	8015346 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015324:	7bbb      	ldrb	r3, [r7, #14]
 8015326:	005b      	lsls	r3, r3, #1
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	4413      	add	r3, r2
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	2110      	movs	r1, #16
 8015330:	4618      	mov	r0, r3
 8015332:	f7ff fef9 	bl	8015128 <CountChannels>
 8015336:	4603      	mov	r3, r0
 8015338:	461a      	mov	r2, r3
 801533a:	7bfb      	ldrb	r3, [r7, #15]
 801533c:	4413      	add	r3, r2
 801533e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015340:	7bbb      	ldrb	r3, [r7, #14]
 8015342:	3301      	adds	r3, #1
 8015344:	73bb      	strb	r3, [r7, #14]
 8015346:	7bba      	ldrb	r2, [r7, #14]
 8015348:	78bb      	ldrb	r3, [r7, #2]
 801534a:	429a      	cmp	r2, r3
 801534c:	d3ea      	bcc.n	8015324 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801534e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015350:	4618      	mov	r0, r3
 8015352:	3710      	adds	r7, #16
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015358:	b480      	push	{r7}
 801535a:	b087      	sub	sp, #28
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	4613      	mov	r3, r2
 8015364:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d016      	beq.n	801539a <RegionCommonChanMaskCopy+0x42>
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d013      	beq.n	801539a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015372:	2300      	movs	r3, #0
 8015374:	75fb      	strb	r3, [r7, #23]
 8015376:	e00c      	b.n	8015392 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015378:	7dfb      	ldrb	r3, [r7, #23]
 801537a:	005b      	lsls	r3, r3, #1
 801537c:	68ba      	ldr	r2, [r7, #8]
 801537e:	441a      	add	r2, r3
 8015380:	7dfb      	ldrb	r3, [r7, #23]
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	68f9      	ldr	r1, [r7, #12]
 8015386:	440b      	add	r3, r1
 8015388:	8812      	ldrh	r2, [r2, #0]
 801538a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801538c:	7dfb      	ldrb	r3, [r7, #23]
 801538e:	3301      	adds	r3, #1
 8015390:	75fb      	strb	r3, [r7, #23]
 8015392:	7dfa      	ldrb	r2, [r7, #23]
 8015394:	79fb      	ldrb	r3, [r7, #7]
 8015396:	429a      	cmp	r2, r3
 8015398:	d3ee      	bcc.n	8015378 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801539a:	bf00      	nop
 801539c:	371c      	adds	r7, #28
 801539e:	46bd      	mov	sp, r7
 80153a0:	bc80      	pop	{r7}
 80153a2:	4770      	bx	lr

080153a4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80153a4:	b082      	sub	sp, #8
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b086      	sub	sp, #24
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	60f8      	str	r0, [r7, #12]
 80153ae:	60b9      	str	r1, [r7, #8]
 80153b0:	627b      	str	r3, [r7, #36]	; 0x24
 80153b2:	4613      	mov	r3, r2
 80153b4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80153b6:	79f9      	ldrb	r1, [r7, #7]
 80153b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153bc:	cb0c      	ldmia	r3, {r2, r3}
 80153be:	68f8      	ldr	r0, [r7, #12]
 80153c0:	f7ff fd8b 	bl	8014eda <GetDutyCycle>
 80153c4:	4603      	mov	r3, r0
 80153c6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	68da      	ldr	r2, [r3, #12]
 80153cc:	8afb      	ldrh	r3, [r7, #22]
 80153ce:	68b9      	ldr	r1, [r7, #8]
 80153d0:	fb01 f303 	mul.w	r3, r1, r3
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d909      	bls.n	80153ec <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	68da      	ldr	r2, [r3, #12]
 80153dc:	8afb      	ldrh	r3, [r7, #22]
 80153de:	68b9      	ldr	r1, [r7, #8]
 80153e0:	fb01 f303 	mul.w	r3, r1, r3
 80153e4:	1ad2      	subs	r2, r2, r3
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80153ea:	e002      	b.n	80153f2 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2200      	movs	r2, #0
 80153f0:	60da      	str	r2, [r3, #12]
}
 80153f2:	bf00      	nop
 80153f4:	3718      	adds	r7, #24
 80153f6:	46bd      	mov	sp, r7
 80153f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80153fc:	b002      	add	sp, #8
 80153fe:	4770      	bx	lr

08015400 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015402:	b08f      	sub	sp, #60	; 0x3c
 8015404:	af04      	add	r7, sp, #16
 8015406:	6039      	str	r1, [r7, #0]
 8015408:	4611      	mov	r1, r2
 801540a:	461a      	mov	r2, r3
 801540c:	4603      	mov	r3, r0
 801540e:	71fb      	strb	r3, [r7, #7]
 8015410:	460b      	mov	r3, r1
 8015412:	71bb      	strb	r3, [r7, #6]
 8015414:	4613      	mov	r3, r2
 8015416:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801541c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801541e:	f006 f98b 	bl	801b738 <UTIL_TIMER_GetCurrentTime>
 8015422:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015424:	2300      	movs	r3, #0
 8015426:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015428:	2301      	movs	r3, #1
 801542a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801542c:	2300      	movs	r3, #0
 801542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015432:	2300      	movs	r3, #0
 8015434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015438:	e0ba      	b.n	80155b0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801543a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801543e:	4613      	mov	r3, r2
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	4413      	add	r3, r2
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	461a      	mov	r2, r3
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	189c      	adds	r4, r3, r2
 801544c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015450:	797a      	ldrb	r2, [r7, #5]
 8015452:	79fd      	ldrb	r5, [r7, #7]
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	9302      	str	r3, [sp, #8]
 8015458:	46ec      	mov	ip, sp
 801545a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801545e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015462:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015466:	4633      	mov	r3, r6
 8015468:	4629      	mov	r1, r5
 801546a:	4620      	mov	r0, r4
 801546c:	f7ff fe22 	bl	80150b4 <UpdateTimeCredits>
 8015470:	4603      	mov	r3, r0
 8015472:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015474:	8afa      	ldrh	r2, [r7, #22]
 8015476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015478:	fb02 f303 	mul.w	r3, r2, r3
 801547c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801547e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015482:	4613      	mov	r3, r2
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	4413      	add	r3, r2
 8015488:	00db      	lsls	r3, r3, #3
 801548a:	461a      	mov	r2, r3
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	4413      	add	r3, r2
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	69ba      	ldr	r2, [r7, #24]
 8015494:	429a      	cmp	r2, r3
 8015496:	d908      	bls.n	80154aa <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015498:	797b      	ldrb	r3, [r7, #5]
 801549a:	f083 0301 	eor.w	r3, r3, #1
 801549e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d013      	beq.n	80154cc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d010      	beq.n	80154cc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80154aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80154ae:	4613      	mov	r3, r2
 80154b0:	005b      	lsls	r3, r3, #1
 80154b2:	4413      	add	r3, r2
 80154b4:	00db      	lsls	r3, r3, #3
 80154b6:	461a      	mov	r2, r3
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	4413      	add	r3, r2
 80154bc:	2201      	movs	r2, #1
 80154be:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80154c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80154c4:	3301      	adds	r3, #1
 80154c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80154ca:	e06c      	b.n	80155a6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80154cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80154d0:	4613      	mov	r3, r2
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	4413      	add	r3, r2
 80154d6:	00db      	lsls	r3, r3, #3
 80154d8:	461a      	mov	r2, r3
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	4413      	add	r3, r2
 80154de:	2200      	movs	r2, #0
 80154e0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80154e2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80154e6:	4613      	mov	r3, r2
 80154e8:	005b      	lsls	r3, r3, #1
 80154ea:	4413      	add	r3, r2
 80154ec:	00db      	lsls	r3, r3, #3
 80154ee:	461a      	mov	r2, r3
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	4413      	add	r3, r2
 80154f4:	691b      	ldr	r3, [r3, #16]
 80154f6:	69ba      	ldr	r2, [r7, #24]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d815      	bhi.n	8015528 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80154fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015500:	4613      	mov	r3, r2
 8015502:	005b      	lsls	r3, r3, #1
 8015504:	4413      	add	r3, r2
 8015506:	00db      	lsls	r3, r3, #3
 8015508:	461a      	mov	r2, r3
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	4413      	add	r3, r2
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	69ba      	ldr	r2, [r7, #24]
 8015512:	1ad3      	subs	r3, r2, r3
 8015514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015516:	4293      	cmp	r3, r2
 8015518:	bf28      	it	cs
 801551a:	4613      	movcs	r3, r2
 801551c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801551e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015522:	3301      	adds	r3, #1
 8015524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015528:	79fb      	ldrb	r3, [r7, #7]
 801552a:	f083 0301 	eor.w	r3, r3, #1
 801552e:	b2db      	uxtb	r3, r3
 8015530:	2b00      	cmp	r3, #0
 8015532:	d038      	beq.n	80155a6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015534:	2300      	movs	r3, #0
 8015536:	60fb      	str	r3, [r7, #12]
 8015538:	2300      	movs	r3, #0
 801553a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801553c:	8afb      	ldrh	r3, [r7, #22]
 801553e:	2b64      	cmp	r3, #100	; 0x64
 8015540:	d103      	bne.n	801554a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015542:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015546:	60fb      	str	r3, [r7, #12]
 8015548:	e009      	b.n	801555e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801554a:	8afb      	ldrh	r3, [r7, #22]
 801554c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015550:	d103      	bne.n	801555a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015552:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015556:	60fb      	str	r3, [r7, #12]
 8015558:	e001      	b.n	801555e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801555a:	4b1e      	ldr	r3, [pc, #120]	; (80155d4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801555c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801555e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015560:	4a1c      	ldr	r2, [pc, #112]	; (80155d4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015562:	4293      	cmp	r3, r2
 8015564:	d90e      	bls.n	8015584 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801556a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801556e:	3b30      	subs	r3, #48	; 0x30
 8015570:	4919      	ldr	r1, [pc, #100]	; (80155d8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015572:	fba1 1303 	umull	r1, r3, r1, r3
 8015576:	0c1b      	lsrs	r3, r3, #16
 8015578:	3301      	adds	r3, #1
 801557a:	4918      	ldr	r1, [pc, #96]	; (80155dc <RegionCommonUpdateBandTimeOff+0x1dc>)
 801557c:	fb01 f303 	mul.w	r3, r1, r3
 8015580:	4413      	add	r3, r2
 8015582:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015584:	f107 000c 	add.w	r0, r7, #12
 8015588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801558a:	9300      	str	r3, [sp, #0]
 801558c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801558e:	f107 020c 	add.w	r2, r7, #12
 8015592:	ca06      	ldmia	r2, {r1, r2}
 8015594:	f005 f9e7 	bl	801a966 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015598:	f107 030c 	add.w	r3, r7, #12
 801559c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80155a0:	f005 faa0 	bl	801aae4 <SysTimeToMs>
 80155a4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80155a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80155aa:	3301      	adds	r3, #1
 80155ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80155b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80155b4:	79bb      	ldrb	r3, [r7, #6]
 80155b6:	429a      	cmp	r2, r3
 80155b8:	f4ff af3f 	bcc.w	801543a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80155bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d102      	bne.n	80155ca <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80155c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155c8:	e000      	b.n	80155cc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80155ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	372c      	adds	r7, #44	; 0x2c
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d4:	0001ec30 	.word	0x0001ec30
 80155d8:	c22e4507 	.word	0xc22e4507
 80155dc:	00015180 	.word	0x00015180

080155e0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	2b03      	cmp	r3, #3
 80155f4:	d13f      	bne.n	8015676 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	3301      	adds	r3, #1
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	b25a      	sxtb	r2, r3
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015608:	f003 030f 	and.w	r3, r3, #15
 801560c:	b25a      	sxtb	r2, r3
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015618:	b2db      	uxtb	r3, r3
 801561a:	091b      	lsrs	r3, r3, #4
 801561c:	b2db      	uxtb	r3, r3
 801561e:	b25a      	sxtb	r2, r3
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	3302      	adds	r3, #2
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	b29a      	uxth	r2, r3
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	889b      	ldrh	r3, [r3, #4]
 8015634:	b21a      	sxth	r2, r3
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	3303      	adds	r3, #3
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	021b      	lsls	r3, r3, #8
 801563e:	b21b      	sxth	r3, r3
 8015640:	4313      	orrs	r3, r2
 8015642:	b21b      	sxth	r3, r3
 8015644:	b29a      	uxth	r2, r3
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	791a      	ldrb	r2, [r3, #4]
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	091b      	lsrs	r3, r3, #4
 8015658:	b2db      	uxtb	r3, r3
 801565a:	f003 0307 	and.w	r3, r3, #7
 801565e:	b2da      	uxtb	r2, r3
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	f003 030f 	and.w	r3, r3, #15
 801566c:	b2da      	uxtb	r2, r3
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015672:	2305      	movs	r3, #5
 8015674:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015676:	7bfb      	ldrb	r3, [r7, #15]
}
 8015678:	4618      	mov	r0, r3
 801567a:	3714      	adds	r7, #20
 801567c:	46bd      	mov	sp, r7
 801567e:	bc80      	pop	{r7}
 8015680:	4770      	bx	lr

08015682 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015682:	b5b0      	push	{r4, r5, r7, lr}
 8015684:	b088      	sub	sp, #32
 8015686:	af02      	add	r7, sp, #8
 8015688:	60f8      	str	r0, [r7, #12]
 801568a:	60b9      	str	r1, [r7, #8]
 801568c:	607a      	str	r2, [r7, #4]
 801568e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	791b      	ldrb	r3, [r3, #4]
 8015694:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	799b      	ldrb	r3, [r3, #6]
 801569a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	79db      	ldrb	r3, [r3, #7]
 80156a0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	7a1b      	ldrb	r3, [r3, #8]
 80156a6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	795b      	ldrb	r3, [r3, #5]
 80156ac:	f083 0301 	eor.w	r3, r3, #1
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d008      	beq.n	80156c8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	7adb      	ldrb	r3, [r3, #11]
 80156ba:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	7a5b      	ldrb	r3, [r3, #9]
 80156c0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	7a9b      	ldrb	r3, [r3, #10]
 80156c6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80156c8:	7dfb      	ldrb	r3, [r7, #23]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d04a      	beq.n	8015764 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80156ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80156d2:	2b0f      	cmp	r3, #15
 80156d4:	d103      	bne.n	80156de <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	7a5b      	ldrb	r3, [r3, #9]
 80156da:	75bb      	strb	r3, [r7, #22]
 80156dc:	e01d      	b.n	801571a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	7b18      	ldrb	r0, [r3, #12]
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6919      	ldr	r1, [r3, #16]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80156f2:	68fa      	ldr	r2, [r7, #12]
 80156f4:	6992      	ldr	r2, [r2, #24]
 80156f6:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80156fa:	9201      	str	r2, [sp, #4]
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	462b      	mov	r3, r5
 8015700:	4622      	mov	r2, r4
 8015702:	f7ff fd3a 	bl	801517a <RegionCommonChanVerifyDr>
 8015706:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015708:	f083 0301 	eor.w	r3, r3, #1
 801570c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801570e:	2b00      	cmp	r3, #0
 8015710:	d003      	beq.n	801571a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015712:	7dfb      	ldrb	r3, [r7, #23]
 8015714:	f023 0302 	bic.w	r3, r3, #2
 8015718:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801571a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801571e:	2b0f      	cmp	r3, #15
 8015720:	d103      	bne.n	801572a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	7a9b      	ldrb	r3, [r3, #10]
 8015726:	757b      	strb	r3, [r7, #21]
 8015728:	e01c      	b.n	8015764 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015736:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801573a:	4618      	mov	r0, r3
 801573c:	f7ff fd8f 	bl	801525e <RegionCommonValueInRange>
 8015740:	4603      	mov	r3, r0
 8015742:	2b00      	cmp	r3, #0
 8015744:	d10e      	bne.n	8015764 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801574c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015750:	429a      	cmp	r2, r3
 8015752:	da03      	bge.n	801575c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	7f5b      	ldrb	r3, [r3, #29]
 8015758:	757b      	strb	r3, [r7, #21]
 801575a:	e003      	b.n	8015764 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801575c:	7dfb      	ldrb	r3, [r7, #23]
 801575e:	f023 0304 	bic.w	r3, r3, #4
 8015762:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015764:	7dfb      	ldrb	r3, [r7, #23]
 8015766:	2b07      	cmp	r3, #7
 8015768:	d105      	bne.n	8015776 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801576a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015772:	2301      	movs	r3, #1
 8015774:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	7dba      	ldrb	r2, [r7, #22]
 801577a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	7d7a      	ldrb	r2, [r7, #21]
 8015780:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015782:	7d3a      	ldrb	r2, [r7, #20]
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	701a      	strb	r2, [r3, #0]

    return status;
 8015788:	7dfb      	ldrb	r3, [r7, #23]
}
 801578a:	4618      	mov	r0, r3
 801578c:	3718      	adds	r7, #24
 801578e:	46bd      	mov	sp, r7
 8015790:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015794 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	4603      	mov	r3, r0
 801579c:	6039      	str	r1, [r7, #0]
 801579e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80157a0:	79fb      	ldrb	r3, [r7, #7]
 80157a2:	4a06      	ldr	r2, [pc, #24]	; (80157bc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80157a4:	fa02 f303 	lsl.w	r3, r2, r3
 80157a8:	461a      	mov	r2, r3
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bc80      	pop	{r7}
 80157b8:	4770      	bx	lr
 80157ba:	bf00      	nop
 80157bc:	000f4240 	.word	0x000f4240

080157c0 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80157c0:	b480      	push	{r7}
 80157c2:	b085      	sub	sp, #20
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	607a      	str	r2, [r7, #4]
 80157ca:	603b      	str	r3, [r7, #0]
 80157cc:	460b      	mov	r3, r1
 80157ce:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80157d0:	7afa      	ldrb	r2, [r7, #11]
 80157d2:	7afb      	ldrb	r3, [r7, #11]
 80157d4:	3b04      	subs	r3, #4
 80157d6:	4619      	mov	r1, r3
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	fb03 f101 	mul.w	r1, r3, r1
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80157e4:	fb00 f303 	mul.w	r3, r0, r3
 80157e8:	440b      	add	r3, r1
 80157ea:	005b      	lsls	r3, r3, #1
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d013      	beq.n	8015818 <RegionCommonComputeRxWindowParameters+0x58>
 80157f0:	7afb      	ldrb	r3, [r7, #11]
 80157f2:	3b04      	subs	r3, #4
 80157f4:	4619      	mov	r1, r3
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	fb03 f101 	mul.w	r1, r3, r1
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015802:	fb00 f303 	mul.w	r3, r0, r3
 8015806:	440b      	add	r3, r1
 8015808:	0059      	lsls	r1, r3, #1
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	440b      	add	r3, r1
 801580e:	1e59      	subs	r1, r3, #1
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	fbb1 f3f3 	udiv	r3, r1, r3
 8015816:	e00f      	b.n	8015838 <RegionCommonComputeRxWindowParameters+0x78>
 8015818:	7afb      	ldrb	r3, [r7, #11]
 801581a:	3b04      	subs	r3, #4
 801581c:	4619      	mov	r1, r3
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	fb03 f101 	mul.w	r1, r3, r1
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801582a:	fb00 f303 	mul.w	r3, r0, r3
 801582e:	440b      	add	r3, r1
 8015830:	0059      	lsls	r1, r3, #1
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	fbb1 f3f3 	udiv	r3, r1, r3
 8015838:	429a      	cmp	r2, r3
 801583a:	bf38      	it	cc
 801583c:	461a      	movcc	r2, r3
 801583e:	69bb      	ldr	r3, [r7, #24]
 8015840:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	4619      	mov	r1, r3
 8015848:	69bb      	ldr	r3, [r7, #24]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	fb02 f303 	mul.w	r3, r2, r3
 8015852:	2b00      	cmp	r3, #0
 8015854:	d007      	beq.n	8015866 <RegionCommonComputeRxWindowParameters+0xa6>
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	fb02 f303 	mul.w	r3, r2, r3
 8015860:	3301      	adds	r3, #1
 8015862:	085b      	lsrs	r3, r3, #1
 8015864:	e005      	b.n	8015872 <RegionCommonComputeRxWindowParameters+0xb2>
 8015866:	69bb      	ldr	r3, [r7, #24]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	68fa      	ldr	r2, [r7, #12]
 801586c:	fb02 f303 	mul.w	r3, r2, r3
 8015870:	085b      	lsrs	r3, r3, #1
 8015872:	1acb      	subs	r3, r1, r3
 8015874:	683a      	ldr	r2, [r7, #0]
 8015876:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801587a:	fb01 f202 	mul.w	r2, r1, r2
 801587e:	1a9b      	subs	r3, r3, r2
 8015880:	2b00      	cmp	r3, #0
 8015882:	dd27      	ble.n	80158d4 <RegionCommonComputeRxWindowParameters+0x114>
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	4619      	mov	r1, r3
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	68fa      	ldr	r2, [r7, #12]
 8015890:	fb02 f303 	mul.w	r3, r2, r3
 8015894:	2b00      	cmp	r3, #0
 8015896:	d007      	beq.n	80158a8 <RegionCommonComputeRxWindowParameters+0xe8>
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	68fa      	ldr	r2, [r7, #12]
 801589e:	fb02 f303 	mul.w	r3, r2, r3
 80158a2:	3301      	adds	r3, #1
 80158a4:	085b      	lsrs	r3, r3, #1
 80158a6:	e005      	b.n	80158b4 <RegionCommonComputeRxWindowParameters+0xf4>
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	68fa      	ldr	r2, [r7, #12]
 80158ae:	fb02 f303 	mul.w	r3, r2, r3
 80158b2:	085b      	lsrs	r3, r3, #1
 80158b4:	1acb      	subs	r3, r1, r3
 80158b6:	683a      	ldr	r2, [r7, #0]
 80158b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80158bc:	fb01 f202 	mul.w	r2, r1, r2
 80158c0:	1a9b      	subs	r3, r3, r2
 80158c2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80158c6:	4a19      	ldr	r2, [pc, #100]	; (801592c <RegionCommonComputeRxWindowParameters+0x16c>)
 80158c8:	fb82 1203 	smull	r1, r2, r2, r3
 80158cc:	1192      	asrs	r2, r2, #6
 80158ce:	17db      	asrs	r3, r3, #31
 80158d0:	1ad3      	subs	r3, r2, r3
 80158d2:	e024      	b.n	801591e <RegionCommonComputeRxWindowParameters+0x15e>
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	4619      	mov	r1, r3
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68fa      	ldr	r2, [r7, #12]
 80158e0:	fb02 f303 	mul.w	r3, r2, r3
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d007      	beq.n	80158f8 <RegionCommonComputeRxWindowParameters+0x138>
 80158e8:	69bb      	ldr	r3, [r7, #24]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	68fa      	ldr	r2, [r7, #12]
 80158ee:	fb02 f303 	mul.w	r3, r2, r3
 80158f2:	3301      	adds	r3, #1
 80158f4:	085b      	lsrs	r3, r3, #1
 80158f6:	e005      	b.n	8015904 <RegionCommonComputeRxWindowParameters+0x144>
 80158f8:	69bb      	ldr	r3, [r7, #24]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	68fa      	ldr	r2, [r7, #12]
 80158fe:	fb02 f303 	mul.w	r3, r2, r3
 8015902:	085b      	lsrs	r3, r3, #1
 8015904:	1acb      	subs	r3, r1, r3
 8015906:	683a      	ldr	r2, [r7, #0]
 8015908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801590c:	fb01 f202 	mul.w	r2, r1, r2
 8015910:	1a9b      	subs	r3, r3, r2
 8015912:	4a06      	ldr	r2, [pc, #24]	; (801592c <RegionCommonComputeRxWindowParameters+0x16c>)
 8015914:	fb82 1203 	smull	r1, r2, r2, r3
 8015918:	1192      	asrs	r2, r2, #6
 801591a:	17db      	asrs	r3, r3, #31
 801591c:	1ad3      	subs	r3, r2, r3
 801591e:	69fa      	ldr	r2, [r7, #28]
 8015920:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015922:	bf00      	nop
 8015924:	3714      	adds	r7, #20
 8015926:	46bd      	mov	sp, r7
 8015928:	bc80      	pop	{r7}
 801592a:	4770      	bx	lr
 801592c:	10624dd3 	.word	0x10624dd3

08015930 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b086      	sub	sp, #24
 8015934:	af00      	add	r7, sp, #0
 8015936:	4603      	mov	r3, r0
 8015938:	60b9      	str	r1, [r7, #8]
 801593a:	607a      	str	r2, [r7, #4]
 801593c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801593e:	2300      	movs	r3, #0
 8015940:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015946:	005b      	lsls	r3, r3, #1
 8015948:	4618      	mov	r0, r3
 801594a:	f7ea ff3f 	bl	80007cc <__aeabi_ui2f>
 801594e:	4603      	mov	r3, r0
 8015950:	4619      	mov	r1, r3
 8015952:	68b8      	ldr	r0, [r7, #8]
 8015954:	f7ea fe88 	bl	8000668 <__aeabi_fsub>
 8015958:	4603      	mov	r3, r0
 801595a:	6879      	ldr	r1, [r7, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	f7ea fe83 	bl	8000668 <__aeabi_fsub>
 8015962:	4603      	mov	r3, r0
 8015964:	4618      	mov	r0, r3
 8015966:	f7ea fd73 	bl	8000450 <__aeabi_f2d>
 801596a:	4602      	mov	r2, r0
 801596c:	460b      	mov	r3, r1
 801596e:	4610      	mov	r0, r2
 8015970:	4619      	mov	r1, r3
 8015972:	f006 fa75 	bl	801be60 <floor>
 8015976:	4602      	mov	r2, r0
 8015978:	460b      	mov	r3, r1
 801597a:	4610      	mov	r0, r2
 801597c:	4619      	mov	r1, r3
 801597e:	f7ea fe47 	bl	8000610 <__aeabi_d2iz>
 8015982:	4603      	mov	r3, r0
 8015984:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8015986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801598a:	4618      	mov	r0, r3
 801598c:	3718      	adds	r7, #24
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8015992:	b590      	push	{r4, r7, lr}
 8015994:	b087      	sub	sp, #28
 8015996:	af00      	add	r7, sp, #0
 8015998:	60f8      	str	r0, [r7, #12]
 801599a:	60b9      	str	r1, [r7, #8]
 801599c:	607a      	str	r2, [r7, #4]
 801599e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80159a0:	2300      	movs	r3, #0
 80159a2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80159a4:	2300      	movs	r3, #0
 80159a6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80159a8:	2300      	movs	r3, #0
 80159aa:	757b      	strb	r3, [r7, #21]
 80159ac:	2300      	movs	r3, #0
 80159ae:	753b      	strb	r3, [r7, #20]
 80159b0:	e09c      	b.n	8015aec <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80159b2:	2300      	movs	r3, #0
 80159b4:	74fb      	strb	r3, [r7, #19]
 80159b6:	e08f      	b.n	8015ad8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	685a      	ldr	r2, [r3, #4]
 80159bc:	7d3b      	ldrb	r3, [r7, #20]
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	4413      	add	r3, r2
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	461a      	mov	r2, r3
 80159c6:	7cfb      	ldrb	r3, [r7, #19]
 80159c8:	fa42 f303 	asr.w	r3, r2, r3
 80159cc:	f003 0301 	and.w	r3, r3, #1
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d07e      	beq.n	8015ad2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	689a      	ldr	r2, [r3, #8]
 80159d8:	7d79      	ldrb	r1, [r7, #21]
 80159da:	7cfb      	ldrb	r3, [r7, #19]
 80159dc:	440b      	add	r3, r1
 80159de:	4619      	mov	r1, r3
 80159e0:	460b      	mov	r3, r1
 80159e2:	005b      	lsls	r3, r3, #1
 80159e4:	440b      	add	r3, r1
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	4413      	add	r3, r2
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d06b      	beq.n	8015ac8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	f083 0301 	eor.w	r3, r3, #1
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d011      	beq.n	8015a22 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d00d      	beq.n	8015a22 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	695a      	ldr	r2, [r3, #20]
 8015a0a:	7d3b      	ldrb	r3, [r7, #20]
 8015a0c:	005b      	lsls	r3, r3, #1
 8015a0e:	4413      	add	r3, r2
 8015a10:	881b      	ldrh	r3, [r3, #0]
 8015a12:	461a      	mov	r2, r3
 8015a14:	7cfb      	ldrb	r3, [r7, #19]
 8015a16:	fa42 f303 	asr.w	r3, r2, r3
 8015a1a:	f003 0301 	and.w	r3, r3, #1
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d054      	beq.n	8015acc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	785b      	ldrb	r3, [r3, #1]
 8015a26:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	689a      	ldr	r2, [r3, #8]
 8015a2c:	7d79      	ldrb	r1, [r7, #21]
 8015a2e:	7cfb      	ldrb	r3, [r7, #19]
 8015a30:	440b      	add	r3, r1
 8015a32:	4619      	mov	r1, r3
 8015a34:	460b      	mov	r3, r1
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	440b      	add	r3, r1
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	4413      	add	r3, r2
 8015a3e:	7a1b      	ldrb	r3, [r3, #8]
 8015a40:	f343 0303 	sbfx	r3, r3, #0, #4
 8015a44:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015a46:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	689a      	ldr	r2, [r3, #8]
 8015a4c:	7d79      	ldrb	r1, [r7, #21]
 8015a4e:	7cfb      	ldrb	r3, [r7, #19]
 8015a50:	440b      	add	r3, r1
 8015a52:	4619      	mov	r1, r3
 8015a54:	460b      	mov	r3, r1
 8015a56:	005b      	lsls	r3, r3, #1
 8015a58:	440b      	add	r3, r1
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	4413      	add	r3, r2
 8015a5e:	7a1b      	ldrb	r3, [r3, #8]
 8015a60:	f343 1303 	sbfx	r3, r3, #4, #4
 8015a64:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015a66:	461a      	mov	r2, r3
 8015a68:	4621      	mov	r1, r4
 8015a6a:	f7ff fbf8 	bl	801525e <RegionCommonValueInRange>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d02d      	beq.n	8015ad0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	68da      	ldr	r2, [r3, #12]
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	6899      	ldr	r1, [r3, #8]
 8015a7c:	7d78      	ldrb	r0, [r7, #21]
 8015a7e:	7cfb      	ldrb	r3, [r7, #19]
 8015a80:	4403      	add	r3, r0
 8015a82:	4618      	mov	r0, r3
 8015a84:	4603      	mov	r3, r0
 8015a86:	005b      	lsls	r3, r3, #1
 8015a88:	4403      	add	r3, r0
 8015a8a:	009b      	lsls	r3, r3, #2
 8015a8c:	440b      	add	r3, r1
 8015a8e:	7a5b      	ldrb	r3, [r3, #9]
 8015a90:	4619      	mov	r1, r3
 8015a92:	460b      	mov	r3, r1
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	440b      	add	r3, r1
 8015a98:	00db      	lsls	r3, r3, #3
 8015a9a:	4413      	add	r3, r2
 8015a9c:	7d1b      	ldrb	r3, [r3, #20]
 8015a9e:	f083 0301 	eor.w	r3, r3, #1
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d003      	beq.n	8015ab0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8015aa8:	7dbb      	ldrb	r3, [r7, #22]
 8015aaa:	3301      	adds	r3, #1
 8015aac:	75bb      	strb	r3, [r7, #22]
                    continue;
 8015aae:	e010      	b.n	8015ad2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015ab0:	7dfb      	ldrb	r3, [r7, #23]
 8015ab2:	1c5a      	adds	r2, r3, #1
 8015ab4:	75fa      	strb	r2, [r7, #23]
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	4413      	add	r3, r2
 8015abc:	7d79      	ldrb	r1, [r7, #21]
 8015abe:	7cfa      	ldrb	r2, [r7, #19]
 8015ac0:	440a      	add	r2, r1
 8015ac2:	b2d2      	uxtb	r2, r2
 8015ac4:	701a      	strb	r2, [r3, #0]
 8015ac6:	e004      	b.n	8015ad2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015ac8:	bf00      	nop
 8015aca:	e002      	b.n	8015ad2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015acc:	bf00      	nop
 8015ace:	e000      	b.n	8015ad2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015ad0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015ad2:	7cfb      	ldrb	r3, [r7, #19]
 8015ad4:	3301      	adds	r3, #1
 8015ad6:	74fb      	strb	r3, [r7, #19]
 8015ad8:	7cfb      	ldrb	r3, [r7, #19]
 8015ada:	2b0f      	cmp	r3, #15
 8015adc:	f67f af6c 	bls.w	80159b8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015ae0:	7d7b      	ldrb	r3, [r7, #21]
 8015ae2:	3310      	adds	r3, #16
 8015ae4:	757b      	strb	r3, [r7, #21]
 8015ae6:	7d3b      	ldrb	r3, [r7, #20]
 8015ae8:	3301      	adds	r3, #1
 8015aea:	753b      	strb	r3, [r7, #20]
 8015aec:	7d7b      	ldrb	r3, [r7, #21]
 8015aee:	b29a      	uxth	r2, r3
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	8a1b      	ldrh	r3, [r3, #16]
 8015af4:	429a      	cmp	r2, r3
 8015af6:	f4ff af5c 	bcc.w	80159b2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	7dfa      	ldrb	r2, [r7, #23]
 8015afe:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	7dba      	ldrb	r2, [r7, #22]
 8015b04:	701a      	strb	r2, [r3, #0]
}
 8015b06:	bf00      	nop
 8015b08:	371c      	adds	r7, #28
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd90      	pop	{r4, r7, pc}

08015b0e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b10:	b08b      	sub	sp, #44	; 0x2c
 8015b12:	af04      	add	r7, sp, #16
 8015b14:	60f8      	str	r0, [r7, #12]
 8015b16:	60b9      	str	r1, [r7, #8]
 8015b18:	607a      	str	r2, [r7, #4]
 8015b1a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f005 fe1b 	bl	801b75c <UTIL_TIMER_GetElapsedTime>
 8015b26:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	1ad2      	subs	r2, r2, r3
 8015b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b32:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b36:	2201      	movs	r2, #1
 8015b38:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d004      	beq.n	8015b52 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015b4c:	697a      	ldr	r2, [r7, #20]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d32b      	bcc.n	8015baa <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	2200      	movs	r2, #0
 8015b56:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	69db      	ldr	r3, [r3, #28]
 8015b5c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015b62:	68dd      	ldr	r5, [r3, #12]
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	7a5e      	ldrb	r6, [r3, #9]
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	7d1b      	ldrb	r3, [r3, #20]
 8015b72:	68fa      	ldr	r2, [r7, #12]
 8015b74:	6992      	ldr	r2, [r2, #24]
 8015b76:	9203      	str	r2, [sp, #12]
 8015b78:	68fa      	ldr	r2, [r7, #12]
 8015b7a:	f10d 0e04 	add.w	lr, sp, #4
 8015b7e:	320c      	adds	r2, #12
 8015b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015b84:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	4663      	mov	r3, ip
 8015b8c:	4632      	mov	r2, r6
 8015b8e:	4629      	mov	r1, r5
 8015b90:	4620      	mov	r0, r4
 8015b92:	f7ff fc35 	bl	8015400 <RegionCommonUpdateBandTimeOff>
 8015b96:	4602      	mov	r2, r0
 8015b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b9a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	69d8      	ldr	r0, [r3, #28]
 8015ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba2:	683a      	ldr	r2, [r7, #0]
 8015ba4:	6879      	ldr	r1, [r7, #4]
 8015ba6:	f7ff fef4 	bl	8015992 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d004      	beq.n	8015bbc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8015bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	e006      	b.n	8015bca <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d001      	beq.n	8015bc8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015bc4:	230b      	movs	r3, #11
 8015bc6:	e000      	b.n	8015bca <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015bc8:	230c      	movs	r3, #12
    }
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	371c      	adds	r7, #28
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015bd2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015bd2:	b5b0      	push	{r4, r5, r7, lr}
 8015bd4:	b086      	sub	sp, #24
 8015bd6:	af02      	add	r7, sp, #8
 8015bd8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	781b      	ldrb	r3, [r3, #0]
 8015bde:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f993 2000 	ldrsb.w	r2, [r3]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d103      	bne.n	8015bf8 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015bf6:	e026      	b.n	8015c46 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015bf8:	7bfb      	ldrb	r3, [r7, #15]
 8015bfa:	3b01      	subs	r3, #1
 8015bfc:	b2db      	uxtb	r3, r3
 8015bfe:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015c06:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d019      	beq.n	8015c42 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	78d8      	ldrb	r0, [r3, #3]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6859      	ldr	r1, [r3, #4]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c22:	687a      	ldr	r2, [r7, #4]
 8015c24:	6892      	ldr	r2, [r2, #8]
 8015c26:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015c2a:	9201      	str	r2, [sp, #4]
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	462b      	mov	r3, r5
 8015c30:	4622      	mov	r2, r4
 8015c32:	f7ff faa2 	bl	801517a <RegionCommonChanVerifyDr>
 8015c36:	4603      	mov	r3, r0
 8015c38:	f083 0301 	eor.w	r3, r3, #1
 8015c3c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d1da      	bne.n	8015bf8 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bdb0      	pop	{r4, r5, r7, pc}

08015c4e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b083      	sub	sp, #12
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	4603      	mov	r3, r0
 8015c56:	460a      	mov	r2, r1
 8015c58:	71fb      	strb	r3, [r7, #7]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015c5e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c66:	4293      	cmp	r3, r2
 8015c68:	bfb8      	it	lt
 8015c6a:	4613      	movlt	r3, r2
 8015c6c:	b25b      	sxtb	r3, r3
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	370c      	adds	r7, #12
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bc80      	pop	{r7}
 8015c76:	4770      	bx	lr

08015c78 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015c78:	b480      	push	{r7}
 8015c7a:	b083      	sub	sp, #12
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	683a      	ldr	r2, [r7, #0]
 8015c88:	4413      	add	r3, r2
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	4a07      	ldr	r2, [pc, #28]	; (8015cac <RegionCommonGetBandwidth+0x34>)
 8015c8e:	4293      	cmp	r3, r2
 8015c90:	d004      	beq.n	8015c9c <RegionCommonGetBandwidth+0x24>
 8015c92:	4a07      	ldr	r2, [pc, #28]	; (8015cb0 <RegionCommonGetBandwidth+0x38>)
 8015c94:	4293      	cmp	r3, r2
 8015c96:	d003      	beq.n	8015ca0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	e002      	b.n	8015ca2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	e000      	b.n	8015ca2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8015ca0:	2302      	movs	r3, #2
    }
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	370c      	adds	r7, #12
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bc80      	pop	{r7}
 8015caa:	4770      	bx	lr
 8015cac:	0003d090 	.word	0x0003d090
 8015cb0:	0007a120 	.word	0x0007a120

08015cb4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b086      	sub	sp, #24
 8015cb8:	af04      	add	r7, sp, #16
 8015cba:	4603      	mov	r3, r0
 8015cbc:	6039      	str	r1, [r7, #0]
 8015cbe:	71fb      	strb	r3, [r7, #7]
 8015cc0:	4613      	mov	r3, r2
 8015cc2:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	2b05      	cmp	r3, #5
 8015cc8:	d810      	bhi.n	8015cec <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8015cca:	79fb      	ldrb	r3, [r7, #7]
 8015ccc:	4a0f      	ldr	r2, [pc, #60]	; (8015d0c <RegionCommonRxConfigPrint+0x58>)
 8015cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015cd2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015cd6:	9202      	str	r2, [sp, #8]
 8015cd8:	683a      	ldr	r2, [r7, #0]
 8015cda:	9201      	str	r2, [sp, #4]
 8015cdc:	9300      	str	r3, [sp, #0]
 8015cde:	4b0c      	ldr	r3, [pc, #48]	; (8015d10 <RegionCommonRxConfigPrint+0x5c>)
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	2002      	movs	r0, #2
 8015ce6:	f005 fe17 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015cea:	e00a      	b.n	8015d02 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015cec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	4b07      	ldr	r3, [pc, #28]	; (8015d14 <RegionCommonRxConfigPrint+0x60>)
 8015cf8:	2201      	movs	r2, #1
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	2002      	movs	r0, #2
 8015cfe:	f005 fe0b 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 8015d02:	bf00      	nop
 8015d04:	3708      	adds	r7, #8
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	20000118 	.word	0x20000118
 8015d10:	0801c5c8 	.word	0x0801c5c8
 8015d14:	0801c5e8 	.word	0x0801c5e8

08015d18 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af02      	add	r7, sp, #8
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	460b      	mov	r3, r1
 8015d22:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d28:	9301      	str	r3, [sp, #4]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	4b05      	ldr	r3, [pc, #20]	; (8015d44 <RegionCommonTxConfigPrint+0x2c>)
 8015d30:	2201      	movs	r2, #1
 8015d32:	2100      	movs	r1, #0
 8015d34:	2002      	movs	r0, #2
 8015d36:	f005 fdef 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
}
 8015d3a:	bf00      	nop
 8015d3c:	3708      	adds	r7, #8
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop
 8015d44:	0801c604 	.word	0x0801c604

08015d48 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b084      	sub	sp, #16
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	603b      	str	r3, [r7, #0]
 8015d50:	4603      	mov	r3, r0
 8015d52:	71fb      	strb	r3, [r7, #7]
 8015d54:	460b      	mov	r3, r1
 8015d56:	71bb      	strb	r3, [r7, #6]
 8015d58:	4613      	mov	r3, r2
 8015d5a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8015d5c:	79fb      	ldrb	r3, [r7, #7]
 8015d5e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8015d60:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d68:	4611      	mov	r1, r2
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7ff ff6f 	bl	8015c4e <RegionCommonLimitTxPower>
 8015d70:	4603      	mov	r3, r0
 8015d72:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8015d74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015d78:	2b04      	cmp	r3, #4
 8015d7a:	d106      	bne.n	8015d8a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8015d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d80:	2b02      	cmp	r3, #2
 8015d82:	bfb8      	it	lt
 8015d84:	2302      	movlt	r3, #2
 8015d86:	73fb      	strb	r3, [r7, #15]
 8015d88:	e00d      	b.n	8015da6 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8015d8a:	2204      	movs	r2, #4
 8015d8c:	2100      	movs	r1, #0
 8015d8e:	6838      	ldr	r0, [r7, #0]
 8015d90:	f7ff fab6 	bl	8015300 <RegionCommonCountChannels>
 8015d94:	4603      	mov	r3, r0
 8015d96:	2b31      	cmp	r3, #49	; 0x31
 8015d98:	d805      	bhi.n	8015da6 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8015d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d9e:	2b05      	cmp	r3, #5
 8015da0:	bfb8      	it	lt
 8015da2:	2305      	movlt	r3, #5
 8015da4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8015da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3710      	adds	r7, #16
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
	...

08015db4 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015dbc:	4b18      	ldr	r3, [pc, #96]	; (8015e20 <VerifyRfFreq+0x6c>)
 8015dbe:	6a1b      	ldr	r3, [r3, #32]
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	4798      	blx	r3
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	f083 0301 	eor.w	r3, r3, #1
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d001      	beq.n	8015dd4 <VerifyRfFreq+0x20>
    {
        return false;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	e021      	b.n	8015e18 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	4a13      	ldr	r2, [pc, #76]	; (8015e24 <VerifyRfFreq+0x70>)
 8015dd8:	4293      	cmp	r3, r2
 8015dda:	d910      	bls.n	8015dfe <VerifyRfFreq+0x4a>
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	4a12      	ldr	r2, [pc, #72]	; (8015e28 <VerifyRfFreq+0x74>)
 8015de0:	4293      	cmp	r3, r2
 8015de2:	d80c      	bhi.n	8015dfe <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	4b11      	ldr	r3, [pc, #68]	; (8015e2c <VerifyRfFreq+0x78>)
 8015de8:	4413      	add	r3, r2
 8015dea:	4a11      	ldr	r2, [pc, #68]	; (8015e30 <VerifyRfFreq+0x7c>)
 8015dec:	fba2 1203 	umull	r1, r2, r2, r3
 8015df0:	0c92      	lsrs	r2, r2, #18
 8015df2:	4910      	ldr	r1, [pc, #64]	; (8015e34 <VerifyRfFreq+0x80>)
 8015df4:	fb01 f202 	mul.w	r2, r1, r2
 8015df8:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8015dfa:	2a00      	cmp	r2, #0
 8015dfc:	d001      	beq.n	8015e02 <VerifyRfFreq+0x4e>
    {
        return false;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	e00a      	b.n	8015e18 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	4a0c      	ldr	r2, [pc, #48]	; (8015e38 <VerifyRfFreq+0x84>)
 8015e06:	4293      	cmp	r3, r2
 8015e08:	d903      	bls.n	8015e12 <VerifyRfFreq+0x5e>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	4a06      	ldr	r2, [pc, #24]	; (8015e28 <VerifyRfFreq+0x74>)
 8015e0e:	4293      	cmp	r3, r2
 8015e10:	d901      	bls.n	8015e16 <VerifyRfFreq+0x62>
    {
        return false;
 8015e12:	2300      	movs	r3, #0
 8015e14:	e000      	b.n	8015e18 <VerifyRfFreq+0x64>
    }
    return true;
 8015e16:	2301      	movs	r3, #1
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	0801cbcc 	.word	0x0801cbcc
 8015e24:	3708709f 	.word	0x3708709f
 8015e28:	374886e0 	.word	0x374886e0
 8015e2c:	c8f78f60 	.word	0xc8f78f60
 8015e30:	6fd91d85 	.word	0x6fd91d85
 8015e34:	000927c0 	.word	0x000927c0
 8015e38:	35c8015f 	.word	0x35c8015f

08015e3c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015e3c:	b590      	push	{r4, r7, lr}
 8015e3e:	b089      	sub	sp, #36	; 0x24
 8015e40:	af04      	add	r7, sp, #16
 8015e42:	4603      	mov	r3, r0
 8015e44:	460a      	mov	r2, r1
 8015e46:	71fb      	strb	r3, [r7, #7]
 8015e48:	4613      	mov	r3, r2
 8015e4a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8015e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e50:	4a0f      	ldr	r2, [pc, #60]	; (8015e90 <GetTimeOnAir+0x54>)
 8015e52:	5cd3      	ldrb	r3, [r2, r3]
 8015e54:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8015e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e5a:	490e      	ldr	r1, [pc, #56]	; (8015e94 <GetTimeOnAir+0x58>)
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7ff ff0b 	bl	8015c78 <RegionCommonGetBandwidth>
 8015e62:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015e64:	4b0c      	ldr	r3, [pc, #48]	; (8015e98 <GetTimeOnAir+0x5c>)
 8015e66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015e68:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015e6c:	88bb      	ldrh	r3, [r7, #4]
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	2101      	movs	r1, #1
 8015e72:	9103      	str	r1, [sp, #12]
 8015e74:	9302      	str	r3, [sp, #8]
 8015e76:	2300      	movs	r3, #0
 8015e78:	9301      	str	r3, [sp, #4]
 8015e7a:	2308      	movs	r3, #8
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	2301      	movs	r3, #1
 8015e80:	68b9      	ldr	r1, [r7, #8]
 8015e82:	2001      	movs	r0, #1
 8015e84:	47a0      	blx	r4
 8015e86:	4603      	mov	r3, r0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3714      	adds	r7, #20
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd90      	pop	{r4, r7, pc}
 8015e90:	0801cb48 	.word	0x0801cb48
 8015e94:	0801cb58 	.word	0x0801cb58
 8015e98:	0801cbcc 	.word	0x0801cbcc

08015e9c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b088      	sub	sp, #32
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	3b01      	subs	r3, #1
 8015eae:	2b37      	cmp	r3, #55	; 0x37
 8015eb0:	f200 8136 	bhi.w	8016120 <RegionUS915GetPhyParam+0x284>
 8015eb4:	a201      	add	r2, pc, #4	; (adr r2, 8015ebc <RegionUS915GetPhyParam+0x20>)
 8015eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eba:	bf00      	nop
 8015ebc:	08015f9d 	.word	0x08015f9d
 8015ec0:	08015fa3 	.word	0x08015fa3
 8015ec4:	08016121 	.word	0x08016121
 8015ec8:	08016121 	.word	0x08016121
 8015ecc:	08016121 	.word	0x08016121
 8015ed0:	08015fa9 	.word	0x08015fa9
 8015ed4:	08016121 	.word	0x08016121
 8015ed8:	08015fe3 	.word	0x08015fe3
 8015edc:	08016121 	.word	0x08016121
 8015ee0:	08015fe9 	.word	0x08015fe9
 8015ee4:	08015fef 	.word	0x08015fef
 8015ee8:	08015ff5 	.word	0x08015ff5
 8015eec:	08015ffb 	.word	0x08015ffb
 8015ef0:	0801600b 	.word	0x0801600b
 8015ef4:	0801601b 	.word	0x0801601b
 8015ef8:	08016021 	.word	0x08016021
 8015efc:	08016029 	.word	0x08016029
 8015f00:	08016031 	.word	0x08016031
 8015f04:	08016039 	.word	0x08016039
 8015f08:	08016041 	.word	0x08016041
 8015f0c:	08016049 	.word	0x08016049
 8015f10:	0801605d 	.word	0x0801605d
 8015f14:	08016063 	.word	0x08016063
 8015f18:	08016069 	.word	0x08016069
 8015f1c:	0801606f 	.word	0x0801606f
 8015f20:	0801607b 	.word	0x0801607b
 8015f24:	08016087 	.word	0x08016087
 8015f28:	0801608d 	.word	0x0801608d
 8015f2c:	08016095 	.word	0x08016095
 8015f30:	0801609b 	.word	0x0801609b
 8015f34:	080160a1 	.word	0x080160a1
 8015f38:	080160a7 	.word	0x080160a7
 8015f3c:	08015faf 	.word	0x08015faf
 8015f40:	08016121 	.word	0x08016121
 8015f44:	08016121 	.word	0x08016121
 8015f48:	08016121 	.word	0x08016121
 8015f4c:	08016121 	.word	0x08016121
 8015f50:	08016121 	.word	0x08016121
 8015f54:	08016121 	.word	0x08016121
 8015f58:	08016121 	.word	0x08016121
 8015f5c:	08016121 	.word	0x08016121
 8015f60:	08016121 	.word	0x08016121
 8015f64:	08016121 	.word	0x08016121
 8015f68:	08016121 	.word	0x08016121
 8015f6c:	08016121 	.word	0x08016121
 8015f70:	08016121 	.word	0x08016121
 8015f74:	080160af 	.word	0x080160af
 8015f78:	080160c3 	.word	0x080160c3
 8015f7c:	080160d1 	.word	0x080160d1
 8015f80:	080160d7 	.word	0x080160d7
 8015f84:	08016121 	.word	0x08016121
 8015f88:	080160dd 	.word	0x080160dd
 8015f8c:	080160f1 	.word	0x080160f1
 8015f90:	080160f7 	.word	0x080160f7
 8015f94:	080160fd 	.word	0x080160fd
 8015f98:	0801610d 	.word	0x0801610d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8015f9c:	2308      	movs	r3, #8
 8015f9e:	61bb      	str	r3, [r7, #24]
            break;
 8015fa0:	e0bf      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	61bb      	str	r3, [r7, #24]
            break;
 8015fa6:	e0bc      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8015fa8:	2300      	movs	r3, #0
 8015faa:	61bb      	str	r3, [r7, #24]
            break;
 8015fac:	e0b9      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015fb4:	733b      	strb	r3, [r7, #12]
 8015fb6:	2304      	movs	r3, #4
 8015fb8:	737b      	strb	r3, [r7, #13]
 8015fba:	2300      	movs	r3, #0
 8015fbc:	73bb      	strb	r3, [r7, #14]
 8015fbe:	2348      	movs	r3, #72	; 0x48
 8015fc0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015fc2:	4b5b      	ldr	r3, [pc, #364]	; (8016130 <RegionUS915GetPhyParam+0x294>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015fca:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015fcc:	4b58      	ldr	r3, [pc, #352]	; (8016130 <RegionUS915GetPhyParam+0x294>)
 8015fce:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015fd0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015fd2:	f107 030c 	add.w	r3, r7, #12
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f7ff fdfb 	bl	8015bd2 <RegionCommonGetNextLowerTxDr>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	61bb      	str	r3, [r7, #24]
            break;
 8015fe0:	e09f      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	61bb      	str	r3, [r7, #24]
            break;
 8015fe6:	e09c      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	61bb      	str	r3, [r7, #24]
            break;
 8015fec:	e099      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015fee:	2340      	movs	r3, #64	; 0x40
 8015ff0:	61bb      	str	r3, [r7, #24]
            break;
 8015ff2:	e096      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015ff4:	2320      	movs	r3, #32
 8015ff6:	61bb      	str	r3, [r7, #24]
            break;
 8015ff8:	e093      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016000:	461a      	mov	r2, r3
 8016002:	4b4c      	ldr	r3, [pc, #304]	; (8016134 <RegionUS915GetPhyParam+0x298>)
 8016004:	5c9b      	ldrb	r3, [r3, r2]
 8016006:	61bb      	str	r3, [r7, #24]
            break;
 8016008:	e08b      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016010:	461a      	mov	r2, r3
 8016012:	4b49      	ldr	r3, [pc, #292]	; (8016138 <RegionUS915GetPhyParam+0x29c>)
 8016014:	5c9b      	ldrb	r3, [r3, r2]
 8016016:	61bb      	str	r3, [r7, #24]
            break;
 8016018:	e083      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801601a:	2300      	movs	r3, #0
 801601c:	61bb      	str	r3, [r7, #24]
            break;
 801601e:	e080      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8016020:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016024:	61bb      	str	r3, [r7, #24]
            break;
 8016026:	e07c      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801602c:	61bb      	str	r3, [r7, #24]
            break;
 801602e:	e078      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016030:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016034:	61bb      	str	r3, [r7, #24]
            break;
 8016036:	e074      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016038:	f241 3388 	movw	r3, #5000	; 0x1388
 801603c:	61bb      	str	r3, [r7, #24]
            break;
 801603e:	e070      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016040:	f241 7370 	movw	r3, #6000	; 0x1770
 8016044:	61bb      	str	r3, [r7, #24]
            break;
 8016046:	e06c      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801604c:	483b      	ldr	r0, [pc, #236]	; (801613c <RegionUS915GetPhyParam+0x2a0>)
 801604e:	f001 f8a7 	bl	80171a0 <randr>
 8016052:	4603      	mov	r3, r0
 8016054:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016058:	61bb      	str	r3, [r7, #24]
            break;
 801605a:	e062      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801605c:	2300      	movs	r3, #0
 801605e:	61bb      	str	r3, [r7, #24]
            break;
 8016060:	e05f      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8016062:	4b37      	ldr	r3, [pc, #220]	; (8016140 <RegionUS915GetPhyParam+0x2a4>)
 8016064:	61bb      	str	r3, [r7, #24]
            break;
 8016066:	e05c      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8016068:	2308      	movs	r3, #8
 801606a:	61bb      	str	r3, [r7, #24]
            break;
 801606c:	e059      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801606e:	4b30      	ldr	r3, [pc, #192]	; (8016130 <RegionUS915GetPhyParam+0x294>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016076:	61bb      	str	r3, [r7, #24]
            break;
 8016078:	e053      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801607a:	4b2d      	ldr	r3, [pc, #180]	; (8016130 <RegionUS915GetPhyParam+0x294>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016082:	61bb      	str	r3, [r7, #24]
            break;
 8016084:	e04d      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8016086:	2348      	movs	r3, #72	; 0x48
 8016088:	61bb      	str	r3, [r7, #24]
            break;
 801608a:	e04a      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801608c:	4b28      	ldr	r3, [pc, #160]	; (8016130 <RegionUS915GetPhyParam+0x294>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	61bb      	str	r3, [r7, #24]
            break;
 8016092:	e046      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8016094:	2300      	movs	r3, #0
 8016096:	61bb      	str	r3, [r7, #24]
            break;
 8016098:	e043      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801609a:	2300      	movs	r3, #0
 801609c:	61bb      	str	r3, [r7, #24]
            break;
 801609e:	e040      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80160a0:	4b28      	ldr	r3, [pc, #160]	; (8016144 <RegionUS915GetPhyParam+0x2a8>)
 80160a2:	61bb      	str	r3, [r7, #24]
            break;
 80160a4:	e03d      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 80160a6:	f04f 0300 	mov.w	r3, #0
 80160aa:	61bb      	str	r3, [r7, #24]
            break;
 80160ac:	e039      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	791b      	ldrb	r3, [r3, #4]
 80160b2:	4a25      	ldr	r2, [pc, #148]	; (8016148 <RegionUS915GetPhyParam+0x2ac>)
 80160b4:	4922      	ldr	r1, [pc, #136]	; (8016140 <RegionUS915GetPhyParam+0x2a4>)
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7fe fefd 	bl	8014eb6 <RegionBaseUSCalcDownlinkFrequency>
 80160bc:	4603      	mov	r3, r0
 80160be:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80160c0:	e02f      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80160c2:	2317      	movs	r3, #23
 80160c4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80160c6:	2304      	movs	r3, #4
 80160c8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80160ca:	2303      	movs	r3, #3
 80160cc:	76bb      	strb	r3, [r7, #26]
            break;
 80160ce:	e028      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80160d0:	2308      	movs	r3, #8
 80160d2:	61bb      	str	r3, [r7, #24]
            break;
 80160d4:	e025      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80160d6:	2308      	movs	r3, #8
 80160d8:	61bb      	str	r3, [r7, #24]
            break;
 80160da:	e022      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	791b      	ldrb	r3, [r3, #4]
 80160e0:	4a19      	ldr	r2, [pc, #100]	; (8016148 <RegionUS915GetPhyParam+0x2ac>)
 80160e2:	4917      	ldr	r1, [pc, #92]	; (8016140 <RegionUS915GetPhyParam+0x2a4>)
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7fe fee6 	bl	8014eb6 <RegionBaseUSCalcDownlinkFrequency>
 80160ea:	4603      	mov	r3, r0
 80160ec:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80160ee:	e018      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80160f0:	2308      	movs	r3, #8
 80160f2:	61bb      	str	r3, [r7, #24]
            break;
 80160f4:	e015      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80160f6:	2308      	movs	r3, #8
 80160f8:	61bb      	str	r3, [r7, #24]
            break;
 80160fa:	e012      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016102:	461a      	mov	r2, r3
 8016104:	4b11      	ldr	r3, [pc, #68]	; (801614c <RegionUS915GetPhyParam+0x2b0>)
 8016106:	5c9b      	ldrb	r3, [r3, r2]
 8016108:	61bb      	str	r3, [r7, #24]
            break;
 801610a:	e00a      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016112:	490f      	ldr	r1, [pc, #60]	; (8016150 <RegionUS915GetPhyParam+0x2b4>)
 8016114:	4618      	mov	r0, r3
 8016116:	f7ff fdaf 	bl	8015c78 <RegionCommonGetBandwidth>
 801611a:	4603      	mov	r3, r0
 801611c:	61bb      	str	r3, [r7, #24]
            break;
 801611e:	e000      	b.n	8016122 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8016120:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	61fb      	str	r3, [r7, #28]
 8016126:	69fb      	ldr	r3, [r7, #28]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3720      	adds	r7, #32
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}
 8016130:	20001a1c 	.word	0x20001a1c
 8016134:	0801cbac 	.word	0x0801cbac
 8016138:	0801cbbc 	.word	0x0801cbbc
 801613c:	fffffc18 	.word	0xfffffc18
 8016140:	370870a0 	.word	0x370870a0
 8016144:	4200999a 	.word	0x4200999a
 8016148:	000927c0 	.word	0x000927c0
 801614c:	0801cb48 	.word	0x0801cb48
 8016150:	0801cb58 	.word	0x0801cb58

08016154 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016154:	b590      	push	{r4, r7, lr}
 8016156:	b085      	sub	sp, #20
 8016158:	af02      	add	r7, sp, #8
 801615a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801615c:	4b11      	ldr	r3, [pc, #68]	; (80161a4 <RegionUS915SetBandTxDone+0x50>)
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	4b11      	ldr	r3, [pc, #68]	; (80161a8 <RegionUS915SetBandTxDone+0x54>)
 8016162:	6819      	ldr	r1, [r3, #0]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	4618      	mov	r0, r3
 801616a:	4603      	mov	r3, r0
 801616c:	005b      	lsls	r3, r3, #1
 801616e:	4403      	add	r3, r0
 8016170:	009b      	lsls	r3, r3, #2
 8016172:	440b      	add	r3, r1
 8016174:	3309      	adds	r3, #9
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	4619      	mov	r1, r3
 801617a:	460b      	mov	r3, r1
 801617c:	005b      	lsls	r3, r3, #1
 801617e:	440b      	add	r3, r1
 8016180:	00db      	lsls	r3, r3, #3
 8016182:	18d0      	adds	r0, r2, r3
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	6899      	ldr	r1, [r3, #8]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	785c      	ldrb	r4, [r3, #1]
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	691a      	ldr	r2, [r3, #16]
 8016190:	9200      	str	r2, [sp, #0]
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	4622      	mov	r2, r4
 8016196:	f7ff f905 	bl	80153a4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801619a:	bf00      	nop
 801619c:	370c      	adds	r7, #12
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd90      	pop	{r4, r7, pc}
 80161a2:	bf00      	nop
 80161a4:	20001a20 	.word	0x20001a20
 80161a8:	20001a1c 	.word	0x20001a1c

080161ac <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b08a      	sub	sp, #40	; 0x28
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 80161b4:	2301      	movs	r3, #1
 80161b6:	81bb      	strh	r3, [r7, #12]
 80161b8:	2300      	movs	r3, #0
 80161ba:	73bb      	strb	r3, [r7, #14]
 80161bc:	2300      	movs	r3, #0
 80161be:	613b      	str	r3, [r7, #16]
 80161c0:	2300      	movs	r3, #0
 80161c2:	617b      	str	r3, [r7, #20]
 80161c4:	2300      	movs	r3, #0
 80161c6:	61bb      	str	r3, [r7, #24]
 80161c8:	2300      	movs	r3, #0
 80161ca:	61fb      	str	r3, [r7, #28]
 80161cc:	2300      	movs	r3, #0
 80161ce:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	7b1b      	ldrb	r3, [r3, #12]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d007      	beq.n	80161ea <RegionUS915InitDefaults+0x3e>
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f2c0 8104 	blt.w	80163e8 <RegionUS915InitDefaults+0x23c>
 80161e0:	3b01      	subs	r3, #1
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	f200 8100 	bhi.w	80163e8 <RegionUS915InitDefaults+0x23c>
 80161e8:	e0ce      	b.n	8016388 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f000 80fc 	beq.w	80163ec <RegionUS915InitDefaults+0x240>
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	f000 80f7 	beq.w	80163ec <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	4a7c      	ldr	r2, [pc, #496]	; (80163f4 <RegionUS915InitDefaults+0x248>)
 8016204:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	4a7b      	ldr	r2, [pc, #492]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801620c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	689b      	ldr	r3, [r3, #8]
 8016212:	4a7a      	ldr	r2, [pc, #488]	; (80163fc <RegionUS915InitDefaults+0x250>)
 8016214:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8016216:	4b77      	ldr	r3, [pc, #476]	; (80163f4 <RegionUS915InitDefaults+0x248>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2200      	movs	r2, #0
 801621c:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801621e:	4b75      	ldr	r3, [pc, #468]	; (80163f4 <RegionUS915InitDefaults+0x248>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2200      	movs	r2, #0
 8016224:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8016226:	4b75      	ldr	r3, [pc, #468]	; (80163fc <RegionUS915InitDefaults+0x250>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f107 010c 	add.w	r1, r7, #12
 801622e:	2218      	movs	r2, #24
 8016230:	4618      	mov	r0, r3
 8016232:	f000 ffcc 	bl	80171ce <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8016236:	2300      	movs	r3, #0
 8016238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801623c:	e02e      	b.n	801629c <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801623e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016242:	4a6f      	ldr	r2, [pc, #444]	; (8016400 <RegionUS915InitDefaults+0x254>)
 8016244:	fb03 f202 	mul.w	r2, r3, r2
 8016248:	4b6e      	ldr	r3, [pc, #440]	; (8016404 <RegionUS915InitDefaults+0x258>)
 801624a:	4413      	add	r3, r2
 801624c:	4a6a      	ldr	r2, [pc, #424]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801624e:	6811      	ldr	r1, [r2, #0]
 8016250:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016254:	4618      	mov	r0, r3
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	440b      	add	r3, r1
 8016260:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8016262:	4b65      	ldr	r3, [pc, #404]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016264:	6819      	ldr	r1, [r3, #0]
 8016266:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801626a:	4613      	mov	r3, r2
 801626c:	005b      	lsls	r3, r3, #1
 801626e:	4413      	add	r3, r2
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	440b      	add	r3, r1
 8016274:	3308      	adds	r3, #8
 8016276:	2230      	movs	r2, #48	; 0x30
 8016278:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801627a:	4b5f      	ldr	r3, [pc, #380]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801627c:	6819      	ldr	r1, [r3, #0]
 801627e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016282:	4613      	mov	r3, r2
 8016284:	005b      	lsls	r3, r3, #1
 8016286:	4413      	add	r3, r2
 8016288:	009b      	lsls	r3, r3, #2
 801628a:	440b      	add	r3, r1
 801628c:	3309      	adds	r3, #9
 801628e:	2200      	movs	r2, #0
 8016290:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8016292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016296:	3301      	adds	r3, #1
 8016298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801629c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162a0:	2b3f      	cmp	r3, #63	; 0x3f
 80162a2:	d9cc      	bls.n	801623e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80162a4:	2340      	movs	r3, #64	; 0x40
 80162a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80162aa:	e02f      	b.n	801630c <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80162ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162b0:	3b40      	subs	r3, #64	; 0x40
 80162b2:	4a55      	ldr	r2, [pc, #340]	; (8016408 <RegionUS915InitDefaults+0x25c>)
 80162b4:	fb03 f202 	mul.w	r2, r3, r2
 80162b8:	4b54      	ldr	r3, [pc, #336]	; (801640c <RegionUS915InitDefaults+0x260>)
 80162ba:	4413      	add	r3, r2
 80162bc:	4a4e      	ldr	r2, [pc, #312]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 80162be:	6811      	ldr	r1, [r2, #0]
 80162c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80162c4:	4618      	mov	r0, r3
 80162c6:	4613      	mov	r3, r2
 80162c8:	005b      	lsls	r3, r3, #1
 80162ca:	4413      	add	r3, r2
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	440b      	add	r3, r1
 80162d0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80162d2:	4b49      	ldr	r3, [pc, #292]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 80162d4:	6819      	ldr	r1, [r3, #0]
 80162d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80162da:	4613      	mov	r3, r2
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	4413      	add	r3, r2
 80162e0:	009b      	lsls	r3, r3, #2
 80162e2:	440b      	add	r3, r1
 80162e4:	3308      	adds	r3, #8
 80162e6:	2244      	movs	r2, #68	; 0x44
 80162e8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80162ea:	4b43      	ldr	r3, [pc, #268]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 80162ec:	6819      	ldr	r1, [r3, #0]
 80162ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80162f2:	4613      	mov	r3, r2
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	4413      	add	r3, r2
 80162f8:	009b      	lsls	r3, r3, #2
 80162fa:	440b      	add	r3, r1
 80162fc:	3309      	adds	r3, #9
 80162fe:	2200      	movs	r2, #0
 8016300:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8016302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016306:	3301      	adds	r3, #1
 8016308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801630c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016310:	2b47      	cmp	r3, #71	; 0x47
 8016312:	d9cb      	bls.n	80162ac <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8016314:	4b38      	ldr	r3, [pc, #224]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801631c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8016320:	4b35      	ldr	r3, [pc, #212]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016328:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801632c:	4b32      	ldr	r3, [pc, #200]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016334:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8016338:	4b2f      	ldr	r3, [pc, #188]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016340:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8016344:	4b2c      	ldr	r3, [pc, #176]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	22ff      	movs	r2, #255	; 0xff
 801634a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801634e:	4b2a      	ldr	r3, [pc, #168]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2200      	movs	r2, #0
 8016354:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016358:	4b27      	ldr	r3, [pc, #156]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016360:	4b25      	ldr	r3, [pc, #148]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016368:	2206      	movs	r2, #6
 801636a:	4619      	mov	r1, r3
 801636c:	f7fe fff4 	bl	8015358 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8016370:	4b20      	ldr	r3, [pc, #128]	; (80163f4 <RegionUS915InitDefaults+0x248>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	4618      	mov	r0, r3
 8016376:	4b20      	ldr	r3, [pc, #128]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801637e:	2206      	movs	r2, #6
 8016380:	4619      	mov	r1, r3
 8016382:	f7fe ffe9 	bl	8015358 <RegionCommonChanMaskCopy>
            break;
 8016386:	e032      	b.n	80163ee <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016388:	4b1b      	ldr	r3, [pc, #108]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016390:	4b19      	ldr	r3, [pc, #100]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016398:	2206      	movs	r2, #6
 801639a:	4619      	mov	r1, r3
 801639c:	f7fe ffdc 	bl	8015358 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80163a0:	2300      	movs	r3, #0
 80163a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80163a6:	e01a      	b.n	80163de <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80163a8:	4b12      	ldr	r3, [pc, #72]	; (80163f4 <RegionUS915InitDefaults+0x248>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80163b0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80163b4:	4b10      	ldr	r3, [pc, #64]	; (80163f8 <RegionUS915InitDefaults+0x24c>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80163bc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80163c0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80163c4:	4b0b      	ldr	r3, [pc, #44]	; (80163f4 <RegionUS915InitDefaults+0x248>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80163cc:	4001      	ands	r1, r0
 80163ce:	b289      	uxth	r1, r1
 80163d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80163d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80163d8:	3301      	adds	r3, #1
 80163da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80163de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80163e2:	2b05      	cmp	r3, #5
 80163e4:	d9e0      	bls.n	80163a8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80163e6:	e002      	b.n	80163ee <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80163e8:	bf00      	nop
 80163ea:	e000      	b.n	80163ee <RegionUS915InitDefaults+0x242>
                return;
 80163ec:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80163ee:	3728      	adds	r7, #40	; 0x28
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	20001a18 	.word	0x20001a18
 80163f8:	20001a1c 	.word	0x20001a1c
 80163fc:	20001a20 	.word	0x20001a20
 8016400:	00030d40 	.word	0x00030d40
 8016404:	35c80160 	.word	0x35c80160
 8016408:	00186a00 	.word	0x00186a00
 801640c:	35d2afc0 	.word	0x35d2afc0

08016410 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	460b      	mov	r3, r1
 801641a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801641c:	78fb      	ldrb	r3, [r7, #3]
 801641e:	2b0f      	cmp	r3, #15
 8016420:	d867      	bhi.n	80164f2 <RegionUS915Verify+0xe2>
 8016422:	a201      	add	r2, pc, #4	; (adr r2, 8016428 <RegionUS915Verify+0x18>)
 8016424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016428:	08016469 	.word	0x08016469
 801642c:	080164f3 	.word	0x080164f3
 8016430:	080164f3 	.word	0x080164f3
 8016434:	080164f3 	.word	0x080164f3
 8016438:	080164f3 	.word	0x080164f3
 801643c:	08016477 	.word	0x08016477
 8016440:	08016495 	.word	0x08016495
 8016444:	080164b3 	.word	0x080164b3
 8016448:	080164f3 	.word	0x080164f3
 801644c:	080164d1 	.word	0x080164d1
 8016450:	080164d1 	.word	0x080164d1
 8016454:	080164f3 	.word	0x080164f3
 8016458:	080164f3 	.word	0x080164f3
 801645c:	080164f3 	.word	0x080164f3
 8016460:	080164f3 	.word	0x080164f3
 8016464:	080164ef 	.word	0x080164ef
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	4618      	mov	r0, r3
 801646e:	f7ff fca1 	bl	8015db4 <VerifyRfFreq>
 8016472:	4603      	mov	r3, r0
 8016474:	e03e      	b.n	80164f4 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f993 3000 	ldrsb.w	r3, [r3]
 801647c:	2204      	movs	r2, #4
 801647e:	2100      	movs	r1, #0
 8016480:	4618      	mov	r0, r3
 8016482:	f7fe feec 	bl	801525e <RegionCommonValueInRange>
 8016486:	4603      	mov	r3, r0
 8016488:	2b00      	cmp	r3, #0
 801648a:	bf14      	ite	ne
 801648c:	2301      	movne	r3, #1
 801648e:	2300      	moveq	r3, #0
 8016490:	b2db      	uxtb	r3, r3
 8016492:	e02f      	b.n	80164f4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f993 3000 	ldrsb.w	r3, [r3]
 801649a:	2205      	movs	r2, #5
 801649c:	2100      	movs	r1, #0
 801649e:	4618      	mov	r0, r3
 80164a0:	f7fe fedd 	bl	801525e <RegionCommonValueInRange>
 80164a4:	4603      	mov	r3, r0
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	bf14      	ite	ne
 80164aa:	2301      	movne	r3, #1
 80164ac:	2300      	moveq	r3, #0
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	e020      	b.n	80164f4 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f993 3000 	ldrsb.w	r3, [r3]
 80164b8:	220d      	movs	r2, #13
 80164ba:	2108      	movs	r1, #8
 80164bc:	4618      	mov	r0, r3
 80164be:	f7fe fece 	bl	801525e <RegionCommonValueInRange>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	bf14      	ite	ne
 80164c8:	2301      	movne	r3, #1
 80164ca:	2300      	moveq	r3, #0
 80164cc:	b2db      	uxtb	r3, r3
 80164ce:	e011      	b.n	80164f4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f993 3000 	ldrsb.w	r3, [r3]
 80164d6:	220e      	movs	r2, #14
 80164d8:	2100      	movs	r1, #0
 80164da:	4618      	mov	r0, r3
 80164dc:	f7fe febf 	bl	801525e <RegionCommonValueInRange>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	bf14      	ite	ne
 80164e6:	2301      	movne	r3, #1
 80164e8:	2300      	moveq	r3, #0
 80164ea:	b2db      	uxtb	r3, r3
 80164ec:	e002      	b.n	80164f4 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80164ee:	2300      	movs	r3, #0
 80164f0:	e000      	b.n	80164f4 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80164f2:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80164fc:	b480      	push	{r7}
 80164fe:	b085      	sub	sp, #20
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	7a1b      	ldrb	r3, [r3, #8]
 8016508:	2b10      	cmp	r3, #16
 801650a:	d160      	bne.n	80165ce <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	330f      	adds	r3, #15
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	2b01      	cmp	r3, #1
 8016516:	d15c      	bne.n	80165d2 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8016518:	2300      	movs	r3, #0
 801651a:	73fb      	strb	r3, [r7, #15]
 801651c:	2300      	movs	r3, #0
 801651e:	73bb      	strb	r3, [r7, #14]
 8016520:	e051      	b.n	80165c6 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	685a      	ldr	r2, [r3, #4]
 8016526:	7bbb      	ldrb	r3, [r7, #14]
 8016528:	4413      	add	r3, r2
 801652a:	7819      	ldrb	r1, [r3, #0]
 801652c:	4b2b      	ldr	r3, [pc, #172]	; (80165dc <RegionUS915ApplyCFList+0xe0>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	7bfa      	ldrb	r2, [r7, #15]
 8016532:	b289      	uxth	r1, r1
 8016534:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8016538:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801653c:	4b27      	ldr	r3, [pc, #156]	; (80165dc <RegionUS915ApplyCFList+0xe0>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	7bfa      	ldrb	r2, [r7, #15]
 8016542:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8016546:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	685a      	ldr	r2, [r3, #4]
 801654e:	7bbb      	ldrb	r3, [r7, #14]
 8016550:	3301      	adds	r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	b29b      	uxth	r3, r3
 8016558:	021b      	lsls	r3, r3, #8
 801655a:	b299      	uxth	r1, r3
 801655c:	4b1f      	ldr	r3, [pc, #124]	; (80165dc <RegionUS915ApplyCFList+0xe0>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	7bfa      	ldrb	r2, [r7, #15]
 8016562:	4301      	orrs	r1, r0
 8016564:	b289      	uxth	r1, r1
 8016566:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801656a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801656e:	7bfb      	ldrb	r3, [r7, #15]
 8016570:	2b04      	cmp	r3, #4
 8016572:	d10f      	bne.n	8016594 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8016574:	4b19      	ldr	r3, [pc, #100]	; (80165dc <RegionUS915ApplyCFList+0xe0>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	7bfa      	ldrb	r2, [r7, #15]
 801657a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801657e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016582:	4b16      	ldr	r3, [pc, #88]	; (80165dc <RegionUS915ApplyCFList+0xe0>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	7bfa      	ldrb	r2, [r7, #15]
 8016588:	b2c9      	uxtb	r1, r1
 801658a:	b289      	uxth	r1, r1
 801658c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8016590:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8016594:	4b12      	ldr	r3, [pc, #72]	; (80165e0 <RegionUS915ApplyCFList+0xe4>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	7bfa      	ldrb	r2, [r7, #15]
 801659a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801659e:	4b0f      	ldr	r3, [pc, #60]	; (80165dc <RegionUS915ApplyCFList+0xe0>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	7bfa      	ldrb	r2, [r7, #15]
 80165a4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80165a8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80165ac:	4b0c      	ldr	r3, [pc, #48]	; (80165e0 <RegionUS915ApplyCFList+0xe4>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	7bfa      	ldrb	r2, [r7, #15]
 80165b2:	4001      	ands	r1, r0
 80165b4:	b289      	uxth	r1, r1
 80165b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80165ba:	7bfb      	ldrb	r3, [r7, #15]
 80165bc:	3301      	adds	r3, #1
 80165be:	73fb      	strb	r3, [r7, #15]
 80165c0:	7bbb      	ldrb	r3, [r7, #14]
 80165c2:	3302      	adds	r3, #2
 80165c4:	73bb      	strb	r3, [r7, #14]
 80165c6:	7bfb      	ldrb	r3, [r7, #15]
 80165c8:	2b04      	cmp	r3, #4
 80165ca:	d9aa      	bls.n	8016522 <RegionUS915ApplyCFList+0x26>
 80165cc:	e002      	b.n	80165d4 <RegionUS915ApplyCFList+0xd8>
        return;
 80165ce:	bf00      	nop
 80165d0:	e000      	b.n	80165d4 <RegionUS915ApplyCFList+0xd8>
        return;
 80165d2:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80165d4:	3714      	adds	r7, #20
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bc80      	pop	{r7}
 80165da:	4770      	bx	lr
 80165dc:	20001a1c 	.word	0x20001a1c
 80165e0:	20001a18 	.word	0x20001a18

080165e4 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	2204      	movs	r2, #4
 80165f2:	2100      	movs	r1, #0
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7fe fe83 	bl	8015300 <RegionCommonCountChannels>
 80165fa:	4603      	mov	r3, r0
 80165fc:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80165fe:	7bbb      	ldrb	r3, [r7, #14]
 8016600:	2b01      	cmp	r3, #1
 8016602:	d804      	bhi.n	801660e <RegionUS915ChanMaskSet+0x2a>
 8016604:	7bbb      	ldrb	r3, [r7, #14]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d001      	beq.n	801660e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801660a:	2300      	movs	r3, #0
 801660c:	e04a      	b.n	80166a4 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	791b      	ldrb	r3, [r3, #4]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d002      	beq.n	801661c <RegionUS915ChanMaskSet+0x38>
 8016616:	2b01      	cmp	r3, #1
 8016618:	d036      	beq.n	8016688 <RegionUS915ChanMaskSet+0xa4>
 801661a:	e040      	b.n	801669e <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801661c:	4b23      	ldr	r3, [pc, #140]	; (80166ac <RegionUS915ChanMaskSet+0xc8>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	2206      	movs	r2, #6
 801662a:	4619      	mov	r1, r3
 801662c:	f7fe fe94 	bl	8015358 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8016630:	4b1e      	ldr	r3, [pc, #120]	; (80166ac <RegionUS915ChanMaskSet+0xc8>)
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8016638:	4b1c      	ldr	r3, [pc, #112]	; (80166ac <RegionUS915ChanMaskSet+0xc8>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	b2d2      	uxtb	r2, r2
 801663e:	b292      	uxth	r2, r2
 8016640:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8016644:	4b19      	ldr	r3, [pc, #100]	; (80166ac <RegionUS915ChanMaskSet+0xc8>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2200      	movs	r2, #0
 801664a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801664e:	2300      	movs	r3, #0
 8016650:	73fb      	strb	r3, [r7, #15]
 8016652:	e015      	b.n	8016680 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8016654:	4b16      	ldr	r3, [pc, #88]	; (80166b0 <RegionUS915ChanMaskSet+0xcc>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	7bfa      	ldrb	r2, [r7, #15]
 801665a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801665e:	4b13      	ldr	r3, [pc, #76]	; (80166ac <RegionUS915ChanMaskSet+0xc8>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	7bfa      	ldrb	r2, [r7, #15]
 8016664:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8016668:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801666c:	4b10      	ldr	r3, [pc, #64]	; (80166b0 <RegionUS915ChanMaskSet+0xcc>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	7bfa      	ldrb	r2, [r7, #15]
 8016672:	4001      	ands	r1, r0
 8016674:	b289      	uxth	r1, r1
 8016676:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801667a:	7bfb      	ldrb	r3, [r7, #15]
 801667c:	3301      	adds	r3, #1
 801667e:	73fb      	strb	r3, [r7, #15]
 8016680:	7bfb      	ldrb	r3, [r7, #15]
 8016682:	2b05      	cmp	r3, #5
 8016684:	d9e6      	bls.n	8016654 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8016686:	e00c      	b.n	80166a2 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016688:	4b08      	ldr	r3, [pc, #32]	; (80166ac <RegionUS915ChanMaskSet+0xc8>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2206      	movs	r2, #6
 8016696:	4619      	mov	r1, r3
 8016698:	f7fe fe5e 	bl	8015358 <RegionCommonChanMaskCopy>
            break;
 801669c:	e001      	b.n	80166a2 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801669e:	2300      	movs	r3, #0
 80166a0:	e000      	b.n	80166a4 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80166a2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3710      	adds	r7, #16
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	20001a1c 	.word	0x20001a1c
 80166b0:	20001a18 	.word	0x20001a18

080166b4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b088      	sub	sp, #32
 80166b8:	af02      	add	r7, sp, #8
 80166ba:	60ba      	str	r2, [r7, #8]
 80166bc:	607b      	str	r3, [r7, #4]
 80166be:	4603      	mov	r3, r0
 80166c0:	73fb      	strb	r3, [r7, #15]
 80166c2:	460b      	mov	r3, r1
 80166c4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80166c6:	2300      	movs	r3, #0
 80166c8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80166ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166ce:	2b0d      	cmp	r3, #13
 80166d0:	bfa8      	it	ge
 80166d2:	230d      	movge	r3, #13
 80166d4:	b25a      	sxtb	r2, r3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80166e0:	4916      	ldr	r1, [pc, #88]	; (801673c <RegionUS915ComputeRxWindowParameters+0x88>)
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7ff fac8 	bl	8015c78 <RegionCommonGetBandwidth>
 80166e8:	4603      	mov	r3, r0
 80166ea:	b2da      	uxtb	r2, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80166f6:	461a      	mov	r2, r3
 80166f8:	4b11      	ldr	r3, [pc, #68]	; (8016740 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80166fa:	5c9a      	ldrb	r2, [r3, r2]
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016702:	4619      	mov	r1, r3
 8016704:	4b0d      	ldr	r3, [pc, #52]	; (801673c <RegionUS915ComputeRxWindowParameters+0x88>)
 8016706:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801670a:	4619      	mov	r1, r3
 801670c:	4610      	mov	r0, r2
 801670e:	f7ff f841 	bl	8015794 <RegionCommonComputeSymbolTimeLoRa>
 8016712:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016714:	4b0b      	ldr	r3, [pc, #44]	; (8016744 <RegionUS915ComputeRxWindowParameters+0x90>)
 8016716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016718:	4798      	blx	r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	3308      	adds	r3, #8
 801671e:	687a      	ldr	r2, [r7, #4]
 8016720:	320c      	adds	r2, #12
 8016722:	7bb9      	ldrb	r1, [r7, #14]
 8016724:	9201      	str	r2, [sp, #4]
 8016726:	9300      	str	r3, [sp, #0]
 8016728:	4603      	mov	r3, r0
 801672a:	68ba      	ldr	r2, [r7, #8]
 801672c:	6978      	ldr	r0, [r7, #20]
 801672e:	f7ff f847 	bl	80157c0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8016732:	bf00      	nop
 8016734:	3718      	adds	r7, #24
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	0801cb58 	.word	0x0801cb58
 8016740:	0801cb48 	.word	0x0801cb48
 8016744:	0801cbcc 	.word	0x0801cbcc

08016748 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016748:	b590      	push	{r4, r7, lr}
 801674a:	b091      	sub	sp, #68	; 0x44
 801674c:	af0a      	add	r7, sp, #40	; 0x28
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	785b      	ldrb	r3, [r3, #1]
 8016756:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016758:	2300      	movs	r3, #0
 801675a:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801675c:	2300      	movs	r3, #0
 801675e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016766:	4b34      	ldr	r3, [pc, #208]	; (8016838 <RegionUS915RxConfig+0xf0>)
 8016768:	685b      	ldr	r3, [r3, #4]
 801676a:	4798      	blx	r3
 801676c:	4603      	mov	r3, r0
 801676e:	2b00      	cmp	r3, #0
 8016770:	d001      	beq.n	8016776 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8016772:	2300      	movs	r3, #0
 8016774:	e05c      	b.n	8016830 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	7cdb      	ldrb	r3, [r3, #19]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d109      	bne.n	8016792 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	781b      	ldrb	r3, [r3, #0]
 8016782:	f003 0307 	and.w	r3, r3, #7
 8016786:	4a2d      	ldr	r2, [pc, #180]	; (801683c <RegionUS915RxConfig+0xf4>)
 8016788:	fb03 f202 	mul.w	r2, r3, r2
 801678c:	4b2c      	ldr	r3, [pc, #176]	; (8016840 <RegionUS915RxConfig+0xf8>)
 801678e:	4413      	add	r3, r2
 8016790:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8016792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016796:	4a2b      	ldr	r2, [pc, #172]	; (8016844 <RegionUS915RxConfig+0xfc>)
 8016798:	5cd3      	ldrb	r3, [r2, r3]
 801679a:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801679c:	4b26      	ldr	r3, [pc, #152]	; (8016838 <RegionUS915RxConfig+0xf0>)
 801679e:	68db      	ldr	r3, [r3, #12]
 80167a0:	6938      	ldr	r0, [r7, #16]
 80167a2:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80167a4:	4b24      	ldr	r3, [pc, #144]	; (8016838 <RegionUS915RxConfig+0xf0>)
 80167a6:	699c      	ldr	r4, [r3, #24]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	789b      	ldrb	r3, [r3, #2]
 80167ac:	4618      	mov	r0, r3
 80167ae:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	689b      	ldr	r3, [r3, #8]
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	687a      	ldr	r2, [r7, #4]
 80167ba:	7c92      	ldrb	r2, [r2, #18]
 80167bc:	9209      	str	r2, [sp, #36]	; 0x24
 80167be:	2201      	movs	r2, #1
 80167c0:	9208      	str	r2, [sp, #32]
 80167c2:	2200      	movs	r2, #0
 80167c4:	9207      	str	r2, [sp, #28]
 80167c6:	2200      	movs	r2, #0
 80167c8:	9206      	str	r2, [sp, #24]
 80167ca:	2200      	movs	r2, #0
 80167cc:	9205      	str	r2, [sp, #20]
 80167ce:	2200      	movs	r2, #0
 80167d0:	9204      	str	r2, [sp, #16]
 80167d2:	2200      	movs	r2, #0
 80167d4:	9203      	str	r2, [sp, #12]
 80167d6:	9302      	str	r3, [sp, #8]
 80167d8:	2308      	movs	r3, #8
 80167da:	9301      	str	r3, [sp, #4]
 80167dc:	2300      	movs	r3, #0
 80167de:	9300      	str	r3, [sp, #0]
 80167e0:	2301      	movs	r3, #1
 80167e2:	460a      	mov	r2, r1
 80167e4:	4601      	mov	r1, r0
 80167e6:	2001      	movs	r0, #1
 80167e8:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	7c5b      	ldrb	r3, [r3, #17]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d005      	beq.n	80167fe <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80167f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167f6:	4a14      	ldr	r2, [pc, #80]	; (8016848 <RegionUS915RxConfig+0x100>)
 80167f8:	5cd3      	ldrb	r3, [r2, r3]
 80167fa:	75fb      	strb	r3, [r7, #23]
 80167fc:	e004      	b.n	8016808 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80167fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016802:	4a12      	ldr	r2, [pc, #72]	; (801684c <RegionUS915RxConfig+0x104>)
 8016804:	5cd3      	ldrb	r3, [r2, r3]
 8016806:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016808:	4b0b      	ldr	r3, [pc, #44]	; (8016838 <RegionUS915RxConfig+0xf0>)
 801680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801680c:	7dfa      	ldrb	r2, [r7, #23]
 801680e:	320d      	adds	r2, #13
 8016810:	b2d2      	uxtb	r2, r2
 8016812:	4611      	mov	r1, r2
 8016814:	2001      	movs	r0, #1
 8016816:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	7cdb      	ldrb	r3, [r3, #19]
 801681c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016820:	6939      	ldr	r1, [r7, #16]
 8016822:	4618      	mov	r0, r3
 8016824:	f7ff fa46 	bl	8015cb4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016828:	683b      	ldr	r3, [r7, #0]
 801682a:	7bfa      	ldrb	r2, [r7, #15]
 801682c:	701a      	strb	r2, [r3, #0]
    return true;
 801682e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016830:	4618      	mov	r0, r3
 8016832:	371c      	adds	r7, #28
 8016834:	46bd      	mov	sp, r7
 8016836:	bd90      	pop	{r4, r7, pc}
 8016838:	0801cbcc 	.word	0x0801cbcc
 801683c:	000927c0 	.word	0x000927c0
 8016840:	370870a0 	.word	0x370870a0
 8016844:	0801cb48 	.word	0x0801cb48
 8016848:	0801cbbc 	.word	0x0801cbbc
 801684c:	0801cbac 	.word	0x0801cbac

08016850 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016850:	b590      	push	{r4, r7, lr}
 8016852:	b093      	sub	sp, #76	; 0x4c
 8016854:	af0a      	add	r7, sp, #40	; 0x28
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016862:	461a      	mov	r2, r3
 8016864:	4b49      	ldr	r3, [pc, #292]	; (801698c <RegionUS915TxConfig+0x13c>)
 8016866:	5c9b      	ldrb	r3, [r3, r2]
 8016868:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016870:	4b47      	ldr	r3, [pc, #284]	; (8016990 <RegionUS915TxConfig+0x140>)
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	4b47      	ldr	r3, [pc, #284]	; (8016994 <RegionUS915TxConfig+0x144>)
 8016876:	6819      	ldr	r1, [r3, #0]
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	461c      	mov	r4, r3
 801687e:	4623      	mov	r3, r4
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4423      	add	r3, r4
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	440b      	add	r3, r1
 8016888:	3309      	adds	r3, #9
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	4619      	mov	r1, r3
 801688e:	460b      	mov	r3, r1
 8016890:	005b      	lsls	r3, r3, #1
 8016892:	440b      	add	r3, r1
 8016894:	00db      	lsls	r3, r3, #3
 8016896:	4413      	add	r3, r2
 8016898:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80168a2:	4b3c      	ldr	r3, [pc, #240]	; (8016994 <RegionUS915TxConfig+0x144>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80168aa:	f7ff fa4d 	bl	8015d48 <LimitTxPower>
 80168ae:	4603      	mov	r3, r0
 80168b0:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168b8:	4937      	ldr	r1, [pc, #220]	; (8016998 <RegionUS915TxConfig+0x148>)
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7ff f9dc 	bl	8015c78 <RegionCommonGetBandwidth>
 80168c0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80168c2:	2300      	movs	r3, #0
 80168c4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80168c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80168ca:	f04f 0200 	mov.w	r2, #0
 80168ce:	4933      	ldr	r1, [pc, #204]	; (801699c <RegionUS915TxConfig+0x14c>)
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7ff f82d 	bl	8015930 <RegionCommonComputeTxPower>
 80168d6:	4603      	mov	r3, r0
 80168d8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80168da:	4b31      	ldr	r3, [pc, #196]	; (80169a0 <RegionUS915TxConfig+0x150>)
 80168dc:	68da      	ldr	r2, [r3, #12]
 80168de:	4b2d      	ldr	r3, [pc, #180]	; (8016994 <RegionUS915TxConfig+0x144>)
 80168e0:	6819      	ldr	r1, [r3, #0]
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	4618      	mov	r0, r3
 80168e8:	4603      	mov	r3, r0
 80168ea:	005b      	lsls	r3, r3, #1
 80168ec:	4403      	add	r3, r0
 80168ee:	009b      	lsls	r3, r3, #2
 80168f0:	440b      	add	r3, r1
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	4618      	mov	r0, r3
 80168f6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80168f8:	4b29      	ldr	r3, [pc, #164]	; (80169a0 <RegionUS915TxConfig+0x150>)
 80168fa:	69dc      	ldr	r4, [r3, #28]
 80168fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016900:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016904:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8016908:	9208      	str	r2, [sp, #32]
 801690a:	2200      	movs	r2, #0
 801690c:	9207      	str	r2, [sp, #28]
 801690e:	2200      	movs	r2, #0
 8016910:	9206      	str	r2, [sp, #24]
 8016912:	2200      	movs	r2, #0
 8016914:	9205      	str	r2, [sp, #20]
 8016916:	2201      	movs	r2, #1
 8016918:	9204      	str	r2, [sp, #16]
 801691a:	2200      	movs	r2, #0
 801691c:	9203      	str	r2, [sp, #12]
 801691e:	2208      	movs	r2, #8
 8016920:	9202      	str	r2, [sp, #8]
 8016922:	2201      	movs	r2, #1
 8016924:	9201      	str	r2, [sp, #4]
 8016926:	9300      	str	r3, [sp, #0]
 8016928:	69bb      	ldr	r3, [r7, #24]
 801692a:	2200      	movs	r2, #0
 801692c:	2001      	movs	r0, #1
 801692e:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016930:	4b18      	ldr	r3, [pc, #96]	; (8016994 <RegionUS915TxConfig+0x144>)
 8016932:	681a      	ldr	r2, [r3, #0]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	4619      	mov	r1, r3
 801693a:	460b      	mov	r3, r1
 801693c:	005b      	lsls	r3, r3, #1
 801693e:	440b      	add	r3, r1
 8016940:	009b      	lsls	r3, r3, #2
 8016942:	4413      	add	r3, r2
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801694c:	4619      	mov	r1, r3
 801694e:	4610      	mov	r0, r2
 8016950:	f7ff f9e2 	bl	8015d18 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8016954:	4b12      	ldr	r3, [pc, #72]	; (80169a0 <RegionUS915TxConfig+0x150>)
 8016956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016958:	68fa      	ldr	r2, [r7, #12]
 801695a:	8992      	ldrh	r2, [r2, #12]
 801695c:	b2d2      	uxtb	r2, r2
 801695e:	4611      	mov	r1, r2
 8016960:	2001      	movs	r0, #1
 8016962:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	899b      	ldrh	r3, [r3, #12]
 801696e:	4619      	mov	r1, r3
 8016970:	4610      	mov	r0, r2
 8016972:	f7ff fa63 	bl	8015e3c <GetTimeOnAir>
 8016976:	4602      	mov	r2, r0
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	7fba      	ldrb	r2, [r7, #30]
 8016980:	701a      	strb	r2, [r3, #0]
    return true;
 8016982:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016984:	4618      	mov	r0, r3
 8016986:	3724      	adds	r7, #36	; 0x24
 8016988:	46bd      	mov	sp, r7
 801698a:	bd90      	pop	{r4, r7, pc}
 801698c:	0801cb48 	.word	0x0801cb48
 8016990:	20001a20 	.word	0x20001a20
 8016994:	20001a1c 	.word	0x20001a1c
 8016998:	0801cb58 	.word	0x0801cb58
 801699c:	41f00000 	.word	0x41f00000
 80169a0:	0801cbcc 	.word	0x0801cbcc

080169a4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80169a4:	b590      	push	{r4, r7, lr}
 80169a6:	b097      	sub	sp, #92	; 0x5c
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	60f8      	str	r0, [r7, #12]
 80169ac:	60b9      	str	r1, [r7, #8]
 80169ae:	607a      	str	r2, [r7, #4]
 80169b0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80169b2:	2307      	movs	r3, #7
 80169b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80169b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80169bc:	2200      	movs	r2, #0
 80169be:	601a      	str	r2, [r3, #0]
 80169c0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80169c2:	2300      	movs	r3, #0
 80169c4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 80169c8:	2300      	movs	r3, #0
 80169ca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80169ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80169d2:	2200      	movs	r2, #0
 80169d4:	601a      	str	r2, [r3, #0]
 80169d6:	605a      	str	r2, [r3, #4]
 80169d8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80169da:	4b97      	ldr	r3, [pc, #604]	; (8016c38 <RegionUS915LinkAdrReq+0x294>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	f503 7158 	add.w	r1, r3, #864	; 0x360
 80169e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80169e6:	2206      	movs	r2, #6
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7fe fcb5 	bl	8015358 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80169ee:	e11b      	b.n	8016c28 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	685a      	ldr	r2, [r3, #4]
 80169f4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80169f8:	4413      	add	r3, r2
 80169fa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80169fe:	4611      	mov	r1, r2
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7fe fded 	bl	80155e0 <RegionCommonParseLinkAdrReq>
 8016a06:	4603      	mov	r3, r0
 8016a08:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8016a0c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	f000 8113 	beq.w	8016c3c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016a16:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8016a1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016a1e:	4413      	add	r3, r2
 8016a20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016a24:	2307      	movs	r3, #7
 8016a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8016a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016a2e:	2b06      	cmp	r3, #6
 8016a30:	d116      	bne.n	8016a60 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8016a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8016a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8016a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8016a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016a52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8016a56:	b2db      	uxtb	r3, r3
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016a5e:	e0e3      	b.n	8016c28 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8016a60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016a64:	2b07      	cmp	r3, #7
 8016a66:	d112      	bne.n	8016a8e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8016a74:	2300      	movs	r3, #0
 8016a76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016a80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016a8c:	e0cc      	b.n	8016c28 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8016a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016a92:	2b05      	cmp	r3, #5
 8016a94:	f040 80bf 	bne.w	8016c16 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8016a98:	2301      	movs	r3, #1
 8016a9a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8016aaa:	e0ae      	b.n	8016c0a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8016aac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8016ab0:	b2da      	uxtb	r2, r3
 8016ab2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016ab6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016aba:	fa01 f303 	lsl.w	r3, r1, r3
 8016abe:	4013      	ands	r3, r2
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d04d      	beq.n	8016b60 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8016ac4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ac8:	f003 0301 	and.w	r3, r3, #1
 8016acc:	b2db      	uxtb	r3, r3
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d120      	bne.n	8016b14 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8016ad2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	3358      	adds	r3, #88	; 0x58
 8016ada:	443b      	add	r3, r7
 8016adc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016ae0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016ae4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8016ae8:	b292      	uxth	r2, r2
 8016aea:	005b      	lsls	r3, r3, #1
 8016aec:	3358      	adds	r3, #88	; 0x58
 8016aee:	443b      	add	r3, r7
 8016af0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016af4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016af8:	b21a      	sxth	r2, r3
 8016afa:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016afe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016b02:	fa01 f303 	lsl.w	r3, r1, r3
 8016b06:	b21b      	sxth	r3, r3
 8016b08:	4313      	orrs	r3, r2
 8016b0a:	b21b      	sxth	r3, r3
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016b12:	e075      	b.n	8016c00 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8016b14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	3358      	adds	r3, #88	; 0x58
 8016b1c:	443b      	add	r3, r7
 8016b1e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016b22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016b26:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8016b2a:	b292      	uxth	r2, r2
 8016b2c:	005b      	lsls	r3, r3, #1
 8016b2e:	3358      	adds	r3, #88	; 0x58
 8016b30:	443b      	add	r3, r7
 8016b32:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016b36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016b3a:	b21a      	sxth	r2, r3
 8016b3c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016b40:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016b44:	fa01 f303 	lsl.w	r3, r1, r3
 8016b48:	b21b      	sxth	r3, r3
 8016b4a:	4313      	orrs	r3, r2
 8016b4c:	b21b      	sxth	r3, r3
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8016b54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016b58:	3301      	adds	r3, #1
 8016b5a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8016b5e:	e04f      	b.n	8016c00 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8016b60:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016b64:	f003 0301 	and.w	r3, r3, #1
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d122      	bne.n	8016bb4 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8016b6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	3358      	adds	r3, #88	; 0x58
 8016b76:	443b      	add	r3, r7
 8016b78:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016b7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016b80:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8016b84:	b292      	uxth	r2, r2
 8016b86:	005b      	lsls	r3, r3, #1
 8016b88:	3358      	adds	r3, #88	; 0x58
 8016b8a:	443b      	add	r3, r7
 8016b8c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016b90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016b94:	b21a      	sxth	r2, r3
 8016b96:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016b9a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8016ba2:	b21b      	sxth	r3, r3
 8016ba4:	43db      	mvns	r3, r3
 8016ba6:	b21b      	sxth	r3, r3
 8016ba8:	4013      	ands	r3, r2
 8016baa:	b21b      	sxth	r3, r3
 8016bac:	b29b      	uxth	r3, r3
 8016bae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016bb2:	e025      	b.n	8016c00 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8016bb4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016bb8:	005b      	lsls	r3, r3, #1
 8016bba:	3358      	adds	r3, #88	; 0x58
 8016bbc:	443b      	add	r3, r7
 8016bbe:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016bc2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016bc6:	b2d2      	uxtb	r2, r2
 8016bc8:	b292      	uxth	r2, r2
 8016bca:	005b      	lsls	r3, r3, #1
 8016bcc:	3358      	adds	r3, #88	; 0x58
 8016bce:	443b      	add	r3, r7
 8016bd0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016bd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016bd8:	b21a      	sxth	r2, r3
 8016bda:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016bde:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016be2:	fa01 f303 	lsl.w	r3, r1, r3
 8016be6:	b21b      	sxth	r3, r3
 8016be8:	43db      	mvns	r3, r3
 8016bea:	b21b      	sxth	r3, r3
 8016bec:	4013      	ands	r3, r2
 8016bee:	b21b      	sxth	r3, r3
 8016bf0:	b29b      	uxth	r3, r3
 8016bf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8016bf6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8016c00:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016c04:	3301      	adds	r3, #1
 8016c06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8016c0a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016c0e:	2b07      	cmp	r3, #7
 8016c10:	f67f af4c 	bls.w	8016aac <RegionUS915LinkAdrReq+0x108>
 8016c14:	e008      	b.n	8016c28 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8016c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016c1a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8016c1e:	005b      	lsls	r3, r3, #1
 8016c20:	3358      	adds	r3, #88	; 0x58
 8016c22:	443b      	add	r3, r7
 8016c24:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	7a1b      	ldrb	r3, [r3, #8]
 8016c2c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8016c30:	429a      	cmp	r2, r3
 8016c32:	f4ff aedd 	bcc.w	80169f0 <RegionUS915LinkAdrReq+0x4c>
 8016c36:	e002      	b.n	8016c3e <RegionUS915LinkAdrReq+0x29a>
 8016c38:	20001a1c 	.word	0x20001a1c
            break; // break loop, since no more request has been found
 8016c3c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8016c3e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8016c42:	2b03      	cmp	r3, #3
 8016c44:	dc0f      	bgt.n	8016c66 <RegionUS915LinkAdrReq+0x2c2>
 8016c46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016c4a:	2204      	movs	r2, #4
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7fe fb56 	bl	8015300 <RegionCommonCountChannels>
 8016c54:	4603      	mov	r3, r0
 8016c56:	2b01      	cmp	r3, #1
 8016c58:	d805      	bhi.n	8016c66 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8016c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c5e:	f023 0301 	bic.w	r3, r3, #1
 8016c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016c66:	2302      	movs	r3, #2
 8016c68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	7a5b      	ldrb	r3, [r3, #9]
 8016c70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8016c74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f7ff f90f 	bl	8015e9c <RegionUS915GetPhyParam>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8016c82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c86:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	7a9b      	ldrb	r3, [r3, #10]
 8016c8c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016c8e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8016c92:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016c94:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8016c98:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016c9a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8016c9e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016ca6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016cae:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	7b5b      	ldrb	r3, [r3, #13]
 8016cb4:	b25b      	sxtb	r3, r3
 8016cb6:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8016cb8:	2348      	movs	r3, #72	; 0x48
 8016cba:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8016cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016cc2:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cc6:	b25b      	sxtb	r3, r3
 8016cc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8016ccc:	2304      	movs	r3, #4
 8016cce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016cd2:	4b3f      	ldr	r3, [pc, #252]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8016cd8:	230e      	movs	r3, #14
 8016cda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016cea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8016cee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016cf2:	1c9a      	adds	r2, r3, #2
 8016cf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016cf8:	1c59      	adds	r1, r3, #1
 8016cfa:	f107 0014 	add.w	r0, r7, #20
 8016cfe:	4623      	mov	r3, r4
 8016d00:	f7fe fcbf 	bl	8015682 <RegionCommonLinkAdrReqVerifyParams>
 8016d04:	4603      	mov	r3, r0
 8016d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d0e:	2b07      	cmp	r3, #7
 8016d10:	d147      	bne.n	8016da2 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8016d12:	4b2f      	ldr	r3, [pc, #188]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016d1a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8016d1e:	2206      	movs	r2, #6
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7fe fb19 	bl	8015358 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8016d26:	4b2b      	ldr	r3, [pc, #172]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	8819      	ldrh	r1, [r3, #0]
 8016d2c:	4b28      	ldr	r3, [pc, #160]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8016d34:	4b27      	ldr	r3, [pc, #156]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	400a      	ands	r2, r1
 8016d3a:	b292      	uxth	r2, r2
 8016d3c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8016d3e:	4b25      	ldr	r3, [pc, #148]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	8859      	ldrh	r1, [r3, #2]
 8016d44:	4b22      	ldr	r3, [pc, #136]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8016d4c:	4b21      	ldr	r3, [pc, #132]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	400a      	ands	r2, r1
 8016d52:	b292      	uxth	r2, r2
 8016d54:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8016d56:	4b1f      	ldr	r3, [pc, #124]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	8899      	ldrh	r1, [r3, #4]
 8016d5c:	4b1c      	ldr	r3, [pc, #112]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8016d64:	4b1b      	ldr	r3, [pc, #108]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	400a      	ands	r2, r1
 8016d6a:	b292      	uxth	r2, r2
 8016d6c:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8016d6e:	4b19      	ldr	r3, [pc, #100]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	88d9      	ldrh	r1, [r3, #6]
 8016d74:	4b16      	ldr	r3, [pc, #88]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8016d7c:	4b15      	ldr	r3, [pc, #84]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	400a      	ands	r2, r1
 8016d82:	b292      	uxth	r2, r2
 8016d84:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8016d86:	4b12      	ldr	r3, [pc, #72]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	4b12      	ldr	r3, [pc, #72]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8016d92:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8016d94:	4b0e      	ldr	r3, [pc, #56]	; (8016dd0 <RegionUS915LinkAdrReq+0x42c>)
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	4b0e      	ldr	r3, [pc, #56]	; (8016dd4 <RegionUS915LinkAdrReq+0x430>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8016da0:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016da2:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016daa:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016db2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016dbc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8016dc0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8016dc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	375c      	adds	r7, #92	; 0x5c
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd90      	pop	{r4, r7, pc}
 8016dce:	bf00      	nop
 8016dd0:	20001a1c 	.word	0x20001a1c
 8016dd4:	20001a18 	.word	0x20001a18

08016dd8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b084      	sub	sp, #16
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016de0:	2307      	movs	r3, #7
 8016de2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7fe ffe3 	bl	8015db4 <VerifyRfFreq>
 8016dee:	4603      	mov	r3, r0
 8016df0:	f083 0301 	eor.w	r3, r3, #1
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d003      	beq.n	8016e02 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8016dfa:	7bfb      	ldrb	r3, [r7, #15]
 8016dfc:	f023 0301 	bic.w	r3, r3, #1
 8016e00:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	f993 3000 	ldrsb.w	r3, [r3]
 8016e08:	220d      	movs	r2, #13
 8016e0a:	2108      	movs	r1, #8
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7fe fa26 	bl	801525e <RegionCommonValueInRange>
 8016e12:	4603      	mov	r3, r0
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d103      	bne.n	8016e20 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8016e18:	7bfb      	ldrb	r3, [r7, #15]
 8016e1a:	f023 0302 	bic.w	r3, r3, #2
 8016e1e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f993 3000 	ldrsb.w	r3, [r3]
 8016e26:	2207      	movs	r2, #7
 8016e28:	2105      	movs	r1, #5
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7fe fa17 	bl	801525e <RegionCommonValueInRange>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d004      	beq.n	8016e40 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8016e3c:	2b0d      	cmp	r3, #13
 8016e3e:	dd03      	ble.n	8016e48 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8016e40:	7bfb      	ldrb	r3, [r7, #15]
 8016e42:	f023 0302 	bic.w	r3, r3, #2
 8016e46:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e4e:	2203      	movs	r2, #3
 8016e50:	2100      	movs	r1, #0
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7fe fa03 	bl	801525e <RegionCommonValueInRange>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d103      	bne.n	8016e66 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016e5e:	7bfb      	ldrb	r3, [r7, #15]
 8016e60:	f023 0304 	bic.w	r3, r3, #4
 8016e64:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8016e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3710      	adds	r7, #16
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}

08016e70 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016e70:	b480      	push	{r7}
 8016e72:	b083      	sub	sp, #12
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	370c      	adds	r7, #12
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bc80      	pop	{r7}
 8016e84:	4770      	bx	lr

08016e86 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016e86:	b480      	push	{r7}
 8016e88:	b083      	sub	sp, #12
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	370c      	adds	r7, #12
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bc80      	pop	{r7}
 8016e9a:	4770      	bx	lr

08016e9c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b083      	sub	sp, #12
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	370c      	adds	r7, #12
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bc80      	pop	{r7}
 8016eb0:	4770      	bx	lr
	...

08016eb4 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016eb4:	b480      	push	{r7}
 8016eb6:	b083      	sub	sp, #12
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	4603      	mov	r3, r0
 8016ebc:	460a      	mov	r2, r1
 8016ebe:	71fb      	strb	r3, [r7, #7]
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8016ec4:	79bb      	ldrb	r3, [r7, #6]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d106      	bne.n	8016ed8 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8016eca:	4b13      	ldr	r3, [pc, #76]	; (8016f18 <RegionUS915AlternateDr+0x64>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	7b5a      	ldrb	r2, [r3, #13]
 8016ed0:	3201      	adds	r2, #1
 8016ed2:	b2d2      	uxtb	r2, r2
 8016ed4:	735a      	strb	r2, [r3, #13]
 8016ed6:	e005      	b.n	8016ee4 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8016ed8:	4b0f      	ldr	r3, [pc, #60]	; (8016f18 <RegionUS915AlternateDr+0x64>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	7b5a      	ldrb	r2, [r3, #13]
 8016ede:	3a01      	subs	r2, #1
 8016ee0:	b2d2      	uxtb	r2, r2
 8016ee2:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8016ee4:	4b0c      	ldr	r3, [pc, #48]	; (8016f18 <RegionUS915AlternateDr+0x64>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	7b5a      	ldrb	r2, [r3, #13]
 8016eea:	4b0c      	ldr	r3, [pc, #48]	; (8016f1c <RegionUS915AlternateDr+0x68>)
 8016eec:	fba3 1302 	umull	r1, r3, r3, r2
 8016ef0:	0859      	lsrs	r1, r3, #1
 8016ef2:	460b      	mov	r3, r1
 8016ef4:	00db      	lsls	r3, r3, #3
 8016ef6:	440b      	add	r3, r1
 8016ef8:	1ad3      	subs	r3, r2, r3
 8016efa:	b2db      	uxtb	r3, r3
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d102      	bne.n	8016f06 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8016f00:	2304      	movs	r3, #4
 8016f02:	71fb      	strb	r3, [r7, #7]
 8016f04:	e001      	b.n	8016f0a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8016f06:	2300      	movs	r3, #0
 8016f08:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8016f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	370c      	adds	r7, #12
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bc80      	pop	{r7}
 8016f16:	4770      	bx	lr
 8016f18:	20001a18 	.word	0x20001a18
 8016f1c:	38e38e39 	.word	0x38e38e39

08016f20 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b0a8      	sub	sp, #160	; 0xa0
 8016f24:	af02      	add	r7, sp, #8
 8016f26:	60f8      	str	r0, [r7, #12]
 8016f28:	60b9      	str	r1, [r7, #8]
 8016f2a:	607a      	str	r2, [r7, #4]
 8016f2c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8016f34:	2300      	movs	r3, #0
 8016f36:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016f42:	2244      	movs	r2, #68	; 0x44
 8016f44:	2100      	movs	r1, #0
 8016f46:	4618      	mov	r0, r3
 8016f48:	f004 ff5e 	bl	801be08 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016f4c:	230c      	movs	r3, #12
 8016f4e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8016f52:	4b67      	ldr	r3, [pc, #412]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	2204      	movs	r2, #4
 8016f58:	2100      	movs	r1, #0
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7fe f9d0 	bl	8015300 <RegionCommonCountChannels>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d10e      	bne.n	8016f84 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8016f66:	4b62      	ldr	r3, [pc, #392]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	4b61      	ldr	r3, [pc, #388]	; (80170f4 <RegionUS915NextChannel+0x1d4>)
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016f74:	2204      	movs	r2, #4
 8016f76:	4619      	mov	r1, r3
 8016f78:	f7fe f9ee 	bl	8015358 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8016f7c:	4b5c      	ldr	r3, [pc, #368]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	2200      	movs	r2, #0
 8016f82:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016f8a:	2b03      	cmp	r3, #3
 8016f8c:	dd0c      	ble.n	8016fa8 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8016f8e:	4b58      	ldr	r3, [pc, #352]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	891b      	ldrh	r3, [r3, #8]
 8016f94:	b2db      	uxtb	r3, r3
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d106      	bne.n	8016fa8 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8016f9a:	4b56      	ldr	r3, [pc, #344]	; (80170f4 <RegionUS915NextChannel+0x1d4>)
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	4b54      	ldr	r3, [pc, #336]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8016fa6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	7a5b      	ldrb	r3, [r3, #9]
 8016fac:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8016fb8:	4b4d      	ldr	r3, [pc, #308]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016fbe:	4b4d      	ldr	r3, [pc, #308]	; (80170f4 <RegionUS915NextChannel+0x1d4>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8016fc4:	4b4c      	ldr	r3, [pc, #304]	; (80170f8 <RegionUS915NextChannel+0x1d8>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8016fca:	2348      	movs	r3, #72	; 0x48
 8016fcc:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	685b      	ldr	r3, [r3, #4]
 8016fdc:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	7a9b      	ldrb	r3, [r3, #10]
 8016fe2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016fec:	f107 0314 	add.w	r3, r7, #20
 8016ff0:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016ff2:	68fa      	ldr	r2, [r7, #12]
 8016ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016ff8:	320c      	adds	r2, #12
 8016ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ffe:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	7d1b      	ldrb	r3, [r3, #20]
 8017006:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	8adb      	ldrh	r3, [r3, #22]
 8017014:	4619      	mov	r1, r3
 8017016:	4610      	mov	r0, r2
 8017018:	f7fe ff10 	bl	8015e3c <GetTimeOnAir>
 801701c:	4603      	mov	r3, r0
 801701e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017020:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8017024:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017028:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	9301      	str	r3, [sp, #4]
 8017030:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017034:	9300      	str	r3, [sp, #0]
 8017036:	460b      	mov	r3, r1
 8017038:	6839      	ldr	r1, [r7, #0]
 801703a:	f7fe fd68 	bl	8015b0e <RegionCommonIdentifyChannels>
 801703e:	4603      	mov	r3, r0
 8017040:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017044:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8017048:	2b00      	cmp	r3, #0
 801704a:	d14a      	bne.n	80170e2 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	7a5b      	ldrb	r3, [r3, #9]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00e      	beq.n	8017072 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017054:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8017058:	3b01      	subs	r3, #1
 801705a:	4619      	mov	r1, r3
 801705c:	2000      	movs	r0, #0
 801705e:	f000 f89f 	bl	80171a0 <randr>
 8017062:	4603      	mov	r3, r0
 8017064:	3398      	adds	r3, #152	; 0x98
 8017066:	443b      	add	r3, r7
 8017068:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	701a      	strb	r2, [r3, #0]
 8017070:	e02e      	b.n	80170d0 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d10e      	bne.n	801709a <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801707c:	4b1c      	ldr	r3, [pc, #112]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017082:	4b1b      	ldr	r3, [pc, #108]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 8017084:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8017086:	330c      	adds	r3, #12
 8017088:	68ba      	ldr	r2, [r7, #8]
 801708a:	4619      	mov	r1, r3
 801708c:	f7fd fea2 	bl	8014dd4 <RegionBaseUSComputeNext125kHzJoinChannel>
 8017090:	4603      	mov	r3, r0
 8017092:	2b03      	cmp	r3, #3
 8017094:	d11c      	bne.n	80170d0 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017096:	2303      	movs	r3, #3
 8017098:	e025      	b.n	80170e6 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801709a:	2300      	movs	r3, #0
 801709c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80170a0:	e004      	b.n	80170ac <RegionUS915NextChannel+0x18c>
                {
                    i++;
 80170a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80170a6:	3301      	adds	r3, #1
 80170a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80170ac:	4b10      	ldr	r3, [pc, #64]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	891b      	ldrh	r3, [r3, #8]
 80170b2:	b2da      	uxtb	r2, r3
 80170b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80170b8:	fa42 f303 	asr.w	r3, r2, r3
 80170bc:	f003 0301 	and.w	r3, r3, #1
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d0ee      	beq.n	80170a2 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 80170c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80170c8:	3340      	adds	r3, #64	; 0x40
 80170ca:	b2da      	uxtb	r2, r3
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80170d0:	4b07      	ldr	r3, [pc, #28]	; (80170f0 <RegionUS915NextChannel+0x1d0>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	4618      	mov	r0, r3
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	2248      	movs	r2, #72	; 0x48
 80170dc:	4619      	mov	r1, r3
 80170de:	f7fe f8db 	bl	8015298 <RegionCommonChanDisable>
    }
    return status;
 80170e2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3798      	adds	r7, #152	; 0x98
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	20001a18 	.word	0x20001a18
 80170f4:	20001a1c 	.word	0x20001a1c
 80170f8:	20001a20 	.word	0x20001a20

080170fc <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80170fc:	b480      	push	{r7}
 80170fe:	b085      	sub	sp, #20
 8017100:	af00      	add	r7, sp, #0
 8017102:	4603      	mov	r3, r0
 8017104:	71fb      	strb	r3, [r7, #7]
 8017106:	460b      	mov	r3, r1
 8017108:	71bb      	strb	r3, [r7, #6]
 801710a:	4613      	mov	r3, r2
 801710c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801710e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017112:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017116:	4909      	ldr	r1, [pc, #36]	; (801713c <RegionUS915ApplyDrOffset+0x40>)
 8017118:	0092      	lsls	r2, r2, #2
 801711a:	440a      	add	r2, r1
 801711c:	4413      	add	r3, r2
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017126:	2b00      	cmp	r3, #0
 8017128:	da01      	bge.n	801712e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801712a:	2300      	movs	r3, #0
 801712c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801712e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8017130:	4618      	mov	r0, r3
 8017132:	3714      	adds	r7, #20
 8017134:	46bd      	mov	sp, r7
 8017136:	bc80      	pop	{r7}
 8017138:	4770      	bx	lr
 801713a:	bf00      	nop
 801713c:	0801cb98 	.word	0x0801cb98

08017140 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017140:	b480      	push	{r7}
 8017142:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017144:	4b0d      	ldr	r3, [pc, #52]	; (801717c <rand1+0x3c>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	4a0d      	ldr	r2, [pc, #52]	; (8017180 <rand1+0x40>)
 801714a:	fb02 f303 	mul.w	r3, r2, r3
 801714e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017152:	3339      	adds	r3, #57	; 0x39
 8017154:	4a09      	ldr	r2, [pc, #36]	; (801717c <rand1+0x3c>)
 8017156:	6013      	str	r3, [r2, #0]
 8017158:	4b08      	ldr	r3, [pc, #32]	; (801717c <rand1+0x3c>)
 801715a:	681a      	ldr	r2, [r3, #0]
 801715c:	2303      	movs	r3, #3
 801715e:	fba3 1302 	umull	r1, r3, r3, r2
 8017162:	1ad1      	subs	r1, r2, r3
 8017164:	0849      	lsrs	r1, r1, #1
 8017166:	440b      	add	r3, r1
 8017168:	0f99      	lsrs	r1, r3, #30
 801716a:	460b      	mov	r3, r1
 801716c:	07db      	lsls	r3, r3, #31
 801716e:	1a5b      	subs	r3, r3, r1
 8017170:	1ad1      	subs	r1, r2, r3
 8017172:	460b      	mov	r3, r1
}
 8017174:	4618      	mov	r0, r3
 8017176:	46bd      	mov	sp, r7
 8017178:	bc80      	pop	{r7}
 801717a:	4770      	bx	lr
 801717c:	20000130 	.word	0x20000130
 8017180:	41c64e6d 	.word	0x41c64e6d

08017184 <srand1>:

void srand1( uint32_t seed )
{
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
    next = seed;
 801718c:	4a03      	ldr	r2, [pc, #12]	; (801719c <srand1+0x18>)
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6013      	str	r3, [r2, #0]
}
 8017192:	bf00      	nop
 8017194:	370c      	adds	r7, #12
 8017196:	46bd      	mov	sp, r7
 8017198:	bc80      	pop	{r7}
 801719a:	4770      	bx	lr
 801719c:	20000130 	.word	0x20000130

080171a0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80171aa:	f7ff ffc9 	bl	8017140 <rand1>
 80171ae:	4602      	mov	r2, r0
 80171b0:	6839      	ldr	r1, [r7, #0]
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	1acb      	subs	r3, r1, r3
 80171b6:	3301      	adds	r3, #1
 80171b8:	fb92 f1f3 	sdiv	r1, r2, r3
 80171bc:	fb01 f303 	mul.w	r3, r1, r3
 80171c0:	1ad2      	subs	r2, r2, r3
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4413      	add	r3, r2
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3708      	adds	r7, #8
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}

080171ce <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80171ce:	b480      	push	{r7}
 80171d0:	b085      	sub	sp, #20
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	60f8      	str	r0, [r7, #12]
 80171d6:	60b9      	str	r1, [r7, #8]
 80171d8:	4613      	mov	r3, r2
 80171da:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80171dc:	e007      	b.n	80171ee <memcpy1+0x20>
    {
        *dst++ = *src++;
 80171de:	68ba      	ldr	r2, [r7, #8]
 80171e0:	1c53      	adds	r3, r2, #1
 80171e2:	60bb      	str	r3, [r7, #8]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	1c59      	adds	r1, r3, #1
 80171e8:	60f9      	str	r1, [r7, #12]
 80171ea:	7812      	ldrb	r2, [r2, #0]
 80171ec:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80171ee:	88fb      	ldrh	r3, [r7, #6]
 80171f0:	1e5a      	subs	r2, r3, #1
 80171f2:	80fa      	strh	r2, [r7, #6]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d1f2      	bne.n	80171de <memcpy1+0x10>
    }
}
 80171f8:	bf00      	nop
 80171fa:	bf00      	nop
 80171fc:	3714      	adds	r7, #20
 80171fe:	46bd      	mov	sp, r7
 8017200:	bc80      	pop	{r7}
 8017202:	4770      	bx	lr

08017204 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017204:	b480      	push	{r7}
 8017206:	b085      	sub	sp, #20
 8017208:	af00      	add	r7, sp, #0
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	4613      	mov	r3, r2
 8017210:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8017212:	88fb      	ldrh	r3, [r7, #6]
 8017214:	3b01      	subs	r3, #1
 8017216:	68fa      	ldr	r2, [r7, #12]
 8017218:	4413      	add	r3, r2
 801721a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801721c:	e007      	b.n	801722e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801721e:	68ba      	ldr	r2, [r7, #8]
 8017220:	1c53      	adds	r3, r2, #1
 8017222:	60bb      	str	r3, [r7, #8]
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	1e59      	subs	r1, r3, #1
 8017228:	60f9      	str	r1, [r7, #12]
 801722a:	7812      	ldrb	r2, [r2, #0]
 801722c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801722e:	88fb      	ldrh	r3, [r7, #6]
 8017230:	1e5a      	subs	r2, r3, #1
 8017232:	80fa      	strh	r2, [r7, #6]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d1f2      	bne.n	801721e <memcpyr+0x1a>
    }
}
 8017238:	bf00      	nop
 801723a:	bf00      	nop
 801723c:	3714      	adds	r7, #20
 801723e:	46bd      	mov	sp, r7
 8017240:	bc80      	pop	{r7}
 8017242:	4770      	bx	lr

08017244 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	460b      	mov	r3, r1
 801724e:	70fb      	strb	r3, [r7, #3]
 8017250:	4613      	mov	r3, r2
 8017252:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017254:	e004      	b.n	8017260 <memset1+0x1c>
    {
        *dst++ = value;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	1c5a      	adds	r2, r3, #1
 801725a:	607a      	str	r2, [r7, #4]
 801725c:	78fa      	ldrb	r2, [r7, #3]
 801725e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017260:	883b      	ldrh	r3, [r7, #0]
 8017262:	1e5a      	subs	r2, r3, #1
 8017264:	803a      	strh	r2, [r7, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d1f5      	bne.n	8017256 <memset1+0x12>
    }
}
 801726a:	bf00      	nop
 801726c:	bf00      	nop
 801726e:	370c      	adds	r7, #12
 8017270:	46bd      	mov	sp, r7
 8017272:	bc80      	pop	{r7}
 8017274:	4770      	bx	lr
	...

08017278 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017278:	b480      	push	{r7}
 801727a:	b085      	sub	sp, #20
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	460b      	mov	r3, r1
 8017282:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017288:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d101      	bne.n	8017294 <Crc32+0x1c>
    {
        return 0;
 8017290:	2300      	movs	r3, #0
 8017292:	e026      	b.n	80172e2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017294:	2300      	movs	r3, #0
 8017296:	817b      	strh	r3, [r7, #10]
 8017298:	e01d      	b.n	80172d6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801729a:	897b      	ldrh	r3, [r7, #10]
 801729c:	687a      	ldr	r2, [r7, #4]
 801729e:	4413      	add	r3, r2
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	461a      	mov	r2, r3
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	4053      	eors	r3, r2
 80172a8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80172aa:	2300      	movs	r3, #0
 80172ac:	813b      	strh	r3, [r7, #8]
 80172ae:	e00c      	b.n	80172ca <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	085a      	lsrs	r2, r3, #1
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	f003 0301 	and.w	r3, r3, #1
 80172ba:	425b      	negs	r3, r3
 80172bc:	490b      	ldr	r1, [pc, #44]	; (80172ec <Crc32+0x74>)
 80172be:	400b      	ands	r3, r1
 80172c0:	4053      	eors	r3, r2
 80172c2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80172c4:	893b      	ldrh	r3, [r7, #8]
 80172c6:	3301      	adds	r3, #1
 80172c8:	813b      	strh	r3, [r7, #8]
 80172ca:	893b      	ldrh	r3, [r7, #8]
 80172cc:	2b07      	cmp	r3, #7
 80172ce:	d9ef      	bls.n	80172b0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80172d0:	897b      	ldrh	r3, [r7, #10]
 80172d2:	3301      	adds	r3, #1
 80172d4:	817b      	strh	r3, [r7, #10]
 80172d6:	897a      	ldrh	r2, [r7, #10]
 80172d8:	887b      	ldrh	r3, [r7, #2]
 80172da:	429a      	cmp	r2, r3
 80172dc:	d3dd      	bcc.n	801729a <Crc32+0x22>
        }
    }

    return ~crc;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	43db      	mvns	r3, r3
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3714      	adds	r7, #20
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bc80      	pop	{r7}
 80172ea:	4770      	bx	lr
 80172ec:	edb88320 	.word	0xedb88320

080172f0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af02      	add	r7, sp, #8
 80172f6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80172f8:	4a24      	ldr	r2, [pc, #144]	; (801738c <RadioInit+0x9c>)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80172fe:	4b24      	ldr	r3, [pc, #144]	; (8017390 <RadioInit+0xa0>)
 8017300:	2200      	movs	r2, #0
 8017302:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017304:	4b22      	ldr	r3, [pc, #136]	; (8017390 <RadioInit+0xa0>)
 8017306:	2200      	movs	r2, #0
 8017308:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801730a:	4b21      	ldr	r3, [pc, #132]	; (8017390 <RadioInit+0xa0>)
 801730c:	2200      	movs	r2, #0
 801730e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017310:	4b1f      	ldr	r3, [pc, #124]	; (8017390 <RadioInit+0xa0>)
 8017312:	2200      	movs	r2, #0
 8017314:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8017316:	481f      	ldr	r0, [pc, #124]	; (8017394 <RadioInit+0xa4>)
 8017318:	f001 ffc2 	bl	80192a0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801731c:	4b1c      	ldr	r3, [pc, #112]	; (8017390 <RadioInit+0xa0>)
 801731e:	2200      	movs	r2, #0
 8017320:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017322:	4b1b      	ldr	r3, [pc, #108]	; (8017390 <RadioInit+0xa0>)
 8017324:	2200      	movs	r2, #0
 8017326:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017328:	f002 fa56 	bl	80197d8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801732c:	2100      	movs	r1, #0
 801732e:	2000      	movs	r0, #0
 8017330:	f002 fe22 	bl	8019f78 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017334:	2204      	movs	r2, #4
 8017336:	2100      	movs	r1, #0
 8017338:	2001      	movs	r0, #1
 801733a:	f002 fbdf 	bl	8019afc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801733e:	2300      	movs	r3, #0
 8017340:	2200      	movs	r2, #0
 8017342:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017346:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801734a:	f002 fb0f 	bl	801996c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801734e:	f000 fe99 	bl	8018084 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017352:	2300      	movs	r3, #0
 8017354:	9300      	str	r3, [sp, #0]
 8017356:	4b10      	ldr	r3, [pc, #64]	; (8017398 <RadioInit+0xa8>)
 8017358:	2200      	movs	r2, #0
 801735a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801735e:	480f      	ldr	r0, [pc, #60]	; (801739c <RadioInit+0xac>)
 8017360:	f004 f82c 	bl	801b3bc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017364:	2300      	movs	r3, #0
 8017366:	9300      	str	r3, [sp, #0]
 8017368:	4b0d      	ldr	r3, [pc, #52]	; (80173a0 <RadioInit+0xb0>)
 801736a:	2200      	movs	r2, #0
 801736c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017370:	480c      	ldr	r0, [pc, #48]	; (80173a4 <RadioInit+0xb4>)
 8017372:	f004 f823 	bl	801b3bc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017376:	4809      	ldr	r0, [pc, #36]	; (801739c <RadioInit+0xac>)
 8017378:	f004 f8c4 	bl	801b504 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801737c:	4809      	ldr	r0, [pc, #36]	; (80173a4 <RadioInit+0xb4>)
 801737e:	f004 f8c1 	bl	801b504 <UTIL_TIMER_Stop>
}
 8017382:	bf00      	nop
 8017384:	3708      	adds	r7, #8
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}
 801738a:	bf00      	nop
 801738c:	20001b24 	.word	0x20001b24
 8017390:	20001b28 	.word	0x20001b28
 8017394:	0801847d 	.word	0x0801847d
 8017398:	08018405 	.word	0x08018405
 801739c:	20001b84 	.word	0x20001b84
 80173a0:	08018419 	.word	0x08018419
 80173a4:	20001b9c 	.word	0x20001b9c

080173a8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80173ac:	f001 ffc0 	bl	8019330 <SUBGRF_GetOperatingMode>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b07      	cmp	r3, #7
 80173b4:	d00a      	beq.n	80173cc <RadioGetStatus+0x24>
 80173b6:	2b07      	cmp	r3, #7
 80173b8:	dc0a      	bgt.n	80173d0 <RadioGetStatus+0x28>
 80173ba:	2b04      	cmp	r3, #4
 80173bc:	d002      	beq.n	80173c4 <RadioGetStatus+0x1c>
 80173be:	2b05      	cmp	r3, #5
 80173c0:	d002      	beq.n	80173c8 <RadioGetStatus+0x20>
 80173c2:	e005      	b.n	80173d0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80173c4:	2302      	movs	r3, #2
 80173c6:	e004      	b.n	80173d2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80173c8:	2301      	movs	r3, #1
 80173ca:	e002      	b.n	80173d2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80173cc:	2303      	movs	r3, #3
 80173ce:	e000      	b.n	80173d2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80173d0:	2300      	movs	r3, #0
    }
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	bd80      	pop	{r7, pc}
	...

080173d8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	4603      	mov	r3, r0
 80173e0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80173e2:	4a2a      	ldr	r2, [pc, #168]	; (801748c <RadioSetModem+0xb4>)
 80173e4:	79fb      	ldrb	r3, [r7, #7]
 80173e6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80173e8:	79fb      	ldrb	r3, [r7, #7]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f003 f997 	bl	801a71e <RFW_SetRadioModem>
    switch( modem )
 80173f0:	79fb      	ldrb	r3, [r7, #7]
 80173f2:	2b05      	cmp	r3, #5
 80173f4:	d80e      	bhi.n	8017414 <RadioSetModem+0x3c>
 80173f6:	a201      	add	r2, pc, #4	; (adr r2, 80173fc <RadioSetModem+0x24>)
 80173f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173fc:	08017423 	.word	0x08017423
 8017400:	08017431 	.word	0x08017431
 8017404:	08017415 	.word	0x08017415
 8017408:	08017457 	.word	0x08017457
 801740c:	08017465 	.word	0x08017465
 8017410:	08017473 	.word	0x08017473
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017414:	2003      	movs	r0, #3
 8017416:	f002 fb4b 	bl	8019ab0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801741a:	4b1c      	ldr	r3, [pc, #112]	; (801748c <RadioSetModem+0xb4>)
 801741c:	2200      	movs	r2, #0
 801741e:	735a      	strb	r2, [r3, #13]
        break;
 8017420:	e02f      	b.n	8017482 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017422:	2000      	movs	r0, #0
 8017424:	f002 fb44 	bl	8019ab0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017428:	4b18      	ldr	r3, [pc, #96]	; (801748c <RadioSetModem+0xb4>)
 801742a:	2200      	movs	r2, #0
 801742c:	735a      	strb	r2, [r3, #13]
        break;
 801742e:	e028      	b.n	8017482 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017430:	2001      	movs	r0, #1
 8017432:	f002 fb3d 	bl	8019ab0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017436:	4b15      	ldr	r3, [pc, #84]	; (801748c <RadioSetModem+0xb4>)
 8017438:	7b5a      	ldrb	r2, [r3, #13]
 801743a:	4b14      	ldr	r3, [pc, #80]	; (801748c <RadioSetModem+0xb4>)
 801743c:	7b1b      	ldrb	r3, [r3, #12]
 801743e:	429a      	cmp	r2, r3
 8017440:	d01e      	beq.n	8017480 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017442:	4b12      	ldr	r3, [pc, #72]	; (801748c <RadioSetModem+0xb4>)
 8017444:	7b1a      	ldrb	r2, [r3, #12]
 8017446:	4b11      	ldr	r3, [pc, #68]	; (801748c <RadioSetModem+0xb4>)
 8017448:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801744a:	4b10      	ldr	r3, [pc, #64]	; (801748c <RadioSetModem+0xb4>)
 801744c:	7b5b      	ldrb	r3, [r3, #13]
 801744e:	4618      	mov	r0, r3
 8017450:	f000 ffa2 	bl	8018398 <RadioSetPublicNetwork>
        }
        break;
 8017454:	e014      	b.n	8017480 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017456:	2002      	movs	r0, #2
 8017458:	f002 fb2a 	bl	8019ab0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801745c:	4b0b      	ldr	r3, [pc, #44]	; (801748c <RadioSetModem+0xb4>)
 801745e:	2200      	movs	r2, #0
 8017460:	735a      	strb	r2, [r3, #13]
        break;
 8017462:	e00e      	b.n	8017482 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017464:	2002      	movs	r0, #2
 8017466:	f002 fb23 	bl	8019ab0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801746a:	4b08      	ldr	r3, [pc, #32]	; (801748c <RadioSetModem+0xb4>)
 801746c:	2200      	movs	r2, #0
 801746e:	735a      	strb	r2, [r3, #13]
        break;
 8017470:	e007      	b.n	8017482 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017472:	2000      	movs	r0, #0
 8017474:	f002 fb1c 	bl	8019ab0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017478:	4b04      	ldr	r3, [pc, #16]	; (801748c <RadioSetModem+0xb4>)
 801747a:	2200      	movs	r2, #0
 801747c:	735a      	strb	r2, [r3, #13]
        break;
 801747e:	e000      	b.n	8017482 <RadioSetModem+0xaa>
        break;
 8017480:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017482:	bf00      	nop
 8017484:	3708      	adds	r7, #8
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop
 801748c:	20001b28 	.word	0x20001b28

08017490 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b082      	sub	sp, #8
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f002 fac3 	bl	8019a24 <SUBGRF_SetRfFrequency>
}
 801749e:	bf00      	nop
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}

080174a6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80174a6:	b580      	push	{r7, lr}
 80174a8:	b090      	sub	sp, #64	; 0x40
 80174aa:	af0a      	add	r7, sp, #40	; 0x28
 80174ac:	60f8      	str	r0, [r7, #12]
 80174ae:	60b9      	str	r1, [r7, #8]
 80174b0:	603b      	str	r3, [r7, #0]
 80174b2:	4613      	mov	r3, r2
 80174b4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80174b6:	2301      	movs	r3, #1
 80174b8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80174ba:	2300      	movs	r3, #0
 80174bc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80174be:	2300      	movs	r3, #0
 80174c0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80174c2:	f000 fdf2 	bl	80180aa <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80174c6:	2000      	movs	r0, #0
 80174c8:	f7ff ff86 	bl	80173d8 <RadioSetModem>

    RadioSetChannel( freq );
 80174cc:	68f8      	ldr	r0, [r7, #12]
 80174ce:	f7ff ffdf 	bl	8017490 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80174d2:	2301      	movs	r3, #1
 80174d4:	9309      	str	r3, [sp, #36]	; 0x24
 80174d6:	2300      	movs	r3, #0
 80174d8:	9308      	str	r3, [sp, #32]
 80174da:	2300      	movs	r3, #0
 80174dc:	9307      	str	r3, [sp, #28]
 80174de:	2300      	movs	r3, #0
 80174e0:	9306      	str	r3, [sp, #24]
 80174e2:	2300      	movs	r3, #0
 80174e4:	9305      	str	r3, [sp, #20]
 80174e6:	2300      	movs	r3, #0
 80174e8:	9304      	str	r3, [sp, #16]
 80174ea:	2300      	movs	r3, #0
 80174ec:	9303      	str	r3, [sp, #12]
 80174ee:	2300      	movs	r3, #0
 80174f0:	9302      	str	r3, [sp, #8]
 80174f2:	2303      	movs	r3, #3
 80174f4:	9301      	str	r3, [sp, #4]
 80174f6:	68bb      	ldr	r3, [r7, #8]
 80174f8:	9300      	str	r3, [sp, #0]
 80174fa:	2300      	movs	r3, #0
 80174fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8017500:	68b9      	ldr	r1, [r7, #8]
 8017502:	2000      	movs	r0, #0
 8017504:	f000 f83c 	bl	8017580 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017508:	2000      	movs	r0, #0
 801750a:	f000 fdd5 	bl	80180b8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801750e:	f000 ff71 	bl	80183f4 <RadioGetWakeupTime>
 8017512:	4603      	mov	r3, r0
 8017514:	4618      	mov	r0, r3
 8017516:	f7ea fc9b 	bl	8001e50 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801751a:	f004 f90d 	bl	801b738 <UTIL_TIMER_GetCurrentTime>
 801751e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017520:	e00d      	b.n	801753e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017522:	2000      	movs	r0, #0
 8017524:	f000 feb6 	bl	8018294 <RadioRssi>
 8017528:	4603      	mov	r3, r0
 801752a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801752c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017534:	429a      	cmp	r2, r3
 8017536:	dd02      	ble.n	801753e <RadioIsChannelFree+0x98>
        {
            status = false;
 8017538:	2300      	movs	r3, #0
 801753a:	75fb      	strb	r3, [r7, #23]
            break;
 801753c:	e006      	b.n	801754c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801753e:	6938      	ldr	r0, [r7, #16]
 8017540:	f004 f90c 	bl	801b75c <UTIL_TIMER_GetElapsedTime>
 8017544:	4602      	mov	r2, r0
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	4293      	cmp	r3, r2
 801754a:	d8ea      	bhi.n	8017522 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801754c:	f000 fdad 	bl	80180aa <RadioStandby>

    return status;
 8017550:	7dfb      	ldrb	r3, [r7, #23]
}
 8017552:	4618      	mov	r0, r3
 8017554:	3718      	adds	r7, #24
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}

0801755a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b082      	sub	sp, #8
 801755e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017560:	2300      	movs	r3, #0
 8017562:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017564:	2300      	movs	r3, #0
 8017566:	2200      	movs	r2, #0
 8017568:	2100      	movs	r1, #0
 801756a:	2000      	movs	r0, #0
 801756c:	f002 f9fe 	bl	801996c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017570:	f001 ffaf 	bl	80194d2 <SUBGRF_GetRandom>
 8017574:	6078      	str	r0, [r7, #4]

    return rnd;
 8017576:	687b      	ldr	r3, [r7, #4]
}
 8017578:	4618      	mov	r0, r3
 801757a:	3708      	adds	r7, #8
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}

08017580 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b08a      	sub	sp, #40	; 0x28
 8017584:	af00      	add	r7, sp, #0
 8017586:	60b9      	str	r1, [r7, #8]
 8017588:	607a      	str	r2, [r7, #4]
 801758a:	461a      	mov	r2, r3
 801758c:	4603      	mov	r3, r0
 801758e:	73fb      	strb	r3, [r7, #15]
 8017590:	4613      	mov	r3, r2
 8017592:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017594:	4ab9      	ldr	r2, [pc, #740]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017596:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801759a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801759c:	f003 f87d 	bl	801a69a <RFW_DeInit>
    if( rxContinuous == true )
 80175a0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d001      	beq.n	80175ac <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80175a8:	2300      	movs	r3, #0
 80175aa:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80175ac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d004      	beq.n	80175be <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80175b4:	4ab2      	ldr	r2, [pc, #712]	; (8017880 <RadioSetRxConfig+0x300>)
 80175b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80175ba:	7013      	strb	r3, [r2, #0]
 80175bc:	e002      	b.n	80175c4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80175be:	4bb0      	ldr	r3, [pc, #704]	; (8017880 <RadioSetRxConfig+0x300>)
 80175c0:	22ff      	movs	r2, #255	; 0xff
 80175c2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
 80175c6:	2b05      	cmp	r3, #5
 80175c8:	d009      	beq.n	80175de <RadioSetRxConfig+0x5e>
 80175ca:	2b05      	cmp	r3, #5
 80175cc:	f300 81d7 	bgt.w	801797e <RadioSetRxConfig+0x3fe>
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	f000 80bf 	beq.w	8017754 <RadioSetRxConfig+0x1d4>
 80175d6:	2b01      	cmp	r3, #1
 80175d8:	f000 8124 	beq.w	8017824 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80175dc:	e1cf      	b.n	801797e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80175de:	2001      	movs	r0, #1
 80175e0:	f002 f8bc 	bl	801975c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80175e4:	4ba5      	ldr	r3, [pc, #660]	; (801787c <RadioSetRxConfig+0x2fc>)
 80175e6:	2200      	movs	r2, #0
 80175e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80175ec:	4aa3      	ldr	r2, [pc, #652]	; (801787c <RadioSetRxConfig+0x2fc>)
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80175f2:	4ba2      	ldr	r3, [pc, #648]	; (801787c <RadioSetRxConfig+0x2fc>)
 80175f4:	2209      	movs	r2, #9
 80175f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80175fa:	4ba0      	ldr	r3, [pc, #640]	; (801787c <RadioSetRxConfig+0x2fc>)
 80175fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017600:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017602:	68b8      	ldr	r0, [r7, #8]
 8017604:	f002 ff7c 	bl	801a500 <SUBGRF_GetFskBandwidthRegValue>
 8017608:	4603      	mov	r3, r0
 801760a:	461a      	mov	r2, r3
 801760c:	4b9b      	ldr	r3, [pc, #620]	; (801787c <RadioSetRxConfig+0x2fc>)
 801760e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017612:	4b9a      	ldr	r3, [pc, #616]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017614:	2200      	movs	r2, #0
 8017616:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017618:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801761a:	00db      	lsls	r3, r3, #3
 801761c:	b29a      	uxth	r2, r3
 801761e:	4b97      	ldr	r3, [pc, #604]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017620:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017622:	4b96      	ldr	r3, [pc, #600]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017624:	2200      	movs	r2, #0
 8017626:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017628:	4b94      	ldr	r3, [pc, #592]	; (801787c <RadioSetRxConfig+0x2fc>)
 801762a:	2210      	movs	r2, #16
 801762c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801762e:	4b93      	ldr	r3, [pc, #588]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017630:	2200      	movs	r2, #0
 8017632:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017634:	4b91      	ldr	r3, [pc, #580]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017636:	2200      	movs	r2, #0
 8017638:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801763a:	4b91      	ldr	r3, [pc, #580]	; (8017880 <RadioSetRxConfig+0x300>)
 801763c:	781a      	ldrb	r2, [r3, #0]
 801763e:	4b8f      	ldr	r3, [pc, #572]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017640:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017642:	4b8e      	ldr	r3, [pc, #568]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017644:	2201      	movs	r2, #1
 8017646:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017648:	4b8c      	ldr	r3, [pc, #560]	; (801787c <RadioSetRxConfig+0x2fc>)
 801764a:	2200      	movs	r2, #0
 801764c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801764e:	2005      	movs	r0, #5
 8017650:	f7ff fec2 	bl	80173d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017654:	488b      	ldr	r0, [pc, #556]	; (8017884 <RadioSetRxConfig+0x304>)
 8017656:	f002 fb1f 	bl	8019c98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801765a:	488b      	ldr	r0, [pc, #556]	; (8017888 <RadioSetRxConfig+0x308>)
 801765c:	f002 fbee 	bl	8019e3c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017660:	4a8a      	ldr	r2, [pc, #552]	; (801788c <RadioSetRxConfig+0x30c>)
 8017662:	f107 031c 	add.w	r3, r7, #28
 8017666:	e892 0003 	ldmia.w	r2, {r0, r1}
 801766a:	e883 0003 	stmia.w	r3, {r0, r1}
 801766e:	f107 031c 	add.w	r3, r7, #28
 8017672:	4618      	mov	r0, r3
 8017674:	f001 feab 	bl	80193ce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017678:	f240 10ff 	movw	r0, #511	; 0x1ff
 801767c:	f001 fef6 	bl	801946c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017680:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8017684:	f000 fe25 	bl	80182d2 <RadioRead>
 8017688:	4603      	mov	r3, r0
 801768a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801768e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017692:	f023 0310 	bic.w	r3, r3, #16
 8017696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801769a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801769e:	4619      	mov	r1, r3
 80176a0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80176a4:	f000 fe03 	bl	80182ae <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80176a8:	2104      	movs	r1, #4
 80176aa:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80176ae:	f000 fdfe 	bl	80182ae <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80176b2:	f640 009b 	movw	r0, #2203	; 0x89b
 80176b6:	f000 fe0c 	bl	80182d2 <RadioRead>
 80176ba:	4603      	mov	r3, r0
 80176bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80176c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176c4:	f023 031c 	bic.w	r3, r3, #28
 80176c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80176cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176d0:	f043 0308 	orr.w	r3, r3, #8
 80176d4:	b2db      	uxtb	r3, r3
 80176d6:	4619      	mov	r1, r3
 80176d8:	f640 009b 	movw	r0, #2203	; 0x89b
 80176dc:	f000 fde7 	bl	80182ae <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80176e0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80176e4:	f000 fdf5 	bl	80182d2 <RadioRead>
 80176e8:	4603      	mov	r3, r0
 80176ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80176ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176f2:	f023 0318 	bic.w	r3, r3, #24
 80176f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80176fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176fe:	f043 0318 	orr.w	r3, r3, #24
 8017702:	b2db      	uxtb	r3, r3
 8017704:	4619      	mov	r1, r3
 8017706:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801770a:	f000 fdd0 	bl	80182ae <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801770e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8017712:	f000 fdde 	bl	80182d2 <RadioRead>
 8017716:	4603      	mov	r3, r0
 8017718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801771c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801772c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8017730:	b2db      	uxtb	r3, r3
 8017732:	4619      	mov	r1, r3
 8017734:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8017738:	f000 fdb9 	bl	80182ae <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801773c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801773e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017742:	fb02 f303 	mul.w	r3, r2, r3
 8017746:	461a      	mov	r2, r3
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	fbb2 f3f3 	udiv	r3, r2, r3
 801774e:	4a4b      	ldr	r2, [pc, #300]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017750:	6093      	str	r3, [r2, #8]
            break;
 8017752:	e115      	b.n	8017980 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017754:	2000      	movs	r0, #0
 8017756:	f002 f801 	bl	801975c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801775a:	4b48      	ldr	r3, [pc, #288]	; (801787c <RadioSetRxConfig+0x2fc>)
 801775c:	2200      	movs	r2, #0
 801775e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017762:	4a46      	ldr	r2, [pc, #280]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017768:	4b44      	ldr	r3, [pc, #272]	; (801787c <RadioSetRxConfig+0x2fc>)
 801776a:	220b      	movs	r2, #11
 801776c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017770:	68b8      	ldr	r0, [r7, #8]
 8017772:	f002 fec5 	bl	801a500 <SUBGRF_GetFskBandwidthRegValue>
 8017776:	4603      	mov	r3, r0
 8017778:	461a      	mov	r2, r3
 801777a:	4b40      	ldr	r3, [pc, #256]	; (801787c <RadioSetRxConfig+0x2fc>)
 801777c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017780:	4b3e      	ldr	r3, [pc, #248]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017782:	2200      	movs	r2, #0
 8017784:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017786:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017788:	00db      	lsls	r3, r3, #3
 801778a:	b29a      	uxth	r2, r3
 801778c:	4b3b      	ldr	r3, [pc, #236]	; (801787c <RadioSetRxConfig+0x2fc>)
 801778e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017790:	4b3a      	ldr	r3, [pc, #232]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017792:	2204      	movs	r2, #4
 8017794:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017796:	4b39      	ldr	r3, [pc, #228]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017798:	2218      	movs	r2, #24
 801779a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801779c:	4b37      	ldr	r3, [pc, #220]	; (801787c <RadioSetRxConfig+0x2fc>)
 801779e:	2200      	movs	r2, #0
 80177a0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80177a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80177a6:	f083 0301 	eor.w	r3, r3, #1
 80177aa:	b2db      	uxtb	r3, r3
 80177ac:	461a      	mov	r2, r3
 80177ae:	4b33      	ldr	r3, [pc, #204]	; (801787c <RadioSetRxConfig+0x2fc>)
 80177b0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80177b2:	4b33      	ldr	r3, [pc, #204]	; (8017880 <RadioSetRxConfig+0x300>)
 80177b4:	781a      	ldrb	r2, [r3, #0]
 80177b6:	4b31      	ldr	r3, [pc, #196]	; (801787c <RadioSetRxConfig+0x2fc>)
 80177b8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80177ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d003      	beq.n	80177ca <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80177c2:	4b2e      	ldr	r3, [pc, #184]	; (801787c <RadioSetRxConfig+0x2fc>)
 80177c4:	22f2      	movs	r2, #242	; 0xf2
 80177c6:	75da      	strb	r2, [r3, #23]
 80177c8:	e002      	b.n	80177d0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80177ca:	4b2c      	ldr	r3, [pc, #176]	; (801787c <RadioSetRxConfig+0x2fc>)
 80177cc:	2201      	movs	r2, #1
 80177ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80177d0:	4b2a      	ldr	r3, [pc, #168]	; (801787c <RadioSetRxConfig+0x2fc>)
 80177d2:	2201      	movs	r2, #1
 80177d4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80177d6:	f000 fc68 	bl	80180aa <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80177da:	2000      	movs	r0, #0
 80177dc:	f7ff fdfc 	bl	80173d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80177e0:	4828      	ldr	r0, [pc, #160]	; (8017884 <RadioSetRxConfig+0x304>)
 80177e2:	f002 fa59 	bl	8019c98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177e6:	4828      	ldr	r0, [pc, #160]	; (8017888 <RadioSetRxConfig+0x308>)
 80177e8:	f002 fb28 	bl	8019e3c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80177ec:	4a28      	ldr	r2, [pc, #160]	; (8017890 <RadioSetRxConfig+0x310>)
 80177ee:	f107 0314 	add.w	r3, r7, #20
 80177f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80177f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80177fa:	f107 0314 	add.w	r3, r7, #20
 80177fe:	4618      	mov	r0, r3
 8017800:	f001 fde5 	bl	80193ce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017804:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017808:	f001 fe30 	bl	801946c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801780c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801780e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017812:	fb02 f303 	mul.w	r3, r2, r3
 8017816:	461a      	mov	r2, r3
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	fbb2 f3f3 	udiv	r3, r2, r3
 801781e:	4a17      	ldr	r2, [pc, #92]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017820:	6093      	str	r3, [r2, #8]
            break;
 8017822:	e0ad      	b.n	8017980 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017824:	2000      	movs	r0, #0
 8017826:	f001 ff99 	bl	801975c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801782a:	4b14      	ldr	r3, [pc, #80]	; (801787c <RadioSetRxConfig+0x2fc>)
 801782c:	2201      	movs	r2, #1
 801782e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	b2da      	uxtb	r2, r3
 8017836:	4b11      	ldr	r3, [pc, #68]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801783c:	4a15      	ldr	r2, [pc, #84]	; (8017894 <RadioSetRxConfig+0x314>)
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	4413      	add	r3, r2
 8017842:	781a      	ldrb	r2, [r3, #0]
 8017844:	4b0d      	ldr	r3, [pc, #52]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801784a:	4a0c      	ldr	r2, [pc, #48]	; (801787c <RadioSetRxConfig+0x2fc>)
 801784c:	7bbb      	ldrb	r3, [r7, #14]
 801784e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017852:	68bb      	ldr	r3, [r7, #8]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d105      	bne.n	8017864 <RadioSetRxConfig+0x2e4>
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	2b0b      	cmp	r3, #11
 801785c:	d008      	beq.n	8017870 <RadioSetRxConfig+0x2f0>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2b0c      	cmp	r3, #12
 8017862:	d005      	beq.n	8017870 <RadioSetRxConfig+0x2f0>
 8017864:	68bb      	ldr	r3, [r7, #8]
 8017866:	2b01      	cmp	r3, #1
 8017868:	d116      	bne.n	8017898 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	2b0c      	cmp	r3, #12
 801786e:	d113      	bne.n	8017898 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017870:	4b02      	ldr	r3, [pc, #8]	; (801787c <RadioSetRxConfig+0x2fc>)
 8017872:	2201      	movs	r2, #1
 8017874:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017878:	e012      	b.n	80178a0 <RadioSetRxConfig+0x320>
 801787a:	bf00      	nop
 801787c:	20001b28 	.word	0x20001b28
 8017880:	20000134 	.word	0x20000134
 8017884:	20001b60 	.word	0x20001b60
 8017888:	20001b36 	.word	0x20001b36
 801788c:	0801c620 	.word	0x0801c620
 8017890:	0801c628 	.word	0x0801c628
 8017894:	0801cc58 	.word	0x0801cc58
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017898:	4b3b      	ldr	r3, [pc, #236]	; (8017988 <RadioSetRxConfig+0x408>)
 801789a:	2200      	movs	r2, #0
 801789c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80178a0:	4b39      	ldr	r3, [pc, #228]	; (8017988 <RadioSetRxConfig+0x408>)
 80178a2:	2201      	movs	r2, #1
 80178a4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80178a6:	4b38      	ldr	r3, [pc, #224]	; (8017988 <RadioSetRxConfig+0x408>)
 80178a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80178ac:	2b05      	cmp	r3, #5
 80178ae:	d004      	beq.n	80178ba <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80178b0:	4b35      	ldr	r3, [pc, #212]	; (8017988 <RadioSetRxConfig+0x408>)
 80178b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80178b6:	2b06      	cmp	r3, #6
 80178b8:	d10a      	bne.n	80178d0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80178ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80178bc:	2b0b      	cmp	r3, #11
 80178be:	d803      	bhi.n	80178c8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80178c0:	4b31      	ldr	r3, [pc, #196]	; (8017988 <RadioSetRxConfig+0x408>)
 80178c2:	220c      	movs	r2, #12
 80178c4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80178c6:	e006      	b.n	80178d6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80178c8:	4a2f      	ldr	r2, [pc, #188]	; (8017988 <RadioSetRxConfig+0x408>)
 80178ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80178cc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80178ce:	e002      	b.n	80178d6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80178d0:	4a2d      	ldr	r2, [pc, #180]	; (8017988 <RadioSetRxConfig+0x408>)
 80178d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80178d4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80178d6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80178da:	4b2b      	ldr	r3, [pc, #172]	; (8017988 <RadioSetRxConfig+0x408>)
 80178dc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80178de:	4b2b      	ldr	r3, [pc, #172]	; (801798c <RadioSetRxConfig+0x40c>)
 80178e0:	781a      	ldrb	r2, [r3, #0]
 80178e2:	4b29      	ldr	r3, [pc, #164]	; (8017988 <RadioSetRxConfig+0x408>)
 80178e4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80178e6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80178ea:	4b27      	ldr	r3, [pc, #156]	; (8017988 <RadioSetRxConfig+0x408>)
 80178ec:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80178f0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80178f4:	4b24      	ldr	r3, [pc, #144]	; (8017988 <RadioSetRxConfig+0x408>)
 80178f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80178fa:	f000 fbd6 	bl	80180aa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80178fe:	2001      	movs	r0, #1
 8017900:	f7ff fd6a 	bl	80173d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017904:	4822      	ldr	r0, [pc, #136]	; (8017990 <RadioSetRxConfig+0x410>)
 8017906:	f002 f9c7 	bl	8019c98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801790a:	4822      	ldr	r0, [pc, #136]	; (8017994 <RadioSetRxConfig+0x414>)
 801790c:	f002 fa96 	bl	8019e3c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017910:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017912:	b2db      	uxtb	r3, r3
 8017914:	4618      	mov	r0, r3
 8017916:	f001 ff30 	bl	801977a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801791a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801791e:	f002 fbe9 	bl	801a0f4 <SUBGRF_ReadRegister>
 8017922:	4603      	mov	r3, r0
 8017924:	f003 0301 	and.w	r3, r3, #1
 8017928:	b2db      	uxtb	r3, r3
 801792a:	4619      	mov	r1, r3
 801792c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8017930:	f002 fbcc 	bl	801a0cc <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017934:	4b14      	ldr	r3, [pc, #80]	; (8017988 <RadioSetRxConfig+0x408>)
 8017936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801793a:	2b01      	cmp	r3, #1
 801793c:	d10d      	bne.n	801795a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801793e:	f240 7036 	movw	r0, #1846	; 0x736
 8017942:	f002 fbd7 	bl	801a0f4 <SUBGRF_ReadRegister>
 8017946:	4603      	mov	r3, r0
 8017948:	f023 0304 	bic.w	r3, r3, #4
 801794c:	b2db      	uxtb	r3, r3
 801794e:	4619      	mov	r1, r3
 8017950:	f240 7036 	movw	r0, #1846	; 0x736
 8017954:	f002 fbba 	bl	801a0cc <SUBGRF_WriteRegister>
 8017958:	e00c      	b.n	8017974 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801795a:	f240 7036 	movw	r0, #1846	; 0x736
 801795e:	f002 fbc9 	bl	801a0f4 <SUBGRF_ReadRegister>
 8017962:	4603      	mov	r3, r0
 8017964:	f043 0304 	orr.w	r3, r3, #4
 8017968:	b2db      	uxtb	r3, r3
 801796a:	4619      	mov	r1, r3
 801796c:	f240 7036 	movw	r0, #1846	; 0x736
 8017970:	f002 fbac 	bl	801a0cc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017974:	4b04      	ldr	r3, [pc, #16]	; (8017988 <RadioSetRxConfig+0x408>)
 8017976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801797a:	609a      	str	r2, [r3, #8]
            break;
 801797c:	e000      	b.n	8017980 <RadioSetRxConfig+0x400>
            break;
 801797e:	bf00      	nop
    }
}
 8017980:	bf00      	nop
 8017982:	3728      	adds	r7, #40	; 0x28
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	20001b28 	.word	0x20001b28
 801798c:	20000134 	.word	0x20000134
 8017990:	20001b60 	.word	0x20001b60
 8017994:	20001b36 	.word	0x20001b36

08017998 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b086      	sub	sp, #24
 801799c:	af00      	add	r7, sp, #0
 801799e:	60ba      	str	r2, [r7, #8]
 80179a0:	607b      	str	r3, [r7, #4]
 80179a2:	4603      	mov	r3, r0
 80179a4:	73fb      	strb	r3, [r7, #15]
 80179a6:	460b      	mov	r3, r1
 80179a8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80179aa:	f002 fe76 	bl	801a69a <RFW_DeInit>
    switch( modem )
 80179ae:	7bfb      	ldrb	r3, [r7, #15]
 80179b0:	2b04      	cmp	r3, #4
 80179b2:	f000 80c7 	beq.w	8017b44 <RadioSetTxConfig+0x1ac>
 80179b6:	2b04      	cmp	r3, #4
 80179b8:	f300 80d6 	bgt.w	8017b68 <RadioSetTxConfig+0x1d0>
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d002      	beq.n	80179c6 <RadioSetTxConfig+0x2e>
 80179c0:	2b01      	cmp	r3, #1
 80179c2:	d059      	beq.n	8017a78 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80179c4:	e0d0      	b.n	8017b68 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80179c6:	4b77      	ldr	r3, [pc, #476]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 80179c8:	2200      	movs	r2, #0
 80179ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80179ce:	4a75      	ldr	r2, [pc, #468]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 80179d0:	6a3b      	ldr	r3, [r7, #32]
 80179d2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80179d4:	4b73      	ldr	r3, [pc, #460]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 80179d6:	220b      	movs	r2, #11
 80179d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f002 fd8f 	bl	801a500 <SUBGRF_GetFskBandwidthRegValue>
 80179e2:	4603      	mov	r3, r0
 80179e4:	461a      	mov	r2, r3
 80179e6:	4b6f      	ldr	r3, [pc, #444]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 80179e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80179ec:	4a6d      	ldr	r2, [pc, #436]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80179f2:	4b6c      	ldr	r3, [pc, #432]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80179f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80179fa:	00db      	lsls	r3, r3, #3
 80179fc:	b29a      	uxth	r2, r3
 80179fe:	4b69      	ldr	r3, [pc, #420]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a00:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017a02:	4b68      	ldr	r3, [pc, #416]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a04:	2204      	movs	r2, #4
 8017a06:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017a08:	4b66      	ldr	r3, [pc, #408]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a0a:	2218      	movs	r2, #24
 8017a0c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017a0e:	4b65      	ldr	r3, [pc, #404]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a10:	2200      	movs	r2, #0
 8017a12:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017a14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017a18:	f083 0301 	eor.w	r3, r3, #1
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	461a      	mov	r2, r3
 8017a20:	4b60      	ldr	r3, [pc, #384]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a22:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017a24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d003      	beq.n	8017a34 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017a2c:	4b5d      	ldr	r3, [pc, #372]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a2e:	22f2      	movs	r2, #242	; 0xf2
 8017a30:	75da      	strb	r2, [r3, #23]
 8017a32:	e002      	b.n	8017a3a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017a34:	4b5b      	ldr	r3, [pc, #364]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a36:	2201      	movs	r2, #1
 8017a38:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017a3a:	4b5a      	ldr	r3, [pc, #360]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017a40:	f000 fb33 	bl	80180aa <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017a44:	2000      	movs	r0, #0
 8017a46:	f7ff fcc7 	bl	80173d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a4a:	4857      	ldr	r0, [pc, #348]	; (8017ba8 <RadioSetTxConfig+0x210>)
 8017a4c:	f002 f924 	bl	8019c98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017a50:	4856      	ldr	r0, [pc, #344]	; (8017bac <RadioSetTxConfig+0x214>)
 8017a52:	f002 f9f3 	bl	8019e3c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017a56:	4a56      	ldr	r2, [pc, #344]	; (8017bb0 <RadioSetTxConfig+0x218>)
 8017a58:	f107 0310 	add.w	r3, r7, #16
 8017a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a60:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a64:	f107 0310 	add.w	r3, r7, #16
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f001 fcb0 	bl	80193ce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017a72:	f001 fcfb 	bl	801946c <SUBGRF_SetWhiteningSeed>
            break;
 8017a76:	e078      	b.n	8017b6a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017a78:	4b4a      	ldr	r3, [pc, #296]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a7a:	2201      	movs	r2, #1
 8017a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017a80:	6a3b      	ldr	r3, [r7, #32]
 8017a82:	b2da      	uxtb	r2, r3
 8017a84:	4b47      	ldr	r3, [pc, #284]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017a8a:	4a4a      	ldr	r2, [pc, #296]	; (8017bb4 <RadioSetTxConfig+0x21c>)
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	4413      	add	r3, r2
 8017a90:	781a      	ldrb	r2, [r3, #0]
 8017a92:	4b44      	ldr	r3, [pc, #272]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017a98:	4a42      	ldr	r2, [pc, #264]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a9e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d105      	bne.n	8017ab4 <RadioSetTxConfig+0x11c>
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	2b0b      	cmp	r3, #11
 8017aac:	d008      	beq.n	8017ac0 <RadioSetTxConfig+0x128>
 8017aae:	6a3b      	ldr	r3, [r7, #32]
 8017ab0:	2b0c      	cmp	r3, #12
 8017ab2:	d005      	beq.n	8017ac0 <RadioSetTxConfig+0x128>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2b01      	cmp	r3, #1
 8017ab8:	d107      	bne.n	8017aca <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017aba:	6a3b      	ldr	r3, [r7, #32]
 8017abc:	2b0c      	cmp	r3, #12
 8017abe:	d104      	bne.n	8017aca <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017ac0:	4b38      	ldr	r3, [pc, #224]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017ac2:	2201      	movs	r2, #1
 8017ac4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017ac8:	e003      	b.n	8017ad2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017aca:	4b36      	ldr	r3, [pc, #216]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017acc:	2200      	movs	r2, #0
 8017ace:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017ad2:	4b34      	ldr	r3, [pc, #208]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017ad4:	2201      	movs	r2, #1
 8017ad6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017ad8:	4b32      	ldr	r3, [pc, #200]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017ade:	2b05      	cmp	r3, #5
 8017ae0:	d004      	beq.n	8017aec <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017ae2:	4b30      	ldr	r3, [pc, #192]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017ae8:	2b06      	cmp	r3, #6
 8017aea:	d10a      	bne.n	8017b02 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017aec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017aee:	2b0b      	cmp	r3, #11
 8017af0:	d803      	bhi.n	8017afa <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017af2:	4b2c      	ldr	r3, [pc, #176]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017af4:	220c      	movs	r2, #12
 8017af6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017af8:	e006      	b.n	8017b08 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017afa:	4a2a      	ldr	r2, [pc, #168]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017afe:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017b00:	e002      	b.n	8017b08 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017b02:	4a28      	ldr	r2, [pc, #160]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017b06:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017b08:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017b0c:	4b25      	ldr	r3, [pc, #148]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b0e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017b10:	4b29      	ldr	r3, [pc, #164]	; (8017bb8 <RadioSetTxConfig+0x220>)
 8017b12:	781a      	ldrb	r2, [r3, #0]
 8017b14:	4b23      	ldr	r3, [pc, #140]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b16:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017b18:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017b1c:	4b21      	ldr	r3, [pc, #132]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b1e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017b22:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017b26:	4b1f      	ldr	r3, [pc, #124]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017b2c:	f000 fabd 	bl	80180aa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017b30:	2001      	movs	r0, #1
 8017b32:	f7ff fc51 	bl	80173d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017b36:	481c      	ldr	r0, [pc, #112]	; (8017ba8 <RadioSetTxConfig+0x210>)
 8017b38:	f002 f8ae 	bl	8019c98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b3c:	481b      	ldr	r0, [pc, #108]	; (8017bac <RadioSetTxConfig+0x214>)
 8017b3e:	f002 f97d 	bl	8019e3c <SUBGRF_SetPacketParams>
            break;
 8017b42:	e012      	b.n	8017b6a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017b44:	2004      	movs	r0, #4
 8017b46:	f7ff fc47 	bl	80173d8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017b4a:	4b16      	ldr	r3, [pc, #88]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b4c:	2202      	movs	r2, #2
 8017b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017b52:	4a14      	ldr	r2, [pc, #80]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b54:	6a3b      	ldr	r3, [r7, #32]
 8017b56:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017b58:	4b12      	ldr	r3, [pc, #72]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b5a:	2216      	movs	r2, #22
 8017b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017b60:	4811      	ldr	r0, [pc, #68]	; (8017ba8 <RadioSetTxConfig+0x210>)
 8017b62:	f002 f899 	bl	8019c98 <SUBGRF_SetModulationParams>
            break;
 8017b66:	e000      	b.n	8017b6a <RadioSetTxConfig+0x1d2>
            break;
 8017b68:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f002 fbc8 	bl	801a304 <SUBGRF_SetRfTxPower>
 8017b74:	4603      	mov	r3, r0
 8017b76:	461a      	mov	r2, r3
 8017b78:	4b0a      	ldr	r3, [pc, #40]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b7a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017b7e:	210e      	movs	r1, #14
 8017b80:	f640 101f 	movw	r0, #2335	; 0x91f
 8017b84:	f002 faa2 	bl	801a0cc <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017b88:	4b06      	ldr	r3, [pc, #24]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f002 fd97 	bl	801a6c2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017b94:	4a03      	ldr	r2, [pc, #12]	; (8017ba4 <RadioSetTxConfig+0x20c>)
 8017b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b98:	6053      	str	r3, [r2, #4]
}
 8017b9a:	bf00      	nop
 8017b9c:	3718      	adds	r7, #24
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	20001b28 	.word	0x20001b28
 8017ba8:	20001b60 	.word	0x20001b60
 8017bac:	20001b36 	.word	0x20001b36
 8017bb0:	0801c628 	.word	0x0801c628
 8017bb4:	0801cc58 	.word	0x0801cc58
 8017bb8:	20000134 	.word	0x20000134

08017bbc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b083      	sub	sp, #12
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
    return true;
 8017bc4:	2301      	movs	r3, #1
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	370c      	adds	r7, #12
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bc80      	pop	{r7}
 8017bce:	4770      	bx	lr

08017bd0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017bde:	79fb      	ldrb	r3, [r7, #7]
 8017be0:	2b0a      	cmp	r3, #10
 8017be2:	d83e      	bhi.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
 8017be4:	a201      	add	r2, pc, #4	; (adr r2, 8017bec <RadioGetLoRaBandwidthInHz+0x1c>)
 8017be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bea:	bf00      	nop
 8017bec:	08017c19 	.word	0x08017c19
 8017bf0:	08017c29 	.word	0x08017c29
 8017bf4:	08017c39 	.word	0x08017c39
 8017bf8:	08017c49 	.word	0x08017c49
 8017bfc:	08017c51 	.word	0x08017c51
 8017c00:	08017c57 	.word	0x08017c57
 8017c04:	08017c5d 	.word	0x08017c5d
 8017c08:	08017c63 	.word	0x08017c63
 8017c0c:	08017c21 	.word	0x08017c21
 8017c10:	08017c31 	.word	0x08017c31
 8017c14:	08017c41 	.word	0x08017c41
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017c18:	f641 6384 	movw	r3, #7812	; 0x1e84
 8017c1c:	60fb      	str	r3, [r7, #12]
        break;
 8017c1e:	e020      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017c20:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017c24:	60fb      	str	r3, [r7, #12]
        break;
 8017c26:	e01c      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017c28:	f643 5309 	movw	r3, #15625	; 0x3d09
 8017c2c:	60fb      	str	r3, [r7, #12]
        break;
 8017c2e:	e018      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017c30:	f245 1361 	movw	r3, #20833	; 0x5161
 8017c34:	60fb      	str	r3, [r7, #12]
        break;
 8017c36:	e014      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017c38:	f647 2312 	movw	r3, #31250	; 0x7a12
 8017c3c:	60fb      	str	r3, [r7, #12]
        break;
 8017c3e:	e010      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017c40:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8017c44:	60fb      	str	r3, [r7, #12]
        break;
 8017c46:	e00c      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017c48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8017c4c:	60fb      	str	r3, [r7, #12]
        break;
 8017c4e:	e008      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017c50:	4b07      	ldr	r3, [pc, #28]	; (8017c70 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017c52:	60fb      	str	r3, [r7, #12]
        break;
 8017c54:	e005      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017c56:	4b07      	ldr	r3, [pc, #28]	; (8017c74 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017c58:	60fb      	str	r3, [r7, #12]
        break;
 8017c5a:	e002      	b.n	8017c62 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017c5c:	4b06      	ldr	r3, [pc, #24]	; (8017c78 <RadioGetLoRaBandwidthInHz+0xa8>)
 8017c5e:	60fb      	str	r3, [r7, #12]
        break;
 8017c60:	bf00      	nop
    }

    return bandwidthInHz;
 8017c62:	68fb      	ldr	r3, [r7, #12]
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3714      	adds	r7, #20
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bc80      	pop	{r7}
 8017c6c:	4770      	bx	lr
 8017c6e:	bf00      	nop
 8017c70:	0001e848 	.word	0x0001e848
 8017c74:	0003d090 	.word	0x0003d090
 8017c78:	0007a120 	.word	0x0007a120

08017c7c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017c7c:	b480      	push	{r7}
 8017c7e:	b083      	sub	sp, #12
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	4608      	mov	r0, r1
 8017c86:	4611      	mov	r1, r2
 8017c88:	461a      	mov	r2, r3
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	70fb      	strb	r3, [r7, #3]
 8017c8e:	460b      	mov	r3, r1
 8017c90:	803b      	strh	r3, [r7, #0]
 8017c92:	4613      	mov	r3, r2
 8017c94:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8017c96:	883b      	ldrh	r3, [r7, #0]
 8017c98:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017c9a:	78ba      	ldrb	r2, [r7, #2]
 8017c9c:	f082 0201 	eor.w	r2, r2, #1
 8017ca0:	b2d2      	uxtb	r2, r2
 8017ca2:	2a00      	cmp	r2, #0
 8017ca4:	d001      	beq.n	8017caa <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017ca6:	2208      	movs	r2, #8
 8017ca8:	e000      	b.n	8017cac <RadioGetGfskTimeOnAirNumerator+0x30>
 8017caa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017cac:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017cae:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017cb2:	7c3b      	ldrb	r3, [r7, #16]
 8017cb4:	7d39      	ldrb	r1, [r7, #20]
 8017cb6:	2900      	cmp	r1, #0
 8017cb8:	d001      	beq.n	8017cbe <RadioGetGfskTimeOnAirNumerator+0x42>
 8017cba:	2102      	movs	r1, #2
 8017cbc:	e000      	b.n	8017cc0 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017cbe:	2100      	movs	r1, #0
 8017cc0:	440b      	add	r3, r1
 8017cc2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017cc4:	4413      	add	r3, r2
}
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	370c      	adds	r7, #12
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bc80      	pop	{r7}
 8017cce:	4770      	bx	lr

08017cd0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017cd0:	b480      	push	{r7}
 8017cd2:	b08b      	sub	sp, #44	; 0x2c
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	4611      	mov	r1, r2
 8017cdc:	461a      	mov	r2, r3
 8017cde:	460b      	mov	r3, r1
 8017ce0:	71fb      	strb	r3, [r7, #7]
 8017ce2:	4613      	mov	r3, r2
 8017ce4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017ce6:	79fb      	ldrb	r3, [r7, #7]
 8017ce8:	3304      	adds	r3, #4
 8017cea:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017cec:	2300      	movs	r3, #0
 8017cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	2b05      	cmp	r3, #5
 8017cf6:	d002      	beq.n	8017cfe <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	2b06      	cmp	r3, #6
 8017cfc:	d104      	bne.n	8017d08 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017cfe:	88bb      	ldrh	r3, [r7, #4]
 8017d00:	2b0b      	cmp	r3, #11
 8017d02:	d801      	bhi.n	8017d08 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017d04:	230c      	movs	r3, #12
 8017d06:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d105      	bne.n	8017d1a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	2b0b      	cmp	r3, #11
 8017d12:	d008      	beq.n	8017d26 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	2b0c      	cmp	r3, #12
 8017d18:	d005      	beq.n	8017d26 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	2b01      	cmp	r3, #1
 8017d1e:	d105      	bne.n	8017d2c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	2b0c      	cmp	r3, #12
 8017d24:	d102      	bne.n	8017d2c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017d26:	2301      	movs	r3, #1
 8017d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017d2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017d30:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017d32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017d36:	2a00      	cmp	r2, #0
 8017d38:	d001      	beq.n	8017d3e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017d3a:	2210      	movs	r2, #16
 8017d3c:	e000      	b.n	8017d40 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017d3e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017d40:	4413      	add	r3, r2
 8017d42:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017d48:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017d4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017d4e:	2a00      	cmp	r2, #0
 8017d50:	d001      	beq.n	8017d56 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017d52:	2200      	movs	r2, #0
 8017d54:	e000      	b.n	8017d58 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017d56:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017d58:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017d5a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017d5c:	68bb      	ldr	r3, [r7, #8]
 8017d5e:	2b06      	cmp	r3, #6
 8017d60:	d803      	bhi.n	8017d6a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	009b      	lsls	r3, r3, #2
 8017d66:	623b      	str	r3, [r7, #32]
 8017d68:	e00e      	b.n	8017d88 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017d6a:	69fb      	ldr	r3, [r7, #28]
 8017d6c:	3308      	adds	r3, #8
 8017d6e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d004      	beq.n	8017d82 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	3b02      	subs	r3, #2
 8017d7c:	009b      	lsls	r3, r3, #2
 8017d7e:	623b      	str	r3, [r7, #32]
 8017d80:	e002      	b.n	8017d88 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017d88:	69fb      	ldr	r3, [r7, #28]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	da01      	bge.n	8017d92 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017d92:	69fa      	ldr	r2, [r7, #28]
 8017d94:	6a3b      	ldr	r3, [r7, #32]
 8017d96:	4413      	add	r3, r2
 8017d98:	1e5a      	subs	r2, r3, #1
 8017d9a:	6a3b      	ldr	r3, [r7, #32]
 8017d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017da0:	697a      	ldr	r2, [r7, #20]
 8017da2:	fb03 f202 	mul.w	r2, r3, r2
 8017da6:	88bb      	ldrh	r3, [r7, #4]
 8017da8:	4413      	add	r3, r2
    int32_t intermediate =
 8017daa:	330c      	adds	r3, #12
 8017dac:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	2b06      	cmp	r3, #6
 8017db2:	d802      	bhi.n	8017dba <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017db4:	69bb      	ldr	r3, [r7, #24]
 8017db6:	3302      	adds	r3, #2
 8017db8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	009b      	lsls	r3, r3, #2
 8017dbe:	1c5a      	adds	r2, r3, #1
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	3b02      	subs	r3, #2
 8017dc4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	372c      	adds	r7, #44	; 0x2c
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bc80      	pop	{r7}
 8017dd0:	4770      	bx	lr
	...

08017dd4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b08a      	sub	sp, #40	; 0x28
 8017dd8:	af04      	add	r7, sp, #16
 8017dda:	60b9      	str	r1, [r7, #8]
 8017ddc:	607a      	str	r2, [r7, #4]
 8017dde:	461a      	mov	r2, r3
 8017de0:	4603      	mov	r3, r0
 8017de2:	73fb      	strb	r3, [r7, #15]
 8017de4:	4613      	mov	r3, r2
 8017de6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017de8:	2300      	movs	r3, #0
 8017dea:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017dec:	2301      	movs	r3, #1
 8017dee:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017df0:	7bfb      	ldrb	r3, [r7, #15]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d002      	beq.n	8017dfc <RadioTimeOnAir+0x28>
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	d017      	beq.n	8017e2a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017dfa:	e035      	b.n	8017e68 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017dfc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017e00:	8c3a      	ldrh	r2, [r7, #32]
 8017e02:	7bb9      	ldrb	r1, [r7, #14]
 8017e04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017e08:	9301      	str	r3, [sp, #4]
 8017e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017e0e:	9300      	str	r3, [sp, #0]
 8017e10:	4603      	mov	r3, r0
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f7ff ff32 	bl	8017c7c <RadioGetGfskTimeOnAirNumerator>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017e1e:	fb02 f303 	mul.w	r3, r2, r3
 8017e22:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	613b      	str	r3, [r7, #16]
        break;
 8017e28:	e01e      	b.n	8017e68 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017e2a:	8c39      	ldrh	r1, [r7, #32]
 8017e2c:	7bba      	ldrb	r2, [r7, #14]
 8017e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017e32:	9302      	str	r3, [sp, #8]
 8017e34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017e38:	9301      	str	r3, [sp, #4]
 8017e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e3e:	9300      	str	r3, [sp, #0]
 8017e40:	460b      	mov	r3, r1
 8017e42:	6879      	ldr	r1, [r7, #4]
 8017e44:	68b8      	ldr	r0, [r7, #8]
 8017e46:	f7ff ff43 	bl	8017cd0 <RadioGetLoRaTimeOnAirNumerator>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017e50:	fb02 f303 	mul.w	r3, r2, r3
 8017e54:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017e56:	4a0a      	ldr	r2, [pc, #40]	; (8017e80 <RadioTimeOnAir+0xac>)
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	4413      	add	r3, r2
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7ff feb6 	bl	8017bd0 <RadioGetLoRaBandwidthInHz>
 8017e64:	6138      	str	r0, [r7, #16]
        break;
 8017e66:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8017e68:	697a      	ldr	r2, [r7, #20]
 8017e6a:	693b      	ldr	r3, [r7, #16]
 8017e6c:	4413      	add	r3, r2
 8017e6e:	1e5a      	subs	r2, r3, #1
 8017e70:	693b      	ldr	r3, [r7, #16]
 8017e72:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e76:	4618      	mov	r0, r3
 8017e78:	3718      	adds	r7, #24
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}
 8017e7e:	bf00      	nop
 8017e80:	0801cc58 	.word	0x0801cc58

08017e84 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017e90:	2300      	movs	r3, #0
 8017e92:	2200      	movs	r2, #0
 8017e94:	f240 2101 	movw	r1, #513	; 0x201
 8017e98:	f240 2001 	movw	r0, #513	; 0x201
 8017e9c:	f001 fd66 	bl	801996c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017ea0:	4b73      	ldr	r3, [pc, #460]	; (8018070 <RadioSend+0x1ec>)
 8017ea2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017ea6:	2101      	movs	r1, #1
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f002 fa03 	bl	801a2b4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017eae:	4b70      	ldr	r3, [pc, #448]	; (8018070 <RadioSend+0x1ec>)
 8017eb0:	781b      	ldrb	r3, [r3, #0]
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	d112      	bne.n	8017edc <RadioSend+0x58>
 8017eb6:	4b6e      	ldr	r3, [pc, #440]	; (8018070 <RadioSend+0x1ec>)
 8017eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017ebc:	2b06      	cmp	r3, #6
 8017ebe:	d10d      	bne.n	8017edc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017ec0:	f640 0089 	movw	r0, #2185	; 0x889
 8017ec4:	f002 f916 	bl	801a0f4 <SUBGRF_ReadRegister>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	f023 0304 	bic.w	r3, r3, #4
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	f640 0089 	movw	r0, #2185	; 0x889
 8017ed6:	f002 f8f9 	bl	801a0cc <SUBGRF_WriteRegister>
 8017eda:	e00c      	b.n	8017ef6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017edc:	f640 0089 	movw	r0, #2185	; 0x889
 8017ee0:	f002 f908 	bl	801a0f4 <SUBGRF_ReadRegister>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	f043 0304 	orr.w	r3, r3, #4
 8017eea:	b2db      	uxtb	r3, r3
 8017eec:	4619      	mov	r1, r3
 8017eee:	f640 0089 	movw	r0, #2185	; 0x889
 8017ef2:	f002 f8eb 	bl	801a0cc <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8017ef6:	4b5e      	ldr	r3, [pc, #376]	; (8018070 <RadioSend+0x1ec>)
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	2b04      	cmp	r3, #4
 8017efc:	f200 80a8 	bhi.w	8018050 <RadioSend+0x1cc>
 8017f00:	a201      	add	r2, pc, #4	; (adr r2, 8017f08 <RadioSend+0x84>)
 8017f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f06:	bf00      	nop
 8017f08:	08017f37 	.word	0x08017f37
 8017f0c:	08017f1d 	.word	0x08017f1d
 8017f10:	08017f37 	.word	0x08017f37
 8017f14:	08017f99 	.word	0x08017f99
 8017f18:	08017fb9 	.word	0x08017fb9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017f1c:	4a54      	ldr	r2, [pc, #336]	; (8018070 <RadioSend+0x1ec>)
 8017f1e:	78fb      	ldrb	r3, [r7, #3]
 8017f20:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f22:	4854      	ldr	r0, [pc, #336]	; (8018074 <RadioSend+0x1f0>)
 8017f24:	f001 ff8a 	bl	8019e3c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017f28:	78fb      	ldrb	r3, [r7, #3]
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f001 fa3a 	bl	80193a8 <SUBGRF_SendPayload>
            break;
 8017f34:	e08d      	b.n	8018052 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017f36:	f002 fbb6 	bl	801a6a6 <RFW_Is_Init>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d11e      	bne.n	8017f7e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017f40:	f107 020d 	add.w	r2, r7, #13
 8017f44:	78fb      	ldrb	r3, [r7, #3]
 8017f46:	4619      	mov	r1, r3
 8017f48:	6878      	ldr	r0, [r7, #4]
 8017f4a:	f002 fbc4 	bl	801a6d6 <RFW_TransmitInit>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d10c      	bne.n	8017f6e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017f54:	7b7a      	ldrb	r2, [r7, #13]
 8017f56:	4b46      	ldr	r3, [pc, #280]	; (8018070 <RadioSend+0x1ec>)
 8017f58:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f5a:	4846      	ldr	r0, [pc, #280]	; (8018074 <RadioSend+0x1f0>)
 8017f5c:	f001 ff6e 	bl	8019e3c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8017f60:	7b7b      	ldrb	r3, [r7, #13]
 8017f62:	2200      	movs	r2, #0
 8017f64:	4619      	mov	r1, r3
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f001 fa1e 	bl	80193a8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017f6c:	e071      	b.n	8018052 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8017f6e:	4b42      	ldr	r3, [pc, #264]	; (8018078 <RadioSend+0x1f4>)
 8017f70:	2201      	movs	r2, #1
 8017f72:	2100      	movs	r1, #0
 8017f74:	2002      	movs	r0, #2
 8017f76:	f003 fccf 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8017f7a:	2303      	movs	r3, #3
 8017f7c:	e073      	b.n	8018066 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017f7e:	4a3c      	ldr	r2, [pc, #240]	; (8018070 <RadioSend+0x1ec>)
 8017f80:	78fb      	ldrb	r3, [r7, #3]
 8017f82:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f84:	483b      	ldr	r0, [pc, #236]	; (8018074 <RadioSend+0x1f0>)
 8017f86:	f001 ff59 	bl	8019e3c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8017f8a:	78fb      	ldrb	r3, [r7, #3]
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	4619      	mov	r1, r3
 8017f90:	6878      	ldr	r0, [r7, #4]
 8017f92:	f001 fa09 	bl	80193a8 <SUBGRF_SendPayload>
            break;
 8017f96:	e05c      	b.n	8018052 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017f98:	4b35      	ldr	r3, [pc, #212]	; (8018070 <RadioSend+0x1ec>)
 8017f9a:	2202      	movs	r2, #2
 8017f9c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017f9e:	4a34      	ldr	r2, [pc, #208]	; (8018070 <RadioSend+0x1ec>)
 8017fa0:	78fb      	ldrb	r3, [r7, #3]
 8017fa2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fa4:	4833      	ldr	r0, [pc, #204]	; (8018074 <RadioSend+0x1f0>)
 8017fa6:	f001 ff49 	bl	8019e3c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017faa:	78fb      	ldrb	r3, [r7, #3]
 8017fac:	2200      	movs	r2, #0
 8017fae:	4619      	mov	r1, r3
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	f001 f9f9 	bl	80193a8 <SUBGRF_SendPayload>
            break;
 8017fb6:	e04c      	b.n	8018052 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017fb8:	78fb      	ldrb	r3, [r7, #3]
 8017fba:	461a      	mov	r2, r3
 8017fbc:	6879      	ldr	r1, [r7, #4]
 8017fbe:	482f      	ldr	r0, [pc, #188]	; (801807c <RadioSend+0x1f8>)
 8017fc0:	f000 fccc 	bl	801895c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017fc4:	4b2a      	ldr	r3, [pc, #168]	; (8018070 <RadioSend+0x1ec>)
 8017fc6:	2202      	movs	r2, #2
 8017fc8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017fca:	78fb      	ldrb	r3, [r7, #3]
 8017fcc:	3301      	adds	r3, #1
 8017fce:	b2da      	uxtb	r2, r3
 8017fd0:	4b27      	ldr	r3, [pc, #156]	; (8018070 <RadioSend+0x1ec>)
 8017fd2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fd4:	4827      	ldr	r0, [pc, #156]	; (8018074 <RadioSend+0x1f0>)
 8017fd6:	f001 ff31 	bl	8019e3c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017fda:	2100      	movs	r1, #0
 8017fdc:	20f1      	movs	r0, #241	; 0xf1
 8017fde:	f000 f966 	bl	80182ae <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017fe2:	2100      	movs	r1, #0
 8017fe4:	20f0      	movs	r0, #240	; 0xf0
 8017fe6:	f000 f962 	bl	80182ae <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017fea:	4b21      	ldr	r3, [pc, #132]	; (8018070 <RadioSend+0x1ec>)
 8017fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fee:	2b64      	cmp	r3, #100	; 0x64
 8017ff0:	d108      	bne.n	8018004 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017ff2:	2170      	movs	r1, #112	; 0x70
 8017ff4:	20f3      	movs	r0, #243	; 0xf3
 8017ff6:	f000 f95a 	bl	80182ae <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017ffa:	211d      	movs	r1, #29
 8017ffc:	20f2      	movs	r0, #242	; 0xf2
 8017ffe:	f000 f956 	bl	80182ae <RadioWrite>
 8018002:	e007      	b.n	8018014 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018004:	21e1      	movs	r1, #225	; 0xe1
 8018006:	20f3      	movs	r0, #243	; 0xf3
 8018008:	f000 f951 	bl	80182ae <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801800c:	2104      	movs	r1, #4
 801800e:	20f2      	movs	r0, #242	; 0xf2
 8018010:	f000 f94d 	bl	80182ae <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018014:	78fb      	ldrb	r3, [r7, #3]
 8018016:	b29b      	uxth	r3, r3
 8018018:	00db      	lsls	r3, r3, #3
 801801a:	b29b      	uxth	r3, r3
 801801c:	3302      	adds	r3, #2
 801801e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8018020:	89fb      	ldrh	r3, [r7, #14]
 8018022:	0a1b      	lsrs	r3, r3, #8
 8018024:	b29b      	uxth	r3, r3
 8018026:	b2db      	uxtb	r3, r3
 8018028:	4619      	mov	r1, r3
 801802a:	20f4      	movs	r0, #244	; 0xf4
 801802c:	f000 f93f 	bl	80182ae <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018030:	89fb      	ldrh	r3, [r7, #14]
 8018032:	b2db      	uxtb	r3, r3
 8018034:	4619      	mov	r1, r3
 8018036:	20f5      	movs	r0, #245	; 0xf5
 8018038:	f000 f939 	bl	80182ae <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801803c:	78fb      	ldrb	r3, [r7, #3]
 801803e:	3301      	adds	r3, #1
 8018040:	b2db      	uxtb	r3, r3
 8018042:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8018046:	4619      	mov	r1, r3
 8018048:	480c      	ldr	r0, [pc, #48]	; (801807c <RadioSend+0x1f8>)
 801804a:	f001 f9ad 	bl	80193a8 <SUBGRF_SendPayload>
            break;
 801804e:	e000      	b.n	8018052 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018050:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018052:	4b07      	ldr	r3, [pc, #28]	; (8018070 <RadioSend+0x1ec>)
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	4619      	mov	r1, r3
 8018058:	4809      	ldr	r0, [pc, #36]	; (8018080 <RadioSend+0x1fc>)
 801805a:	f003 fac3 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801805e:	4808      	ldr	r0, [pc, #32]	; (8018080 <RadioSend+0x1fc>)
 8018060:	f003 f9e2 	bl	801b428 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8018064:	2300      	movs	r3, #0
}
 8018066:	4618      	mov	r0, r3
 8018068:	3710      	adds	r7, #16
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}
 801806e:	bf00      	nop
 8018070:	20001b28 	.word	0x20001b28
 8018074:	20001b36 	.word	0x20001b36
 8018078:	0801c630 	.word	0x0801c630
 801807c:	20001a24 	.word	0x20001a24
 8018080:	20001b84 	.word	0x20001b84

08018084 <RadioSleep>:

static void RadioSleep( void )
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b082      	sub	sp, #8
 8018088:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801808a:	2300      	movs	r3, #0
 801808c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801808e:	793b      	ldrb	r3, [r7, #4]
 8018090:	f043 0304 	orr.w	r3, r3, #4
 8018094:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8018096:	7938      	ldrb	r0, [r7, #4]
 8018098:	f001 fa62 	bl	8019560 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801809c:	2002      	movs	r0, #2
 801809e:	f7e9 fed7 	bl	8001e50 <HAL_Delay>
}
 80180a2:	bf00      	nop
 80180a4:	3708      	adds	r7, #8
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}

080180aa <RadioStandby>:

static void RadioStandby( void )
{
 80180aa:	b580      	push	{r7, lr}
 80180ac:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80180ae:	2000      	movs	r0, #0
 80180b0:	f001 fa88 	bl	80195c4 <SUBGRF_SetStandby>
}
 80180b4:	bf00      	nop
 80180b6:	bd80      	pop	{r7, pc}

080180b8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b082      	sub	sp, #8
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80180c0:	f002 faf1 	bl	801a6a6 <RFW_Is_Init>
 80180c4:	4603      	mov	r3, r0
 80180c6:	2b01      	cmp	r3, #1
 80180c8:	d102      	bne.n	80180d0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80180ca:	f002 fb14 	bl	801a6f6 <RFW_ReceiveInit>
 80180ce:	e007      	b.n	80180e0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80180d0:	2300      	movs	r3, #0
 80180d2:	2200      	movs	r2, #0
 80180d4:	f240 2162 	movw	r1, #610	; 0x262
 80180d8:	f240 2062 	movw	r0, #610	; 0x262
 80180dc:	f001 fc46 	bl	801996c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d006      	beq.n	80180f4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80180e6:	6879      	ldr	r1, [r7, #4]
 80180e8:	4811      	ldr	r0, [pc, #68]	; (8018130 <RadioRx+0x78>)
 80180ea:	f003 fa7b 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80180ee:	4810      	ldr	r0, [pc, #64]	; (8018130 <RadioRx+0x78>)
 80180f0:	f003 f99a 	bl	801b428 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80180f4:	4b0f      	ldr	r3, [pc, #60]	; (8018134 <RadioRx+0x7c>)
 80180f6:	2200      	movs	r2, #0
 80180f8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80180fa:	4b0e      	ldr	r3, [pc, #56]	; (8018134 <RadioRx+0x7c>)
 80180fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018100:	2100      	movs	r1, #0
 8018102:	4618      	mov	r0, r3
 8018104:	f002 f8d6 	bl	801a2b4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018108:	4b0a      	ldr	r3, [pc, #40]	; (8018134 <RadioRx+0x7c>)
 801810a:	785b      	ldrb	r3, [r3, #1]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d004      	beq.n	801811a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018110:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018114:	f001 fa92 	bl	801963c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018118:	e005      	b.n	8018126 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801811a:	4b06      	ldr	r3, [pc, #24]	; (8018134 <RadioRx+0x7c>)
 801811c:	689b      	ldr	r3, [r3, #8]
 801811e:	019b      	lsls	r3, r3, #6
 8018120:	4618      	mov	r0, r3
 8018122:	f001 fa8b 	bl	801963c <SUBGRF_SetRx>
}
 8018126:	bf00      	nop
 8018128:	3708      	adds	r7, #8
 801812a:	46bd      	mov	sp, r7
 801812c:	bd80      	pop	{r7, pc}
 801812e:	bf00      	nop
 8018130:	20001b9c 	.word	0x20001b9c
 8018134:	20001b28 	.word	0x20001b28

08018138 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8018140:	f002 fab1 	bl	801a6a6 <RFW_Is_Init>
 8018144:	4603      	mov	r3, r0
 8018146:	2b01      	cmp	r3, #1
 8018148:	d102      	bne.n	8018150 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801814a:	f002 fad4 	bl	801a6f6 <RFW_ReceiveInit>
 801814e:	e007      	b.n	8018160 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018150:	2300      	movs	r3, #0
 8018152:	2200      	movs	r2, #0
 8018154:	f240 2162 	movw	r1, #610	; 0x262
 8018158:	f240 2062 	movw	r0, #610	; 0x262
 801815c:	f001 fc06 	bl	801996c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d006      	beq.n	8018174 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018166:	6879      	ldr	r1, [r7, #4]
 8018168:	4811      	ldr	r0, [pc, #68]	; (80181b0 <RadioRxBoosted+0x78>)
 801816a:	f003 fa3b 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801816e:	4810      	ldr	r0, [pc, #64]	; (80181b0 <RadioRxBoosted+0x78>)
 8018170:	f003 f95a 	bl	801b428 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018174:	4b0f      	ldr	r3, [pc, #60]	; (80181b4 <RadioRxBoosted+0x7c>)
 8018176:	2200      	movs	r2, #0
 8018178:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801817a:	4b0e      	ldr	r3, [pc, #56]	; (80181b4 <RadioRxBoosted+0x7c>)
 801817c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018180:	2100      	movs	r1, #0
 8018182:	4618      	mov	r0, r3
 8018184:	f002 f896 	bl	801a2b4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018188:	4b0a      	ldr	r3, [pc, #40]	; (80181b4 <RadioRxBoosted+0x7c>)
 801818a:	785b      	ldrb	r3, [r3, #1]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d004      	beq.n	801819a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018190:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018194:	f001 fa72 	bl	801967c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8018198:	e005      	b.n	80181a6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801819a:	4b06      	ldr	r3, [pc, #24]	; (80181b4 <RadioRxBoosted+0x7c>)
 801819c:	689b      	ldr	r3, [r3, #8]
 801819e:	019b      	lsls	r3, r3, #6
 80181a0:	4618      	mov	r0, r3
 80181a2:	f001 fa6b 	bl	801967c <SUBGRF_SetRxBoosted>
}
 80181a6:	bf00      	nop
 80181a8:	3708      	adds	r7, #8
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
 80181ae:	bf00      	nop
 80181b0:	20001b9c 	.word	0x20001b9c
 80181b4:	20001b28 	.word	0x20001b28

080181b8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b082      	sub	sp, #8
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
 80181c0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	005a      	lsls	r2, r3, #1
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	4413      	add	r3, r2
 80181ca:	4a0c      	ldr	r2, [pc, #48]	; (80181fc <RadioSetRxDutyCycle+0x44>)
 80181cc:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80181ce:	2300      	movs	r3, #0
 80181d0:	2200      	movs	r2, #0
 80181d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80181d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80181da:	f001 fbc7 	bl	801996c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80181de:	4b07      	ldr	r3, [pc, #28]	; (80181fc <RadioSetRxDutyCycle+0x44>)
 80181e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80181e4:	2100      	movs	r1, #0
 80181e6:	4618      	mov	r0, r3
 80181e8:	f002 f864 	bl	801a2b4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80181ec:	6839      	ldr	r1, [r7, #0]
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f001 fa68 	bl	80196c4 <SUBGRF_SetRxDutyCycle>
}
 80181f4:	bf00      	nop
 80181f6:	3708      	adds	r7, #8
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	20001b28 	.word	0x20001b28

08018200 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018200:	b580      	push	{r7, lr}
 8018202:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018204:	4b09      	ldr	r3, [pc, #36]	; (801822c <RadioStartCad+0x2c>)
 8018206:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801820a:	2100      	movs	r1, #0
 801820c:	4618      	mov	r0, r3
 801820e:	f002 f851 	bl	801a2b4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018212:	2300      	movs	r3, #0
 8018214:	2200      	movs	r2, #0
 8018216:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801821a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801821e:	f001 fba5 	bl	801996c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8018222:	f001 fa7b 	bl	801971c <SUBGRF_SetCad>
}
 8018226:	bf00      	nop
 8018228:	bd80      	pop	{r7, pc}
 801822a:	bf00      	nop
 801822c:	20001b28 	.word	0x20001b28

08018230 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	460b      	mov	r3, r1
 801823a:	70fb      	strb	r3, [r7, #3]
 801823c:	4613      	mov	r3, r2
 801823e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8018240:	883b      	ldrh	r3, [r7, #0]
 8018242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018246:	fb02 f303 	mul.w	r3, r2, r3
 801824a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f001 fbe9 	bl	8019a24 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018256:	4618      	mov	r0, r3
 8018258:	f002 f854 	bl	801a304 <SUBGRF_SetRfTxPower>
 801825c:	4603      	mov	r3, r0
 801825e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018260:	210e      	movs	r1, #14
 8018262:	f640 101f 	movw	r0, #2335	; 0x91f
 8018266:	f001 ff31 	bl	801a0cc <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801826a:	7afb      	ldrb	r3, [r7, #11]
 801826c:	2101      	movs	r1, #1
 801826e:	4618      	mov	r0, r3
 8018270:	f002 f820 	bl	801a2b4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018274:	f001 fa60 	bl	8019738 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018278:	68f9      	ldr	r1, [r7, #12]
 801827a:	4805      	ldr	r0, [pc, #20]	; (8018290 <RadioSetTxContinuousWave+0x60>)
 801827c:	f003 f9b2 	bl	801b5e4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018280:	4803      	ldr	r0, [pc, #12]	; (8018290 <RadioSetTxContinuousWave+0x60>)
 8018282:	f003 f8d1 	bl	801b428 <UTIL_TIMER_Start>
}
 8018286:	bf00      	nop
 8018288:	3710      	adds	r7, #16
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
 801828e:	bf00      	nop
 8018290:	20001b84 	.word	0x20001b84

08018294 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
 801829a:	4603      	mov	r3, r0
 801829c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801829e:	f001 fe82 	bl	8019fa6 <SUBGRF_GetRssiInst>
 80182a2:	4603      	mov	r3, r0
 80182a4:	b21b      	sxth	r3, r3
}
 80182a6:	4618      	mov	r0, r3
 80182a8:	3708      	adds	r7, #8
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}

080182ae <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80182ae:	b580      	push	{r7, lr}
 80182b0:	b082      	sub	sp, #8
 80182b2:	af00      	add	r7, sp, #0
 80182b4:	4603      	mov	r3, r0
 80182b6:	460a      	mov	r2, r1
 80182b8:	80fb      	strh	r3, [r7, #6]
 80182ba:	4613      	mov	r3, r2
 80182bc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80182be:	797a      	ldrb	r2, [r7, #5]
 80182c0:	88fb      	ldrh	r3, [r7, #6]
 80182c2:	4611      	mov	r1, r2
 80182c4:	4618      	mov	r0, r3
 80182c6:	f001 ff01 	bl	801a0cc <SUBGRF_WriteRegister>
}
 80182ca:	bf00      	nop
 80182cc:	3708      	adds	r7, #8
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}

080182d2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80182d2:	b580      	push	{r7, lr}
 80182d4:	b082      	sub	sp, #8
 80182d6:	af00      	add	r7, sp, #0
 80182d8:	4603      	mov	r3, r0
 80182da:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80182dc:	88fb      	ldrh	r3, [r7, #6]
 80182de:	4618      	mov	r0, r3
 80182e0:	f001 ff08 	bl	801a0f4 <SUBGRF_ReadRegister>
 80182e4:	4603      	mov	r3, r0
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3708      	adds	r7, #8
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80182ee:	b580      	push	{r7, lr}
 80182f0:	b082      	sub	sp, #8
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	4603      	mov	r3, r0
 80182f6:	6039      	str	r1, [r7, #0]
 80182f8:	80fb      	strh	r3, [r7, #6]
 80182fa:	4613      	mov	r3, r2
 80182fc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80182fe:	797b      	ldrb	r3, [r7, #5]
 8018300:	b29a      	uxth	r2, r3
 8018302:	88fb      	ldrh	r3, [r7, #6]
 8018304:	6839      	ldr	r1, [r7, #0]
 8018306:	4618      	mov	r0, r3
 8018308:	f001 ff08 	bl	801a11c <SUBGRF_WriteRegisters>
}
 801830c:	bf00      	nop
 801830e:	3708      	adds	r7, #8
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	4603      	mov	r3, r0
 801831c:	6039      	str	r1, [r7, #0]
 801831e:	80fb      	strh	r3, [r7, #6]
 8018320:	4613      	mov	r3, r2
 8018322:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018324:	797b      	ldrb	r3, [r7, #5]
 8018326:	b29a      	uxth	r2, r3
 8018328:	88fb      	ldrh	r3, [r7, #6]
 801832a:	6839      	ldr	r1, [r7, #0]
 801832c:	4618      	mov	r0, r3
 801832e:	f001 ff17 	bl	801a160 <SUBGRF_ReadRegisters>
}
 8018332:	bf00      	nop
 8018334:	3708      	adds	r7, #8
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}
	...

0801833c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b082      	sub	sp, #8
 8018340:	af00      	add	r7, sp, #0
 8018342:	4603      	mov	r3, r0
 8018344:	460a      	mov	r2, r1
 8018346:	71fb      	strb	r3, [r7, #7]
 8018348:	4613      	mov	r3, r2
 801834a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801834c:	79fb      	ldrb	r3, [r7, #7]
 801834e:	2b01      	cmp	r3, #1
 8018350:	d10a      	bne.n	8018368 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018352:	4a0e      	ldr	r2, [pc, #56]	; (801838c <RadioSetMaxPayloadLength+0x50>)
 8018354:	79bb      	ldrb	r3, [r7, #6]
 8018356:	7013      	strb	r3, [r2, #0]
 8018358:	4b0c      	ldr	r3, [pc, #48]	; (801838c <RadioSetMaxPayloadLength+0x50>)
 801835a:	781a      	ldrb	r2, [r3, #0]
 801835c:	4b0c      	ldr	r3, [pc, #48]	; (8018390 <RadioSetMaxPayloadLength+0x54>)
 801835e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018360:	480c      	ldr	r0, [pc, #48]	; (8018394 <RadioSetMaxPayloadLength+0x58>)
 8018362:	f001 fd6b 	bl	8019e3c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018366:	e00d      	b.n	8018384 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018368:	4b09      	ldr	r3, [pc, #36]	; (8018390 <RadioSetMaxPayloadLength+0x54>)
 801836a:	7d5b      	ldrb	r3, [r3, #21]
 801836c:	2b01      	cmp	r3, #1
 801836e:	d109      	bne.n	8018384 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018370:	4a06      	ldr	r2, [pc, #24]	; (801838c <RadioSetMaxPayloadLength+0x50>)
 8018372:	79bb      	ldrb	r3, [r7, #6]
 8018374:	7013      	strb	r3, [r2, #0]
 8018376:	4b05      	ldr	r3, [pc, #20]	; (801838c <RadioSetMaxPayloadLength+0x50>)
 8018378:	781a      	ldrb	r2, [r3, #0]
 801837a:	4b05      	ldr	r3, [pc, #20]	; (8018390 <RadioSetMaxPayloadLength+0x54>)
 801837c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801837e:	4805      	ldr	r0, [pc, #20]	; (8018394 <RadioSetMaxPayloadLength+0x58>)
 8018380:	f001 fd5c 	bl	8019e3c <SUBGRF_SetPacketParams>
}
 8018384:	bf00      	nop
 8018386:	3708      	adds	r7, #8
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}
 801838c:	20000134 	.word	0x20000134
 8018390:	20001b28 	.word	0x20001b28
 8018394:	20001b36 	.word	0x20001b36

08018398 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
 801839e:	4603      	mov	r3, r0
 80183a0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80183a2:	4a13      	ldr	r2, [pc, #76]	; (80183f0 <RadioSetPublicNetwork+0x58>)
 80183a4:	79fb      	ldrb	r3, [r7, #7]
 80183a6:	7313      	strb	r3, [r2, #12]
 80183a8:	4b11      	ldr	r3, [pc, #68]	; (80183f0 <RadioSetPublicNetwork+0x58>)
 80183aa:	7b1a      	ldrb	r2, [r3, #12]
 80183ac:	4b10      	ldr	r3, [pc, #64]	; (80183f0 <RadioSetPublicNetwork+0x58>)
 80183ae:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80183b0:	2001      	movs	r0, #1
 80183b2:	f7ff f811 	bl	80173d8 <RadioSetModem>
    if( enable == true )
 80183b6:	79fb      	ldrb	r3, [r7, #7]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d00a      	beq.n	80183d2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80183bc:	2134      	movs	r1, #52	; 0x34
 80183be:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80183c2:	f001 fe83 	bl	801a0cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80183c6:	2144      	movs	r1, #68	; 0x44
 80183c8:	f240 7041 	movw	r0, #1857	; 0x741
 80183cc:	f001 fe7e 	bl	801a0cc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80183d0:	e009      	b.n	80183e6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80183d2:	2114      	movs	r1, #20
 80183d4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80183d8:	f001 fe78 	bl	801a0cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80183dc:	2124      	movs	r1, #36	; 0x24
 80183de:	f240 7041 	movw	r0, #1857	; 0x741
 80183e2:	f001 fe73 	bl	801a0cc <SUBGRF_WriteRegister>
}
 80183e6:	bf00      	nop
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	20001b28 	.word	0x20001b28

080183f4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80183f8:	f001 ffb8 	bl	801a36c <SUBGRF_GetRadioWakeUpTime>
 80183fc:	4603      	mov	r3, r0
 80183fe:	3303      	adds	r3, #3
}
 8018400:	4618      	mov	r0, r3
 8018402:	bd80      	pop	{r7, pc}

08018404 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801840c:	f000 f80e 	bl	801842c <RadioOnTxTimeoutProcess>
}
 8018410:	bf00      	nop
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018420:	f000 f818 	bl	8018454 <RadioOnRxTimeoutProcess>
}
 8018424:	bf00      	nop
 8018426:	3708      	adds	r7, #8
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}

0801842c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801842c:	b580      	push	{r7, lr}
 801842e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018430:	4b07      	ldr	r3, [pc, #28]	; (8018450 <RadioOnTxTimeoutProcess+0x24>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d008      	beq.n	801844a <RadioOnTxTimeoutProcess+0x1e>
 8018438:	4b05      	ldr	r3, [pc, #20]	; (8018450 <RadioOnTxTimeoutProcess+0x24>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	685b      	ldr	r3, [r3, #4]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d003      	beq.n	801844a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018442:	4b03      	ldr	r3, [pc, #12]	; (8018450 <RadioOnTxTimeoutProcess+0x24>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	685b      	ldr	r3, [r3, #4]
 8018448:	4798      	blx	r3
    }
}
 801844a:	bf00      	nop
 801844c:	bd80      	pop	{r7, pc}
 801844e:	bf00      	nop
 8018450:	20001b24 	.word	0x20001b24

08018454 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018454:	b580      	push	{r7, lr}
 8018456:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018458:	4b07      	ldr	r3, [pc, #28]	; (8018478 <RadioOnRxTimeoutProcess+0x24>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d008      	beq.n	8018472 <RadioOnRxTimeoutProcess+0x1e>
 8018460:	4b05      	ldr	r3, [pc, #20]	; (8018478 <RadioOnRxTimeoutProcess+0x24>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	68db      	ldr	r3, [r3, #12]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d003      	beq.n	8018472 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801846a:	4b03      	ldr	r3, [pc, #12]	; (8018478 <RadioOnRxTimeoutProcess+0x24>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	68db      	ldr	r3, [r3, #12]
 8018470:	4798      	blx	r3
    }
}
 8018472:	bf00      	nop
 8018474:	bd80      	pop	{r7, pc}
 8018476:	bf00      	nop
 8018478:	20001b24 	.word	0x20001b24

0801847c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b082      	sub	sp, #8
 8018480:	af00      	add	r7, sp, #0
 8018482:	4603      	mov	r3, r0
 8018484:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018486:	4a05      	ldr	r2, [pc, #20]	; (801849c <RadioOnDioIrq+0x20>)
 8018488:	88fb      	ldrh	r3, [r7, #6]
 801848a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801848e:	f000 f807 	bl	80184a0 <RadioIrqProcess>
}
 8018492:	bf00      	nop
 8018494:	3708      	adds	r7, #8
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}
 801849a:	bf00      	nop
 801849c:	20001b28 	.word	0x20001b28

080184a0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80184a0:	b5b0      	push	{r4, r5, r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80184a6:	2300      	movs	r3, #0
 80184a8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80184aa:	2300      	movs	r3, #0
 80184ac:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80184ae:	4ba8      	ldr	r3, [pc, #672]	; (8018750 <RadioIrqProcess+0x2b0>)
 80184b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80184b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184b8:	f000 810d 	beq.w	80186d6 <RadioIrqProcess+0x236>
 80184bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184c0:	f300 81e8 	bgt.w	8018894 <RadioIrqProcess+0x3f4>
 80184c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80184c8:	f000 80f1 	beq.w	80186ae <RadioIrqProcess+0x20e>
 80184cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80184d0:	f300 81e0 	bgt.w	8018894 <RadioIrqProcess+0x3f4>
 80184d4:	2b80      	cmp	r3, #128	; 0x80
 80184d6:	f000 80d6 	beq.w	8018686 <RadioIrqProcess+0x1e6>
 80184da:	2b80      	cmp	r3, #128	; 0x80
 80184dc:	f300 81da 	bgt.w	8018894 <RadioIrqProcess+0x3f4>
 80184e0:	2b20      	cmp	r3, #32
 80184e2:	dc49      	bgt.n	8018578 <RadioIrqProcess+0xd8>
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f340 81d5 	ble.w	8018894 <RadioIrqProcess+0x3f4>
 80184ea:	3b01      	subs	r3, #1
 80184ec:	2b1f      	cmp	r3, #31
 80184ee:	f200 81d1 	bhi.w	8018894 <RadioIrqProcess+0x3f4>
 80184f2:	a201      	add	r2, pc, #4	; (adr r2, 80184f8 <RadioIrqProcess+0x58>)
 80184f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184f8:	08018581 	.word	0x08018581
 80184fc:	080185bb 	.word	0x080185bb
 8018500:	08018895 	.word	0x08018895
 8018504:	08018771 	.word	0x08018771
 8018508:	08018895 	.word	0x08018895
 801850c:	08018895 	.word	0x08018895
 8018510:	08018895 	.word	0x08018895
 8018514:	080187ed 	.word	0x080187ed
 8018518:	08018895 	.word	0x08018895
 801851c:	08018895 	.word	0x08018895
 8018520:	08018895 	.word	0x08018895
 8018524:	08018895 	.word	0x08018895
 8018528:	08018895 	.word	0x08018895
 801852c:	08018895 	.word	0x08018895
 8018530:	08018895 	.word	0x08018895
 8018534:	08018809 	.word	0x08018809
 8018538:	08018895 	.word	0x08018895
 801853c:	08018895 	.word	0x08018895
 8018540:	08018895 	.word	0x08018895
 8018544:	08018895 	.word	0x08018895
 8018548:	08018895 	.word	0x08018895
 801854c:	08018895 	.word	0x08018895
 8018550:	08018895 	.word	0x08018895
 8018554:	08018895 	.word	0x08018895
 8018558:	08018895 	.word	0x08018895
 801855c:	08018895 	.word	0x08018895
 8018560:	08018895 	.word	0x08018895
 8018564:	08018895 	.word	0x08018895
 8018568:	08018895 	.word	0x08018895
 801856c:	08018895 	.word	0x08018895
 8018570:	08018895 	.word	0x08018895
 8018574:	08018817 	.word	0x08018817
 8018578:	2b40      	cmp	r3, #64	; 0x40
 801857a:	f000 816d 	beq.w	8018858 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801857e:	e189      	b.n	8018894 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018580:	4874      	ldr	r0, [pc, #464]	; (8018754 <RadioIrqProcess+0x2b4>)
 8018582:	f002 ffbf 	bl	801b504 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018586:	2000      	movs	r0, #0
 8018588:	f001 f81c 	bl	80195c4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801858c:	f002 f892 	bl	801a6b4 <RFW_Is_LongPacketModeEnabled>
 8018590:	4603      	mov	r3, r0
 8018592:	2b01      	cmp	r3, #1
 8018594:	d101      	bne.n	801859a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018596:	f002 f8b6 	bl	801a706 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801859a:	4b6f      	ldr	r3, [pc, #444]	; (8018758 <RadioIrqProcess+0x2b8>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	f000 817a 	beq.w	8018898 <RadioIrqProcess+0x3f8>
 80185a4:	4b6c      	ldr	r3, [pc, #432]	; (8018758 <RadioIrqProcess+0x2b8>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	f000 8174 	beq.w	8018898 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80185b0:	4b69      	ldr	r3, [pc, #420]	; (8018758 <RadioIrqProcess+0x2b8>)
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4798      	blx	r3
        break;
 80185b8:	e16e      	b.n	8018898 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80185ba:	4868      	ldr	r0, [pc, #416]	; (801875c <RadioIrqProcess+0x2bc>)
 80185bc:	f002 ffa2 	bl	801b504 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80185c0:	4b63      	ldr	r3, [pc, #396]	; (8018750 <RadioIrqProcess+0x2b0>)
 80185c2:	785b      	ldrb	r3, [r3, #1]
 80185c4:	f083 0301 	eor.w	r3, r3, #1
 80185c8:	b2db      	uxtb	r3, r3
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d014      	beq.n	80185f8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80185ce:	2000      	movs	r0, #0
 80185d0:	f000 fff8 	bl	80195c4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80185d4:	2100      	movs	r1, #0
 80185d6:	f640 1002 	movw	r0, #2306	; 0x902
 80185da:	f001 fd77 	bl	801a0cc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80185de:	f640 1044 	movw	r0, #2372	; 0x944
 80185e2:	f001 fd87 	bl	801a0f4 <SUBGRF_ReadRegister>
 80185e6:	4603      	mov	r3, r0
 80185e8:	f043 0302 	orr.w	r3, r3, #2
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	4619      	mov	r1, r3
 80185f0:	f640 1044 	movw	r0, #2372	; 0x944
 80185f4:	f001 fd6a 	bl	801a0cc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80185f8:	1dfb      	adds	r3, r7, #7
 80185fa:	22ff      	movs	r2, #255	; 0xff
 80185fc:	4619      	mov	r1, r3
 80185fe:	4858      	ldr	r0, [pc, #352]	; (8018760 <RadioIrqProcess+0x2c0>)
 8018600:	f000 feb0 	bl	8019364 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018604:	4857      	ldr	r0, [pc, #348]	; (8018764 <RadioIrqProcess+0x2c4>)
 8018606:	f001 fd0f 	bl	801a028 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801860a:	4b53      	ldr	r3, [pc, #332]	; (8018758 <RadioIrqProcess+0x2b8>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	f000 8144 	beq.w	801889c <RadioIrqProcess+0x3fc>
 8018614:	4b50      	ldr	r3, [pc, #320]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	689b      	ldr	r3, [r3, #8]
 801861a:	2b00      	cmp	r3, #0
 801861c:	f000 813e 	beq.w	801889c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018620:	4b4b      	ldr	r3, [pc, #300]	; (8018750 <RadioIrqProcess+0x2b0>)
 8018622:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018626:	2b01      	cmp	r3, #1
 8018628:	d10e      	bne.n	8018648 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801862a:	4b4b      	ldr	r3, [pc, #300]	; (8018758 <RadioIrqProcess+0x2b8>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	689c      	ldr	r4, [r3, #8]
 8018630:	79fb      	ldrb	r3, [r7, #7]
 8018632:	b299      	uxth	r1, r3
 8018634:	4b46      	ldr	r3, [pc, #280]	; (8018750 <RadioIrqProcess+0x2b0>)
 8018636:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801863a:	b21a      	sxth	r2, r3
 801863c:	4b44      	ldr	r3, [pc, #272]	; (8018750 <RadioIrqProcess+0x2b0>)
 801863e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8018642:	4847      	ldr	r0, [pc, #284]	; (8018760 <RadioIrqProcess+0x2c0>)
 8018644:	47a0      	blx	r4
                break;
 8018646:	e01d      	b.n	8018684 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018648:	4b41      	ldr	r3, [pc, #260]	; (8018750 <RadioIrqProcess+0x2b0>)
 801864a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801864c:	463a      	mov	r2, r7
 801864e:	4611      	mov	r1, r2
 8018650:	4618      	mov	r0, r3
 8018652:	f001 ff7d 	bl	801a550 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018656:	4b40      	ldr	r3, [pc, #256]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	689c      	ldr	r4, [r3, #8]
 801865c:	79fb      	ldrb	r3, [r7, #7]
 801865e:	b299      	uxth	r1, r3
 8018660:	4b3b      	ldr	r3, [pc, #236]	; (8018750 <RadioIrqProcess+0x2b0>)
 8018662:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8018666:	b218      	sxth	r0, r3
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801866e:	4a3e      	ldr	r2, [pc, #248]	; (8018768 <RadioIrqProcess+0x2c8>)
 8018670:	fb82 5203 	smull	r5, r2, r2, r3
 8018674:	1192      	asrs	r2, r2, #6
 8018676:	17db      	asrs	r3, r3, #31
 8018678:	1ad3      	subs	r3, r2, r3
 801867a:	b25b      	sxtb	r3, r3
 801867c:	4602      	mov	r2, r0
 801867e:	4838      	ldr	r0, [pc, #224]	; (8018760 <RadioIrqProcess+0x2c0>)
 8018680:	47a0      	blx	r4
                break;
 8018682:	bf00      	nop
        break;
 8018684:	e10a      	b.n	801889c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018686:	2000      	movs	r0, #0
 8018688:	f000 ff9c 	bl	80195c4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801868c:	4b32      	ldr	r3, [pc, #200]	; (8018758 <RadioIrqProcess+0x2b8>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	f000 8105 	beq.w	80188a0 <RadioIrqProcess+0x400>
 8018696:	4b30      	ldr	r3, [pc, #192]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	699b      	ldr	r3, [r3, #24]
 801869c:	2b00      	cmp	r3, #0
 801869e:	f000 80ff 	beq.w	80188a0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80186a2:	4b2d      	ldr	r3, [pc, #180]	; (8018758 <RadioIrqProcess+0x2b8>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	699b      	ldr	r3, [r3, #24]
 80186a8:	2000      	movs	r0, #0
 80186aa:	4798      	blx	r3
        break;
 80186ac:	e0f8      	b.n	80188a0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80186ae:	2000      	movs	r0, #0
 80186b0:	f000 ff88 	bl	80195c4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80186b4:	4b28      	ldr	r3, [pc, #160]	; (8018758 <RadioIrqProcess+0x2b8>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f000 80f3 	beq.w	80188a4 <RadioIrqProcess+0x404>
 80186be:	4b26      	ldr	r3, [pc, #152]	; (8018758 <RadioIrqProcess+0x2b8>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	699b      	ldr	r3, [r3, #24]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f000 80ed 	beq.w	80188a4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80186ca:	4b23      	ldr	r3, [pc, #140]	; (8018758 <RadioIrqProcess+0x2b8>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	699b      	ldr	r3, [r3, #24]
 80186d0:	2001      	movs	r0, #1
 80186d2:	4798      	blx	r3
        break;
 80186d4:	e0e6      	b.n	80188a4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80186d6:	4b25      	ldr	r3, [pc, #148]	; (801876c <RadioIrqProcess+0x2cc>)
 80186d8:	2201      	movs	r2, #1
 80186da:	2100      	movs	r1, #0
 80186dc:	2002      	movs	r0, #2
 80186de:	f003 f91b 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80186e2:	f000 fe25 	bl	8019330 <SUBGRF_GetOperatingMode>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b04      	cmp	r3, #4
 80186ea:	d115      	bne.n	8018718 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 80186ec:	4819      	ldr	r0, [pc, #100]	; (8018754 <RadioIrqProcess+0x2b4>)
 80186ee:	f002 ff09 	bl	801b504 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80186f2:	2000      	movs	r0, #0
 80186f4:	f000 ff66 	bl	80195c4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80186f8:	4b17      	ldr	r3, [pc, #92]	; (8018758 <RadioIrqProcess+0x2b8>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	f000 80d3 	beq.w	80188a8 <RadioIrqProcess+0x408>
 8018702:	4b15      	ldr	r3, [pc, #84]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	2b00      	cmp	r3, #0
 801870a:	f000 80cd 	beq.w	80188a8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801870e:	4b12      	ldr	r3, [pc, #72]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	685b      	ldr	r3, [r3, #4]
 8018714:	4798      	blx	r3
        break;
 8018716:	e0c7      	b.n	80188a8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018718:	f000 fe0a 	bl	8019330 <SUBGRF_GetOperatingMode>
 801871c:	4603      	mov	r3, r0
 801871e:	2b05      	cmp	r3, #5
 8018720:	f040 80c2 	bne.w	80188a8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018724:	480d      	ldr	r0, [pc, #52]	; (801875c <RadioIrqProcess+0x2bc>)
 8018726:	f002 feed 	bl	801b504 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801872a:	2000      	movs	r0, #0
 801872c:	f000 ff4a 	bl	80195c4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018730:	4b09      	ldr	r3, [pc, #36]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	2b00      	cmp	r3, #0
 8018736:	f000 80b7 	beq.w	80188a8 <RadioIrqProcess+0x408>
 801873a:	4b07      	ldr	r3, [pc, #28]	; (8018758 <RadioIrqProcess+0x2b8>)
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	2b00      	cmp	r3, #0
 8018742:	f000 80b1 	beq.w	80188a8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018746:	4b04      	ldr	r3, [pc, #16]	; (8018758 <RadioIrqProcess+0x2b8>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	68db      	ldr	r3, [r3, #12]
 801874c:	4798      	blx	r3
        break;
 801874e:	e0ab      	b.n	80188a8 <RadioIrqProcess+0x408>
 8018750:	20001b28 	.word	0x20001b28
 8018754:	20001b84 	.word	0x20001b84
 8018758:	20001b24 	.word	0x20001b24
 801875c:	20001b9c 	.word	0x20001b9c
 8018760:	20001a24 	.word	0x20001a24
 8018764:	20001b4c 	.word	0x20001b4c
 8018768:	10624dd3 	.word	0x10624dd3
 801876c:	0801c648 	.word	0x0801c648
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018770:	4b54      	ldr	r3, [pc, #336]	; (80188c4 <RadioIrqProcess+0x424>)
 8018772:	2201      	movs	r2, #1
 8018774:	2100      	movs	r1, #0
 8018776:	2002      	movs	r0, #2
 8018778:	f003 f8ce 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801877c:	4b52      	ldr	r3, [pc, #328]	; (80188c8 <RadioIrqProcess+0x428>)
 801877e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018780:	2b00      	cmp	r3, #0
 8018782:	f000 8093 	beq.w	80188ac <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018786:	4a51      	ldr	r2, [pc, #324]	; (80188cc <RadioIrqProcess+0x42c>)
 8018788:	4b4f      	ldr	r3, [pc, #316]	; (80188c8 <RadioIrqProcess+0x428>)
 801878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801878c:	0c1b      	lsrs	r3, r3, #16
 801878e:	b2db      	uxtb	r3, r3
 8018790:	4619      	mov	r1, r3
 8018792:	f640 1003 	movw	r0, #2307	; 0x903
 8018796:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018798:	4a4c      	ldr	r2, [pc, #304]	; (80188cc <RadioIrqProcess+0x42c>)
 801879a:	4b4b      	ldr	r3, [pc, #300]	; (80188c8 <RadioIrqProcess+0x428>)
 801879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801879e:	0a1b      	lsrs	r3, r3, #8
 80187a0:	b2db      	uxtb	r3, r3
 80187a2:	4619      	mov	r1, r3
 80187a4:	f640 1004 	movw	r0, #2308	; 0x904
 80187a8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80187aa:	4a48      	ldr	r2, [pc, #288]	; (80188cc <RadioIrqProcess+0x42c>)
 80187ac:	4b46      	ldr	r3, [pc, #280]	; (80188c8 <RadioIrqProcess+0x428>)
 80187ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	4619      	mov	r1, r3
 80187b4:	f640 1005 	movw	r0, #2309	; 0x905
 80187b8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80187ba:	4c44      	ldr	r4, [pc, #272]	; (80188cc <RadioIrqProcess+0x42c>)
 80187bc:	4b44      	ldr	r3, [pc, #272]	; (80188d0 <RadioIrqProcess+0x430>)
 80187be:	f640 1002 	movw	r0, #2306	; 0x902
 80187c2:	4798      	blx	r3
 80187c4:	4603      	mov	r3, r0
 80187c6:	f043 0301 	orr.w	r3, r3, #1
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	4619      	mov	r1, r3
 80187ce:	f640 1002 	movw	r0, #2306	; 0x902
 80187d2:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80187d4:	4b3c      	ldr	r3, [pc, #240]	; (80188c8 <RadioIrqProcess+0x428>)
 80187d6:	2200      	movs	r2, #0
 80187d8:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80187da:	2300      	movs	r3, #0
 80187dc:	2200      	movs	r2, #0
 80187de:	f240 2162 	movw	r1, #610	; 0x262
 80187e2:	f240 2062 	movw	r0, #610	; 0x262
 80187e6:	f001 f8c1 	bl	801996c <SUBGRF_SetDioIrqParams>
        break;
 80187ea:	e05f      	b.n	80188ac <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80187ec:	4b39      	ldr	r3, [pc, #228]	; (80188d4 <RadioIrqProcess+0x434>)
 80187ee:	2201      	movs	r2, #1
 80187f0:	2100      	movs	r1, #0
 80187f2:	2002      	movs	r0, #2
 80187f4:	f003 f890 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80187f8:	f001 ff55 	bl	801a6a6 <RFW_Is_Init>
 80187fc:	4603      	mov	r3, r0
 80187fe:	2b01      	cmp	r3, #1
 8018800:	d156      	bne.n	80188b0 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018802:	f001 ff86 	bl	801a712 <RFW_ReceivePayload>
        break;
 8018806:	e053      	b.n	80188b0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018808:	4b33      	ldr	r3, [pc, #204]	; (80188d8 <RadioIrqProcess+0x438>)
 801880a:	2201      	movs	r2, #1
 801880c:	2100      	movs	r1, #0
 801880e:	2002      	movs	r0, #2
 8018810:	f003 f882 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018814:	e051      	b.n	80188ba <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018816:	4831      	ldr	r0, [pc, #196]	; (80188dc <RadioIrqProcess+0x43c>)
 8018818:	f002 fe74 	bl	801b504 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801881c:	4b2a      	ldr	r3, [pc, #168]	; (80188c8 <RadioIrqProcess+0x428>)
 801881e:	785b      	ldrb	r3, [r3, #1]
 8018820:	f083 0301 	eor.w	r3, r3, #1
 8018824:	b2db      	uxtb	r3, r3
 8018826:	2b00      	cmp	r3, #0
 8018828:	d002      	beq.n	8018830 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801882a:	2000      	movs	r0, #0
 801882c:	f000 feca 	bl	80195c4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018830:	4b2b      	ldr	r3, [pc, #172]	; (80188e0 <RadioIrqProcess+0x440>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d03d      	beq.n	80188b4 <RadioIrqProcess+0x414>
 8018838:	4b29      	ldr	r3, [pc, #164]	; (80188e0 <RadioIrqProcess+0x440>)
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	68db      	ldr	r3, [r3, #12]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d038      	beq.n	80188b4 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018842:	4b27      	ldr	r3, [pc, #156]	; (80188e0 <RadioIrqProcess+0x440>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	68db      	ldr	r3, [r3, #12]
 8018848:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801884a:	4b26      	ldr	r3, [pc, #152]	; (80188e4 <RadioIrqProcess+0x444>)
 801884c:	2201      	movs	r2, #1
 801884e:	2100      	movs	r1, #0
 8018850:	2002      	movs	r0, #2
 8018852:	f003 f861 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018856:	e02d      	b.n	80188b4 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018858:	4b23      	ldr	r3, [pc, #140]	; (80188e8 <RadioIrqProcess+0x448>)
 801885a:	2201      	movs	r2, #1
 801885c:	2100      	movs	r1, #0
 801885e:	2002      	movs	r0, #2
 8018860:	f003 f85a 	bl	801b918 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018864:	4b18      	ldr	r3, [pc, #96]	; (80188c8 <RadioIrqProcess+0x428>)
 8018866:	785b      	ldrb	r3, [r3, #1]
 8018868:	f083 0301 	eor.w	r3, r3, #1
 801886c:	b2db      	uxtb	r3, r3
 801886e:	2b00      	cmp	r3, #0
 8018870:	d002      	beq.n	8018878 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8018872:	2000      	movs	r0, #0
 8018874:	f000 fea6 	bl	80195c4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018878:	4b19      	ldr	r3, [pc, #100]	; (80188e0 <RadioIrqProcess+0x440>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d01b      	beq.n	80188b8 <RadioIrqProcess+0x418>
 8018880:	4b17      	ldr	r3, [pc, #92]	; (80188e0 <RadioIrqProcess+0x440>)
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	691b      	ldr	r3, [r3, #16]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d016      	beq.n	80188b8 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801888a:	4b15      	ldr	r3, [pc, #84]	; (80188e0 <RadioIrqProcess+0x440>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	691b      	ldr	r3, [r3, #16]
 8018890:	4798      	blx	r3
        break;
 8018892:	e011      	b.n	80188b8 <RadioIrqProcess+0x418>
        break;
 8018894:	bf00      	nop
 8018896:	e010      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 8018898:	bf00      	nop
 801889a:	e00e      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 801889c:	bf00      	nop
 801889e:	e00c      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188a0:	bf00      	nop
 80188a2:	e00a      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188a4:	bf00      	nop
 80188a6:	e008      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188a8:	bf00      	nop
 80188aa:	e006      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188ac:	bf00      	nop
 80188ae:	e004      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188b0:	bf00      	nop
 80188b2:	e002      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188b4:	bf00      	nop
 80188b6:	e000      	b.n	80188ba <RadioIrqProcess+0x41a>
        break;
 80188b8:	bf00      	nop
    }
}
 80188ba:	bf00      	nop
 80188bc:	3708      	adds	r7, #8
 80188be:	46bd      	mov	sp, r7
 80188c0:	bdb0      	pop	{r4, r5, r7, pc}
 80188c2:	bf00      	nop
 80188c4:	0801c65c 	.word	0x0801c65c
 80188c8:	20001b28 	.word	0x20001b28
 80188cc:	080182af 	.word	0x080182af
 80188d0:	080182d3 	.word	0x080182d3
 80188d4:	0801c668 	.word	0x0801c668
 80188d8:	0801c674 	.word	0x0801c674
 80188dc:	20001b9c 	.word	0x20001b9c
 80188e0:	20001b24 	.word	0x20001b24
 80188e4:	0801c680 	.word	0x0801c680
 80188e8:	0801c68c 	.word	0x0801c68c

080188ec <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80188f0:	4b09      	ldr	r3, [pc, #36]	; (8018918 <RadioTxPrbs+0x2c>)
 80188f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80188f6:	2101      	movs	r1, #1
 80188f8:	4618      	mov	r0, r3
 80188fa:	f001 fcdb 	bl	801a2b4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80188fe:	4b07      	ldr	r3, [pc, #28]	; (801891c <RadioTxPrbs+0x30>)
 8018900:	212d      	movs	r1, #45	; 0x2d
 8018902:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018906:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018908:	f000 ff1f 	bl	801974a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801890c:	4804      	ldr	r0, [pc, #16]	; (8018920 <RadioTxPrbs+0x34>)
 801890e:	f000 fe75 	bl	80195fc <SUBGRF_SetTx>
}
 8018912:	bf00      	nop
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	20001b28 	.word	0x20001b28
 801891c:	080182af 	.word	0x080182af
 8018920:	000fffff 	.word	0x000fffff

08018924 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
 801892a:	4603      	mov	r3, r0
 801892c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801892e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018932:	4618      	mov	r0, r3
 8018934:	f001 fce6 	bl	801a304 <SUBGRF_SetRfTxPower>
 8018938:	4603      	mov	r3, r0
 801893a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801893c:	210e      	movs	r1, #14
 801893e:	f640 101f 	movw	r0, #2335	; 0x91f
 8018942:	f001 fbc3 	bl	801a0cc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018946:	7bfb      	ldrb	r3, [r7, #15]
 8018948:	2101      	movs	r1, #1
 801894a:	4618      	mov	r0, r3
 801894c:	f001 fcb2 	bl	801a2b4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018950:	f000 fef2 	bl	8019738 <SUBGRF_SetTxContinuousWave>
}
 8018954:	bf00      	nop
 8018956:	3710      	adds	r7, #16
 8018958:	46bd      	mov	sp, r7
 801895a:	bd80      	pop	{r7, pc}

0801895c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801895c:	b480      	push	{r7}
 801895e:	b089      	sub	sp, #36	; 0x24
 8018960:	af00      	add	r7, sp, #0
 8018962:	60f8      	str	r0, [r7, #12]
 8018964:	60b9      	str	r1, [r7, #8]
 8018966:	4613      	mov	r3, r2
 8018968:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801896a:	2300      	movs	r3, #0
 801896c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801896e:	2300      	movs	r3, #0
 8018970:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018972:	2300      	movs	r3, #0
 8018974:	61bb      	str	r3, [r7, #24]
 8018976:	e011      	b.n	801899c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018978:	69bb      	ldr	r3, [r7, #24]
 801897a:	68ba      	ldr	r2, [r7, #8]
 801897c:	4413      	add	r3, r2
 801897e:	781a      	ldrb	r2, [r3, #0]
 8018980:	69bb      	ldr	r3, [r7, #24]
 8018982:	68b9      	ldr	r1, [r7, #8]
 8018984:	440b      	add	r3, r1
 8018986:	43d2      	mvns	r2, r2
 8018988:	b2d2      	uxtb	r2, r2
 801898a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801898c:	69bb      	ldr	r3, [r7, #24]
 801898e:	68fa      	ldr	r2, [r7, #12]
 8018990:	4413      	add	r3, r2
 8018992:	2200      	movs	r2, #0
 8018994:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018996:	69bb      	ldr	r3, [r7, #24]
 8018998:	3301      	adds	r3, #1
 801899a:	61bb      	str	r3, [r7, #24]
 801899c:	79fb      	ldrb	r3, [r7, #7]
 801899e:	69ba      	ldr	r2, [r7, #24]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	dbe9      	blt.n	8018978 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80189a4:	2300      	movs	r3, #0
 80189a6:	61bb      	str	r3, [r7, #24]
 80189a8:	e049      	b.n	8018a3e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80189aa:	69bb      	ldr	r3, [r7, #24]
 80189ac:	425a      	negs	r2, r3
 80189ae:	f003 0307 	and.w	r3, r3, #7
 80189b2:	f002 0207 	and.w	r2, r2, #7
 80189b6:	bf58      	it	pl
 80189b8:	4253      	negpl	r3, r2
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	f1c3 0307 	rsb	r3, r3, #7
 80189c0:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80189c2:	69bb      	ldr	r3, [r7, #24]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	da00      	bge.n	80189ca <payload_integration+0x6e>
 80189c8:	3307      	adds	r3, #7
 80189ca:	10db      	asrs	r3, r3, #3
 80189cc:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80189ce:	69bb      	ldr	r3, [r7, #24]
 80189d0:	3301      	adds	r3, #1
 80189d2:	425a      	negs	r2, r3
 80189d4:	f003 0307 	and.w	r3, r3, #7
 80189d8:	f002 0207 	and.w	r2, r2, #7
 80189dc:	bf58      	it	pl
 80189de:	4253      	negpl	r3, r2
 80189e0:	b2db      	uxtb	r3, r3
 80189e2:	f1c3 0307 	rsb	r3, r3, #7
 80189e6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80189e8:	69bb      	ldr	r3, [r7, #24]
 80189ea:	3301      	adds	r3, #1
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	da00      	bge.n	80189f2 <payload_integration+0x96>
 80189f0:	3307      	adds	r3, #7
 80189f2:	10db      	asrs	r3, r3, #3
 80189f4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80189f6:	7dbb      	ldrb	r3, [r7, #22]
 80189f8:	68ba      	ldr	r2, [r7, #8]
 80189fa:	4413      	add	r3, r2
 80189fc:	781b      	ldrb	r3, [r3, #0]
 80189fe:	461a      	mov	r2, r3
 8018a00:	7dfb      	ldrb	r3, [r7, #23]
 8018a02:	fa42 f303 	asr.w	r3, r2, r3
 8018a06:	b2db      	uxtb	r3, r3
 8018a08:	f003 0301 	and.w	r3, r3, #1
 8018a0c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018a0e:	7ffa      	ldrb	r2, [r7, #31]
 8018a10:	7cfb      	ldrb	r3, [r7, #19]
 8018a12:	4053      	eors	r3, r2
 8018a14:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018a16:	7d3b      	ldrb	r3, [r7, #20]
 8018a18:	68fa      	ldr	r2, [r7, #12]
 8018a1a:	4413      	add	r3, r2
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	b25a      	sxtb	r2, r3
 8018a20:	7ff9      	ldrb	r1, [r7, #31]
 8018a22:	7d7b      	ldrb	r3, [r7, #21]
 8018a24:	fa01 f303 	lsl.w	r3, r1, r3
 8018a28:	b25b      	sxtb	r3, r3
 8018a2a:	4313      	orrs	r3, r2
 8018a2c:	b259      	sxtb	r1, r3
 8018a2e:	7d3b      	ldrb	r3, [r7, #20]
 8018a30:	68fa      	ldr	r2, [r7, #12]
 8018a32:	4413      	add	r3, r2
 8018a34:	b2ca      	uxtb	r2, r1
 8018a36:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018a38:	69bb      	ldr	r3, [r7, #24]
 8018a3a:	3301      	adds	r3, #1
 8018a3c:	61bb      	str	r3, [r7, #24]
 8018a3e:	79fb      	ldrb	r3, [r7, #7]
 8018a40:	00db      	lsls	r3, r3, #3
 8018a42:	69ba      	ldr	r2, [r7, #24]
 8018a44:	429a      	cmp	r2, r3
 8018a46:	dbb0      	blt.n	80189aa <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018a48:	7ffb      	ldrb	r3, [r7, #31]
 8018a4a:	01db      	lsls	r3, r3, #7
 8018a4c:	b25a      	sxtb	r2, r3
 8018a4e:	7ffb      	ldrb	r3, [r7, #31]
 8018a50:	019b      	lsls	r3, r3, #6
 8018a52:	b25b      	sxtb	r3, r3
 8018a54:	4313      	orrs	r3, r2
 8018a56:	b25b      	sxtb	r3, r3
 8018a58:	7ffa      	ldrb	r2, [r7, #31]
 8018a5a:	2a00      	cmp	r2, #0
 8018a5c:	d101      	bne.n	8018a62 <payload_integration+0x106>
 8018a5e:	2220      	movs	r2, #32
 8018a60:	e000      	b.n	8018a64 <payload_integration+0x108>
 8018a62:	2200      	movs	r2, #0
 8018a64:	4313      	orrs	r3, r2
 8018a66:	b259      	sxtb	r1, r3
 8018a68:	79fb      	ldrb	r3, [r7, #7]
 8018a6a:	68fa      	ldr	r2, [r7, #12]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	b2ca      	uxtb	r2, r1
 8018a70:	701a      	strb	r2, [r3, #0]
}
 8018a72:	bf00      	nop
 8018a74:	3724      	adds	r7, #36	; 0x24
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bc80      	pop	{r7}
 8018a7a:	4770      	bx	lr

08018a7c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b08c      	sub	sp, #48	; 0x30
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60b9      	str	r1, [r7, #8]
 8018a84:	607a      	str	r2, [r7, #4]
 8018a86:	603b      	str	r3, [r7, #0]
 8018a88:	4603      	mov	r3, r0
 8018a8a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8018a90:	2300      	movs	r3, #0
 8018a92:	623b      	str	r3, [r7, #32]
 8018a94:	2300      	movs	r3, #0
 8018a96:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018a98:	f001 fdff 	bl	801a69a <RFW_DeInit>

    if( rxContinuous != 0 )
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d001      	beq.n	8018aa6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	bf14      	ite	ne
 8018aac:	2301      	movne	r3, #1
 8018aae:	2300      	moveq	r3, #0
 8018ab0:	b2da      	uxtb	r2, r3
 8018ab2:	4ba3      	ldr	r3, [pc, #652]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018ab4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018ab6:	7bfb      	ldrb	r3, [r7, #15]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d003      	beq.n	8018ac4 <RadioSetRxGenericConfig+0x48>
 8018abc:	2b01      	cmp	r3, #1
 8018abe:	f000 80dc 	beq.w	8018c7a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018ac2:	e194      	b.n	8018dee <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	689b      	ldr	r3, [r3, #8]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d003      	beq.n	8018ad4 <RadioSetRxGenericConfig+0x58>
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d102      	bne.n	8018ada <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ad8:	e18a      	b.n	8018df0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	7f9b      	ldrb	r3, [r3, #30]
 8018ade:	2b08      	cmp	r3, #8
 8018ae0:	d902      	bls.n	8018ae8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8018ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ae6:	e183      	b.n	8018df0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	6919      	ldr	r1, [r3, #16]
 8018aec:	68bb      	ldr	r3, [r7, #8]
 8018aee:	7f9b      	ldrb	r3, [r3, #30]
 8018af0:	b29a      	uxth	r2, r3
 8018af2:	f107 0320 	add.w	r3, r7, #32
 8018af6:	4618      	mov	r0, r3
 8018af8:	f001 fec2 	bl	801a880 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018afc:	68bb      	ldr	r3, [r7, #8]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	bf14      	ite	ne
 8018b04:	2301      	movne	r3, #1
 8018b06:	2300      	moveq	r3, #0
 8018b08:	b2db      	uxtb	r3, r3
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f000 fe26 	bl	801975c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018b10:	4b8b      	ldr	r3, [pc, #556]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b12:	2200      	movs	r2, #0
 8018b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	689b      	ldr	r3, [r3, #8]
 8018b1c:	4a88      	ldr	r2, [pc, #544]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b1e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018b26:	4b86      	ldr	r3, [pc, #536]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	4618      	mov	r0, r3
 8018b32:	f001 fce5 	bl	801a500 <SUBGRF_GetFskBandwidthRegValue>
 8018b36:	4603      	mov	r3, r0
 8018b38:	461a      	mov	r2, r3
 8018b3a:	4b81      	ldr	r3, [pc, #516]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018b40:	4b7f      	ldr	r3, [pc, #508]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b42:	2200      	movs	r2, #0
 8018b44:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018b46:	68bb      	ldr	r3, [r7, #8]
 8018b48:	68db      	ldr	r3, [r3, #12]
 8018b4a:	b29b      	uxth	r3, r3
 8018b4c:	00db      	lsls	r3, r3, #3
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	4b7b      	ldr	r3, [pc, #492]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b52:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018b54:	68bb      	ldr	r3, [r7, #8]
 8018b56:	7fda      	ldrb	r2, [r3, #31]
 8018b58:	4b79      	ldr	r3, [pc, #484]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b5a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018b5c:	68bb      	ldr	r3, [r7, #8]
 8018b5e:	7f9b      	ldrb	r3, [r3, #30]
 8018b60:	00db      	lsls	r3, r3, #3
 8018b62:	b2da      	uxtb	r2, r3
 8018b64:	4b76      	ldr	r3, [pc, #472]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b66:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8018b6e:	4b74      	ldr	r3, [pc, #464]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b70:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018b72:	68bb      	ldr	r3, [r7, #8]
 8018b74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d105      	bne.n	8018b88 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	695b      	ldr	r3, [r3, #20]
 8018b80:	b2da      	uxtb	r2, r3
 8018b82:	4b6f      	ldr	r3, [pc, #444]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b84:	759a      	strb	r2, [r3, #22]
 8018b86:	e00b      	b.n	8018ba0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018b88:	68bb      	ldr	r3, [r7, #8]
 8018b8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8018b8e:	2b02      	cmp	r3, #2
 8018b90:	d103      	bne.n	8018b9a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018b92:	4b6b      	ldr	r3, [pc, #428]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b94:	22ff      	movs	r2, #255	; 0xff
 8018b96:	759a      	strb	r2, [r3, #22]
 8018b98:	e002      	b.n	8018ba0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018b9a:	4b69      	ldr	r3, [pc, #420]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018b9c:	22ff      	movs	r2, #255	; 0xff
 8018b9e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018ba6:	2b02      	cmp	r3, #2
 8018ba8:	d004      	beq.n	8018bb4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018baa:	68bb      	ldr	r3, [r7, #8]
 8018bac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8018bb0:	2b02      	cmp	r3, #2
 8018bb2:	d12d      	bne.n	8018c10 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018bba:	2bf1      	cmp	r3, #241	; 0xf1
 8018bbc:	d00c      	beq.n	8018bd8 <RadioSetRxGenericConfig+0x15c>
 8018bbe:	68bb      	ldr	r3, [r7, #8]
 8018bc0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018bc4:	2bf2      	cmp	r3, #242	; 0xf2
 8018bc6:	d007      	beq.n	8018bd8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018bce:	2b01      	cmp	r3, #1
 8018bd0:	d002      	beq.n	8018bd8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8018bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bd6:	e10b      	b.n	8018df0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8018bd8:	2300      	movs	r3, #0
 8018bda:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8018bdc:	68bb      	ldr	r3, [r7, #8]
 8018bde:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018be0:	4b58      	ldr	r3, [pc, #352]	; (8018d44 <RadioSetRxGenericConfig+0x2c8>)
 8018be2:	6819      	ldr	r1, [r3, #0]
 8018be4:	f107 0314 	add.w	r3, r7, #20
 8018be8:	4a57      	ldr	r2, [pc, #348]	; (8018d48 <RadioSetRxGenericConfig+0x2cc>)
 8018bea:	4618      	mov	r0, r3
 8018bec:	f001 fd48 	bl	801a680 <RFW_Init>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d002      	beq.n	8018bfc <RadioSetRxGenericConfig+0x180>
                return -1;
 8018bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bfa:	e0f9      	b.n	8018df0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018bfc:	4b50      	ldr	r3, [pc, #320]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018bfe:	2200      	movs	r2, #0
 8018c00:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018c02:	4b4f      	ldr	r3, [pc, #316]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018c04:	2201      	movs	r2, #1
 8018c06:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018c08:	4b4d      	ldr	r3, [pc, #308]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	755a      	strb	r2, [r3, #21]
        {
 8018c0e:	e00e      	b.n	8018c2e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018c16:	4b4a      	ldr	r3, [pc, #296]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018c18:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018c20:	4b47      	ldr	r3, [pc, #284]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018c22:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8018c2a:	4b45      	ldr	r3, [pc, #276]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018c2c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018c2e:	f7ff fa3c 	bl	80180aa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018c32:	2000      	movs	r0, #0
 8018c34:	f7fe fbd0 	bl	80173d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c38:	4844      	ldr	r0, [pc, #272]	; (8018d4c <RadioSetRxGenericConfig+0x2d0>)
 8018c3a:	f001 f82d 	bl	8019c98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c3e:	4844      	ldr	r0, [pc, #272]	; (8018d50 <RadioSetRxGenericConfig+0x2d4>)
 8018c40:	f001 f8fc 	bl	8019e3c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018c44:	f107 0320 	add.w	r3, r7, #32
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f000 fbc0 	bl	80193ce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	8b9b      	ldrh	r3, [r3, #28]
 8018c52:	4618      	mov	r0, r3
 8018c54:	f000 fc0a 	bl	801946c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018c58:	68bb      	ldr	r3, [r7, #8]
 8018c5a:	8b1b      	ldrh	r3, [r3, #24]
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f000 fbe5 	bl	801942c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018c68:	fb03 f202 	mul.w	r2, r3, r2
 8018c6c:	68bb      	ldr	r3, [r7, #8]
 8018c6e:	689b      	ldr	r3, [r3, #8]
 8018c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c74:	4a32      	ldr	r2, [pc, #200]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018c76:	6093      	str	r3, [r2, #8]
        break;
 8018c78:	e0b9      	b.n	8018dee <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8018c7a:	68bb      	ldr	r3, [r7, #8]
 8018c7c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d102      	bne.n	8018c88 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8018c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c86:	e0b3      	b.n	8018df0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018c8e:	2b01      	cmp	r3, #1
 8018c90:	d104      	bne.n	8018c9c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018c92:	68bb      	ldr	r3, [r7, #8]
 8018c94:	695b      	ldr	r3, [r3, #20]
 8018c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018c9a:	e002      	b.n	8018ca2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8018c9c:	23ff      	movs	r3, #255	; 0xff
 8018c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018ca2:	68bb      	ldr	r3, [r7, #8]
 8018ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	bf14      	ite	ne
 8018caa:	2301      	movne	r3, #1
 8018cac:	2300      	moveq	r3, #0
 8018cae:	b2db      	uxtb	r3, r3
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f000 fd53 	bl	801975c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f000 fd5d 	bl	801977a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018cc0:	4b1f      	ldr	r3, [pc, #124]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018cc2:	2201      	movs	r2, #1
 8018cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8018cce:	4b1c      	ldr	r3, [pc, #112]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8018cda:	4b19      	ldr	r3, [pc, #100]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018ce0:	68bb      	ldr	r3, [r7, #8]
 8018ce2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8018ce6:	4b16      	ldr	r3, [pc, #88]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018ce8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018cf2:	2b02      	cmp	r3, #2
 8018cf4:	d010      	beq.n	8018d18 <RadioSetRxGenericConfig+0x29c>
 8018cf6:	2b02      	cmp	r3, #2
 8018cf8:	dc2c      	bgt.n	8018d54 <RadioSetRxGenericConfig+0x2d8>
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d002      	beq.n	8018d04 <RadioSetRxGenericConfig+0x288>
 8018cfe:	2b01      	cmp	r3, #1
 8018d00:	d005      	beq.n	8018d0e <RadioSetRxGenericConfig+0x292>
            break;
 8018d02:	e027      	b.n	8018d54 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018d04:	4b0e      	ldr	r3, [pc, #56]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018d06:	2200      	movs	r2, #0
 8018d08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018d0c:	e023      	b.n	8018d56 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018d0e:	4b0c      	ldr	r3, [pc, #48]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018d10:	2201      	movs	r2, #1
 8018d12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018d16:	e01e      	b.n	8018d56 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d1e:	2b0b      	cmp	r3, #11
 8018d20:	d004      	beq.n	8018d2c <RadioSetRxGenericConfig+0x2b0>
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d28:	2b0c      	cmp	r3, #12
 8018d2a:	d104      	bne.n	8018d36 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018d2c:	4b04      	ldr	r3, [pc, #16]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018d2e:	2201      	movs	r2, #1
 8018d30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018d34:	e00f      	b.n	8018d56 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018d36:	4b02      	ldr	r3, [pc, #8]	; (8018d40 <RadioSetRxGenericConfig+0x2c4>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018d3e:	e00a      	b.n	8018d56 <RadioSetRxGenericConfig+0x2da>
 8018d40:	20001b28 	.word	0x20001b28
 8018d44:	20001b24 	.word	0x20001b24
 8018d48:	20001b9c 	.word	0x20001b9c
 8018d4c:	20001b60 	.word	0x20001b60
 8018d50:	20001b36 	.word	0x20001b36
            break;
 8018d54:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018d56:	4b28      	ldr	r3, [pc, #160]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018d58:	2201      	movs	r2, #1
 8018d5a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018d5c:	68bb      	ldr	r3, [r7, #8]
 8018d5e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8018d60:	4b25      	ldr	r3, [pc, #148]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018d62:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8018d6a:	4b23      	ldr	r3, [pc, #140]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018d6c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018d6e:	4a22      	ldr	r2, [pc, #136]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d74:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018d76:	68bb      	ldr	r3, [r7, #8]
 8018d78:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8018d7c:	4b1e      	ldr	r3, [pc, #120]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018d7e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8018d88:	4b1b      	ldr	r3, [pc, #108]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8018d8e:	f7ff f98c 	bl	80180aa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018d92:	2001      	movs	r0, #1
 8018d94:	f7fe fb20 	bl	80173d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d98:	4818      	ldr	r0, [pc, #96]	; (8018dfc <RadioSetRxGenericConfig+0x380>)
 8018d9a:	f000 ff7d 	bl	8019c98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d9e:	4818      	ldr	r0, [pc, #96]	; (8018e00 <RadioSetRxGenericConfig+0x384>)
 8018da0:	f001 f84c 	bl	8019e3c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018da4:	4b14      	ldr	r3, [pc, #80]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018daa:	2b01      	cmp	r3, #1
 8018dac:	d10d      	bne.n	8018dca <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018dae:	f240 7036 	movw	r0, #1846	; 0x736
 8018db2:	f001 f99f 	bl	801a0f4 <SUBGRF_ReadRegister>
 8018db6:	4603      	mov	r3, r0
 8018db8:	f023 0304 	bic.w	r3, r3, #4
 8018dbc:	b2db      	uxtb	r3, r3
 8018dbe:	4619      	mov	r1, r3
 8018dc0:	f240 7036 	movw	r0, #1846	; 0x736
 8018dc4:	f001 f982 	bl	801a0cc <SUBGRF_WriteRegister>
 8018dc8:	e00c      	b.n	8018de4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018dca:	f240 7036 	movw	r0, #1846	; 0x736
 8018dce:	f001 f991 	bl	801a0f4 <SUBGRF_ReadRegister>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	f043 0304 	orr.w	r3, r3, #4
 8018dd8:	b2db      	uxtb	r3, r3
 8018dda:	4619      	mov	r1, r3
 8018ddc:	f240 7036 	movw	r0, #1846	; 0x736
 8018de0:	f001 f974 	bl	801a0cc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018de4:	4b04      	ldr	r3, [pc, #16]	; (8018df8 <RadioSetRxGenericConfig+0x37c>)
 8018de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018dea:	609a      	str	r2, [r3, #8]
        break;
 8018dec:	bf00      	nop
    }
    return status;
 8018dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3730      	adds	r7, #48	; 0x30
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	20001b28 	.word	0x20001b28
 8018dfc:	20001b60 	.word	0x20001b60
 8018e00:	20001b36 	.word	0x20001b36

08018e04 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b08e      	sub	sp, #56	; 0x38
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	60b9      	str	r1, [r7, #8]
 8018e0c:	607b      	str	r3, [r7, #4]
 8018e0e:	4603      	mov	r3, r0
 8018e10:	73fb      	strb	r3, [r7, #15]
 8018e12:	4613      	mov	r3, r2
 8018e14:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018e16:	2300      	movs	r3, #0
 8018e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018e1e:	f001 fc3c 	bl	801a69a <RFW_DeInit>
    switch( modem )
 8018e22:	7bfb      	ldrb	r3, [r7, #15]
 8018e24:	2b03      	cmp	r3, #3
 8018e26:	f200 8204 	bhi.w	8019232 <RadioSetTxGenericConfig+0x42e>
 8018e2a:	a201      	add	r2, pc, #4	; (adr r2, 8018e30 <RadioSetTxGenericConfig+0x2c>)
 8018e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e30:	08018fb5 	.word	0x08018fb5
 8018e34:	080190fd 	.word	0x080190fd
 8018e38:	080191f5 	.word	0x080191f5
 8018e3c:	08018e41 	.word	0x08018e41
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	7c9b      	ldrb	r3, [r3, #18]
 8018e44:	2b08      	cmp	r3, #8
 8018e46:	d902      	bls.n	8018e4e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8018e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e4c:	e206      	b.n	801925c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8018e4e:	68bb      	ldr	r3, [r7, #8]
 8018e50:	6899      	ldr	r1, [r3, #8]
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	7c9b      	ldrb	r3, [r3, #18]
 8018e56:	b29a      	uxth	r2, r3
 8018e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f001 fd0f 	bl	801a880 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018e62:	68bb      	ldr	r3, [r7, #8]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d102      	bne.n	8018e70 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8018e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e6e:	e1f5      	b.n	801925c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	f242 7210 	movw	r2, #10000	; 0x2710
 8018e78:	4293      	cmp	r3, r2
 8018e7a:	d813      	bhi.n	8018ea4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8018e7c:	2302      	movs	r3, #2
 8018e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018e82:	4b99      	ldr	r3, [pc, #612]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018e84:	2203      	movs	r2, #3
 8018e86:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018e88:	4b97      	ldr	r3, [pc, #604]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018e8a:	2203      	movs	r2, #3
 8018e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018e90:	68bb      	ldr	r3, [r7, #8]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4a94      	ldr	r2, [pc, #592]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018e96:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	7cda      	ldrb	r2, [r3, #19]
 8018e9c:	4b92      	ldr	r3, [pc, #584]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018ea2:	e017      	b.n	8018ed4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018eaa:	4b8f      	ldr	r3, [pc, #572]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018eac:	2200      	movs	r2, #0
 8018eae:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018eb0:	4b8d      	ldr	r3, [pc, #564]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018eb8:	68bb      	ldr	r3, [r7, #8]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	4a8a      	ldr	r2, [pc, #552]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	7cda      	ldrb	r2, [r3, #19]
 8018ec4:	4b88      	ldr	r3, [pc, #544]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	089b      	lsrs	r3, r3, #2
 8018ed0:	4a85      	ldr	r2, [pc, #532]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ed2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	685b      	ldr	r3, [r3, #4]
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	00db      	lsls	r3, r3, #3
 8018edc:	b29a      	uxth	r2, r3
 8018ede:	4b82      	ldr	r3, [pc, #520]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ee0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018ee2:	4b81      	ldr	r3, [pc, #516]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ee4:	2204      	movs	r2, #4
 8018ee6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018ee8:	68bb      	ldr	r3, [r7, #8]
 8018eea:	7c9b      	ldrb	r3, [r3, #18]
 8018eec:	00db      	lsls	r3, r3, #3
 8018eee:	b2da      	uxtb	r2, r3
 8018ef0:	4b7d      	ldr	r3, [pc, #500]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ef2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018ef4:	4b7c      	ldr	r3, [pc, #496]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018efa:	68bb      	ldr	r3, [r7, #8]
 8018efc:	7d9b      	ldrb	r3, [r3, #22]
 8018efe:	2b02      	cmp	r3, #2
 8018f00:	d003      	beq.n	8018f0a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	7d1b      	ldrb	r3, [r3, #20]
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	d12b      	bne.n	8018f62 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018f0a:	68bb      	ldr	r3, [r7, #8]
 8018f0c:	7d5b      	ldrb	r3, [r3, #21]
 8018f0e:	2bf1      	cmp	r3, #241	; 0xf1
 8018f10:	d00a      	beq.n	8018f28 <RadioSetTxGenericConfig+0x124>
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	7d5b      	ldrb	r3, [r3, #21]
 8018f16:	2bf2      	cmp	r3, #242	; 0xf2
 8018f18:	d006      	beq.n	8018f28 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	7d5b      	ldrb	r3, [r3, #21]
 8018f1e:	2b01      	cmp	r3, #1
 8018f20:	d002      	beq.n	8018f28 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8018f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f26:	e199      	b.n	801925c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018f32:	4b6e      	ldr	r3, [pc, #440]	; (80190ec <RadioSetTxGenericConfig+0x2e8>)
 8018f34:	6819      	ldr	r1, [r3, #0]
 8018f36:	f107 0320 	add.w	r3, r7, #32
 8018f3a:	4a6d      	ldr	r2, [pc, #436]	; (80190f0 <RadioSetTxGenericConfig+0x2ec>)
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f001 fb9f 	bl	801a680 <RFW_Init>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d002      	beq.n	8018f4e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8018f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f4c:	e186      	b.n	801925c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018f4e:	4b66      	ldr	r3, [pc, #408]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018f50:	2200      	movs	r2, #0
 8018f52:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018f54:	4b64      	ldr	r3, [pc, #400]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018f56:	2201      	movs	r2, #1
 8018f58:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018f5a:	4b63      	ldr	r3, [pc, #396]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	755a      	strb	r2, [r3, #21]
        {
 8018f60:	e00b      	b.n	8018f7a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	7d5a      	ldrb	r2, [r3, #21]
 8018f66:	4b60      	ldr	r3, [pc, #384]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018f68:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	7d9a      	ldrb	r2, [r3, #22]
 8018f6e:	4b5e      	ldr	r3, [pc, #376]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018f70:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	7d1a      	ldrb	r2, [r3, #20]
 8018f76:	4b5c      	ldr	r3, [pc, #368]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018f78:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018f7a:	f7ff f896 	bl	80180aa <RadioStandby>
        RadioSetModem( radio_modem );
 8018f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018f82:	4618      	mov	r0, r3
 8018f84:	f7fe fa28 	bl	80173d8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f88:	485a      	ldr	r0, [pc, #360]	; (80190f4 <RadioSetTxGenericConfig+0x2f0>)
 8018f8a:	f000 fe85 	bl	8019c98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f8e:	485a      	ldr	r0, [pc, #360]	; (80190f8 <RadioSetTxGenericConfig+0x2f4>)
 8018f90:	f000 ff54 	bl	8019e3c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f000 fa18 	bl	80193ce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	8a1b      	ldrh	r3, [r3, #16]
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f000 fa62 	bl	801946c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	899b      	ldrh	r3, [r3, #12]
 8018fac:	4618      	mov	r0, r3
 8018fae:	f000 fa3d 	bl	801942c <SUBGRF_SetCrcPolynomial>
        break;
 8018fb2:	e13f      	b.n	8019234 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d102      	bne.n	8018fc2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018fc0:	e14c      	b.n	801925c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	7c9b      	ldrb	r3, [r3, #18]
 8018fc6:	2b08      	cmp	r3, #8
 8018fc8:	d902      	bls.n	8018fd0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018fce:	e145      	b.n	801925c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	6899      	ldr	r1, [r3, #8]
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	7c9b      	ldrb	r3, [r3, #18]
 8018fd8:	b29a      	uxth	r2, r3
 8018fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018fde:	4618      	mov	r0, r3
 8018fe0:	f001 fc4e 	bl	801a880 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018fe4:	4b40      	ldr	r3, [pc, #256]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018fec:	68bb      	ldr	r3, [r7, #8]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a3d      	ldr	r2, [pc, #244]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ff2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	7cda      	ldrb	r2, [r3, #19]
 8018ff8:	4b3b      	ldr	r3, [pc, #236]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8018ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018ffe:	68bb      	ldr	r3, [r7, #8]
 8019000:	699b      	ldr	r3, [r3, #24]
 8019002:	4a39      	ldr	r2, [pc, #228]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8019004:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019006:	4b38      	ldr	r3, [pc, #224]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8019008:	2200      	movs	r2, #0
 801900a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801900c:	68bb      	ldr	r3, [r7, #8]
 801900e:	685b      	ldr	r3, [r3, #4]
 8019010:	b29b      	uxth	r3, r3
 8019012:	00db      	lsls	r3, r3, #3
 8019014:	b29a      	uxth	r2, r3
 8019016:	4b34      	ldr	r3, [pc, #208]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8019018:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801901a:	4b33      	ldr	r3, [pc, #204]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 801901c:	2204      	movs	r2, #4
 801901e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019020:	68bb      	ldr	r3, [r7, #8]
 8019022:	7c9b      	ldrb	r3, [r3, #18]
 8019024:	00db      	lsls	r3, r3, #3
 8019026:	b2da      	uxtb	r2, r3
 8019028:	4b2f      	ldr	r3, [pc, #188]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 801902a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801902c:	4b2e      	ldr	r3, [pc, #184]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 801902e:	2200      	movs	r2, #0
 8019030:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	7d9b      	ldrb	r3, [r3, #22]
 8019036:	2b02      	cmp	r3, #2
 8019038:	d003      	beq.n	8019042 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	7d1b      	ldrb	r3, [r3, #20]
 801903e:	2b02      	cmp	r3, #2
 8019040:	d12a      	bne.n	8019098 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	7d5b      	ldrb	r3, [r3, #21]
 8019046:	2bf1      	cmp	r3, #241	; 0xf1
 8019048:	d00a      	beq.n	8019060 <RadioSetTxGenericConfig+0x25c>
 801904a:	68bb      	ldr	r3, [r7, #8]
 801904c:	7d5b      	ldrb	r3, [r3, #21]
 801904e:	2bf2      	cmp	r3, #242	; 0xf2
 8019050:	d006      	beq.n	8019060 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	7d5b      	ldrb	r3, [r3, #21]
 8019056:	2b01      	cmp	r3, #1
 8019058:	d002      	beq.n	8019060 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801905a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801905e:	e0fd      	b.n	801925c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8019060:	2301      	movs	r3, #1
 8019062:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019068:	4b20      	ldr	r3, [pc, #128]	; (80190ec <RadioSetTxGenericConfig+0x2e8>)
 801906a:	6819      	ldr	r1, [r3, #0]
 801906c:	f107 0314 	add.w	r3, r7, #20
 8019070:	4a1f      	ldr	r2, [pc, #124]	; (80190f0 <RadioSetTxGenericConfig+0x2ec>)
 8019072:	4618      	mov	r0, r3
 8019074:	f001 fb04 	bl	801a680 <RFW_Init>
 8019078:	4603      	mov	r3, r0
 801907a:	2b00      	cmp	r3, #0
 801907c:	d002      	beq.n	8019084 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801907e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019082:	e0eb      	b.n	801925c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019084:	4b18      	ldr	r3, [pc, #96]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8019086:	2200      	movs	r2, #0
 8019088:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801908a:	4b17      	ldr	r3, [pc, #92]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 801908c:	2201      	movs	r2, #1
 801908e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019090:	4b15      	ldr	r3, [pc, #84]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 8019092:	2200      	movs	r2, #0
 8019094:	755a      	strb	r2, [r3, #21]
        {
 8019096:	e00b      	b.n	80190b0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019098:	68bb      	ldr	r3, [r7, #8]
 801909a:	7d5a      	ldrb	r2, [r3, #21]
 801909c:	4b12      	ldr	r3, [pc, #72]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 801909e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	7d9a      	ldrb	r2, [r3, #22]
 80190a4:	4b10      	ldr	r3, [pc, #64]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 80190a6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	7d1a      	ldrb	r2, [r3, #20]
 80190ac:	4b0e      	ldr	r3, [pc, #56]	; (80190e8 <RadioSetTxGenericConfig+0x2e4>)
 80190ae:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80190b0:	f7fe fffb 	bl	80180aa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80190b4:	2000      	movs	r0, #0
 80190b6:	f7fe f98f 	bl	80173d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80190ba:	480e      	ldr	r0, [pc, #56]	; (80190f4 <RadioSetTxGenericConfig+0x2f0>)
 80190bc:	f000 fdec 	bl	8019c98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80190c0:	480d      	ldr	r0, [pc, #52]	; (80190f8 <RadioSetTxGenericConfig+0x2f4>)
 80190c2:	f000 febb 	bl	8019e3c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80190c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80190ca:	4618      	mov	r0, r3
 80190cc:	f000 f97f 	bl	80193ce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	8a1b      	ldrh	r3, [r3, #16]
 80190d4:	4618      	mov	r0, r3
 80190d6:	f000 f9c9 	bl	801946c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80190da:	68bb      	ldr	r3, [r7, #8]
 80190dc:	899b      	ldrh	r3, [r3, #12]
 80190de:	4618      	mov	r0, r3
 80190e0:	f000 f9a4 	bl	801942c <SUBGRF_SetCrcPolynomial>
        break;
 80190e4:	e0a6      	b.n	8019234 <RadioSetTxGenericConfig+0x430>
 80190e6:	bf00      	nop
 80190e8:	20001b28 	.word	0x20001b28
 80190ec:	20001b24 	.word	0x20001b24
 80190f0:	20001b84 	.word	0x20001b84
 80190f4:	20001b60 	.word	0x20001b60
 80190f8:	20001b36 	.word	0x20001b36
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80190fc:	4b59      	ldr	r3, [pc, #356]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 80190fe:	2201      	movs	r2, #1
 8019100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	781a      	ldrb	r2, [r3, #0]
 8019108:	4b56      	ldr	r3, [pc, #344]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801910a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	785a      	ldrb	r2, [r3, #1]
 8019112:	4b54      	ldr	r3, [pc, #336]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	789a      	ldrb	r2, [r3, #2]
 801911c:	4b51      	ldr	r3, [pc, #324]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801911e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019122:	68bb      	ldr	r3, [r7, #8]
 8019124:	78db      	ldrb	r3, [r3, #3]
 8019126:	2b02      	cmp	r3, #2
 8019128:	d010      	beq.n	801914c <RadioSetTxGenericConfig+0x348>
 801912a:	2b02      	cmp	r3, #2
 801912c:	dc20      	bgt.n	8019170 <RadioSetTxGenericConfig+0x36c>
 801912e:	2b00      	cmp	r3, #0
 8019130:	d002      	beq.n	8019138 <RadioSetTxGenericConfig+0x334>
 8019132:	2b01      	cmp	r3, #1
 8019134:	d005      	beq.n	8019142 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8019136:	e01b      	b.n	8019170 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019138:	4b4a      	ldr	r3, [pc, #296]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801913a:	2200      	movs	r2, #0
 801913c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019140:	e017      	b.n	8019172 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019142:	4b48      	ldr	r3, [pc, #288]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019144:	2201      	movs	r2, #1
 8019146:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801914a:	e012      	b.n	8019172 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	2b0b      	cmp	r3, #11
 8019152:	d003      	beq.n	801915c <RadioSetTxGenericConfig+0x358>
 8019154:	68bb      	ldr	r3, [r7, #8]
 8019156:	781b      	ldrb	r3, [r3, #0]
 8019158:	2b0c      	cmp	r3, #12
 801915a:	d104      	bne.n	8019166 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801915c:	4b41      	ldr	r3, [pc, #260]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801915e:	2201      	movs	r2, #1
 8019160:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019164:	e005      	b.n	8019172 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019166:	4b3f      	ldr	r3, [pc, #252]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019168:	2200      	movs	r2, #0
 801916a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801916e:	e000      	b.n	8019172 <RadioSetTxGenericConfig+0x36e>
            break;
 8019170:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019172:	4b3c      	ldr	r3, [pc, #240]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019174:	2201      	movs	r2, #1
 8019176:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	889a      	ldrh	r2, [r3, #4]
 801917c:	4b39      	ldr	r3, [pc, #228]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801917e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019180:	68bb      	ldr	r3, [r7, #8]
 8019182:	799a      	ldrb	r2, [r3, #6]
 8019184:	4b37      	ldr	r3, [pc, #220]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019186:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	79da      	ldrb	r2, [r3, #7]
 801918c:	4b35      	ldr	r3, [pc, #212]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801918e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	7a1a      	ldrb	r2, [r3, #8]
 8019196:	4b33      	ldr	r3, [pc, #204]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801919c:	f7fe ff85 	bl	80180aa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80191a0:	2001      	movs	r0, #1
 80191a2:	f7fe f919 	bl	80173d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80191a6:	4830      	ldr	r0, [pc, #192]	; (8019268 <RadioSetTxGenericConfig+0x464>)
 80191a8:	f000 fd76 	bl	8019c98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191ac:	482f      	ldr	r0, [pc, #188]	; (801926c <RadioSetTxGenericConfig+0x468>)
 80191ae:	f000 fe45 	bl	8019e3c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80191b2:	4b2c      	ldr	r3, [pc, #176]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 80191b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80191b8:	2b06      	cmp	r3, #6
 80191ba:	d10d      	bne.n	80191d8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80191bc:	f640 0089 	movw	r0, #2185	; 0x889
 80191c0:	f000 ff98 	bl	801a0f4 <SUBGRF_ReadRegister>
 80191c4:	4603      	mov	r3, r0
 80191c6:	f023 0304 	bic.w	r3, r3, #4
 80191ca:	b2db      	uxtb	r3, r3
 80191cc:	4619      	mov	r1, r3
 80191ce:	f640 0089 	movw	r0, #2185	; 0x889
 80191d2:	f000 ff7b 	bl	801a0cc <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80191d6:	e02d      	b.n	8019234 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80191d8:	f640 0089 	movw	r0, #2185	; 0x889
 80191dc:	f000 ff8a 	bl	801a0f4 <SUBGRF_ReadRegister>
 80191e0:	4603      	mov	r3, r0
 80191e2:	f043 0304 	orr.w	r3, r3, #4
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	4619      	mov	r1, r3
 80191ea:	f640 0089 	movw	r0, #2185	; 0x889
 80191ee:	f000 ff6d 	bl	801a0cc <SUBGRF_WriteRegister>
        break;
 80191f2:	e01f      	b.n	8019234 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80191f4:	68bb      	ldr	r3, [r7, #8]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d004      	beq.n	8019206 <RadioSetTxGenericConfig+0x402>
 80191fc:	68bb      	ldr	r3, [r7, #8]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019204:	d902      	bls.n	801920c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8019206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801920a:	e027      	b.n	801925c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801920c:	2003      	movs	r0, #3
 801920e:	f7fe f8e3 	bl	80173d8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019212:	4b14      	ldr	r3, [pc, #80]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019214:	2202      	movs	r2, #2
 8019216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801921a:	68bb      	ldr	r3, [r7, #8]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	4a11      	ldr	r2, [pc, #68]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019220:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019222:	4b10      	ldr	r3, [pc, #64]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019224:	2216      	movs	r2, #22
 8019226:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801922a:	480f      	ldr	r0, [pc, #60]	; (8019268 <RadioSetTxGenericConfig+0x464>)
 801922c:	f000 fd34 	bl	8019c98 <SUBGRF_SetModulationParams>
        break;
 8019230:	e000      	b.n	8019234 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8019232:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019238:	4618      	mov	r0, r3
 801923a:	f001 f863 	bl	801a304 <SUBGRF_SetRfTxPower>
 801923e:	4603      	mov	r3, r0
 8019240:	461a      	mov	r2, r3
 8019242:	4b08      	ldr	r3, [pc, #32]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019244:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019248:	4b06      	ldr	r3, [pc, #24]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 801924a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801924e:	4618      	mov	r0, r3
 8019250:	f001 fa37 	bl	801a6c2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019254:	4a03      	ldr	r2, [pc, #12]	; (8019264 <RadioSetTxGenericConfig+0x460>)
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	6053      	str	r3, [r2, #4]
    return 0;
 801925a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801925c:	4618      	mov	r0, r3
 801925e:	3738      	adds	r7, #56	; 0x38
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}
 8019264:	20001b28 	.word	0x20001b28
 8019268:	20001b60 	.word	0x20001b60
 801926c:	20001b36 	.word	0x20001b36

08019270 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8019270:	b480      	push	{r7}
 8019272:	b085      	sub	sp, #20
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019278:	2301      	movs	r3, #1
 801927a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801927c:	7bfb      	ldrb	r3, [r7, #15]
}
 801927e:	4618      	mov	r0, r3
 8019280:	3714      	adds	r7, #20
 8019282:	46bd      	mov	sp, r7
 8019284:	bc80      	pop	{r7}
 8019286:	4770      	bx	lr

08019288 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8019288:	b480      	push	{r7}
 801928a:	b083      	sub	sp, #12
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
 8019290:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019292:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8019294:	4618      	mov	r0, r3
 8019296:	370c      	adds	r7, #12
 8019298:	46bd      	mov	sp, r7
 801929a:	bc80      	pop	{r7}
 801929c:	4770      	bx	lr
	...

080192a0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b084      	sub	sp, #16
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d002      	beq.n	80192b4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80192ae:	4a1d      	ldr	r2, [pc, #116]	; (8019324 <SUBGRF_Init+0x84>)
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80192b4:	f7e8 fbfe 	bl	8001ab4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80192b8:	2002      	movs	r0, #2
 80192ba:	f001 f8ff 	bl	801a4bc <Radio_SMPS_Set>

    ImageCalibrated = false;
 80192be:	4b1a      	ldr	r3, [pc, #104]	; (8019328 <SUBGRF_Init+0x88>)
 80192c0:	2200      	movs	r2, #0
 80192c2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80192c4:	2000      	movs	r0, #0
 80192c6:	f000 f97d 	bl	80195c4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80192ca:	f7f1 fa77 	bl	800a7bc <RBI_IsTCXO>
 80192ce:	4603      	mov	r3, r0
 80192d0:	2b01      	cmp	r3, #1
 80192d2:	d10e      	bne.n	80192f2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80192d4:	2140      	movs	r1, #64	; 0x40
 80192d6:	2001      	movs	r0, #1
 80192d8:	f000 fb82 	bl	80199e0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80192dc:	2100      	movs	r1, #0
 80192de:	f640 1011 	movw	r0, #2321	; 0x911
 80192e2:	f000 fef3 	bl	801a0cc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80192e6:	237f      	movs	r3, #127	; 0x7f
 80192e8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80192ea:	7b38      	ldrb	r0, [r7, #12]
 80192ec:	f000 fa8b 	bl	8019806 <SUBGRF_Calibrate>
 80192f0:	e009      	b.n	8019306 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80192f2:	2120      	movs	r1, #32
 80192f4:	f640 1011 	movw	r0, #2321	; 0x911
 80192f8:	f000 fee8 	bl	801a0cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80192fc:	2120      	movs	r1, #32
 80192fe:	f640 1012 	movw	r0, #2322	; 0x912
 8019302:	f000 fee3 	bl	801a0cc <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019306:	210e      	movs	r1, #14
 8019308:	f640 101f 	movw	r0, #2335	; 0x91f
 801930c:	f000 fede 	bl	801a0cc <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8019310:	f7f1 fa38 	bl	800a784 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019314:	4b05      	ldr	r3, [pc, #20]	; (801932c <SUBGRF_Init+0x8c>)
 8019316:	2201      	movs	r2, #1
 8019318:	701a      	strb	r2, [r3, #0]
}
 801931a:	bf00      	nop
 801931c:	3710      	adds	r7, #16
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
 8019322:	bf00      	nop
 8019324:	20001bc0 	.word	0x20001bc0
 8019328:	20001bbc 	.word	0x20001bbc
 801932c:	20001bb4 	.word	0x20001bb4

08019330 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019330:	b480      	push	{r7}
 8019332:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019334:	4b02      	ldr	r3, [pc, #8]	; (8019340 <SUBGRF_GetOperatingMode+0x10>)
 8019336:	781b      	ldrb	r3, [r3, #0]
}
 8019338:	4618      	mov	r0, r3
 801933a:	46bd      	mov	sp, r7
 801933c:	bc80      	pop	{r7}
 801933e:	4770      	bx	lr
 8019340:	20001bb4 	.word	0x20001bb4

08019344 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b082      	sub	sp, #8
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
 801934c:	460b      	mov	r3, r1
 801934e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019350:	78fb      	ldrb	r3, [r7, #3]
 8019352:	461a      	mov	r2, r3
 8019354:	6879      	ldr	r1, [r7, #4]
 8019356:	2000      	movs	r0, #0
 8019358:	f000 ff24 	bl	801a1a4 <SUBGRF_WriteBuffer>
}
 801935c:	bf00      	nop
 801935e:	3708      	adds	r7, #8
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}

08019364 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b086      	sub	sp, #24
 8019368:	af00      	add	r7, sp, #0
 801936a:	60f8      	str	r0, [r7, #12]
 801936c:	60b9      	str	r1, [r7, #8]
 801936e:	4613      	mov	r3, r2
 8019370:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019372:	2300      	movs	r3, #0
 8019374:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019376:	f107 0317 	add.w	r3, r7, #23
 801937a:	4619      	mov	r1, r3
 801937c:	68b8      	ldr	r0, [r7, #8]
 801937e:	f000 fe27 	bl	8019fd0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	781b      	ldrb	r3, [r3, #0]
 8019386:	79fa      	ldrb	r2, [r7, #7]
 8019388:	429a      	cmp	r2, r3
 801938a:	d201      	bcs.n	8019390 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801938c:	2301      	movs	r3, #1
 801938e:	e007      	b.n	80193a0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019390:	7df8      	ldrb	r0, [r7, #23]
 8019392:	68bb      	ldr	r3, [r7, #8]
 8019394:	781b      	ldrb	r3, [r3, #0]
 8019396:	461a      	mov	r2, r3
 8019398:	68f9      	ldr	r1, [r7, #12]
 801939a:	f000 ff25 	bl	801a1e8 <SUBGRF_ReadBuffer>

    return 0;
 801939e:	2300      	movs	r3, #0
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3718      	adds	r7, #24
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	60f8      	str	r0, [r7, #12]
 80193b0:	460b      	mov	r3, r1
 80193b2:	607a      	str	r2, [r7, #4]
 80193b4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80193b6:	7afb      	ldrb	r3, [r7, #11]
 80193b8:	4619      	mov	r1, r3
 80193ba:	68f8      	ldr	r0, [r7, #12]
 80193bc:	f7ff ffc2 	bl	8019344 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f000 f91b 	bl	80195fc <SUBGRF_SetTx>
}
 80193c6:	bf00      	nop
 80193c8:	3710      	adds	r7, #16
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}

080193ce <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80193ce:	b580      	push	{r7, lr}
 80193d0:	b082      	sub	sp, #8
 80193d2:	af00      	add	r7, sp, #0
 80193d4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80193d6:	2208      	movs	r2, #8
 80193d8:	6879      	ldr	r1, [r7, #4]
 80193da:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80193de:	f000 fe9d 	bl	801a11c <SUBGRF_WriteRegisters>
    return 0;
 80193e2:	2300      	movs	r3, #0
}
 80193e4:	4618      	mov	r0, r3
 80193e6:	3708      	adds	r7, #8
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}

080193ec <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	4603      	mov	r3, r0
 80193f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80193f6:	88fb      	ldrh	r3, [r7, #6]
 80193f8:	0a1b      	lsrs	r3, r3, #8
 80193fa:	b29b      	uxth	r3, r3
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019400:	88fb      	ldrh	r3, [r7, #6]
 8019402:	b2db      	uxtb	r3, r3
 8019404:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019406:	f000 fb6f 	bl	8019ae8 <SUBGRF_GetPacketType>
 801940a:	4603      	mov	r3, r0
 801940c:	2b00      	cmp	r3, #0
 801940e:	d108      	bne.n	8019422 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019410:	f107 030c 	add.w	r3, r7, #12
 8019414:	2202      	movs	r2, #2
 8019416:	4619      	mov	r1, r3
 8019418:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801941c:	f000 fe7e 	bl	801a11c <SUBGRF_WriteRegisters>
            break;
 8019420:	e000      	b.n	8019424 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019422:	bf00      	nop
    }
}
 8019424:	bf00      	nop
 8019426:	3710      	adds	r7, #16
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}

0801942c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b084      	sub	sp, #16
 8019430:	af00      	add	r7, sp, #0
 8019432:	4603      	mov	r3, r0
 8019434:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019436:	88fb      	ldrh	r3, [r7, #6]
 8019438:	0a1b      	lsrs	r3, r3, #8
 801943a:	b29b      	uxth	r3, r3
 801943c:	b2db      	uxtb	r3, r3
 801943e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019440:	88fb      	ldrh	r3, [r7, #6]
 8019442:	b2db      	uxtb	r3, r3
 8019444:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019446:	f000 fb4f 	bl	8019ae8 <SUBGRF_GetPacketType>
 801944a:	4603      	mov	r3, r0
 801944c:	2b00      	cmp	r3, #0
 801944e:	d108      	bne.n	8019462 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019450:	f107 030c 	add.w	r3, r7, #12
 8019454:	2202      	movs	r2, #2
 8019456:	4619      	mov	r1, r3
 8019458:	f240 60be 	movw	r0, #1726	; 0x6be
 801945c:	f000 fe5e 	bl	801a11c <SUBGRF_WriteRegisters>
            break;
 8019460:	e000      	b.n	8019464 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019462:	bf00      	nop
    }
}
 8019464:	bf00      	nop
 8019466:	3710      	adds	r7, #16
 8019468:	46bd      	mov	sp, r7
 801946a:	bd80      	pop	{r7, pc}

0801946c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b084      	sub	sp, #16
 8019470:	af00      	add	r7, sp, #0
 8019472:	4603      	mov	r3, r0
 8019474:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019476:	2300      	movs	r3, #0
 8019478:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801947a:	f000 fb35 	bl	8019ae8 <SUBGRF_GetPacketType>
 801947e:	4603      	mov	r3, r0
 8019480:	2b00      	cmp	r3, #0
 8019482:	d121      	bne.n	80194c8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019484:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019488:	f000 fe34 	bl	801a0f4 <SUBGRF_ReadRegister>
 801948c:	4603      	mov	r3, r0
 801948e:	f023 0301 	bic.w	r3, r3, #1
 8019492:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019494:	88fb      	ldrh	r3, [r7, #6]
 8019496:	0a1b      	lsrs	r3, r3, #8
 8019498:	b29b      	uxth	r3, r3
 801949a:	b25b      	sxtb	r3, r3
 801949c:	f003 0301 	and.w	r3, r3, #1
 80194a0:	b25a      	sxtb	r2, r3
 80194a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80194a6:	4313      	orrs	r3, r2
 80194a8:	b25b      	sxtb	r3, r3
 80194aa:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80194ac:	7bfb      	ldrb	r3, [r7, #15]
 80194ae:	4619      	mov	r1, r3
 80194b0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80194b4:	f000 fe0a 	bl	801a0cc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80194b8:	88fb      	ldrh	r3, [r7, #6]
 80194ba:	b2db      	uxtb	r3, r3
 80194bc:	4619      	mov	r1, r3
 80194be:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80194c2:	f000 fe03 	bl	801a0cc <SUBGRF_WriteRegister>
            break;
 80194c6:	e000      	b.n	80194ca <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80194c8:	bf00      	nop
    }
}
 80194ca:	bf00      	nop
 80194cc:	3710      	adds	r7, #16
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bd80      	pop	{r7, pc}

080194d2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80194d2:	b580      	push	{r7, lr}
 80194d4:	b082      	sub	sp, #8
 80194d6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80194d8:	2300      	movs	r3, #0
 80194da:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80194dc:	2300      	movs	r3, #0
 80194de:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80194e0:	2300      	movs	r3, #0
 80194e2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80194e4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80194e8:	f000 fe04 	bl	801a0f4 <SUBGRF_ReadRegister>
 80194ec:	4603      	mov	r3, r0
 80194ee:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80194f0:	79fb      	ldrb	r3, [r7, #7]
 80194f2:	f023 0301 	bic.w	r3, r3, #1
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	4619      	mov	r1, r3
 80194fa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80194fe:	f000 fde5 	bl	801a0cc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019502:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019506:	f000 fdf5 	bl	801a0f4 <SUBGRF_ReadRegister>
 801950a:	4603      	mov	r3, r0
 801950c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801950e:	79bb      	ldrb	r3, [r7, #6]
 8019510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019514:	b2db      	uxtb	r3, r3
 8019516:	4619      	mov	r1, r3
 8019518:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801951c:	f000 fdd6 	bl	801a0cc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019520:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019524:	f000 f88a 	bl	801963c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019528:	463b      	mov	r3, r7
 801952a:	2204      	movs	r2, #4
 801952c:	4619      	mov	r1, r3
 801952e:	f640 0019 	movw	r0, #2073	; 0x819
 8019532:	f000 fe15 	bl	801a160 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019536:	2000      	movs	r0, #0
 8019538:	f000 f844 	bl	80195c4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801953c:	79fb      	ldrb	r3, [r7, #7]
 801953e:	4619      	mov	r1, r3
 8019540:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019544:	f000 fdc2 	bl	801a0cc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019548:	79bb      	ldrb	r3, [r7, #6]
 801954a:	4619      	mov	r1, r3
 801954c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019550:	f000 fdbc 	bl	801a0cc <SUBGRF_WriteRegister>

    return number;
 8019554:	683b      	ldr	r3, [r7, #0]
}
 8019556:	4618      	mov	r0, r3
 8019558:	3708      	adds	r7, #8
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}
	...

08019560 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b084      	sub	sp, #16
 8019564:	af00      	add	r7, sp, #0
 8019566:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019568:	2000      	movs	r0, #0
 801956a:	f7f1 f912 	bl	800a792 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801956e:	2002      	movs	r0, #2
 8019570:	f000 ffa4 	bl	801a4bc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019574:	793b      	ldrb	r3, [r7, #4]
 8019576:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801957a:	b2db      	uxtb	r3, r3
 801957c:	009b      	lsls	r3, r3, #2
 801957e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019580:	793b      	ldrb	r3, [r7, #4]
 8019582:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019586:	b2db      	uxtb	r3, r3
 8019588:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801958a:	b25b      	sxtb	r3, r3
 801958c:	4313      	orrs	r3, r2
 801958e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019590:	793b      	ldrb	r3, [r7, #4]
 8019592:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019596:	b2db      	uxtb	r3, r3
 8019598:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801959a:	4313      	orrs	r3, r2
 801959c:	b25b      	sxtb	r3, r3
 801959e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80195a0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80195a2:	f107 030f 	add.w	r3, r7, #15
 80195a6:	2201      	movs	r2, #1
 80195a8:	4619      	mov	r1, r3
 80195aa:	2084      	movs	r0, #132	; 0x84
 80195ac:	f000 fe3e 	bl	801a22c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80195b0:	4b03      	ldr	r3, [pc, #12]	; (80195c0 <SUBGRF_SetSleep+0x60>)
 80195b2:	2200      	movs	r2, #0
 80195b4:	701a      	strb	r2, [r3, #0]
}
 80195b6:	bf00      	nop
 80195b8:	3710      	adds	r7, #16
 80195ba:	46bd      	mov	sp, r7
 80195bc:	bd80      	pop	{r7, pc}
 80195be:	bf00      	nop
 80195c0:	20001bb4 	.word	0x20001bb4

080195c4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b082      	sub	sp, #8
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	4603      	mov	r3, r0
 80195cc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80195ce:	1dfb      	adds	r3, r7, #7
 80195d0:	2201      	movs	r2, #1
 80195d2:	4619      	mov	r1, r3
 80195d4:	2080      	movs	r0, #128	; 0x80
 80195d6:	f000 fe29 	bl	801a22c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80195da:	79fb      	ldrb	r3, [r7, #7]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d103      	bne.n	80195e8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80195e0:	4b05      	ldr	r3, [pc, #20]	; (80195f8 <SUBGRF_SetStandby+0x34>)
 80195e2:	2201      	movs	r2, #1
 80195e4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80195e6:	e002      	b.n	80195ee <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80195e8:	4b03      	ldr	r3, [pc, #12]	; (80195f8 <SUBGRF_SetStandby+0x34>)
 80195ea:	2202      	movs	r2, #2
 80195ec:	701a      	strb	r2, [r3, #0]
}
 80195ee:	bf00      	nop
 80195f0:	3708      	adds	r7, #8
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop
 80195f8:	20001bb4 	.word	0x20001bb4

080195fc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b084      	sub	sp, #16
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019604:	4b0c      	ldr	r3, [pc, #48]	; (8019638 <SUBGRF_SetTx+0x3c>)
 8019606:	2204      	movs	r2, #4
 8019608:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	0c1b      	lsrs	r3, r3, #16
 801960e:	b2db      	uxtb	r3, r3
 8019610:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	0a1b      	lsrs	r3, r3, #8
 8019616:	b2db      	uxtb	r3, r3
 8019618:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	b2db      	uxtb	r3, r3
 801961e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019620:	f107 030c 	add.w	r3, r7, #12
 8019624:	2203      	movs	r2, #3
 8019626:	4619      	mov	r1, r3
 8019628:	2083      	movs	r0, #131	; 0x83
 801962a:	f000 fdff 	bl	801a22c <SUBGRF_WriteCommand>
}
 801962e:	bf00      	nop
 8019630:	3710      	adds	r7, #16
 8019632:	46bd      	mov	sp, r7
 8019634:	bd80      	pop	{r7, pc}
 8019636:	bf00      	nop
 8019638:	20001bb4 	.word	0x20001bb4

0801963c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b084      	sub	sp, #16
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019644:	4b0c      	ldr	r3, [pc, #48]	; (8019678 <SUBGRF_SetRx+0x3c>)
 8019646:	2205      	movs	r2, #5
 8019648:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	0c1b      	lsrs	r3, r3, #16
 801964e:	b2db      	uxtb	r3, r3
 8019650:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	0a1b      	lsrs	r3, r3, #8
 8019656:	b2db      	uxtb	r3, r3
 8019658:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	b2db      	uxtb	r3, r3
 801965e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019660:	f107 030c 	add.w	r3, r7, #12
 8019664:	2203      	movs	r2, #3
 8019666:	4619      	mov	r1, r3
 8019668:	2082      	movs	r0, #130	; 0x82
 801966a:	f000 fddf 	bl	801a22c <SUBGRF_WriteCommand>
}
 801966e:	bf00      	nop
 8019670:	3710      	adds	r7, #16
 8019672:	46bd      	mov	sp, r7
 8019674:	bd80      	pop	{r7, pc}
 8019676:	bf00      	nop
 8019678:	20001bb4 	.word	0x20001bb4

0801967c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b084      	sub	sp, #16
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019684:	4b0e      	ldr	r3, [pc, #56]	; (80196c0 <SUBGRF_SetRxBoosted+0x44>)
 8019686:	2205      	movs	r2, #5
 8019688:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801968a:	2197      	movs	r1, #151	; 0x97
 801968c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8019690:	f000 fd1c 	bl	801a0cc <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	0c1b      	lsrs	r3, r3, #16
 8019698:	b2db      	uxtb	r3, r3
 801969a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	0a1b      	lsrs	r3, r3, #8
 80196a0:	b2db      	uxtb	r3, r3
 80196a2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80196aa:	f107 030c 	add.w	r3, r7, #12
 80196ae:	2203      	movs	r2, #3
 80196b0:	4619      	mov	r1, r3
 80196b2:	2082      	movs	r0, #130	; 0x82
 80196b4:	f000 fdba 	bl	801a22c <SUBGRF_WriteCommand>
}
 80196b8:	bf00      	nop
 80196ba:	3710      	adds	r7, #16
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}
 80196c0:	20001bb4 	.word	0x20001bb4

080196c4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b084      	sub	sp, #16
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
 80196cc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	0c1b      	lsrs	r3, r3, #16
 80196d2:	b2db      	uxtb	r3, r3
 80196d4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	0a1b      	lsrs	r3, r3, #8
 80196da:	b2db      	uxtb	r3, r3
 80196dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	b2db      	uxtb	r3, r3
 80196e2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	0c1b      	lsrs	r3, r3, #16
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	0a1b      	lsrs	r3, r3, #8
 80196f0:	b2db      	uxtb	r3, r3
 80196f2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	b2db      	uxtb	r3, r3
 80196f8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80196fa:	f107 0308 	add.w	r3, r7, #8
 80196fe:	2206      	movs	r2, #6
 8019700:	4619      	mov	r1, r3
 8019702:	2094      	movs	r0, #148	; 0x94
 8019704:	f000 fd92 	bl	801a22c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019708:	4b03      	ldr	r3, [pc, #12]	; (8019718 <SUBGRF_SetRxDutyCycle+0x54>)
 801970a:	2206      	movs	r2, #6
 801970c:	701a      	strb	r2, [r3, #0]
}
 801970e:	bf00      	nop
 8019710:	3710      	adds	r7, #16
 8019712:	46bd      	mov	sp, r7
 8019714:	bd80      	pop	{r7, pc}
 8019716:	bf00      	nop
 8019718:	20001bb4 	.word	0x20001bb4

0801971c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801971c:	b580      	push	{r7, lr}
 801971e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019720:	2200      	movs	r2, #0
 8019722:	2100      	movs	r1, #0
 8019724:	20c5      	movs	r0, #197	; 0xc5
 8019726:	f000 fd81 	bl	801a22c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801972a:	4b02      	ldr	r3, [pc, #8]	; (8019734 <SUBGRF_SetCad+0x18>)
 801972c:	2207      	movs	r2, #7
 801972e:	701a      	strb	r2, [r3, #0]
}
 8019730:	bf00      	nop
 8019732:	bd80      	pop	{r7, pc}
 8019734:	20001bb4 	.word	0x20001bb4

08019738 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019738:	b580      	push	{r7, lr}
 801973a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801973c:	2200      	movs	r2, #0
 801973e:	2100      	movs	r1, #0
 8019740:	20d1      	movs	r0, #209	; 0xd1
 8019742:	f000 fd73 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019746:	bf00      	nop
 8019748:	bd80      	pop	{r7, pc}

0801974a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801974a:	b580      	push	{r7, lr}
 801974c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801974e:	2200      	movs	r2, #0
 8019750:	2100      	movs	r1, #0
 8019752:	20d2      	movs	r0, #210	; 0xd2
 8019754:	f000 fd6a 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019758:	bf00      	nop
 801975a:	bd80      	pop	{r7, pc}

0801975c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	4603      	mov	r3, r0
 8019764:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019766:	1dfb      	adds	r3, r7, #7
 8019768:	2201      	movs	r2, #1
 801976a:	4619      	mov	r1, r3
 801976c:	209f      	movs	r0, #159	; 0x9f
 801976e:	f000 fd5d 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019772:	bf00      	nop
 8019774:	3708      	adds	r7, #8
 8019776:	46bd      	mov	sp, r7
 8019778:	bd80      	pop	{r7, pc}

0801977a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801977a:	b580      	push	{r7, lr}
 801977c:	b084      	sub	sp, #16
 801977e:	af00      	add	r7, sp, #0
 8019780:	4603      	mov	r3, r0
 8019782:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019784:	1dfb      	adds	r3, r7, #7
 8019786:	2201      	movs	r2, #1
 8019788:	4619      	mov	r1, r3
 801978a:	20a0      	movs	r0, #160	; 0xa0
 801978c:	f000 fd4e 	bl	801a22c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019790:	79fb      	ldrb	r3, [r7, #7]
 8019792:	2b3f      	cmp	r3, #63	; 0x3f
 8019794:	d91c      	bls.n	80197d0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019796:	79fb      	ldrb	r3, [r7, #7]
 8019798:	085b      	lsrs	r3, r3, #1
 801979a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801979c:	2300      	movs	r3, #0
 801979e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80197a0:	2300      	movs	r3, #0
 80197a2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80197a4:	e005      	b.n	80197b2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80197a6:	7bfb      	ldrb	r3, [r7, #15]
 80197a8:	089b      	lsrs	r3, r3, #2
 80197aa:	73fb      	strb	r3, [r7, #15]
            exp++;
 80197ac:	7bbb      	ldrb	r3, [r7, #14]
 80197ae:	3301      	adds	r3, #1
 80197b0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80197b2:	7bfb      	ldrb	r3, [r7, #15]
 80197b4:	2b1f      	cmp	r3, #31
 80197b6:	d8f6      	bhi.n	80197a6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80197b8:	7bfb      	ldrb	r3, [r7, #15]
 80197ba:	00db      	lsls	r3, r3, #3
 80197bc:	b2da      	uxtb	r2, r3
 80197be:	7bbb      	ldrb	r3, [r7, #14]
 80197c0:	4413      	add	r3, r2
 80197c2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80197c4:	7b7b      	ldrb	r3, [r7, #13]
 80197c6:	4619      	mov	r1, r3
 80197c8:	f240 7006 	movw	r0, #1798	; 0x706
 80197cc:	f000 fc7e 	bl	801a0cc <SUBGRF_WriteRegister>
    }
}
 80197d0:	bf00      	nop
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80197de:	f7f0 fff4 	bl	800a7ca <RBI_IsDCDC>
 80197e2:	4603      	mov	r3, r0
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	d102      	bne.n	80197ee <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80197e8:	2301      	movs	r3, #1
 80197ea:	71fb      	strb	r3, [r7, #7]
 80197ec:	e001      	b.n	80197f2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80197ee:	2300      	movs	r3, #0
 80197f0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80197f2:	1dfb      	adds	r3, r7, #7
 80197f4:	2201      	movs	r2, #1
 80197f6:	4619      	mov	r1, r3
 80197f8:	2096      	movs	r0, #150	; 0x96
 80197fa:	f000 fd17 	bl	801a22c <SUBGRF_WriteCommand>
}
 80197fe:	bf00      	nop
 8019800:	3708      	adds	r7, #8
 8019802:	46bd      	mov	sp, r7
 8019804:	bd80      	pop	{r7, pc}

08019806 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019806:	b580      	push	{r7, lr}
 8019808:	b084      	sub	sp, #16
 801980a:	af00      	add	r7, sp, #0
 801980c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801980e:	793b      	ldrb	r3, [r7, #4]
 8019810:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019814:	b2db      	uxtb	r3, r3
 8019816:	019b      	lsls	r3, r3, #6
 8019818:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801981a:	793b      	ldrb	r3, [r7, #4]
 801981c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019820:	b2db      	uxtb	r3, r3
 8019822:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019824:	b25b      	sxtb	r3, r3
 8019826:	4313      	orrs	r3, r2
 8019828:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801982a:	793b      	ldrb	r3, [r7, #4]
 801982c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019830:	b2db      	uxtb	r3, r3
 8019832:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019834:	b25b      	sxtb	r3, r3
 8019836:	4313      	orrs	r3, r2
 8019838:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801983a:	793b      	ldrb	r3, [r7, #4]
 801983c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019840:	b2db      	uxtb	r3, r3
 8019842:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019844:	b25b      	sxtb	r3, r3
 8019846:	4313      	orrs	r3, r2
 8019848:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801984a:	793b      	ldrb	r3, [r7, #4]
 801984c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019850:	b2db      	uxtb	r3, r3
 8019852:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019854:	b25b      	sxtb	r3, r3
 8019856:	4313      	orrs	r3, r2
 8019858:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801985a:	793b      	ldrb	r3, [r7, #4]
 801985c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019860:	b2db      	uxtb	r3, r3
 8019862:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019864:	b25b      	sxtb	r3, r3
 8019866:	4313      	orrs	r3, r2
 8019868:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801986a:	793b      	ldrb	r3, [r7, #4]
 801986c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019870:	b2db      	uxtb	r3, r3
 8019872:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019874:	4313      	orrs	r3, r2
 8019876:	b25b      	sxtb	r3, r3
 8019878:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801987a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801987c:	f107 030f 	add.w	r3, r7, #15
 8019880:	2201      	movs	r2, #1
 8019882:	4619      	mov	r1, r3
 8019884:	2089      	movs	r0, #137	; 0x89
 8019886:	f000 fcd1 	bl	801a22c <SUBGRF_WriteCommand>
}
 801988a:	bf00      	nop
 801988c:	3710      	adds	r7, #16
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
	...

08019894 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b084      	sub	sp, #16
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	4a1d      	ldr	r2, [pc, #116]	; (8019914 <SUBGRF_CalibrateImage+0x80>)
 80198a0:	4293      	cmp	r3, r2
 80198a2:	d904      	bls.n	80198ae <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80198a4:	23e1      	movs	r3, #225	; 0xe1
 80198a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80198a8:	23e9      	movs	r3, #233	; 0xe9
 80198aa:	737b      	strb	r3, [r7, #13]
 80198ac:	e027      	b.n	80198fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	4a19      	ldr	r2, [pc, #100]	; (8019918 <SUBGRF_CalibrateImage+0x84>)
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d904      	bls.n	80198c0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80198b6:	23d7      	movs	r3, #215	; 0xd7
 80198b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80198ba:	23db      	movs	r3, #219	; 0xdb
 80198bc:	737b      	strb	r3, [r7, #13]
 80198be:	e01e      	b.n	80198fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	4a16      	ldr	r2, [pc, #88]	; (801991c <SUBGRF_CalibrateImage+0x88>)
 80198c4:	4293      	cmp	r3, r2
 80198c6:	d904      	bls.n	80198d2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80198c8:	23c1      	movs	r3, #193	; 0xc1
 80198ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80198cc:	23c5      	movs	r3, #197	; 0xc5
 80198ce:	737b      	strb	r3, [r7, #13]
 80198d0:	e015      	b.n	80198fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	4a12      	ldr	r2, [pc, #72]	; (8019920 <SUBGRF_CalibrateImage+0x8c>)
 80198d6:	4293      	cmp	r3, r2
 80198d8:	d904      	bls.n	80198e4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80198da:	2375      	movs	r3, #117	; 0x75
 80198dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80198de:	2381      	movs	r3, #129	; 0x81
 80198e0:	737b      	strb	r3, [r7, #13]
 80198e2:	e00c      	b.n	80198fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	4a0f      	ldr	r2, [pc, #60]	; (8019924 <SUBGRF_CalibrateImage+0x90>)
 80198e8:	4293      	cmp	r3, r2
 80198ea:	d904      	bls.n	80198f6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80198ec:	236b      	movs	r3, #107	; 0x6b
 80198ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80198f0:	236f      	movs	r3, #111	; 0x6f
 80198f2:	737b      	strb	r3, [r7, #13]
 80198f4:	e003      	b.n	80198fe <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80198f6:	2329      	movs	r3, #41	; 0x29
 80198f8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80198fa:	232b      	movs	r3, #43	; 0x2b
 80198fc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80198fe:	f107 030c 	add.w	r3, r7, #12
 8019902:	2202      	movs	r2, #2
 8019904:	4619      	mov	r1, r3
 8019906:	2098      	movs	r0, #152	; 0x98
 8019908:	f000 fc90 	bl	801a22c <SUBGRF_WriteCommand>
}
 801990c:	bf00      	nop
 801990e:	3710      	adds	r7, #16
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}
 8019914:	35a4e900 	.word	0x35a4e900
 8019918:	32a9f880 	.word	0x32a9f880
 801991c:	2de54480 	.word	0x2de54480
 8019920:	1b6b0b00 	.word	0x1b6b0b00
 8019924:	1954fc40 	.word	0x1954fc40

08019928 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019928:	b590      	push	{r4, r7, lr}
 801992a:	b085      	sub	sp, #20
 801992c:	af00      	add	r7, sp, #0
 801992e:	4604      	mov	r4, r0
 8019930:	4608      	mov	r0, r1
 8019932:	4611      	mov	r1, r2
 8019934:	461a      	mov	r2, r3
 8019936:	4623      	mov	r3, r4
 8019938:	71fb      	strb	r3, [r7, #7]
 801993a:	4603      	mov	r3, r0
 801993c:	71bb      	strb	r3, [r7, #6]
 801993e:	460b      	mov	r3, r1
 8019940:	717b      	strb	r3, [r7, #5]
 8019942:	4613      	mov	r3, r2
 8019944:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019946:	79fb      	ldrb	r3, [r7, #7]
 8019948:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801994a:	79bb      	ldrb	r3, [r7, #6]
 801994c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801994e:	797b      	ldrb	r3, [r7, #5]
 8019950:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019952:	793b      	ldrb	r3, [r7, #4]
 8019954:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019956:	f107 030c 	add.w	r3, r7, #12
 801995a:	2204      	movs	r2, #4
 801995c:	4619      	mov	r1, r3
 801995e:	2095      	movs	r0, #149	; 0x95
 8019960:	f000 fc64 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019964:	bf00      	nop
 8019966:	3714      	adds	r7, #20
 8019968:	46bd      	mov	sp, r7
 801996a:	bd90      	pop	{r4, r7, pc}

0801996c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801996c:	b590      	push	{r4, r7, lr}
 801996e:	b085      	sub	sp, #20
 8019970:	af00      	add	r7, sp, #0
 8019972:	4604      	mov	r4, r0
 8019974:	4608      	mov	r0, r1
 8019976:	4611      	mov	r1, r2
 8019978:	461a      	mov	r2, r3
 801997a:	4623      	mov	r3, r4
 801997c:	80fb      	strh	r3, [r7, #6]
 801997e:	4603      	mov	r3, r0
 8019980:	80bb      	strh	r3, [r7, #4]
 8019982:	460b      	mov	r3, r1
 8019984:	807b      	strh	r3, [r7, #2]
 8019986:	4613      	mov	r3, r2
 8019988:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801998a:	88fb      	ldrh	r3, [r7, #6]
 801998c:	0a1b      	lsrs	r3, r3, #8
 801998e:	b29b      	uxth	r3, r3
 8019990:	b2db      	uxtb	r3, r3
 8019992:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019994:	88fb      	ldrh	r3, [r7, #6]
 8019996:	b2db      	uxtb	r3, r3
 8019998:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801999a:	88bb      	ldrh	r3, [r7, #4]
 801999c:	0a1b      	lsrs	r3, r3, #8
 801999e:	b29b      	uxth	r3, r3
 80199a0:	b2db      	uxtb	r3, r3
 80199a2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80199a4:	88bb      	ldrh	r3, [r7, #4]
 80199a6:	b2db      	uxtb	r3, r3
 80199a8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80199aa:	887b      	ldrh	r3, [r7, #2]
 80199ac:	0a1b      	lsrs	r3, r3, #8
 80199ae:	b29b      	uxth	r3, r3
 80199b0:	b2db      	uxtb	r3, r3
 80199b2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80199b4:	887b      	ldrh	r3, [r7, #2]
 80199b6:	b2db      	uxtb	r3, r3
 80199b8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80199ba:	883b      	ldrh	r3, [r7, #0]
 80199bc:	0a1b      	lsrs	r3, r3, #8
 80199be:	b29b      	uxth	r3, r3
 80199c0:	b2db      	uxtb	r3, r3
 80199c2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80199c4:	883b      	ldrh	r3, [r7, #0]
 80199c6:	b2db      	uxtb	r3, r3
 80199c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80199ca:	f107 0308 	add.w	r3, r7, #8
 80199ce:	2208      	movs	r2, #8
 80199d0:	4619      	mov	r1, r3
 80199d2:	2008      	movs	r0, #8
 80199d4:	f000 fc2a 	bl	801a22c <SUBGRF_WriteCommand>
}
 80199d8:	bf00      	nop
 80199da:	3714      	adds	r7, #20
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd90      	pop	{r4, r7, pc}

080199e0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b084      	sub	sp, #16
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	4603      	mov	r3, r0
 80199e8:	6039      	str	r1, [r7, #0]
 80199ea:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80199ec:	79fb      	ldrb	r3, [r7, #7]
 80199ee:	f003 0307 	and.w	r3, r3, #7
 80199f2:	b2db      	uxtb	r3, r3
 80199f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80199f6:	683b      	ldr	r3, [r7, #0]
 80199f8:	0c1b      	lsrs	r3, r3, #16
 80199fa:	b2db      	uxtb	r3, r3
 80199fc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	0a1b      	lsrs	r3, r3, #8
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	b2db      	uxtb	r3, r3
 8019a0a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019a0c:	f107 030c 	add.w	r3, r7, #12
 8019a10:	2204      	movs	r2, #4
 8019a12:	4619      	mov	r1, r3
 8019a14:	2097      	movs	r0, #151	; 0x97
 8019a16:	f000 fc09 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019a1a:	bf00      	nop
 8019a1c:	3710      	adds	r7, #16
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bd80      	pop	{r7, pc}
	...

08019a24 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019a24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019a28:	b084      	sub	sp, #16
 8019a2a:	af00      	add	r7, sp, #0
 8019a2c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019a32:	4b1d      	ldr	r3, [pc, #116]	; (8019aa8 <SUBGRF_SetRfFrequency+0x84>)
 8019a34:	781b      	ldrb	r3, [r3, #0]
 8019a36:	f083 0301 	eor.w	r3, r3, #1
 8019a3a:	b2db      	uxtb	r3, r3
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d005      	beq.n	8019a4c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019a40:	6878      	ldr	r0, [r7, #4]
 8019a42:	f7ff ff27 	bl	8019894 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019a46:	4b18      	ldr	r3, [pc, #96]	; (8019aa8 <SUBGRF_SetRfFrequency+0x84>)
 8019a48:	2201      	movs	r2, #1
 8019a4a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	2200      	movs	r2, #0
 8019a50:	461c      	mov	r4, r3
 8019a52:	4615      	mov	r5, r2
 8019a54:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019a58:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019a5c:	4a13      	ldr	r2, [pc, #76]	; (8019aac <SUBGRF_SetRfFrequency+0x88>)
 8019a5e:	f04f 0300 	mov.w	r3, #0
 8019a62:	4640      	mov	r0, r8
 8019a64:	4649      	mov	r1, r9
 8019a66:	f7e7 f89f 	bl	8000ba8 <__aeabi_uldivmod>
 8019a6a:	4602      	mov	r2, r0
 8019a6c:	460b      	mov	r3, r1
 8019a6e:	4613      	mov	r3, r2
 8019a70:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	0e1b      	lsrs	r3, r3, #24
 8019a76:	b2db      	uxtb	r3, r3
 8019a78:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	0c1b      	lsrs	r3, r3, #16
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	0a1b      	lsrs	r3, r3, #8
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	b2db      	uxtb	r3, r3
 8019a8e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019a90:	f107 0308 	add.w	r3, r7, #8
 8019a94:	2204      	movs	r2, #4
 8019a96:	4619      	mov	r1, r3
 8019a98:	2086      	movs	r0, #134	; 0x86
 8019a9a:	f000 fbc7 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019a9e:	bf00      	nop
 8019aa0:	3710      	adds	r7, #16
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019aa8:	20001bbc 	.word	0x20001bbc
 8019aac:	01e84800 	.word	0x01e84800

08019ab0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b082      	sub	sp, #8
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019aba:	79fa      	ldrb	r2, [r7, #7]
 8019abc:	4b09      	ldr	r3, [pc, #36]	; (8019ae4 <SUBGRF_SetPacketType+0x34>)
 8019abe:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019ac0:	79fb      	ldrb	r3, [r7, #7]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d104      	bne.n	8019ad0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8019ac6:	2100      	movs	r1, #0
 8019ac8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019acc:	f000 fafe 	bl	801a0cc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019ad0:	1dfb      	adds	r3, r7, #7
 8019ad2:	2201      	movs	r2, #1
 8019ad4:	4619      	mov	r1, r3
 8019ad6:	208a      	movs	r0, #138	; 0x8a
 8019ad8:	f000 fba8 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019adc:	bf00      	nop
 8019ade:	3708      	adds	r7, #8
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	bd80      	pop	{r7, pc}
 8019ae4:	20001bb5 	.word	0x20001bb5

08019ae8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019ae8:	b480      	push	{r7}
 8019aea:	af00      	add	r7, sp, #0
    return PacketType;
 8019aec:	4b02      	ldr	r3, [pc, #8]	; (8019af8 <SUBGRF_GetPacketType+0x10>)
 8019aee:	781b      	ldrb	r3, [r3, #0]
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bc80      	pop	{r7}
 8019af6:	4770      	bx	lr
 8019af8:	20001bb5 	.word	0x20001bb5

08019afc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b084      	sub	sp, #16
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	4603      	mov	r3, r0
 8019b04:	71fb      	strb	r3, [r7, #7]
 8019b06:	460b      	mov	r3, r1
 8019b08:	71bb      	strb	r3, [r7, #6]
 8019b0a:	4613      	mov	r3, r2
 8019b0c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019b0e:	79fb      	ldrb	r3, [r7, #7]
 8019b10:	2b01      	cmp	r3, #1
 8019b12:	d149      	bne.n	8019ba8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019b14:	2000      	movs	r0, #0
 8019b16:	f7f0 fe5f 	bl	800a7d8 <RBI_GetRFOMaxPowerConfig>
 8019b1a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019b1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019b20:	68fa      	ldr	r2, [r7, #12]
 8019b22:	429a      	cmp	r2, r3
 8019b24:	da01      	bge.n	8019b2a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	2b0e      	cmp	r3, #14
 8019b2e:	d10e      	bne.n	8019b4e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019b30:	2301      	movs	r3, #1
 8019b32:	2201      	movs	r2, #1
 8019b34:	2100      	movs	r1, #0
 8019b36:	2004      	movs	r0, #4
 8019b38:	f7ff fef6 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019b3c:	79ba      	ldrb	r2, [r7, #6]
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	1ad3      	subs	r3, r2, r3
 8019b44:	b2db      	uxtb	r3, r3
 8019b46:	330e      	adds	r3, #14
 8019b48:	b2db      	uxtb	r3, r3
 8019b4a:	71bb      	strb	r3, [r7, #6]
 8019b4c:	e01f      	b.n	8019b8e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	2b0a      	cmp	r3, #10
 8019b52:	d10e      	bne.n	8019b72 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019b54:	2301      	movs	r3, #1
 8019b56:	2201      	movs	r2, #1
 8019b58:	2100      	movs	r1, #0
 8019b5a:	2001      	movs	r0, #1
 8019b5c:	f7ff fee4 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019b60:	79ba      	ldrb	r2, [r7, #6]
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	1ad3      	subs	r3, r2, r3
 8019b68:	b2db      	uxtb	r3, r3
 8019b6a:	330d      	adds	r3, #13
 8019b6c:	b2db      	uxtb	r3, r3
 8019b6e:	71bb      	strb	r3, [r7, #6]
 8019b70:	e00d      	b.n	8019b8e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8019b72:	2301      	movs	r3, #1
 8019b74:	2201      	movs	r2, #1
 8019b76:	2100      	movs	r1, #0
 8019b78:	2007      	movs	r0, #7
 8019b7a:	f7ff fed5 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019b7e:	79ba      	ldrb	r2, [r7, #6]
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	1ad3      	subs	r3, r2, r3
 8019b86:	b2db      	uxtb	r3, r3
 8019b88:	330e      	adds	r3, #14
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019b8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019b92:	f113 0f11 	cmn.w	r3, #17
 8019b96:	da01      	bge.n	8019b9c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019b98:	23ef      	movs	r3, #239	; 0xef
 8019b9a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019b9c:	2118      	movs	r1, #24
 8019b9e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019ba2:	f000 fa93 	bl	801a0cc <SUBGRF_WriteRegister>
 8019ba6:	e067      	b.n	8019c78 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019ba8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8019bac:	f000 faa2 	bl	801a0f4 <SUBGRF_ReadRegister>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	f043 031e 	orr.w	r3, r3, #30
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	4619      	mov	r1, r3
 8019bba:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8019bbe:	f000 fa85 	bl	801a0cc <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019bc2:	2001      	movs	r0, #1
 8019bc4:	f7f0 fe08 	bl	800a7d8 <RBI_GetRFOMaxPowerConfig>
 8019bc8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019bca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019bce:	68fa      	ldr	r2, [r7, #12]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	da01      	bge.n	8019bd8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	2b14      	cmp	r3, #20
 8019bdc:	d10e      	bne.n	8019bfc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019bde:	2301      	movs	r3, #1
 8019be0:	2200      	movs	r2, #0
 8019be2:	2105      	movs	r1, #5
 8019be4:	2003      	movs	r0, #3
 8019be6:	f7ff fe9f 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019bea:	79ba      	ldrb	r2, [r7, #6]
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	1ad3      	subs	r3, r2, r3
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	3316      	adds	r3, #22
 8019bf6:	b2db      	uxtb	r3, r3
 8019bf8:	71bb      	strb	r3, [r7, #6]
 8019bfa:	e031      	b.n	8019c60 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	2b11      	cmp	r3, #17
 8019c00:	d10e      	bne.n	8019c20 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019c02:	2301      	movs	r3, #1
 8019c04:	2200      	movs	r2, #0
 8019c06:	2103      	movs	r1, #3
 8019c08:	2002      	movs	r0, #2
 8019c0a:	f7ff fe8d 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019c0e:	79ba      	ldrb	r2, [r7, #6]
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	b2db      	uxtb	r3, r3
 8019c14:	1ad3      	subs	r3, r2, r3
 8019c16:	b2db      	uxtb	r3, r3
 8019c18:	3316      	adds	r3, #22
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	71bb      	strb	r3, [r7, #6]
 8019c1e:	e01f      	b.n	8019c60 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	2b0e      	cmp	r3, #14
 8019c24:	d10e      	bne.n	8019c44 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019c26:	2301      	movs	r3, #1
 8019c28:	2200      	movs	r2, #0
 8019c2a:	2102      	movs	r1, #2
 8019c2c:	2002      	movs	r0, #2
 8019c2e:	f7ff fe7b 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019c32:	79ba      	ldrb	r2, [r7, #6]
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	b2db      	uxtb	r3, r3
 8019c38:	1ad3      	subs	r3, r2, r3
 8019c3a:	b2db      	uxtb	r3, r3
 8019c3c:	330e      	adds	r3, #14
 8019c3e:	b2db      	uxtb	r3, r3
 8019c40:	71bb      	strb	r3, [r7, #6]
 8019c42:	e00d      	b.n	8019c60 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019c44:	2301      	movs	r3, #1
 8019c46:	2200      	movs	r2, #0
 8019c48:	2107      	movs	r1, #7
 8019c4a:	2004      	movs	r0, #4
 8019c4c:	f7ff fe6c 	bl	8019928 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019c50:	79ba      	ldrb	r2, [r7, #6]
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	b2db      	uxtb	r3, r3
 8019c56:	1ad3      	subs	r3, r2, r3
 8019c58:	b2db      	uxtb	r3, r3
 8019c5a:	3316      	adds	r3, #22
 8019c5c:	b2db      	uxtb	r3, r3
 8019c5e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019c60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019c64:	f113 0f09 	cmn.w	r3, #9
 8019c68:	da01      	bge.n	8019c6e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019c6a:	23f7      	movs	r3, #247	; 0xf7
 8019c6c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019c6e:	2138      	movs	r1, #56	; 0x38
 8019c70:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019c74:	f000 fa2a 	bl	801a0cc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019c78:	79bb      	ldrb	r3, [r7, #6]
 8019c7a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019c7c:	797b      	ldrb	r3, [r7, #5]
 8019c7e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019c80:	f107 0308 	add.w	r3, r7, #8
 8019c84:	2202      	movs	r2, #2
 8019c86:	4619      	mov	r1, r3
 8019c88:	208e      	movs	r0, #142	; 0x8e
 8019c8a:	f000 facf 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019c8e:	bf00      	nop
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
	...

08019c98 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019c9c:	b086      	sub	sp, #24
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019ca6:	4a61      	ldr	r2, [pc, #388]	; (8019e2c <SUBGRF_SetModulationParams+0x194>)
 8019ca8:	f107 0308 	add.w	r3, r7, #8
 8019cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019cb0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	781a      	ldrb	r2, [r3, #0]
 8019cb8:	4b5d      	ldr	r3, [pc, #372]	; (8019e30 <SUBGRF_SetModulationParams+0x198>)
 8019cba:	781b      	ldrb	r3, [r3, #0]
 8019cbc:	429a      	cmp	r2, r3
 8019cbe:	d004      	beq.n	8019cca <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	781b      	ldrb	r3, [r3, #0]
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	f7ff fef3 	bl	8019ab0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	781b      	ldrb	r3, [r3, #0]
 8019cce:	2b03      	cmp	r3, #3
 8019cd0:	f200 80a5 	bhi.w	8019e1e <SUBGRF_SetModulationParams+0x186>
 8019cd4:	a201      	add	r2, pc, #4	; (adr r2, 8019cdc <SUBGRF_SetModulationParams+0x44>)
 8019cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cda:	bf00      	nop
 8019cdc:	08019ced 	.word	0x08019ced
 8019ce0:	08019dad 	.word	0x08019dad
 8019ce4:	08019d6f 	.word	0x08019d6f
 8019ce8:	08019ddb 	.word	0x08019ddb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019cec:	2308      	movs	r3, #8
 8019cee:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	685b      	ldr	r3, [r3, #4]
 8019cf4:	4a4f      	ldr	r2, [pc, #316]	; (8019e34 <SUBGRF_SetModulationParams+0x19c>)
 8019cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cfa:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019cfc:	697b      	ldr	r3, [r7, #20]
 8019cfe:	0c1b      	lsrs	r3, r3, #16
 8019d00:	b2db      	uxtb	r3, r3
 8019d02:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	0a1b      	lsrs	r3, r3, #8
 8019d08:	b2db      	uxtb	r3, r3
 8019d0a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019d0c:	697b      	ldr	r3, [r7, #20]
 8019d0e:	b2db      	uxtb	r3, r3
 8019d10:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	7b1b      	ldrb	r3, [r3, #12]
 8019d16:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	7b5b      	ldrb	r3, [r3, #13]
 8019d1c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	689b      	ldr	r3, [r3, #8]
 8019d22:	2200      	movs	r2, #0
 8019d24:	461c      	mov	r4, r3
 8019d26:	4615      	mov	r5, r2
 8019d28:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019d2c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019d30:	4a41      	ldr	r2, [pc, #260]	; (8019e38 <SUBGRF_SetModulationParams+0x1a0>)
 8019d32:	f04f 0300 	mov.w	r3, #0
 8019d36:	4640      	mov	r0, r8
 8019d38:	4649      	mov	r1, r9
 8019d3a:	f7e6 ff35 	bl	8000ba8 <__aeabi_uldivmod>
 8019d3e:	4602      	mov	r2, r0
 8019d40:	460b      	mov	r3, r1
 8019d42:	4613      	mov	r3, r2
 8019d44:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019d46:	697b      	ldr	r3, [r7, #20]
 8019d48:	0c1b      	lsrs	r3, r3, #16
 8019d4a:	b2db      	uxtb	r3, r3
 8019d4c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019d4e:	697b      	ldr	r3, [r7, #20]
 8019d50:	0a1b      	lsrs	r3, r3, #8
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019d56:	697b      	ldr	r3, [r7, #20]
 8019d58:	b2db      	uxtb	r3, r3
 8019d5a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019d5c:	7cfb      	ldrb	r3, [r7, #19]
 8019d5e:	b29a      	uxth	r2, r3
 8019d60:	f107 0308 	add.w	r3, r7, #8
 8019d64:	4619      	mov	r1, r3
 8019d66:	208b      	movs	r0, #139	; 0x8b
 8019d68:	f000 fa60 	bl	801a22c <SUBGRF_WriteCommand>
        break;
 8019d6c:	e058      	b.n	8019e20 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019d6e:	2304      	movs	r3, #4
 8019d70:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	691b      	ldr	r3, [r3, #16]
 8019d76:	4a2f      	ldr	r2, [pc, #188]	; (8019e34 <SUBGRF_SetModulationParams+0x19c>)
 8019d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d7c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019d7e:	697b      	ldr	r3, [r7, #20]
 8019d80:	0c1b      	lsrs	r3, r3, #16
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	0a1b      	lsrs	r3, r3, #8
 8019d8a:	b2db      	uxtb	r3, r3
 8019d8c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019d8e:	697b      	ldr	r3, [r7, #20]
 8019d90:	b2db      	uxtb	r3, r3
 8019d92:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	7d1b      	ldrb	r3, [r3, #20]
 8019d98:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019d9a:	7cfb      	ldrb	r3, [r7, #19]
 8019d9c:	b29a      	uxth	r2, r3
 8019d9e:	f107 0308 	add.w	r3, r7, #8
 8019da2:	4619      	mov	r1, r3
 8019da4:	208b      	movs	r0, #139	; 0x8b
 8019da6:	f000 fa41 	bl	801a22c <SUBGRF_WriteCommand>
        break;
 8019daa:	e039      	b.n	8019e20 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8019dac:	2304      	movs	r3, #4
 8019dae:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	7e1b      	ldrb	r3, [r3, #24]
 8019db4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	7e5b      	ldrb	r3, [r3, #25]
 8019dba:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	7e9b      	ldrb	r3, [r3, #26]
 8019dc0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	7edb      	ldrb	r3, [r3, #27]
 8019dc6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019dc8:	7cfb      	ldrb	r3, [r7, #19]
 8019dca:	b29a      	uxth	r2, r3
 8019dcc:	f107 0308 	add.w	r3, r7, #8
 8019dd0:	4619      	mov	r1, r3
 8019dd2:	208b      	movs	r0, #139	; 0x8b
 8019dd4:	f000 fa2a 	bl	801a22c <SUBGRF_WriteCommand>

        break;
 8019dd8:	e022      	b.n	8019e20 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019dda:	2305      	movs	r3, #5
 8019ddc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	685b      	ldr	r3, [r3, #4]
 8019de2:	4a14      	ldr	r2, [pc, #80]	; (8019e34 <SUBGRF_SetModulationParams+0x19c>)
 8019de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019de8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019dea:	697b      	ldr	r3, [r7, #20]
 8019dec:	0c1b      	lsrs	r3, r3, #16
 8019dee:	b2db      	uxtb	r3, r3
 8019df0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	0a1b      	lsrs	r3, r3, #8
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	7b1b      	ldrb	r3, [r3, #12]
 8019e04:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	7b5b      	ldrb	r3, [r3, #13]
 8019e0a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019e0c:	7cfb      	ldrb	r3, [r7, #19]
 8019e0e:	b29a      	uxth	r2, r3
 8019e10:	f107 0308 	add.w	r3, r7, #8
 8019e14:	4619      	mov	r1, r3
 8019e16:	208b      	movs	r0, #139	; 0x8b
 8019e18:	f000 fa08 	bl	801a22c <SUBGRF_WriteCommand>
        break;
 8019e1c:	e000      	b.n	8019e20 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019e1e:	bf00      	nop
    }
}
 8019e20:	bf00      	nop
 8019e22:	3718      	adds	r7, #24
 8019e24:	46bd      	mov	sp, r7
 8019e26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019e2a:	bf00      	nop
 8019e2c:	0801c69c 	.word	0x0801c69c
 8019e30:	20001bb5 	.word	0x20001bb5
 8019e34:	3d090000 	.word	0x3d090000
 8019e38:	01e84800 	.word	0x01e84800

08019e3c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b086      	sub	sp, #24
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019e44:	2300      	movs	r3, #0
 8019e46:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019e48:	4a48      	ldr	r2, [pc, #288]	; (8019f6c <SUBGRF_SetPacketParams+0x130>)
 8019e4a:	f107 030c 	add.w	r3, r7, #12
 8019e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019e50:	c303      	stmia	r3!, {r0, r1}
 8019e52:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	781a      	ldrb	r2, [r3, #0]
 8019e58:	4b45      	ldr	r3, [pc, #276]	; (8019f70 <SUBGRF_SetPacketParams+0x134>)
 8019e5a:	781b      	ldrb	r3, [r3, #0]
 8019e5c:	429a      	cmp	r2, r3
 8019e5e:	d004      	beq.n	8019e6a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	781b      	ldrb	r3, [r3, #0]
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7ff fe23 	bl	8019ab0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	781b      	ldrb	r3, [r3, #0]
 8019e6e:	2b03      	cmp	r3, #3
 8019e70:	d878      	bhi.n	8019f64 <SUBGRF_SetPacketParams+0x128>
 8019e72:	a201      	add	r2, pc, #4	; (adr r2, 8019e78 <SUBGRF_SetPacketParams+0x3c>)
 8019e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e78:	08019e89 	.word	0x08019e89
 8019e7c:	08019f19 	.word	0x08019f19
 8019e80:	08019f0d 	.word	0x08019f0d
 8019e84:	08019e89 	.word	0x08019e89
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	7a5b      	ldrb	r3, [r3, #9]
 8019e8c:	2bf1      	cmp	r3, #241	; 0xf1
 8019e8e:	d10a      	bne.n	8019ea6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019e90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019e94:	f7ff faaa 	bl	80193ec <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019e98:	f248 0005 	movw	r0, #32773	; 0x8005
 8019e9c:	f7ff fac6 	bl	801942c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019ea0:	2302      	movs	r3, #2
 8019ea2:	75bb      	strb	r3, [r7, #22]
 8019ea4:	e011      	b.n	8019eca <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	7a5b      	ldrb	r3, [r3, #9]
 8019eaa:	2bf2      	cmp	r3, #242	; 0xf2
 8019eac:	d10a      	bne.n	8019ec4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019eae:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8019eb2:	f7ff fa9b 	bl	80193ec <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019eb6:	f241 0021 	movw	r0, #4129	; 0x1021
 8019eba:	f7ff fab7 	bl	801942c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019ebe:	2306      	movs	r3, #6
 8019ec0:	75bb      	strb	r3, [r7, #22]
 8019ec2:	e002      	b.n	8019eca <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	7a5b      	ldrb	r3, [r3, #9]
 8019ec8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019eca:	2309      	movs	r3, #9
 8019ecc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	885b      	ldrh	r3, [r3, #2]
 8019ed2:	0a1b      	lsrs	r3, r3, #8
 8019ed4:	b29b      	uxth	r3, r3
 8019ed6:	b2db      	uxtb	r3, r3
 8019ed8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	885b      	ldrh	r3, [r3, #2]
 8019ede:	b2db      	uxtb	r3, r3
 8019ee0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	791b      	ldrb	r3, [r3, #4]
 8019ee6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	795b      	ldrb	r3, [r3, #5]
 8019eec:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	799b      	ldrb	r3, [r3, #6]
 8019ef2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	79db      	ldrb	r3, [r3, #7]
 8019ef8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	7a1b      	ldrb	r3, [r3, #8]
 8019efe:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019f00:	7dbb      	ldrb	r3, [r7, #22]
 8019f02:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	7a9b      	ldrb	r3, [r3, #10]
 8019f08:	753b      	strb	r3, [r7, #20]
        break;
 8019f0a:	e022      	b.n	8019f52 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019f0c:	2301      	movs	r3, #1
 8019f0e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	7b1b      	ldrb	r3, [r3, #12]
 8019f14:	733b      	strb	r3, [r7, #12]
        break;
 8019f16:	e01c      	b.n	8019f52 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019f18:	2306      	movs	r3, #6
 8019f1a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	89db      	ldrh	r3, [r3, #14]
 8019f20:	0a1b      	lsrs	r3, r3, #8
 8019f22:	b29b      	uxth	r3, r3
 8019f24:	b2db      	uxtb	r3, r3
 8019f26:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	89db      	ldrh	r3, [r3, #14]
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	7c1a      	ldrb	r2, [r3, #16]
 8019f34:	4b0f      	ldr	r3, [pc, #60]	; (8019f74 <SUBGRF_SetPacketParams+0x138>)
 8019f36:	4611      	mov	r1, r2
 8019f38:	7019      	strb	r1, [r3, #0]
 8019f3a:	4613      	mov	r3, r2
 8019f3c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	7c5b      	ldrb	r3, [r3, #17]
 8019f42:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	7c9b      	ldrb	r3, [r3, #18]
 8019f48:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	7cdb      	ldrb	r3, [r3, #19]
 8019f4e:	747b      	strb	r3, [r7, #17]
        break;
 8019f50:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019f52:	7dfb      	ldrb	r3, [r7, #23]
 8019f54:	b29a      	uxth	r2, r3
 8019f56:	f107 030c 	add.w	r3, r7, #12
 8019f5a:	4619      	mov	r1, r3
 8019f5c:	208c      	movs	r0, #140	; 0x8c
 8019f5e:	f000 f965 	bl	801a22c <SUBGRF_WriteCommand>
 8019f62:	e000      	b.n	8019f66 <SUBGRF_SetPacketParams+0x12a>
        return;
 8019f64:	bf00      	nop
}
 8019f66:	3718      	adds	r7, #24
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bd80      	pop	{r7, pc}
 8019f6c:	0801c6a4 	.word	0x0801c6a4
 8019f70:	20001bb5 	.word	0x20001bb5
 8019f74:	20001bb6 	.word	0x20001bb6

08019f78 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b084      	sub	sp, #16
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	4603      	mov	r3, r0
 8019f80:	460a      	mov	r2, r1
 8019f82:	71fb      	strb	r3, [r7, #7]
 8019f84:	4613      	mov	r3, r2
 8019f86:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019f88:	79fb      	ldrb	r3, [r7, #7]
 8019f8a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019f8c:	79bb      	ldrb	r3, [r7, #6]
 8019f8e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019f90:	f107 030c 	add.w	r3, r7, #12
 8019f94:	2202      	movs	r2, #2
 8019f96:	4619      	mov	r1, r3
 8019f98:	208f      	movs	r0, #143	; 0x8f
 8019f9a:	f000 f947 	bl	801a22c <SUBGRF_WriteCommand>
}
 8019f9e:	bf00      	nop
 8019fa0:	3710      	adds	r7, #16
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd80      	pop	{r7, pc}

08019fa6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019fa6:	b580      	push	{r7, lr}
 8019fa8:	b082      	sub	sp, #8
 8019faa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019fac:	2300      	movs	r3, #0
 8019fae:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019fb0:	1d3b      	adds	r3, r7, #4
 8019fb2:	2201      	movs	r2, #1
 8019fb4:	4619      	mov	r1, r3
 8019fb6:	2015      	movs	r0, #21
 8019fb8:	f000 f95a 	bl	801a270 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019fbc:	793b      	ldrb	r3, [r7, #4]
 8019fbe:	425b      	negs	r3, r3
 8019fc0:	105b      	asrs	r3, r3, #1
 8019fc2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019fc8:	4618      	mov	r0, r3
 8019fca:	3708      	adds	r7, #8
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bd80      	pop	{r7, pc}

08019fd0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b084      	sub	sp, #16
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
 8019fd8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019fda:	f107 030c 	add.w	r3, r7, #12
 8019fde:	2202      	movs	r2, #2
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	2013      	movs	r0, #19
 8019fe4:	f000 f944 	bl	801a270 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019fe8:	f7ff fd7e 	bl	8019ae8 <SUBGRF_GetPacketType>
 8019fec:	4603      	mov	r3, r0
 8019fee:	2b01      	cmp	r3, #1
 8019ff0:	d10d      	bne.n	801a00e <SUBGRF_GetRxBufferStatus+0x3e>
 8019ff2:	4b0c      	ldr	r3, [pc, #48]	; (801a024 <SUBGRF_GetRxBufferStatus+0x54>)
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	b2db      	uxtb	r3, r3
 8019ff8:	2b01      	cmp	r3, #1
 8019ffa:	d108      	bne.n	801a00e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019ffc:	f240 7002 	movw	r0, #1794	; 0x702
 801a000:	f000 f878 	bl	801a0f4 <SUBGRF_ReadRegister>
 801a004:	4603      	mov	r3, r0
 801a006:	461a      	mov	r2, r3
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	701a      	strb	r2, [r3, #0]
 801a00c:	e002      	b.n	801a014 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a00e:	7b3a      	ldrb	r2, [r7, #12]
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a014:	7b7a      	ldrb	r2, [r7, #13]
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	701a      	strb	r2, [r3, #0]
}
 801a01a:	bf00      	nop
 801a01c:	3710      	adds	r7, #16
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
 801a022:	bf00      	nop
 801a024:	20001bb6 	.word	0x20001bb6

0801a028 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b084      	sub	sp, #16
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a030:	f107 030c 	add.w	r3, r7, #12
 801a034:	2203      	movs	r2, #3
 801a036:	4619      	mov	r1, r3
 801a038:	2014      	movs	r0, #20
 801a03a:	f000 f919 	bl	801a270 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a03e:	f7ff fd53 	bl	8019ae8 <SUBGRF_GetPacketType>
 801a042:	4603      	mov	r3, r0
 801a044:	461a      	mov	r2, r3
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	781b      	ldrb	r3, [r3, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d002      	beq.n	801a058 <SUBGRF_GetPacketStatus+0x30>
 801a052:	2b01      	cmp	r3, #1
 801a054:	d013      	beq.n	801a07e <SUBGRF_GetPacketStatus+0x56>
 801a056:	e02a      	b.n	801a0ae <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a058:	7b3a      	ldrb	r2, [r7, #12]
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a05e:	7b7b      	ldrb	r3, [r7, #13]
 801a060:	425b      	negs	r3, r3
 801a062:	105b      	asrs	r3, r3, #1
 801a064:	b25a      	sxtb	r2, r3
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a06a:	7bbb      	ldrb	r3, [r7, #14]
 801a06c:	425b      	negs	r3, r3
 801a06e:	105b      	asrs	r3, r3, #1
 801a070:	b25a      	sxtb	r2, r3
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	2200      	movs	r2, #0
 801a07a:	609a      	str	r2, [r3, #8]
            break;
 801a07c:	e020      	b.n	801a0c0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a07e:	7b3b      	ldrb	r3, [r7, #12]
 801a080:	425b      	negs	r3, r3
 801a082:	105b      	asrs	r3, r3, #1
 801a084:	b25a      	sxtb	r2, r3
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a08a:	7b7b      	ldrb	r3, [r7, #13]
 801a08c:	b25b      	sxtb	r3, r3
 801a08e:	3302      	adds	r3, #2
 801a090:	109b      	asrs	r3, r3, #2
 801a092:	b25a      	sxtb	r2, r3
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a098:	7bbb      	ldrb	r3, [r7, #14]
 801a09a:	425b      	negs	r3, r3
 801a09c:	105b      	asrs	r3, r3, #1
 801a09e:	b25a      	sxtb	r2, r3
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a0a4:	4b08      	ldr	r3, [pc, #32]	; (801a0c8 <SUBGRF_GetPacketStatus+0xa0>)
 801a0a6:	681a      	ldr	r2, [r3, #0]
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	611a      	str	r2, [r3, #16]
            break;
 801a0ac:	e008      	b.n	801a0c0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a0ae:	2214      	movs	r2, #20
 801a0b0:	2100      	movs	r1, #0
 801a0b2:	6878      	ldr	r0, [r7, #4]
 801a0b4:	f000 fc03 	bl	801a8be <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	220f      	movs	r2, #15
 801a0bc:	701a      	strb	r2, [r3, #0]
            break;
 801a0be:	bf00      	nop
    }
}
 801a0c0:	bf00      	nop
 801a0c2:	3710      	adds	r7, #16
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}
 801a0c8:	20001bb8 	.word	0x20001bb8

0801a0cc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b082      	sub	sp, #8
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	460a      	mov	r2, r1
 801a0d6:	80fb      	strh	r3, [r7, #6]
 801a0d8:	4613      	mov	r3, r2
 801a0da:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a0dc:	1d7a      	adds	r2, r7, #5
 801a0de:	88f9      	ldrh	r1, [r7, #6]
 801a0e0:	2301      	movs	r3, #1
 801a0e2:	4803      	ldr	r0, [pc, #12]	; (801a0f0 <SUBGRF_WriteRegister+0x24>)
 801a0e4:	f7ec ff3e 	bl	8006f64 <HAL_SUBGHZ_WriteRegisters>
}
 801a0e8:	bf00      	nop
 801a0ea:	3708      	adds	r7, #8
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	bd80      	pop	{r7, pc}
 801a0f0:	20000204 	.word	0x20000204

0801a0f4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b084      	sub	sp, #16
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a0fe:	f107 020f 	add.w	r2, r7, #15
 801a102:	88f9      	ldrh	r1, [r7, #6]
 801a104:	2301      	movs	r3, #1
 801a106:	4804      	ldr	r0, [pc, #16]	; (801a118 <SUBGRF_ReadRegister+0x24>)
 801a108:	f7ec ff8b 	bl	8007022 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a10e:	4618      	mov	r0, r3
 801a110:	3710      	adds	r7, #16
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}
 801a116:	bf00      	nop
 801a118:	20000204 	.word	0x20000204

0801a11c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b086      	sub	sp, #24
 801a120:	af00      	add	r7, sp, #0
 801a122:	4603      	mov	r3, r0
 801a124:	6039      	str	r1, [r7, #0]
 801a126:	80fb      	strh	r3, [r7, #6]
 801a128:	4613      	mov	r3, r2
 801a12a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a12c:	f3ef 8310 	mrs	r3, PRIMASK
 801a130:	60fb      	str	r3, [r7, #12]
  return(result);
 801a132:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a136:	b672      	cpsid	i
}
 801a138:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a13a:	88bb      	ldrh	r3, [r7, #4]
 801a13c:	88f9      	ldrh	r1, [r7, #6]
 801a13e:	683a      	ldr	r2, [r7, #0]
 801a140:	4806      	ldr	r0, [pc, #24]	; (801a15c <SUBGRF_WriteRegisters+0x40>)
 801a142:	f7ec ff0f 	bl	8006f64 <HAL_SUBGHZ_WriteRegisters>
 801a146:	697b      	ldr	r3, [r7, #20]
 801a148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a14a:	693b      	ldr	r3, [r7, #16]
 801a14c:	f383 8810 	msr	PRIMASK, r3
}
 801a150:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a152:	bf00      	nop
 801a154:	3718      	adds	r7, #24
 801a156:	46bd      	mov	sp, r7
 801a158:	bd80      	pop	{r7, pc}
 801a15a:	bf00      	nop
 801a15c:	20000204 	.word	0x20000204

0801a160 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b086      	sub	sp, #24
 801a164:	af00      	add	r7, sp, #0
 801a166:	4603      	mov	r3, r0
 801a168:	6039      	str	r1, [r7, #0]
 801a16a:	80fb      	strh	r3, [r7, #6]
 801a16c:	4613      	mov	r3, r2
 801a16e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a170:	f3ef 8310 	mrs	r3, PRIMASK
 801a174:	60fb      	str	r3, [r7, #12]
  return(result);
 801a176:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a17a:	b672      	cpsid	i
}
 801a17c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a17e:	88bb      	ldrh	r3, [r7, #4]
 801a180:	88f9      	ldrh	r1, [r7, #6]
 801a182:	683a      	ldr	r2, [r7, #0]
 801a184:	4806      	ldr	r0, [pc, #24]	; (801a1a0 <SUBGRF_ReadRegisters+0x40>)
 801a186:	f7ec ff4c 	bl	8007022 <HAL_SUBGHZ_ReadRegisters>
 801a18a:	697b      	ldr	r3, [r7, #20]
 801a18c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a18e:	693b      	ldr	r3, [r7, #16]
 801a190:	f383 8810 	msr	PRIMASK, r3
}
 801a194:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a196:	bf00      	nop
 801a198:	3718      	adds	r7, #24
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}
 801a19e:	bf00      	nop
 801a1a0:	20000204 	.word	0x20000204

0801a1a4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b086      	sub	sp, #24
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	6039      	str	r1, [r7, #0]
 801a1ae:	71fb      	strb	r3, [r7, #7]
 801a1b0:	4613      	mov	r3, r2
 801a1b2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1b4:	f3ef 8310 	mrs	r3, PRIMASK
 801a1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 801a1ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a1bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1be:	b672      	cpsid	i
}
 801a1c0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a1c2:	79bb      	ldrb	r3, [r7, #6]
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	79f9      	ldrb	r1, [r7, #7]
 801a1c8:	683a      	ldr	r2, [r7, #0]
 801a1ca:	4806      	ldr	r0, [pc, #24]	; (801a1e4 <SUBGRF_WriteBuffer+0x40>)
 801a1cc:	f7ed f83d 	bl	800724a <HAL_SUBGHZ_WriteBuffer>
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	f383 8810 	msr	PRIMASK, r3
}
 801a1da:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a1dc:	bf00      	nop
 801a1de:	3718      	adds	r7, #24
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	20000204 	.word	0x20000204

0801a1e8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b086      	sub	sp, #24
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	4603      	mov	r3, r0
 801a1f0:	6039      	str	r1, [r7, #0]
 801a1f2:	71fb      	strb	r3, [r7, #7]
 801a1f4:	4613      	mov	r3, r2
 801a1f6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801a1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a1fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a202:	b672      	cpsid	i
}
 801a204:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a206:	79bb      	ldrb	r3, [r7, #6]
 801a208:	b29b      	uxth	r3, r3
 801a20a:	79f9      	ldrb	r1, [r7, #7]
 801a20c:	683a      	ldr	r2, [r7, #0]
 801a20e:	4806      	ldr	r0, [pc, #24]	; (801a228 <SUBGRF_ReadBuffer+0x40>)
 801a210:	f7ed f86e 	bl	80072f0 <HAL_SUBGHZ_ReadBuffer>
 801a214:	697b      	ldr	r3, [r7, #20]
 801a216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a218:	693b      	ldr	r3, [r7, #16]
 801a21a:	f383 8810 	msr	PRIMASK, r3
}
 801a21e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a220:	bf00      	nop
 801a222:	3718      	adds	r7, #24
 801a224:	46bd      	mov	sp, r7
 801a226:	bd80      	pop	{r7, pc}
 801a228:	20000204 	.word	0x20000204

0801a22c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b086      	sub	sp, #24
 801a230:	af00      	add	r7, sp, #0
 801a232:	4603      	mov	r3, r0
 801a234:	6039      	str	r1, [r7, #0]
 801a236:	71fb      	strb	r3, [r7, #7]
 801a238:	4613      	mov	r3, r2
 801a23a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a23c:	f3ef 8310 	mrs	r3, PRIMASK
 801a240:	60fb      	str	r3, [r7, #12]
  return(result);
 801a242:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a246:	b672      	cpsid	i
}
 801a248:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a24a:	88bb      	ldrh	r3, [r7, #4]
 801a24c:	79f9      	ldrb	r1, [r7, #7]
 801a24e:	683a      	ldr	r2, [r7, #0]
 801a250:	4806      	ldr	r0, [pc, #24]	; (801a26c <SUBGRF_WriteCommand+0x40>)
 801a252:	f7ec ff47 	bl	80070e4 <HAL_SUBGHZ_ExecSetCmd>
 801a256:	697b      	ldr	r3, [r7, #20]
 801a258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	f383 8810 	msr	PRIMASK, r3
}
 801a260:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a262:	bf00      	nop
 801a264:	3718      	adds	r7, #24
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}
 801a26a:	bf00      	nop
 801a26c:	20000204 	.word	0x20000204

0801a270 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b086      	sub	sp, #24
 801a274:	af00      	add	r7, sp, #0
 801a276:	4603      	mov	r3, r0
 801a278:	6039      	str	r1, [r7, #0]
 801a27a:	71fb      	strb	r3, [r7, #7]
 801a27c:	4613      	mov	r3, r2
 801a27e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a280:	f3ef 8310 	mrs	r3, PRIMASK
 801a284:	60fb      	str	r3, [r7, #12]
  return(result);
 801a286:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a28a:	b672      	cpsid	i
}
 801a28c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a28e:	88bb      	ldrh	r3, [r7, #4]
 801a290:	79f9      	ldrb	r1, [r7, #7]
 801a292:	683a      	ldr	r2, [r7, #0]
 801a294:	4806      	ldr	r0, [pc, #24]	; (801a2b0 <SUBGRF_ReadCommand+0x40>)
 801a296:	f7ec ff84 	bl	80071a2 <HAL_SUBGHZ_ExecGetCmd>
 801a29a:	697b      	ldr	r3, [r7, #20]
 801a29c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a29e:	693b      	ldr	r3, [r7, #16]
 801a2a0:	f383 8810 	msr	PRIMASK, r3
}
 801a2a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a2a6:	bf00      	nop
 801a2a8:	3718      	adds	r7, #24
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}
 801a2ae:	bf00      	nop
 801a2b0:	20000204 	.word	0x20000204

0801a2b4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b084      	sub	sp, #16
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	460a      	mov	r2, r1
 801a2be:	71fb      	strb	r3, [r7, #7]
 801a2c0:	4613      	mov	r3, r2
 801a2c2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a2c4:	2301      	movs	r3, #1
 801a2c6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a2c8:	79bb      	ldrb	r3, [r7, #6]
 801a2ca:	2b01      	cmp	r3, #1
 801a2cc:	d10d      	bne.n	801a2ea <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a2ce:	79fb      	ldrb	r3, [r7, #7]
 801a2d0:	2b01      	cmp	r3, #1
 801a2d2:	d104      	bne.n	801a2de <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a2d4:	2302      	movs	r3, #2
 801a2d6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a2d8:	2004      	movs	r0, #4
 801a2da:	f000 f8ef 	bl	801a4bc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a2de:	79fb      	ldrb	r3, [r7, #7]
 801a2e0:	2b02      	cmp	r3, #2
 801a2e2:	d107      	bne.n	801a2f4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a2e4:	2303      	movs	r3, #3
 801a2e6:	73fb      	strb	r3, [r7, #15]
 801a2e8:	e004      	b.n	801a2f4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a2ea:	79bb      	ldrb	r3, [r7, #6]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d101      	bne.n	801a2f4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a2f0:	2301      	movs	r3, #1
 801a2f2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a2f4:	7bfb      	ldrb	r3, [r7, #15]
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f7f0 fa4b 	bl	800a792 <RBI_ConfigRFSwitch>
}
 801a2fc:	bf00      	nop
 801a2fe:	3710      	adds	r7, #16
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}

0801a304 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	4603      	mov	r3, r0
 801a30c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a30e:	2301      	movs	r3, #1
 801a310:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a312:	f7f0 fa4c 	bl	800a7ae <RBI_GetTxConfig>
 801a316:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a318:	68bb      	ldr	r3, [r7, #8]
 801a31a:	2b02      	cmp	r3, #2
 801a31c:	d016      	beq.n	801a34c <SUBGRF_SetRfTxPower+0x48>
 801a31e:	68bb      	ldr	r3, [r7, #8]
 801a320:	2b02      	cmp	r3, #2
 801a322:	dc16      	bgt.n	801a352 <SUBGRF_SetRfTxPower+0x4e>
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d003      	beq.n	801a332 <SUBGRF_SetRfTxPower+0x2e>
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	2b01      	cmp	r3, #1
 801a32e:	d00a      	beq.n	801a346 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a330:	e00f      	b.n	801a352 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a336:	2b0f      	cmp	r3, #15
 801a338:	dd02      	ble.n	801a340 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a33a:	2302      	movs	r3, #2
 801a33c:	73fb      	strb	r3, [r7, #15]
            break;
 801a33e:	e009      	b.n	801a354 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a340:	2301      	movs	r3, #1
 801a342:	73fb      	strb	r3, [r7, #15]
            break;
 801a344:	e006      	b.n	801a354 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a346:	2301      	movs	r3, #1
 801a348:	73fb      	strb	r3, [r7, #15]
            break;
 801a34a:	e003      	b.n	801a354 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a34c:	2302      	movs	r3, #2
 801a34e:	73fb      	strb	r3, [r7, #15]
            break;
 801a350:	e000      	b.n	801a354 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a352:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a354:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a358:	7bfb      	ldrb	r3, [r7, #15]
 801a35a:	2202      	movs	r2, #2
 801a35c:	4618      	mov	r0, r3
 801a35e:	f7ff fbcd 	bl	8019afc <SUBGRF_SetTxParams>

    return paSelect;
 801a362:	7bfb      	ldrb	r3, [r7, #15]
}
 801a364:	4618      	mov	r0, r3
 801a366:	3710      	adds	r7, #16
 801a368:	46bd      	mov	sp, r7
 801a36a:	bd80      	pop	{r7, pc}

0801a36c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a36c:	b480      	push	{r7}
 801a36e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a370:	2301      	movs	r3, #1
}
 801a372:	4618      	mov	r0, r3
 801a374:	46bd      	mov	sp, r7
 801a376:	bc80      	pop	{r7}
 801a378:	4770      	bx	lr
	...

0801a37c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b082      	sub	sp, #8
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a384:	4b03      	ldr	r3, [pc, #12]	; (801a394 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	2001      	movs	r0, #1
 801a38a:	4798      	blx	r3
}
 801a38c:	bf00      	nop
 801a38e:	3708      	adds	r7, #8
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}
 801a394:	20001bc0 	.word	0x20001bc0

0801a398 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b082      	sub	sp, #8
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a3a0:	4b03      	ldr	r3, [pc, #12]	; (801a3b0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2002      	movs	r0, #2
 801a3a6:	4798      	blx	r3
}
 801a3a8:	bf00      	nop
 801a3aa:	3708      	adds	r7, #8
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	bd80      	pop	{r7, pc}
 801a3b0:	20001bc0 	.word	0x20001bc0

0801a3b4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b082      	sub	sp, #8
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a3bc:	4b03      	ldr	r3, [pc, #12]	; (801a3cc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2040      	movs	r0, #64	; 0x40
 801a3c2:	4798      	blx	r3
}
 801a3c4:	bf00      	nop
 801a3c6:	3708      	adds	r7, #8
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}
 801a3cc:	20001bc0 	.word	0x20001bc0

0801a3d0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b082      	sub	sp, #8
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	6078      	str	r0, [r7, #4]
 801a3d8:	460b      	mov	r3, r1
 801a3da:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a3dc:	78fb      	ldrb	r3, [r7, #3]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d002      	beq.n	801a3e8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a3e2:	2b01      	cmp	r3, #1
 801a3e4:	d005      	beq.n	801a3f2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a3e6:	e00a      	b.n	801a3fe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a3e8:	4b07      	ldr	r3, [pc, #28]	; (801a408 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	2080      	movs	r0, #128	; 0x80
 801a3ee:	4798      	blx	r3
            break;
 801a3f0:	e005      	b.n	801a3fe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a3f2:	4b05      	ldr	r3, [pc, #20]	; (801a408 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a3fa:	4798      	blx	r3
            break;
 801a3fc:	bf00      	nop
    }
}
 801a3fe:	bf00      	nop
 801a400:	3708      	adds	r7, #8
 801a402:	46bd      	mov	sp, r7
 801a404:	bd80      	pop	{r7, pc}
 801a406:	bf00      	nop
 801a408:	20001bc0 	.word	0x20001bc0

0801a40c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b082      	sub	sp, #8
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a414:	4b04      	ldr	r3, [pc, #16]	; (801a428 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a41c:	4798      	blx	r3
}
 801a41e:	bf00      	nop
 801a420:	3708      	adds	r7, #8
 801a422:	46bd      	mov	sp, r7
 801a424:	bd80      	pop	{r7, pc}
 801a426:	bf00      	nop
 801a428:	20001bc0 	.word	0x20001bc0

0801a42c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a434:	4b03      	ldr	r3, [pc, #12]	; (801a444 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	2020      	movs	r0, #32
 801a43a:	4798      	blx	r3
}
 801a43c:	bf00      	nop
 801a43e:	3708      	adds	r7, #8
 801a440:	46bd      	mov	sp, r7
 801a442:	bd80      	pop	{r7, pc}
 801a444:	20001bc0 	.word	0x20001bc0

0801a448 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a450:	4b03      	ldr	r3, [pc, #12]	; (801a460 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	2004      	movs	r0, #4
 801a456:	4798      	blx	r3
}
 801a458:	bf00      	nop
 801a45a:	3708      	adds	r7, #8
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	20001bc0 	.word	0x20001bc0

0801a464 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b082      	sub	sp, #8
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a46c:	4b03      	ldr	r3, [pc, #12]	; (801a47c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	2008      	movs	r0, #8
 801a472:	4798      	blx	r3
}
 801a474:	bf00      	nop
 801a476:	3708      	adds	r7, #8
 801a478:	46bd      	mov	sp, r7
 801a47a:	bd80      	pop	{r7, pc}
 801a47c:	20001bc0 	.word	0x20001bc0

0801a480 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b082      	sub	sp, #8
 801a484:	af00      	add	r7, sp, #0
 801a486:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a488:	4b03      	ldr	r3, [pc, #12]	; (801a498 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	2010      	movs	r0, #16
 801a48e:	4798      	blx	r3
}
 801a490:	bf00      	nop
 801a492:	3708      	adds	r7, #8
 801a494:	46bd      	mov	sp, r7
 801a496:	bd80      	pop	{r7, pc}
 801a498:	20001bc0 	.word	0x20001bc0

0801a49c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b082      	sub	sp, #8
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801a4a4:	4b04      	ldr	r3, [pc, #16]	; (801a4b8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801a4ac:	4798      	blx	r3
}
 801a4ae:	bf00      	nop
 801a4b0:	3708      	adds	r7, #8
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
 801a4b6:	bf00      	nop
 801a4b8:	20001bc0 	.word	0x20001bc0

0801a4bc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b084      	sub	sp, #16
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a4c6:	f7f0 f980 	bl	800a7ca <RBI_IsDCDC>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	2b01      	cmp	r3, #1
 801a4ce:	d112      	bne.n	801a4f6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a4d0:	f640 1023 	movw	r0, #2339	; 0x923
 801a4d4:	f7ff fe0e 	bl	801a0f4 <SUBGRF_ReadRegister>
 801a4d8:	4603      	mov	r3, r0
 801a4da:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a4dc:	7bfb      	ldrb	r3, [r7, #15]
 801a4de:	f023 0306 	bic.w	r3, r3, #6
 801a4e2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a4e4:	7bfa      	ldrb	r2, [r7, #15]
 801a4e6:	79fb      	ldrb	r3, [r7, #7]
 801a4e8:	4313      	orrs	r3, r2
 801a4ea:	b2db      	uxtb	r3, r3
 801a4ec:	4619      	mov	r1, r3
 801a4ee:	f640 1023 	movw	r0, #2339	; 0x923
 801a4f2:	f7ff fdeb 	bl	801a0cc <SUBGRF_WriteRegister>
  }
}
 801a4f6:	bf00      	nop
 801a4f8:	3710      	adds	r7, #16
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	bd80      	pop	{r7, pc}
	...

0801a500 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a500:	b480      	push	{r7}
 801a502:	b085      	sub	sp, #20
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d101      	bne.n	801a512 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a50e:	231f      	movs	r3, #31
 801a510:	e016      	b.n	801a540 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a512:	2300      	movs	r3, #0
 801a514:	73fb      	strb	r3, [r7, #15]
 801a516:	e00f      	b.n	801a538 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a518:	7bfb      	ldrb	r3, [r7, #15]
 801a51a:	4a0c      	ldr	r2, [pc, #48]	; (801a54c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a51c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a520:	687a      	ldr	r2, [r7, #4]
 801a522:	429a      	cmp	r2, r3
 801a524:	d205      	bcs.n	801a532 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a526:	7bfb      	ldrb	r3, [r7, #15]
 801a528:	4a08      	ldr	r2, [pc, #32]	; (801a54c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a52a:	00db      	lsls	r3, r3, #3
 801a52c:	4413      	add	r3, r2
 801a52e:	791b      	ldrb	r3, [r3, #4]
 801a530:	e006      	b.n	801a540 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a532:	7bfb      	ldrb	r3, [r7, #15]
 801a534:	3301      	adds	r3, #1
 801a536:	73fb      	strb	r3, [r7, #15]
 801a538:	7bfb      	ldrb	r3, [r7, #15]
 801a53a:	2b15      	cmp	r3, #21
 801a53c:	d9ec      	bls.n	801a518 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801a53e:	e7fe      	b.n	801a53e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a540:	4618      	mov	r0, r3
 801a542:	3714      	adds	r7, #20
 801a544:	46bd      	mov	sp, r7
 801a546:	bc80      	pop	{r7}
 801a548:	4770      	bx	lr
 801a54a:	bf00      	nop
 801a54c:	0801cc5c 	.word	0x0801cc5c

0801a550 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a550:	b580      	push	{r7, lr}
 801a552:	b08a      	sub	sp, #40	; 0x28
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a55a:	4b35      	ldr	r3, [pc, #212]	; (801a630 <SUBGRF_GetCFO+0xe0>)
 801a55c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a55e:	f640 0007 	movw	r0, #2055	; 0x807
 801a562:	f7ff fdc7 	bl	801a0f4 <SUBGRF_ReadRegister>
 801a566:	4603      	mov	r3, r0
 801a568:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a56a:	7ffb      	ldrb	r3, [r7, #31]
 801a56c:	08db      	lsrs	r3, r3, #3
 801a56e:	b2db      	uxtb	r3, r3
 801a570:	f003 0303 	and.w	r3, r3, #3
 801a574:	3328      	adds	r3, #40	; 0x28
 801a576:	443b      	add	r3, r7
 801a578:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a57c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a57e:	7ffb      	ldrb	r3, [r7, #31]
 801a580:	f003 0307 	and.w	r3, r3, #7
 801a584:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801a586:	7fba      	ldrb	r2, [r7, #30]
 801a588:	7f7b      	ldrb	r3, [r7, #29]
 801a58a:	3301      	adds	r3, #1
 801a58c:	fa02 f303 	lsl.w	r3, r2, r3
 801a590:	461a      	mov	r2, r3
 801a592:	4b28      	ldr	r3, [pc, #160]	; (801a634 <SUBGRF_GetCFO+0xe4>)
 801a594:	fbb3 f3f2 	udiv	r3, r3, r2
 801a598:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a59a:	69ba      	ldr	r2, [r7, #24]
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5a2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5ae:	697a      	ldr	r2, [r7, #20]
 801a5b0:	fb02 f303 	mul.w	r3, r2, r3
 801a5b4:	2b07      	cmp	r3, #7
 801a5b6:	d802      	bhi.n	801a5be <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a5b8:	2302      	movs	r3, #2
 801a5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801a5be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5c2:	697a      	ldr	r2, [r7, #20]
 801a5c4:	fb02 f303 	mul.w	r3, r2, r3
 801a5c8:	2b03      	cmp	r3, #3
 801a5ca:	d802      	bhi.n	801a5d2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a5cc:	2304      	movs	r3, #4
 801a5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a5d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a5d6:	69bb      	ldr	r3, [r7, #24]
 801a5d8:	fb02 f303 	mul.w	r3, r2, r3
 801a5dc:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a5de:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801a5e2:	f7ff fd87 	bl	801a0f4 <SUBGRF_ReadRegister>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	021b      	lsls	r3, r3, #8
 801a5ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a5ee:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a5f0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801a5f4:	f7ff fd7e 	bl	801a0f4 <SUBGRF_ReadRegister>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	461a      	mov	r2, r3
 801a5fc:	6a3b      	ldr	r3, [r7, #32]
 801a5fe:	4313      	orrs	r3, r2
 801a600:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a602:	6a3b      	ldr	r3, [r7, #32]
 801a604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d005      	beq.n	801a618 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a60c:	6a3b      	ldr	r3, [r7, #32]
 801a60e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a612:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a616:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	095b      	lsrs	r3, r3, #5
 801a61c:	6a3a      	ldr	r2, [r7, #32]
 801a61e:	fb02 f303 	mul.w	r3, r2, r3
 801a622:	11da      	asrs	r2, r3, #7
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	601a      	str	r2, [r3, #0]
}
 801a628:	bf00      	nop
 801a62a:	3728      	adds	r7, #40	; 0x28
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}
 801a630:	0c0a0804 	.word	0x0c0a0804
 801a634:	01e84800 	.word	0x01e84800

0801a638 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801a638:	b480      	push	{r7}
 801a63a:	b087      	sub	sp, #28
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	4603      	mov	r3, r0
 801a640:	60b9      	str	r1, [r7, #8]
 801a642:	607a      	str	r2, [r7, #4]
 801a644:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801a646:	2300      	movs	r3, #0
 801a648:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801a64a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a64e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a650:	697b      	ldr	r3, [r7, #20]
}
 801a652:	4618      	mov	r0, r3
 801a654:	371c      	adds	r7, #28
 801a656:	46bd      	mov	sp, r7
 801a658:	bc80      	pop	{r7}
 801a65a:	4770      	bx	lr

0801a65c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801a65c:	b480      	push	{r7}
 801a65e:	b087      	sub	sp, #28
 801a660:	af00      	add	r7, sp, #0
 801a662:	4603      	mov	r3, r0
 801a664:	60b9      	str	r1, [r7, #8]
 801a666:	607a      	str	r2, [r7, #4]
 801a668:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a66a:	2300      	movs	r3, #0
 801a66c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801a66e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a672:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a674:	697b      	ldr	r3, [r7, #20]
}
 801a676:	4618      	mov	r0, r3
 801a678:	371c      	adds	r7, #28
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bc80      	pop	{r7}
 801a67e:	4770      	bx	lr

0801a680 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801a680:	b480      	push	{r7}
 801a682:	b085      	sub	sp, #20
 801a684:	af00      	add	r7, sp, #0
 801a686:	60f8      	str	r0, [r7, #12]
 801a688:	60b9      	str	r1, [r7, #8]
 801a68a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801a68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801a690:	4618      	mov	r0, r3
 801a692:	3714      	adds	r7, #20
 801a694:	46bd      	mov	sp, r7
 801a696:	bc80      	pop	{r7}
 801a698:	4770      	bx	lr

0801a69a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801a69a:	b480      	push	{r7}
 801a69c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801a69e:	bf00      	nop
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bc80      	pop	{r7}
 801a6a4:	4770      	bx	lr

0801a6a6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801a6a6:	b480      	push	{r7}
 801a6a8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801a6aa:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bc80      	pop	{r7}
 801a6b2:	4770      	bx	lr

0801a6b4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801a6b4:	b480      	push	{r7}
 801a6b6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801a6b8:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bc80      	pop	{r7}
 801a6c0:	4770      	bx	lr

0801a6c2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801a6c2:	b480      	push	{r7}
 801a6c4:	b083      	sub	sp, #12
 801a6c6:	af00      	add	r7, sp, #0
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801a6cc:	bf00      	nop
 801a6ce:	370c      	adds	r7, #12
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bc80      	pop	{r7}
 801a6d4:	4770      	bx	lr

0801a6d6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801a6d6:	b480      	push	{r7}
 801a6d8:	b087      	sub	sp, #28
 801a6da:	af00      	add	r7, sp, #0
 801a6dc:	60f8      	str	r0, [r7, #12]
 801a6de:	460b      	mov	r3, r1
 801a6e0:	607a      	str	r2, [r7, #4]
 801a6e2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801a6e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6e8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801a6ea:	697b      	ldr	r3, [r7, #20]
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	371c      	adds	r7, #28
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bc80      	pop	{r7}
 801a6f4:	4770      	bx	lr

0801a6f6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a6f6:	b480      	push	{r7}
 801a6f8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801a6fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801a6fe:	4618      	mov	r0, r3
 801a700:	46bd      	mov	sp, r7
 801a702:	bc80      	pop	{r7}
 801a704:	4770      	bx	lr

0801a706 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801a706:	b480      	push	{r7}
 801a708:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801a70a:	bf00      	nop
 801a70c:	46bd      	mov	sp, r7
 801a70e:	bc80      	pop	{r7}
 801a710:	4770      	bx	lr

0801a712 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a712:	b480      	push	{r7}
 801a714:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801a716:	bf00      	nop
 801a718:	46bd      	mov	sp, r7
 801a71a:	bc80      	pop	{r7}
 801a71c:	4770      	bx	lr

0801a71e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801a71e:	b480      	push	{r7}
 801a720:	b083      	sub	sp, #12
 801a722:	af00      	add	r7, sp, #0
 801a724:	4603      	mov	r3, r0
 801a726:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801a728:	bf00      	nop
 801a72a:	370c      	adds	r7, #12
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bc80      	pop	{r7}
 801a730:	4770      	bx	lr
	...

0801a734 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a734:	b480      	push	{r7}
 801a736:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a738:	4b04      	ldr	r3, [pc, #16]	; (801a74c <UTIL_LPM_Init+0x18>)
 801a73a:	2200      	movs	r2, #0
 801a73c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a73e:	4b04      	ldr	r3, [pc, #16]	; (801a750 <UTIL_LPM_Init+0x1c>)
 801a740:	2200      	movs	r2, #0
 801a742:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a744:	bf00      	nop
 801a746:	46bd      	mov	sp, r7
 801a748:	bc80      	pop	{r7}
 801a74a:	4770      	bx	lr
 801a74c:	20001bc4 	.word	0x20001bc4
 801a750:	20001bc8 	.word	0x20001bc8

0801a754 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a754:	b480      	push	{r7}
 801a756:	b087      	sub	sp, #28
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
 801a75c:	460b      	mov	r3, r1
 801a75e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a760:	f3ef 8310 	mrs	r3, PRIMASK
 801a764:	613b      	str	r3, [r7, #16]
  return(result);
 801a766:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a76a:	b672      	cpsid	i
}
 801a76c:	bf00      	nop
  
  switch( state )
 801a76e:	78fb      	ldrb	r3, [r7, #3]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d008      	beq.n	801a786 <UTIL_LPM_SetStopMode+0x32>
 801a774:	2b01      	cmp	r3, #1
 801a776:	d10e      	bne.n	801a796 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a778:	4b0d      	ldr	r3, [pc, #52]	; (801a7b0 <UTIL_LPM_SetStopMode+0x5c>)
 801a77a:	681a      	ldr	r2, [r3, #0]
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	4313      	orrs	r3, r2
 801a780:	4a0b      	ldr	r2, [pc, #44]	; (801a7b0 <UTIL_LPM_SetStopMode+0x5c>)
 801a782:	6013      	str	r3, [r2, #0]
      break;
 801a784:	e008      	b.n	801a798 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	43da      	mvns	r2, r3
 801a78a:	4b09      	ldr	r3, [pc, #36]	; (801a7b0 <UTIL_LPM_SetStopMode+0x5c>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	4013      	ands	r3, r2
 801a790:	4a07      	ldr	r2, [pc, #28]	; (801a7b0 <UTIL_LPM_SetStopMode+0x5c>)
 801a792:	6013      	str	r3, [r2, #0]
      break;
 801a794:	e000      	b.n	801a798 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a796:	bf00      	nop
 801a798:	697b      	ldr	r3, [r7, #20]
 801a79a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	f383 8810 	msr	PRIMASK, r3
}
 801a7a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a7a4:	bf00      	nop
 801a7a6:	371c      	adds	r7, #28
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	bc80      	pop	{r7}
 801a7ac:	4770      	bx	lr
 801a7ae:	bf00      	nop
 801a7b0:	20001bc4 	.word	0x20001bc4

0801a7b4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a7b4:	b480      	push	{r7}
 801a7b6:	b087      	sub	sp, #28
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	6078      	str	r0, [r7, #4]
 801a7bc:	460b      	mov	r3, r1
 801a7be:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7c0:	f3ef 8310 	mrs	r3, PRIMASK
 801a7c4:	613b      	str	r3, [r7, #16]
  return(result);
 801a7c6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a7c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7ca:	b672      	cpsid	i
}
 801a7cc:	bf00      	nop
  
  switch(state)
 801a7ce:	78fb      	ldrb	r3, [r7, #3]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d008      	beq.n	801a7e6 <UTIL_LPM_SetOffMode+0x32>
 801a7d4:	2b01      	cmp	r3, #1
 801a7d6:	d10e      	bne.n	801a7f6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a7d8:	4b0d      	ldr	r3, [pc, #52]	; (801a810 <UTIL_LPM_SetOffMode+0x5c>)
 801a7da:	681a      	ldr	r2, [r3, #0]
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	4313      	orrs	r3, r2
 801a7e0:	4a0b      	ldr	r2, [pc, #44]	; (801a810 <UTIL_LPM_SetOffMode+0x5c>)
 801a7e2:	6013      	str	r3, [r2, #0]
      break;
 801a7e4:	e008      	b.n	801a7f8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	43da      	mvns	r2, r3
 801a7ea:	4b09      	ldr	r3, [pc, #36]	; (801a810 <UTIL_LPM_SetOffMode+0x5c>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4013      	ands	r3, r2
 801a7f0:	4a07      	ldr	r2, [pc, #28]	; (801a810 <UTIL_LPM_SetOffMode+0x5c>)
 801a7f2:	6013      	str	r3, [r2, #0]
      break;
 801a7f4:	e000      	b.n	801a7f8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a7f6:	bf00      	nop
 801a7f8:	697b      	ldr	r3, [r7, #20]
 801a7fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	f383 8810 	msr	PRIMASK, r3
}
 801a802:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a804:	bf00      	nop
 801a806:	371c      	adds	r7, #28
 801a808:	46bd      	mov	sp, r7
 801a80a:	bc80      	pop	{r7}
 801a80c:	4770      	bx	lr
 801a80e:	bf00      	nop
 801a810:	20001bc8 	.word	0x20001bc8

0801a814 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b084      	sub	sp, #16
 801a818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a81a:	f3ef 8310 	mrs	r3, PRIMASK
 801a81e:	60bb      	str	r3, [r7, #8]
  return(result);
 801a820:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a822:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a824:	b672      	cpsid	i
}
 801a826:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a828:	4b12      	ldr	r3, [pc, #72]	; (801a874 <UTIL_LPM_EnterLowPower+0x60>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d006      	beq.n	801a83e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a830:	4b11      	ldr	r3, [pc, #68]	; (801a878 <UTIL_LPM_EnterLowPower+0x64>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a836:	4b10      	ldr	r3, [pc, #64]	; (801a878 <UTIL_LPM_EnterLowPower+0x64>)
 801a838:	685b      	ldr	r3, [r3, #4]
 801a83a:	4798      	blx	r3
 801a83c:	e010      	b.n	801a860 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a83e:	4b0f      	ldr	r3, [pc, #60]	; (801a87c <UTIL_LPM_EnterLowPower+0x68>)
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d006      	beq.n	801a854 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a846:	4b0c      	ldr	r3, [pc, #48]	; (801a878 <UTIL_LPM_EnterLowPower+0x64>)
 801a848:	689b      	ldr	r3, [r3, #8]
 801a84a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a84c:	4b0a      	ldr	r3, [pc, #40]	; (801a878 <UTIL_LPM_EnterLowPower+0x64>)
 801a84e:	68db      	ldr	r3, [r3, #12]
 801a850:	4798      	blx	r3
 801a852:	e005      	b.n	801a860 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a854:	4b08      	ldr	r3, [pc, #32]	; (801a878 <UTIL_LPM_EnterLowPower+0x64>)
 801a856:	691b      	ldr	r3, [r3, #16]
 801a858:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a85a:	4b07      	ldr	r3, [pc, #28]	; (801a878 <UTIL_LPM_EnterLowPower+0x64>)
 801a85c:	695b      	ldr	r3, [r3, #20]
 801a85e:	4798      	blx	r3
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	f383 8810 	msr	PRIMASK, r3
}
 801a86a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a86c:	bf00      	nop
 801a86e:	3710      	adds	r7, #16
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}
 801a874:	20001bc4 	.word	0x20001bc4
 801a878:	0801c708 	.word	0x0801c708
 801a87c:	20001bc8 	.word	0x20001bc8

0801a880 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a880:	b480      	push	{r7}
 801a882:	b087      	sub	sp, #28
 801a884:	af00      	add	r7, sp, #0
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	4613      	mov	r3, r2
 801a88c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a892:	68bb      	ldr	r3, [r7, #8]
 801a894:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a896:	e007      	b.n	801a8a8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a898:	693a      	ldr	r2, [r7, #16]
 801a89a:	1c53      	adds	r3, r2, #1
 801a89c:	613b      	str	r3, [r7, #16]
 801a89e:	697b      	ldr	r3, [r7, #20]
 801a8a0:	1c59      	adds	r1, r3, #1
 801a8a2:	6179      	str	r1, [r7, #20]
 801a8a4:	7812      	ldrb	r2, [r2, #0]
 801a8a6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a8a8:	88fb      	ldrh	r3, [r7, #6]
 801a8aa:	1e5a      	subs	r2, r3, #1
 801a8ac:	80fa      	strh	r2, [r7, #6]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d1f2      	bne.n	801a898 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a8b2:	bf00      	nop
 801a8b4:	bf00      	nop
 801a8b6:	371c      	adds	r7, #28
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bc80      	pop	{r7}
 801a8bc:	4770      	bx	lr

0801a8be <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a8be:	b480      	push	{r7}
 801a8c0:	b085      	sub	sp, #20
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
 801a8c6:	460b      	mov	r3, r1
 801a8c8:	70fb      	strb	r3, [r7, #3]
 801a8ca:	4613      	mov	r3, r2
 801a8cc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a8d2:	e004      	b.n	801a8de <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	1c5a      	adds	r2, r3, #1
 801a8d8:	60fa      	str	r2, [r7, #12]
 801a8da:	78fa      	ldrb	r2, [r7, #3]
 801a8dc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a8de:	883b      	ldrh	r3, [r7, #0]
 801a8e0:	1e5a      	subs	r2, r3, #1
 801a8e2:	803a      	strh	r2, [r7, #0]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d1f5      	bne.n	801a8d4 <UTIL_MEM_set_8+0x16>
  }
}
 801a8e8:	bf00      	nop
 801a8ea:	bf00      	nop
 801a8ec:	3714      	adds	r7, #20
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bc80      	pop	{r7}
 801a8f2:	4770      	bx	lr

0801a8f4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a8f4:	b082      	sub	sp, #8
 801a8f6:	b480      	push	{r7}
 801a8f8:	b087      	sub	sp, #28
 801a8fa:	af00      	add	r7, sp, #0
 801a8fc:	60f8      	str	r0, [r7, #12]
 801a8fe:	1d38      	adds	r0, r7, #4
 801a900:	e880 0006 	stmia.w	r0, {r1, r2}
 801a904:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a906:	2300      	movs	r3, #0
 801a908:	613b      	str	r3, [r7, #16]
 801a90a:	2300      	movs	r3, #0
 801a90c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a90e:	687a      	ldr	r2, [r7, #4]
 801a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a912:	4413      	add	r3, r2
 801a914:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a916:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a91a:	b29a      	uxth	r2, r3
 801a91c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801a920:	b29b      	uxth	r3, r3
 801a922:	4413      	add	r3, r2
 801a924:	b29b      	uxth	r3, r3
 801a926:	b21b      	sxth	r3, r3
 801a928:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a92a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a92e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a932:	db0a      	blt.n	801a94a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a934:	693b      	ldr	r3, [r7, #16]
 801a936:	3301      	adds	r3, #1
 801a938:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a93a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a93e:	b29b      	uxth	r3, r3
 801a940:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801a944:	b29b      	uxth	r3, r3
 801a946:	b21b      	sxth	r3, r3
 801a948:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	461a      	mov	r2, r3
 801a94e:	f107 0310 	add.w	r3, r7, #16
 801a952:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a956:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a95a:	68f8      	ldr	r0, [r7, #12]
 801a95c:	371c      	adds	r7, #28
 801a95e:	46bd      	mov	sp, r7
 801a960:	bc80      	pop	{r7}
 801a962:	b002      	add	sp, #8
 801a964:	4770      	bx	lr

0801a966 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a966:	b082      	sub	sp, #8
 801a968:	b480      	push	{r7}
 801a96a:	b087      	sub	sp, #28
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	60f8      	str	r0, [r7, #12]
 801a970:	1d38      	adds	r0, r7, #4
 801a972:	e880 0006 	stmia.w	r0, {r1, r2}
 801a976:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a978:	2300      	movs	r3, #0
 801a97a:	613b      	str	r3, [r7, #16]
 801a97c:	2300      	movs	r3, #0
 801a97e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a980:	687a      	ldr	r2, [r7, #4]
 801a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a984:	1ad3      	subs	r3, r2, r3
 801a986:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a988:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a98c:	b29a      	uxth	r2, r3
 801a98e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801a992:	b29b      	uxth	r3, r3
 801a994:	1ad3      	subs	r3, r2, r3
 801a996:	b29b      	uxth	r3, r3
 801a998:	b21b      	sxth	r3, r3
 801a99a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a99c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	da0a      	bge.n	801a9ba <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a9a4:	693b      	ldr	r3, [r7, #16]
 801a9a6:	3b01      	subs	r3, #1
 801a9a8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a9aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	b21b      	sxth	r3, r3
 801a9b8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	461a      	mov	r2, r3
 801a9be:	f107 0310 	add.w	r3, r7, #16
 801a9c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a9c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a9ca:	68f8      	ldr	r0, [r7, #12]
 801a9cc:	371c      	adds	r7, #28
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bc80      	pop	{r7}
 801a9d2:	b002      	add	sp, #8
 801a9d4:	4770      	bx	lr
	...

0801a9d8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b088      	sub	sp, #32
 801a9dc:	af02      	add	r7, sp, #8
 801a9de:	463b      	mov	r3, r7
 801a9e0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	60bb      	str	r3, [r7, #8]
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a9ec:	4b10      	ldr	r3, [pc, #64]	; (801aa30 <SysTimeSet+0x58>)
 801a9ee:	691b      	ldr	r3, [r3, #16]
 801a9f0:	f107 0208 	add.w	r2, r7, #8
 801a9f4:	3204      	adds	r2, #4
 801a9f6:	4610      	mov	r0, r2
 801a9f8:	4798      	blx	r3
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a9fe:	f107 0010 	add.w	r0, r7, #16
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	9300      	str	r3, [sp, #0]
 801aa06:	68bb      	ldr	r3, [r7, #8]
 801aa08:	463a      	mov	r2, r7
 801aa0a:	ca06      	ldmia	r2, {r1, r2}
 801aa0c:	f7ff ffab 	bl	801a966 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801aa10:	4b07      	ldr	r3, [pc, #28]	; (801aa30 <SysTimeSet+0x58>)
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	693a      	ldr	r2, [r7, #16]
 801aa16:	4610      	mov	r0, r2
 801aa18:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801aa1a:	4b05      	ldr	r3, [pc, #20]	; (801aa30 <SysTimeSet+0x58>)
 801aa1c:	689b      	ldr	r3, [r3, #8]
 801aa1e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801aa22:	4610      	mov	r0, r2
 801aa24:	4798      	blx	r3
}
 801aa26:	bf00      	nop
 801aa28:	3718      	adds	r7, #24
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	bd80      	pop	{r7, pc}
 801aa2e:	bf00      	nop
 801aa30:	0801c7ec 	.word	0x0801c7ec

0801aa34 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b08a      	sub	sp, #40	; 0x28
 801aa38:	af02      	add	r7, sp, #8
 801aa3a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	61bb      	str	r3, [r7, #24]
 801aa40:	2300      	movs	r3, #0
 801aa42:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801aa44:	2300      	movs	r3, #0
 801aa46:	613b      	str	r3, [r7, #16]
 801aa48:	2300      	movs	r3, #0
 801aa4a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aa4c:	4b14      	ldr	r3, [pc, #80]	; (801aaa0 <SysTimeGet+0x6c>)
 801aa4e:	691b      	ldr	r3, [r3, #16]
 801aa50:	f107 0218 	add.w	r2, r7, #24
 801aa54:	3204      	adds	r2, #4
 801aa56:	4610      	mov	r0, r2
 801aa58:	4798      	blx	r3
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801aa5e:	4b10      	ldr	r3, [pc, #64]	; (801aaa0 <SysTimeGet+0x6c>)
 801aa60:	68db      	ldr	r3, [r3, #12]
 801aa62:	4798      	blx	r3
 801aa64:	4603      	mov	r3, r0
 801aa66:	b21b      	sxth	r3, r3
 801aa68:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801aa6a:	4b0d      	ldr	r3, [pc, #52]	; (801aaa0 <SysTimeGet+0x6c>)
 801aa6c:	685b      	ldr	r3, [r3, #4]
 801aa6e:	4798      	blx	r3
 801aa70:	4603      	mov	r3, r0
 801aa72:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801aa74:	f107 0010 	add.w	r0, r7, #16
 801aa78:	69fb      	ldr	r3, [r7, #28]
 801aa7a:	9300      	str	r3, [sp, #0]
 801aa7c:	69bb      	ldr	r3, [r7, #24]
 801aa7e:	f107 0208 	add.w	r2, r7, #8
 801aa82:	ca06      	ldmia	r2, {r1, r2}
 801aa84:	f7ff ff36 	bl	801a8f4 <SysTimeAdd>

  return sysTime;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	461a      	mov	r2, r3
 801aa8c:	f107 0310 	add.w	r3, r7, #16
 801aa90:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa94:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aa98:	6878      	ldr	r0, [r7, #4]
 801aa9a:	3720      	adds	r7, #32
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}
 801aaa0:	0801c7ec 	.word	0x0801c7ec

0801aaa4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b084      	sub	sp, #16
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aaac:	2300      	movs	r3, #0
 801aaae:	60bb      	str	r3, [r7, #8]
 801aab0:	2300      	movs	r3, #0
 801aab2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aab4:	4b0a      	ldr	r3, [pc, #40]	; (801aae0 <SysTimeGetMcuTime+0x3c>)
 801aab6:	691b      	ldr	r3, [r3, #16]
 801aab8:	f107 0208 	add.w	r2, r7, #8
 801aabc:	3204      	adds	r2, #4
 801aabe:	4610      	mov	r0, r2
 801aac0:	4798      	blx	r3
 801aac2:	4603      	mov	r3, r0
 801aac4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	461a      	mov	r2, r3
 801aaca:	f107 0308 	add.w	r3, r7, #8
 801aace:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aad2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aad6:	6878      	ldr	r0, [r7, #4]
 801aad8:	3710      	adds	r7, #16
 801aada:	46bd      	mov	sp, r7
 801aadc:	bd80      	pop	{r7, pc}
 801aade:	bf00      	nop
 801aae0:	0801c7ec 	.word	0x0801c7ec

0801aae4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b088      	sub	sp, #32
 801aae8:	af02      	add	r7, sp, #8
 801aaea:	463b      	mov	r3, r7
 801aaec:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801aaf0:	4b0f      	ldr	r3, [pc, #60]	; (801ab30 <SysTimeToMs+0x4c>)
 801aaf2:	68db      	ldr	r3, [r3, #12]
 801aaf4:	4798      	blx	r3
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	b21b      	sxth	r3, r3
 801aafa:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801aafc:	4b0c      	ldr	r3, [pc, #48]	; (801ab30 <SysTimeToMs+0x4c>)
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	4798      	blx	r3
 801ab02:	4603      	mov	r3, r0
 801ab04:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801ab06:	f107 0008 	add.w	r0, r7, #8
 801ab0a:	697b      	ldr	r3, [r7, #20]
 801ab0c:	9300      	str	r3, [sp, #0]
 801ab0e:	693b      	ldr	r3, [r7, #16]
 801ab10:	463a      	mov	r2, r7
 801ab12:	ca06      	ldmia	r2, {r1, r2}
 801ab14:	f7ff ff27 	bl	801a966 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ab1e:	fb02 f303 	mul.w	r3, r2, r3
 801ab22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ab26:	4413      	add	r3, r2
}
 801ab28:	4618      	mov	r0, r3
 801ab2a:	3718      	adds	r7, #24
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd80      	pop	{r7, pc}
 801ab30:	0801c7ec 	.word	0x0801c7ec

0801ab34 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b08a      	sub	sp, #40	; 0x28
 801ab38:	af02      	add	r7, sp, #8
 801ab3a:	6078      	str	r0, [r7, #4]
 801ab3c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ab3e:	683b      	ldr	r3, [r7, #0]
 801ab40:	4a19      	ldr	r2, [pc, #100]	; (801aba8 <SysTimeFromMs+0x74>)
 801ab42:	fba2 2303 	umull	r2, r3, r2, r3
 801ab46:	099b      	lsrs	r3, r3, #6
 801ab48:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ab4a:	69fb      	ldr	r3, [r7, #28]
 801ab4c:	617b      	str	r3, [r7, #20]
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	b29a      	uxth	r2, r3
 801ab52:	69fb      	ldr	r3, [r7, #28]
 801ab54:	b29b      	uxth	r3, r3
 801ab56:	4619      	mov	r1, r3
 801ab58:	0149      	lsls	r1, r1, #5
 801ab5a:	1ac9      	subs	r1, r1, r3
 801ab5c:	0089      	lsls	r1, r1, #2
 801ab5e:	440b      	add	r3, r1
 801ab60:	00db      	lsls	r3, r3, #3
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	1ad3      	subs	r3, r2, r3
 801ab66:	b29b      	uxth	r3, r3
 801ab68:	b21b      	sxth	r3, r3
 801ab6a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ab6c:	f107 030c 	add.w	r3, r7, #12
 801ab70:	2200      	movs	r2, #0
 801ab72:	601a      	str	r2, [r3, #0]
 801ab74:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ab76:	4b0d      	ldr	r3, [pc, #52]	; (801abac <SysTimeFromMs+0x78>)
 801ab78:	68db      	ldr	r3, [r3, #12]
 801ab7a:	4798      	blx	r3
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	b21b      	sxth	r3, r3
 801ab80:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ab82:	4b0a      	ldr	r3, [pc, #40]	; (801abac <SysTimeFromMs+0x78>)
 801ab84:	685b      	ldr	r3, [r3, #4]
 801ab86:	4798      	blx	r3
 801ab88:	4603      	mov	r3, r0
 801ab8a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	693b      	ldr	r3, [r7, #16]
 801ab90:	9300      	str	r3, [sp, #0]
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	f107 0214 	add.w	r2, r7, #20
 801ab98:	ca06      	ldmia	r2, {r1, r2}
 801ab9a:	f7ff feab 	bl	801a8f4 <SysTimeAdd>
}
 801ab9e:	6878      	ldr	r0, [r7, #4]
 801aba0:	3720      	adds	r7, #32
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	bf00      	nop
 801aba8:	10624dd3 	.word	0x10624dd3
 801abac:	0801c7ec 	.word	0x0801c7ec

0801abb0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801abb0:	b480      	push	{r7}
 801abb2:	b085      	sub	sp, #20
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801abb8:	2300      	movs	r3, #0
 801abba:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801abbc:	e00e      	b.n	801abdc <ee_skip_atoi+0x2c>
 801abbe:	68fa      	ldr	r2, [r7, #12]
 801abc0:	4613      	mov	r3, r2
 801abc2:	009b      	lsls	r3, r3, #2
 801abc4:	4413      	add	r3, r2
 801abc6:	005b      	lsls	r3, r3, #1
 801abc8:	4618      	mov	r0, r3
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	1c59      	adds	r1, r3, #1
 801abd0:	687a      	ldr	r2, [r7, #4]
 801abd2:	6011      	str	r1, [r2, #0]
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	4403      	add	r3, r0
 801abd8:	3b30      	subs	r3, #48	; 0x30
 801abda:	60fb      	str	r3, [r7, #12]
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	781b      	ldrb	r3, [r3, #0]
 801abe2:	2b2f      	cmp	r3, #47	; 0x2f
 801abe4:	d904      	bls.n	801abf0 <ee_skip_atoi+0x40>
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	781b      	ldrb	r3, [r3, #0]
 801abec:	2b39      	cmp	r3, #57	; 0x39
 801abee:	d9e6      	bls.n	801abbe <ee_skip_atoi+0xe>
  return i;
 801abf0:	68fb      	ldr	r3, [r7, #12]
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	3714      	adds	r7, #20
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bc80      	pop	{r7}
 801abfa:	4770      	bx	lr

0801abfc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b099      	sub	sp, #100	; 0x64
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	60b9      	str	r1, [r7, #8]
 801ac06:	607a      	str	r2, [r7, #4]
 801ac08:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ac0a:	4b71      	ldr	r3, [pc, #452]	; (801add0 <ee_number+0x1d4>)
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ac10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ac12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d002      	beq.n	801ac20 <ee_number+0x24>
 801ac1a:	4b6e      	ldr	r3, [pc, #440]	; (801add4 <ee_number+0x1d8>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	2b01      	cmp	r3, #1
 801ac24:	dd02      	ble.n	801ac2c <ee_number+0x30>
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	2b24      	cmp	r3, #36	; 0x24
 801ac2a:	dd01      	ble.n	801ac30 <ee_number+0x34>
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	e0ca      	b.n	801adc6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801ac30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ac32:	f003 0301 	and.w	r3, r3, #1
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d001      	beq.n	801ac3e <ee_number+0x42>
 801ac3a:	2330      	movs	r3, #48	; 0x30
 801ac3c:	e000      	b.n	801ac40 <ee_number+0x44>
 801ac3e:	2320      	movs	r3, #32
 801ac40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801ac44:	2300      	movs	r3, #0
 801ac46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801ac4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ac4c:	f003 0302 	and.w	r3, r3, #2
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d00b      	beq.n	801ac6c <ee_number+0x70>
  {
    if (num < 0)
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	da08      	bge.n	801ac6c <ee_number+0x70>
    {
      sign = '-';
 801ac5a:	232d      	movs	r3, #45	; 0x2d
 801ac5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	425b      	negs	r3, r3
 801ac64:	607b      	str	r3, [r7, #4]
      size--;
 801ac66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ac68:	3b01      	subs	r3, #1
 801ac6a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d11e      	bne.n	801acb4 <ee_number+0xb8>
    tmp[i++] = '0';
 801ac76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac78:	1c5a      	adds	r2, r3, #1
 801ac7a:	657a      	str	r2, [r7, #84]	; 0x54
 801ac7c:	3360      	adds	r3, #96	; 0x60
 801ac7e:	443b      	add	r3, r7
 801ac80:	2230      	movs	r2, #48	; 0x30
 801ac82:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ac86:	e018      	b.n	801acba <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	683a      	ldr	r2, [r7, #0]
 801ac8c:	fbb3 f1f2 	udiv	r1, r3, r2
 801ac90:	fb01 f202 	mul.w	r2, r1, r2
 801ac94:	1a9b      	subs	r3, r3, r2
 801ac96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ac98:	441a      	add	r2, r3
 801ac9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac9c:	1c59      	adds	r1, r3, #1
 801ac9e:	6579      	str	r1, [r7, #84]	; 0x54
 801aca0:	7812      	ldrb	r2, [r2, #0]
 801aca2:	3360      	adds	r3, #96	; 0x60
 801aca4:	443b      	add	r3, r7
 801aca6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801acaa:	687a      	ldr	r2, [r7, #4]
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	fbb2 f3f3 	udiv	r3, r2, r3
 801acb2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1e6      	bne.n	801ac88 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801acba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801acbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acbe:	429a      	cmp	r2, r3
 801acc0:	dd01      	ble.n	801acc6 <ee_number+0xca>
 801acc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801acc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801acc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801acc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acca:	1ad3      	subs	r3, r2, r3
 801accc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801acce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801acd0:	f003 0301 	and.w	r3, r3, #1
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d112      	bne.n	801acfe <ee_number+0x102>
 801acd8:	e00c      	b.n	801acf4 <ee_number+0xf8>
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	1c5a      	adds	r2, r3, #1
 801acde:	60fa      	str	r2, [r7, #12]
 801ace0:	2220      	movs	r2, #32
 801ace2:	701a      	strb	r2, [r3, #0]
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	3b01      	subs	r3, #1
 801ace8:	60bb      	str	r3, [r7, #8]
 801acea:	68bb      	ldr	r3, [r7, #8]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d101      	bne.n	801acf4 <ee_number+0xf8>
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	e068      	b.n	801adc6 <ee_number+0x1ca>
 801acf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801acf6:	1e5a      	subs	r2, r3, #1
 801acf8:	66ba      	str	r2, [r7, #104]	; 0x68
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	dced      	bgt.n	801acda <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801acfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d01b      	beq.n	801ad3e <ee_number+0x142>
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	1c5a      	adds	r2, r3, #1
 801ad0a:	60fa      	str	r2, [r7, #12]
 801ad0c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801ad10:	701a      	strb	r2, [r3, #0]
 801ad12:	68bb      	ldr	r3, [r7, #8]
 801ad14:	3b01      	subs	r3, #1
 801ad16:	60bb      	str	r3, [r7, #8]
 801ad18:	68bb      	ldr	r3, [r7, #8]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d10f      	bne.n	801ad3e <ee_number+0x142>
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	e051      	b.n	801adc6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	1c5a      	adds	r2, r3, #1
 801ad26:	60fa      	str	r2, [r7, #12]
 801ad28:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801ad2c:	701a      	strb	r2, [r3, #0]
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	3b01      	subs	r3, #1
 801ad32:	60bb      	str	r3, [r7, #8]
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d101      	bne.n	801ad3e <ee_number+0x142>
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	e043      	b.n	801adc6 <ee_number+0x1ca>
 801ad3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ad40:	1e5a      	subs	r2, r3, #1
 801ad42:	66ba      	str	r2, [r7, #104]	; 0x68
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	dcec      	bgt.n	801ad22 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ad48:	e00c      	b.n	801ad64 <ee_number+0x168>
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	1c5a      	adds	r2, r3, #1
 801ad4e:	60fa      	str	r2, [r7, #12]
 801ad50:	2230      	movs	r2, #48	; 0x30
 801ad52:	701a      	strb	r2, [r3, #0]
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	3b01      	subs	r3, #1
 801ad58:	60bb      	str	r3, [r7, #8]
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d101      	bne.n	801ad64 <ee_number+0x168>
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	e030      	b.n	801adc6 <ee_number+0x1ca>
 801ad64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad66:	1e5a      	subs	r2, r3, #1
 801ad68:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ad6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	dbec      	blt.n	801ad4a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ad70:	e010      	b.n	801ad94 <ee_number+0x198>
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	1c5a      	adds	r2, r3, #1
 801ad76:	60fa      	str	r2, [r7, #12]
 801ad78:	f107 0110 	add.w	r1, r7, #16
 801ad7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ad7e:	440a      	add	r2, r1
 801ad80:	7812      	ldrb	r2, [r2, #0]
 801ad82:	701a      	strb	r2, [r3, #0]
 801ad84:	68bb      	ldr	r3, [r7, #8]
 801ad86:	3b01      	subs	r3, #1
 801ad88:	60bb      	str	r3, [r7, #8]
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d101      	bne.n	801ad94 <ee_number+0x198>
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	e018      	b.n	801adc6 <ee_number+0x1ca>
 801ad94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad96:	1e5a      	subs	r2, r3, #1
 801ad98:	657a      	str	r2, [r7, #84]	; 0x54
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	dce9      	bgt.n	801ad72 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801ad9e:	e00c      	b.n	801adba <ee_number+0x1be>
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	1c5a      	adds	r2, r3, #1
 801ada4:	60fa      	str	r2, [r7, #12]
 801ada6:	2220      	movs	r2, #32
 801ada8:	701a      	strb	r2, [r3, #0]
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	3b01      	subs	r3, #1
 801adae:	60bb      	str	r3, [r7, #8]
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d101      	bne.n	801adba <ee_number+0x1be>
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	e005      	b.n	801adc6 <ee_number+0x1ca>
 801adba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801adbc:	1e5a      	subs	r2, r3, #1
 801adbe:	66ba      	str	r2, [r7, #104]	; 0x68
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	dced      	bgt.n	801ada0 <ee_number+0x1a4>

  return str;
 801adc4:	68fb      	ldr	r3, [r7, #12]
}
 801adc6:	4618      	mov	r0, r3
 801adc8:	3764      	adds	r7, #100	; 0x64
 801adca:	46bd      	mov	sp, r7
 801adcc:	bc80      	pop	{r7}
 801adce:	4770      	bx	lr
 801add0:	20000138 	.word	0x20000138
 801add4:	2000013c 	.word	0x2000013c

0801add8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b092      	sub	sp, #72	; 0x48
 801addc:	af04      	add	r7, sp, #16
 801adde:	60f8      	str	r0, [r7, #12]
 801ade0:	60b9      	str	r1, [r7, #8]
 801ade2:	607a      	str	r2, [r7, #4]
 801ade4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ade6:	68bb      	ldr	r3, [r7, #8]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	dc01      	bgt.n	801adf0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801adec:	2300      	movs	r3, #0
 801adee:	e13e      	b.n	801b06e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801adf4:	e128      	b.n	801b048 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801adf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	1ad2      	subs	r2, r2, r3
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	3b01      	subs	r3, #1
 801ae00:	429a      	cmp	r2, r3
 801ae02:	f280 812e 	bge.w	801b062 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	781b      	ldrb	r3, [r3, #0]
 801ae0a:	2b25      	cmp	r3, #37	; 0x25
 801ae0c:	d006      	beq.n	801ae1c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae12:	1c59      	adds	r1, r3, #1
 801ae14:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ae16:	7812      	ldrb	r2, [r2, #0]
 801ae18:	701a      	strb	r2, [r3, #0]
      continue;
 801ae1a:	e112      	b.n	801b042 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	3301      	adds	r3, #1
 801ae24:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	781b      	ldrb	r3, [r3, #0]
 801ae2a:	2b30      	cmp	r3, #48	; 0x30
 801ae2c:	d103      	bne.n	801ae36 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ae2e:	6a3b      	ldr	r3, [r7, #32]
 801ae30:	f043 0301 	orr.w	r3, r3, #1
 801ae34:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801ae36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae3a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	781b      	ldrb	r3, [r3, #0]
 801ae40:	2b2f      	cmp	r3, #47	; 0x2f
 801ae42:	d908      	bls.n	801ae56 <tiny_vsnprintf_like+0x7e>
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	2b39      	cmp	r3, #57	; 0x39
 801ae4a:	d804      	bhi.n	801ae56 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ae4c:	1d3b      	adds	r3, r7, #4
 801ae4e:	4618      	mov	r0, r3
 801ae50:	f7ff feae 	bl	801abb0 <ee_skip_atoi>
 801ae54:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ae56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae5a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ae5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae60:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ae62:	230a      	movs	r3, #10
 801ae64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	781b      	ldrb	r3, [r3, #0]
 801ae6a:	3b58      	subs	r3, #88	; 0x58
 801ae6c:	2b20      	cmp	r3, #32
 801ae6e:	f200 8094 	bhi.w	801af9a <tiny_vsnprintf_like+0x1c2>
 801ae72:	a201      	add	r2, pc, #4	; (adr r2, 801ae78 <tiny_vsnprintf_like+0xa0>)
 801ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae78:	0801af83 	.word	0x0801af83
 801ae7c:	0801af9b 	.word	0x0801af9b
 801ae80:	0801af9b 	.word	0x0801af9b
 801ae84:	0801af9b 	.word	0x0801af9b
 801ae88:	0801af9b 	.word	0x0801af9b
 801ae8c:	0801af9b 	.word	0x0801af9b
 801ae90:	0801af9b 	.word	0x0801af9b
 801ae94:	0801af9b 	.word	0x0801af9b
 801ae98:	0801af9b 	.word	0x0801af9b
 801ae9c:	0801af9b 	.word	0x0801af9b
 801aea0:	0801af9b 	.word	0x0801af9b
 801aea4:	0801af07 	.word	0x0801af07
 801aea8:	0801af91 	.word	0x0801af91
 801aeac:	0801af9b 	.word	0x0801af9b
 801aeb0:	0801af9b 	.word	0x0801af9b
 801aeb4:	0801af9b 	.word	0x0801af9b
 801aeb8:	0801af9b 	.word	0x0801af9b
 801aebc:	0801af91 	.word	0x0801af91
 801aec0:	0801af9b 	.word	0x0801af9b
 801aec4:	0801af9b 	.word	0x0801af9b
 801aec8:	0801af9b 	.word	0x0801af9b
 801aecc:	0801af9b 	.word	0x0801af9b
 801aed0:	0801af9b 	.word	0x0801af9b
 801aed4:	0801af9b 	.word	0x0801af9b
 801aed8:	0801af9b 	.word	0x0801af9b
 801aedc:	0801af9b 	.word	0x0801af9b
 801aee0:	0801af9b 	.word	0x0801af9b
 801aee4:	0801af27 	.word	0x0801af27
 801aee8:	0801af9b 	.word	0x0801af9b
 801aeec:	0801afe7 	.word	0x0801afe7
 801aef0:	0801af9b 	.word	0x0801af9b
 801aef4:	0801af9b 	.word	0x0801af9b
 801aef8:	0801af8b 	.word	0x0801af8b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aefe:	1c5a      	adds	r2, r3, #1
 801af00:	62fa      	str	r2, [r7, #44]	; 0x2c
 801af02:	2220      	movs	r2, #32
 801af04:	701a      	strb	r2, [r3, #0]
 801af06:	69fb      	ldr	r3, [r7, #28]
 801af08:	3b01      	subs	r3, #1
 801af0a:	61fb      	str	r3, [r7, #28]
 801af0c:	69fb      	ldr	r3, [r7, #28]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	dcf4      	bgt.n	801aefc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	1d1a      	adds	r2, r3, #4
 801af16:	603a      	str	r2, [r7, #0]
 801af18:	6819      	ldr	r1, [r3, #0]
 801af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af1c:	1c5a      	adds	r2, r3, #1
 801af1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801af20:	b2ca      	uxtb	r2, r1
 801af22:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801af24:	e08d      	b.n	801b042 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	1d1a      	adds	r2, r3, #4
 801af2a:	603a      	str	r2, [r7, #0]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af32:	2b00      	cmp	r3, #0
 801af34:	d101      	bne.n	801af3a <tiny_vsnprintf_like+0x162>
 801af36:	4b50      	ldr	r3, [pc, #320]	; (801b078 <tiny_vsnprintf_like+0x2a0>)
 801af38:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801af3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af3c:	f7e5 f91c 	bl	8000178 <strlen>
 801af40:	4603      	mov	r3, r0
 801af42:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801af44:	e004      	b.n	801af50 <tiny_vsnprintf_like+0x178>
 801af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af48:	1c5a      	adds	r2, r3, #1
 801af4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801af4c:	2220      	movs	r2, #32
 801af4e:	701a      	strb	r2, [r3, #0]
 801af50:	69fb      	ldr	r3, [r7, #28]
 801af52:	1e5a      	subs	r2, r3, #1
 801af54:	61fa      	str	r2, [r7, #28]
 801af56:	693a      	ldr	r2, [r7, #16]
 801af58:	429a      	cmp	r2, r3
 801af5a:	dbf4      	blt.n	801af46 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801af5c:	2300      	movs	r3, #0
 801af5e:	62bb      	str	r3, [r7, #40]	; 0x28
 801af60:	e00a      	b.n	801af78 <tiny_vsnprintf_like+0x1a0>
 801af62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af64:	1c53      	adds	r3, r2, #1
 801af66:	627b      	str	r3, [r7, #36]	; 0x24
 801af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af6a:	1c59      	adds	r1, r3, #1
 801af6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801af6e:	7812      	ldrb	r2, [r2, #0]
 801af70:	701a      	strb	r2, [r3, #0]
 801af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af74:	3301      	adds	r3, #1
 801af76:	62bb      	str	r3, [r7, #40]	; 0x28
 801af78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801af7a:	693b      	ldr	r3, [r7, #16]
 801af7c:	429a      	cmp	r2, r3
 801af7e:	dbf0      	blt.n	801af62 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801af80:	e05f      	b.n	801b042 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801af82:	6a3b      	ldr	r3, [r7, #32]
 801af84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af88:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801af8a:	2310      	movs	r3, #16
 801af8c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801af8e:	e02b      	b.n	801afe8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801af90:	6a3b      	ldr	r3, [r7, #32]
 801af92:	f043 0302 	orr.w	r3, r3, #2
 801af96:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801af98:	e025      	b.n	801afe6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	781b      	ldrb	r3, [r3, #0]
 801af9e:	2b25      	cmp	r3, #37	; 0x25
 801afa0:	d004      	beq.n	801afac <tiny_vsnprintf_like+0x1d4>
 801afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afa4:	1c5a      	adds	r2, r3, #1
 801afa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801afa8:	2225      	movs	r2, #37	; 0x25
 801afaa:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801afac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	1ad2      	subs	r2, r2, r3
 801afb2:	68bb      	ldr	r3, [r7, #8]
 801afb4:	3b01      	subs	r3, #1
 801afb6:	429a      	cmp	r2, r3
 801afb8:	da16      	bge.n	801afe8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	781b      	ldrb	r3, [r3, #0]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d006      	beq.n	801afd0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801afc2:	687a      	ldr	r2, [r7, #4]
 801afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afc6:	1c59      	adds	r1, r3, #1
 801afc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801afca:	7812      	ldrb	r2, [r2, #0]
 801afcc:	701a      	strb	r2, [r3, #0]
 801afce:	e002      	b.n	801afd6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	3b01      	subs	r3, #1
 801afd4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801afd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	1ad2      	subs	r2, r2, r3
 801afdc:	68bb      	ldr	r3, [r7, #8]
 801afde:	3b01      	subs	r3, #1
 801afe0:	429a      	cmp	r2, r3
 801afe2:	db2d      	blt.n	801b040 <tiny_vsnprintf_like+0x268>
 801afe4:	e000      	b.n	801afe8 <tiny_vsnprintf_like+0x210>
        break;
 801afe6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801afe8:	697b      	ldr	r3, [r7, #20]
 801afea:	2b6c      	cmp	r3, #108	; 0x6c
 801afec:	d105      	bne.n	801affa <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	1d1a      	adds	r2, r3, #4
 801aff2:	603a      	str	r2, [r7, #0]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	637b      	str	r3, [r7, #52]	; 0x34
 801aff8:	e00f      	b.n	801b01a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801affa:	6a3b      	ldr	r3, [r7, #32]
 801affc:	f003 0302 	and.w	r3, r3, #2
 801b000:	2b00      	cmp	r3, #0
 801b002:	d005      	beq.n	801b010 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b004:	683b      	ldr	r3, [r7, #0]
 801b006:	1d1a      	adds	r2, r3, #4
 801b008:	603a      	str	r2, [r7, #0]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	637b      	str	r3, [r7, #52]	; 0x34
 801b00e:	e004      	b.n	801b01a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b010:	683b      	ldr	r3, [r7, #0]
 801b012:	1d1a      	adds	r2, r3, #4
 801b014:	603a      	str	r2, [r7, #0]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b01a:	68bb      	ldr	r3, [r7, #8]
 801b01c:	1e5a      	subs	r2, r3, #1
 801b01e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	1acb      	subs	r3, r1, r3
 801b024:	1ad1      	subs	r1, r2, r3
 801b026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b028:	6a3b      	ldr	r3, [r7, #32]
 801b02a:	9302      	str	r3, [sp, #8]
 801b02c:	69bb      	ldr	r3, [r7, #24]
 801b02e:	9301      	str	r3, [sp, #4]
 801b030:	69fb      	ldr	r3, [r7, #28]
 801b032:	9300      	str	r3, [sp, #0]
 801b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b038:	f7ff fde0 	bl	801abfc <ee_number>
 801b03c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801b03e:	e000      	b.n	801b042 <tiny_vsnprintf_like+0x26a>
        continue;
 801b040:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	3301      	adds	r3, #1
 801b046:	607b      	str	r3, [r7, #4]
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	781b      	ldrb	r3, [r3, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	f47f aed2 	bne.w	801adf6 <tiny_vsnprintf_like+0x1e>
 801b052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	1ad2      	subs	r2, r2, r3
 801b058:	68bb      	ldr	r3, [r7, #8]
 801b05a:	3b01      	subs	r3, #1
 801b05c:	429a      	cmp	r2, r3
 801b05e:	f6bf aeca 	bge.w	801adf6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b064:	2200      	movs	r2, #0
 801b066:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	1ad3      	subs	r3, r2, r3
}
 801b06e:	4618      	mov	r0, r3
 801b070:	3738      	adds	r7, #56	; 0x38
 801b072:	46bd      	mov	sp, r7
 801b074:	bd80      	pop	{r7, pc}
 801b076:	bf00      	nop
 801b078:	0801c700 	.word	0x0801c700

0801b07c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b090      	sub	sp, #64	; 0x40
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b084:	4b73      	ldr	r3, [pc, #460]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801b08a:	4b72      	ldr	r3, [pc, #456]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b08c:	681a      	ldr	r2, [r3, #0]
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	4013      	ands	r3, r2
 801b092:	4a70      	ldr	r2, [pc, #448]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b094:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b096:	4b70      	ldr	r3, [pc, #448]	; (801b258 <UTIL_SEQ_Run+0x1dc>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801b09c:	4b6f      	ldr	r3, [pc, #444]	; (801b25c <UTIL_SEQ_Run+0x1e0>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801b0a2:	4b6f      	ldr	r3, [pc, #444]	; (801b260 <UTIL_SEQ_Run+0x1e4>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801b0a8:	4b6e      	ldr	r3, [pc, #440]	; (801b264 <UTIL_SEQ_Run+0x1e8>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b0ae:	e08d      	b.n	801b1cc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b0b4:	e002      	b.n	801b0bc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0b8:	3301      	adds	r3, #1
 801b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b0bc:	4a6a      	ldr	r2, [pc, #424]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0c6:	401a      	ands	r2, r3
 801b0c8:	4b62      	ldr	r3, [pc, #392]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	4013      	ands	r3, r2
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d0f1      	beq.n	801b0b6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b0d2:	4a65      	ldr	r2, [pc, #404]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0dc:	401a      	ands	r2, r3
 801b0de:	4b5d      	ldr	r3, [pc, #372]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4013      	ands	r3, r2
 801b0e4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b0e6:	4a60      	ldr	r2, [pc, #384]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0ea:	00db      	lsls	r3, r3, #3
 801b0ec:	4413      	add	r3, r2
 801b0ee:	685a      	ldr	r2, [r3, #4]
 801b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f2:	4013      	ands	r3, r2
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d106      	bne.n	801b106 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b0f8:	4a5b      	ldr	r2, [pc, #364]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0fc:	00db      	lsls	r3, r3, #3
 801b0fe:	4413      	add	r3, r2
 801b100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b104:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b106:	4a58      	ldr	r2, [pc, #352]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b10a:	00db      	lsls	r3, r3, #3
 801b10c:	4413      	add	r3, r2
 801b10e:	685a      	ldr	r2, [r3, #4]
 801b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b112:	4013      	ands	r3, r2
 801b114:	4618      	mov	r0, r3
 801b116:	f000 f907 	bl	801b328 <SEQ_BitPosition>
 801b11a:	4603      	mov	r3, r0
 801b11c:	461a      	mov	r2, r3
 801b11e:	4b53      	ldr	r3, [pc, #332]	; (801b26c <UTIL_SEQ_Run+0x1f0>)
 801b120:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b122:	4a51      	ldr	r2, [pc, #324]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b126:	00db      	lsls	r3, r3, #3
 801b128:	4413      	add	r3, r2
 801b12a:	685a      	ldr	r2, [r3, #4]
 801b12c:	4b4f      	ldr	r3, [pc, #316]	; (801b26c <UTIL_SEQ_Run+0x1f0>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	2101      	movs	r1, #1
 801b132:	fa01 f303 	lsl.w	r3, r1, r3
 801b136:	43db      	mvns	r3, r3
 801b138:	401a      	ands	r2, r3
 801b13a:	494b      	ldr	r1, [pc, #300]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b13e:	00db      	lsls	r3, r3, #3
 801b140:	440b      	add	r3, r1
 801b142:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b144:	f3ef 8310 	mrs	r3, PRIMASK
 801b148:	61bb      	str	r3, [r7, #24]
  return(result);
 801b14a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b14c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b14e:	b672      	cpsid	i
}
 801b150:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b152:	4b46      	ldr	r3, [pc, #280]	; (801b26c <UTIL_SEQ_Run+0x1f0>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	2201      	movs	r2, #1
 801b158:	fa02 f303 	lsl.w	r3, r2, r3
 801b15c:	43da      	mvns	r2, r3
 801b15e:	4b3e      	ldr	r3, [pc, #248]	; (801b258 <UTIL_SEQ_Run+0x1dc>)
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	4013      	ands	r3, r2
 801b164:	4a3c      	ldr	r2, [pc, #240]	; (801b258 <UTIL_SEQ_Run+0x1dc>)
 801b166:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b168:	2301      	movs	r3, #1
 801b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b16c:	e013      	b.n	801b196 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b170:	3b01      	subs	r3, #1
 801b172:	4a3d      	ldr	r2, [pc, #244]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b174:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b178:	4b3c      	ldr	r3, [pc, #240]	; (801b26c <UTIL_SEQ_Run+0x1f0>)
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	2201      	movs	r2, #1
 801b17e:	fa02 f303 	lsl.w	r3, r2, r3
 801b182:	43da      	mvns	r2, r3
 801b184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b186:	3b01      	subs	r3, #1
 801b188:	400a      	ands	r2, r1
 801b18a:	4937      	ldr	r1, [pc, #220]	; (801b268 <UTIL_SEQ_Run+0x1ec>)
 801b18c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b192:	3b01      	subs	r3, #1
 801b194:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d1e8      	bne.n	801b16e <UTIL_SEQ_Run+0xf2>
 801b19c:	6a3b      	ldr	r3, [r7, #32]
 801b19e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1a0:	697b      	ldr	r3, [r7, #20]
 801b1a2:	f383 8810 	msr	PRIMASK, r3
}
 801b1a6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b1a8:	4b30      	ldr	r3, [pc, #192]	; (801b26c <UTIL_SEQ_Run+0x1f0>)
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	4a30      	ldr	r2, [pc, #192]	; (801b270 <UTIL_SEQ_Run+0x1f4>)
 801b1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b1b2:	4798      	blx	r3

    local_taskset = TaskSet;
 801b1b4:	4b28      	ldr	r3, [pc, #160]	; (801b258 <UTIL_SEQ_Run+0x1dc>)
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801b1ba:	4b28      	ldr	r3, [pc, #160]	; (801b25c <UTIL_SEQ_Run+0x1e0>)
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801b1c0:	4b27      	ldr	r3, [pc, #156]	; (801b260 <UTIL_SEQ_Run+0x1e4>)
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801b1c6:	4b27      	ldr	r3, [pc, #156]	; (801b264 <UTIL_SEQ_Run+0x1e8>)
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b1cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1d0:	401a      	ands	r2, r3
 801b1d2:	4b20      	ldr	r3, [pc, #128]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	4013      	ands	r3, r2
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d005      	beq.n	801b1e8 <UTIL_SEQ_Run+0x16c>
 801b1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1e0:	4013      	ands	r3, r2
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	f43f af64 	beq.w	801b0b0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b1e8:	4b20      	ldr	r3, [pc, #128]	; (801b26c <UTIL_SEQ_Run+0x1f0>)
 801b1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b1ee:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b1f0:	f000 f88e 	bl	801b310 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1f4:	f3ef 8310 	mrs	r3, PRIMASK
 801b1f8:	613b      	str	r3, [r7, #16]
  return(result);
 801b1fa:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b1fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1fe:	b672      	cpsid	i
}
 801b200:	bf00      	nop
  local_taskset = TaskSet;
 801b202:	4b15      	ldr	r3, [pc, #84]	; (801b258 <UTIL_SEQ_Run+0x1dc>)
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801b208:	4b14      	ldr	r3, [pc, #80]	; (801b25c <UTIL_SEQ_Run+0x1e0>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801b20e:	4b14      	ldr	r3, [pc, #80]	; (801b260 <UTIL_SEQ_Run+0x1e4>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b218:	401a      	ands	r2, r3
 801b21a:	4b0e      	ldr	r3, [pc, #56]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4013      	ands	r3, r2
 801b220:	2b00      	cmp	r3, #0
 801b222:	d107      	bne.n	801b234 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b224:	4b0f      	ldr	r3, [pc, #60]	; (801b264 <UTIL_SEQ_Run+0x1e8>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b22a:	4013      	ands	r3, r2
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d101      	bne.n	801b234 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b230:	f7e6 fcc4 	bl	8001bbc <UTIL_SEQ_Idle>
 801b234:	69fb      	ldr	r3, [r7, #28]
 801b236:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	f383 8810 	msr	PRIMASK, r3
}
 801b23e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b240:	f000 f86c 	bl	801b31c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b244:	4a03      	ldr	r2, [pc, #12]	; (801b254 <UTIL_SEQ_Run+0x1d8>)
 801b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b248:	6013      	str	r3, [r2, #0]

  return;
 801b24a:	bf00      	nop
}
 801b24c:	3740      	adds	r7, #64	; 0x40
 801b24e:	46bd      	mov	sp, r7
 801b250:	bd80      	pop	{r7, pc}
 801b252:	bf00      	nop
 801b254:	20000144 	.word	0x20000144
 801b258:	20001bcc 	.word	0x20001bcc
 801b25c:	20001bd0 	.word	0x20001bd0
 801b260:	20000140 	.word	0x20000140
 801b264:	20001bd4 	.word	0x20001bd4
 801b268:	20001bec 	.word	0x20001bec
 801b26c:	20001bd8 	.word	0x20001bd8
 801b270:	20001bdc 	.word	0x20001bdc

0801b274 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b088      	sub	sp, #32
 801b278:	af00      	add	r7, sp, #0
 801b27a:	60f8      	str	r0, [r7, #12]
 801b27c:	60b9      	str	r1, [r7, #8]
 801b27e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b280:	f3ef 8310 	mrs	r3, PRIMASK
 801b284:	617b      	str	r3, [r7, #20]
  return(result);
 801b286:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b28a:	b672      	cpsid	i
}
 801b28c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b28e:	68f8      	ldr	r0, [r7, #12]
 801b290:	f000 f84a 	bl	801b328 <SEQ_BitPosition>
 801b294:	4603      	mov	r3, r0
 801b296:	4619      	mov	r1, r3
 801b298:	4a06      	ldr	r2, [pc, #24]	; (801b2b4 <UTIL_SEQ_RegTask+0x40>)
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b2a0:	69fb      	ldr	r3, [r7, #28]
 801b2a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2a4:	69bb      	ldr	r3, [r7, #24]
 801b2a6:	f383 8810 	msr	PRIMASK, r3
}
 801b2aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b2ac:	bf00      	nop
}
 801b2ae:	3720      	adds	r7, #32
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	20001bdc 	.word	0x20001bdc

0801b2b8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b2b8:	b480      	push	{r7}
 801b2ba:	b087      	sub	sp, #28
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
 801b2c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2c2:	f3ef 8310 	mrs	r3, PRIMASK
 801b2c6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b2c8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b2ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b2cc:	b672      	cpsid	i
}
 801b2ce:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b2d0:	4b0d      	ldr	r3, [pc, #52]	; (801b308 <UTIL_SEQ_SetTask+0x50>)
 801b2d2:	681a      	ldr	r2, [r3, #0]
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	4313      	orrs	r3, r2
 801b2d8:	4a0b      	ldr	r2, [pc, #44]	; (801b308 <UTIL_SEQ_SetTask+0x50>)
 801b2da:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b2dc:	4a0b      	ldr	r2, [pc, #44]	; (801b30c <UTIL_SEQ_SetTask+0x54>)
 801b2de:	683b      	ldr	r3, [r7, #0]
 801b2e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	431a      	orrs	r2, r3
 801b2e8:	4908      	ldr	r1, [pc, #32]	; (801b30c <UTIL_SEQ_SetTask+0x54>)
 801b2ea:	683b      	ldr	r3, [r7, #0]
 801b2ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	f383 8810 	msr	PRIMASK, r3
}
 801b2fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b2fc:	bf00      	nop
}
 801b2fe:	371c      	adds	r7, #28
 801b300:	46bd      	mov	sp, r7
 801b302:	bc80      	pop	{r7}
 801b304:	4770      	bx	lr
 801b306:	bf00      	nop
 801b308:	20001bcc 	.word	0x20001bcc
 801b30c:	20001bec 	.word	0x20001bec

0801b310 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b310:	b480      	push	{r7}
 801b312:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b314:	bf00      	nop
}
 801b316:	46bd      	mov	sp, r7
 801b318:	bc80      	pop	{r7}
 801b31a:	4770      	bx	lr

0801b31c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b31c:	b480      	push	{r7}
 801b31e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b320:	bf00      	nop
}
 801b322:	46bd      	mov	sp, r7
 801b324:	bc80      	pop	{r7}
 801b326:	4770      	bx	lr

0801b328 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b328:	b480      	push	{r7}
 801b32a:	b085      	sub	sp, #20
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b330:	2300      	movs	r3, #0
 801b332:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	0c1b      	lsrs	r3, r3, #16
 801b33c:	041b      	lsls	r3, r3, #16
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d104      	bne.n	801b34c <SEQ_BitPosition+0x24>
 801b342:	2310      	movs	r3, #16
 801b344:	73fb      	strb	r3, [r7, #15]
 801b346:	68bb      	ldr	r3, [r7, #8]
 801b348:	041b      	lsls	r3, r3, #16
 801b34a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b34c:	68bb      	ldr	r3, [r7, #8]
 801b34e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801b352:	2b00      	cmp	r3, #0
 801b354:	d105      	bne.n	801b362 <SEQ_BitPosition+0x3a>
 801b356:	7bfb      	ldrb	r3, [r7, #15]
 801b358:	3308      	adds	r3, #8
 801b35a:	73fb      	strb	r3, [r7, #15]
 801b35c:	68bb      	ldr	r3, [r7, #8]
 801b35e:	021b      	lsls	r3, r3, #8
 801b360:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b362:	68bb      	ldr	r3, [r7, #8]
 801b364:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d105      	bne.n	801b378 <SEQ_BitPosition+0x50>
 801b36c:	7bfb      	ldrb	r3, [r7, #15]
 801b36e:	3304      	adds	r3, #4
 801b370:	73fb      	strb	r3, [r7, #15]
 801b372:	68bb      	ldr	r3, [r7, #8]
 801b374:	011b      	lsls	r3, r3, #4
 801b376:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	0f1b      	lsrs	r3, r3, #28
 801b37c:	4a06      	ldr	r2, [pc, #24]	; (801b398 <SEQ_BitPosition+0x70>)
 801b37e:	5cd2      	ldrb	r2, [r2, r3]
 801b380:	7bfb      	ldrb	r3, [r7, #15]
 801b382:	4413      	add	r3, r2
 801b384:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b386:	7bfb      	ldrb	r3, [r7, #15]
 801b388:	f1c3 031f 	rsb	r3, r3, #31
 801b38c:	b2db      	uxtb	r3, r3
}
 801b38e:	4618      	mov	r0, r3
 801b390:	3714      	adds	r7, #20
 801b392:	46bd      	mov	sp, r7
 801b394:	bc80      	pop	{r7}
 801b396:	4770      	bx	lr
 801b398:	0801cd0c 	.word	0x0801cd0c

0801b39c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b3a0:	4b04      	ldr	r3, [pc, #16]	; (801b3b4 <UTIL_TIMER_Init+0x18>)
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b3a6:	4b04      	ldr	r3, [pc, #16]	; (801b3b8 <UTIL_TIMER_Init+0x1c>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	4798      	blx	r3
 801b3ac:	4603      	mov	r3, r0
}
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	bd80      	pop	{r7, pc}
 801b3b2:	bf00      	nop
 801b3b4:	20001bf4 	.word	0x20001bf4
 801b3b8:	0801c7c0 	.word	0x0801c7c0

0801b3bc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b084      	sub	sp, #16
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	60f8      	str	r0, [r7, #12]
 801b3c4:	60b9      	str	r1, [r7, #8]
 801b3c6:	603b      	str	r3, [r7, #0]
 801b3c8:	4613      	mov	r3, r2
 801b3ca:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d023      	beq.n	801b41a <UTIL_TIMER_Create+0x5e>
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d020      	beq.n	801b41a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	2200      	movs	r2, #0
 801b3dc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b3de:	4b11      	ldr	r3, [pc, #68]	; (801b424 <UTIL_TIMER_Create+0x68>)
 801b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3e2:	68b8      	ldr	r0, [r7, #8]
 801b3e4:	4798      	blx	r3
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	683a      	ldr	r2, [r7, #0]
 801b402:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	69ba      	ldr	r2, [r7, #24]
 801b408:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	79fa      	ldrb	r2, [r7, #7]
 801b40e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	2200      	movs	r2, #0
 801b414:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b416:	2300      	movs	r3, #0
 801b418:	e000      	b.n	801b41c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b41a:	2301      	movs	r3, #1
  }
}
 801b41c:	4618      	mov	r0, r3
 801b41e:	3710      	adds	r7, #16
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	0801c7c0 	.word	0x0801c7c0

0801b428 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b08a      	sub	sp, #40	; 0x28
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b430:	2300      	movs	r3, #0
 801b432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d056      	beq.n	801b4ea <UTIL_TIMER_Start+0xc2>
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f000 f9a9 	bl	801b794 <TimerExists>
 801b442:	4603      	mov	r3, r0
 801b444:	f083 0301 	eor.w	r3, r3, #1
 801b448:	b2db      	uxtb	r3, r3
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d04d      	beq.n	801b4ea <UTIL_TIMER_Start+0xc2>
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	7a5b      	ldrb	r3, [r3, #9]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d149      	bne.n	801b4ea <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b456:	f3ef 8310 	mrs	r3, PRIMASK
 801b45a:	613b      	str	r3, [r7, #16]
  return(result);
 801b45c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b45e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b460:	b672      	cpsid	i
}
 801b462:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	685b      	ldr	r3, [r3, #4]
 801b468:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b46a:	4b24      	ldr	r3, [pc, #144]	; (801b4fc <UTIL_TIMER_Start+0xd4>)
 801b46c:	6a1b      	ldr	r3, [r3, #32]
 801b46e:	4798      	blx	r3
 801b470:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b472:	6a3a      	ldr	r2, [r7, #32]
 801b474:	69bb      	ldr	r3, [r7, #24]
 801b476:	429a      	cmp	r2, r3
 801b478:	d201      	bcs.n	801b47e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b47a:	69bb      	ldr	r3, [r7, #24]
 801b47c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	6a3a      	ldr	r2, [r7, #32]
 801b482:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2200      	movs	r2, #0
 801b488:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2201      	movs	r2, #1
 801b48e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	2200      	movs	r2, #0
 801b494:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b496:	4b1a      	ldr	r3, [pc, #104]	; (801b500 <UTIL_TIMER_Start+0xd8>)
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d106      	bne.n	801b4ac <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b49e:	4b17      	ldr	r3, [pc, #92]	; (801b4fc <UTIL_TIMER_Start+0xd4>)
 801b4a0:	691b      	ldr	r3, [r3, #16]
 801b4a2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b4a4:	6878      	ldr	r0, [r7, #4]
 801b4a6:	f000 f9eb 	bl	801b880 <TimerInsertNewHeadTimer>
 801b4aa:	e017      	b.n	801b4dc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b4ac:	4b13      	ldr	r3, [pc, #76]	; (801b4fc <UTIL_TIMER_Start+0xd4>)
 801b4ae:	699b      	ldr	r3, [r3, #24]
 801b4b0:	4798      	blx	r3
 801b4b2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681a      	ldr	r2, [r3, #0]
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	441a      	add	r2, r3
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	681a      	ldr	r2, [r3, #0]
 801b4c4:	4b0e      	ldr	r3, [pc, #56]	; (801b500 <UTIL_TIMER_Start+0xd8>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	429a      	cmp	r2, r3
 801b4cc:	d203      	bcs.n	801b4d6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b4ce:	6878      	ldr	r0, [r7, #4]
 801b4d0:	f000 f9d6 	bl	801b880 <TimerInsertNewHeadTimer>
 801b4d4:	e002      	b.n	801b4dc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b4d6:	6878      	ldr	r0, [r7, #4]
 801b4d8:	f000 f9a2 	bl	801b820 <TimerInsertTimer>
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	f383 8810 	msr	PRIMASK, r3
}
 801b4e6:	bf00      	nop
  {
 801b4e8:	e002      	b.n	801b4f0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801b4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	3728      	adds	r7, #40	; 0x28
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	bd80      	pop	{r7, pc}
 801b4fc:	0801c7c0 	.word	0x0801c7c0
 801b500:	20001bf4 	.word	0x20001bf4

0801b504 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b088      	sub	sp, #32
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b50c:	2300      	movs	r3, #0
 801b50e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d05b      	beq.n	801b5ce <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b516:	f3ef 8310 	mrs	r3, PRIMASK
 801b51a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b51c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b51e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b520:	b672      	cpsid	i
}
 801b522:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b524:	4b2d      	ldr	r3, [pc, #180]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b52a:	4b2c      	ldr	r3, [pc, #176]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	2201      	movs	r2, #1
 801b534:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b536:	4b29      	ldr	r3, [pc, #164]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d041      	beq.n	801b5c2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	2200      	movs	r2, #0
 801b542:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b544:	4b25      	ldr	r3, [pc, #148]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	687a      	ldr	r2, [r7, #4]
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d134      	bne.n	801b5b8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b54e:	4b23      	ldr	r3, [pc, #140]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	2200      	movs	r2, #0
 801b554:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b556:	4b21      	ldr	r3, [pc, #132]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	695b      	ldr	r3, [r3, #20]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d00a      	beq.n	801b576 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b560:	4b1e      	ldr	r3, [pc, #120]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	695b      	ldr	r3, [r3, #20]
 801b566:	4a1d      	ldr	r2, [pc, #116]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b568:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b56a:	4b1c      	ldr	r3, [pc, #112]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	4618      	mov	r0, r3
 801b570:	f000 f92c 	bl	801b7cc <TimerSetTimeout>
 801b574:	e023      	b.n	801b5be <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b576:	4b1a      	ldr	r3, [pc, #104]	; (801b5e0 <UTIL_TIMER_Stop+0xdc>)
 801b578:	68db      	ldr	r3, [r3, #12]
 801b57a:	4798      	blx	r3
            TimerListHead = NULL;
 801b57c:	4b17      	ldr	r3, [pc, #92]	; (801b5dc <UTIL_TIMER_Stop+0xd8>)
 801b57e:	2200      	movs	r2, #0
 801b580:	601a      	str	r2, [r3, #0]
 801b582:	e01c      	b.n	801b5be <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b584:	697a      	ldr	r2, [r7, #20]
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	429a      	cmp	r2, r3
 801b58a:	d110      	bne.n	801b5ae <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b58c:	697b      	ldr	r3, [r7, #20]
 801b58e:	695b      	ldr	r3, [r3, #20]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d006      	beq.n	801b5a2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	695b      	ldr	r3, [r3, #20]
 801b598:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b59a:	69bb      	ldr	r3, [r7, #24]
 801b59c:	697a      	ldr	r2, [r7, #20]
 801b59e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b5a0:	e00d      	b.n	801b5be <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b5a6:	69bb      	ldr	r3, [r7, #24]
 801b5a8:	697a      	ldr	r2, [r7, #20]
 801b5aa:	615a      	str	r2, [r3, #20]
            break;
 801b5ac:	e007      	b.n	801b5be <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	695b      	ldr	r3, [r3, #20]
 801b5b6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b5b8:	697b      	ldr	r3, [r7, #20]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d1e2      	bne.n	801b584 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b5be:	2300      	movs	r3, #0
 801b5c0:	77fb      	strb	r3, [r7, #31]
 801b5c2:	693b      	ldr	r3, [r7, #16]
 801b5c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5c6:	68bb      	ldr	r3, [r7, #8]
 801b5c8:	f383 8810 	msr	PRIMASK, r3
}
 801b5cc:	e001      	b.n	801b5d2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b5ce:	2301      	movs	r3, #1
 801b5d0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b5d2:	7ffb      	ldrb	r3, [r7, #31]
}
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	3720      	adds	r7, #32
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	20001bf4 	.word	0x20001bf4
 801b5e0:	0801c7c0 	.word	0x0801c7c0

0801b5e4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d102      	bne.n	801b5fe <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b5f8:	2301      	movs	r3, #1
 801b5fa:	73fb      	strb	r3, [r7, #15]
 801b5fc:	e014      	b.n	801b628 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b5fe:	4b0d      	ldr	r3, [pc, #52]	; (801b634 <UTIL_TIMER_SetPeriod+0x50>)
 801b600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b602:	6838      	ldr	r0, [r7, #0]
 801b604:	4798      	blx	r3
 801b606:	4602      	mov	r2, r0
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b60c:	6878      	ldr	r0, [r7, #4]
 801b60e:	f000 f8c1 	bl	801b794 <TimerExists>
 801b612:	4603      	mov	r3, r0
 801b614:	2b00      	cmp	r3, #0
 801b616:	d007      	beq.n	801b628 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b618:	6878      	ldr	r0, [r7, #4]
 801b61a:	f7ff ff73 	bl	801b504 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b61e:	6878      	ldr	r0, [r7, #4]
 801b620:	f7ff ff02 	bl	801b428 <UTIL_TIMER_Start>
 801b624:	4603      	mov	r3, r0
 801b626:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b628:	7bfb      	ldrb	r3, [r7, #15]
}
 801b62a:	4618      	mov	r0, r3
 801b62c:	3710      	adds	r7, #16
 801b62e:	46bd      	mov	sp, r7
 801b630:	bd80      	pop	{r7, pc}
 801b632:	bf00      	nop
 801b634:	0801c7c0 	.word	0x0801c7c0

0801b638 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b638:	b590      	push	{r4, r7, lr}
 801b63a:	b089      	sub	sp, #36	; 0x24
 801b63c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b63e:	f3ef 8310 	mrs	r3, PRIMASK
 801b642:	60bb      	str	r3, [r7, #8]
  return(result);
 801b644:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b646:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b648:	b672      	cpsid	i
}
 801b64a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b64c:	4b38      	ldr	r3, [pc, #224]	; (801b730 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b64e:	695b      	ldr	r3, [r3, #20]
 801b650:	4798      	blx	r3
 801b652:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b654:	4b36      	ldr	r3, [pc, #216]	; (801b730 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b656:	691b      	ldr	r3, [r3, #16]
 801b658:	4798      	blx	r3
 801b65a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b65c:	693a      	ldr	r2, [r7, #16]
 801b65e:	697b      	ldr	r3, [r7, #20]
 801b660:	1ad3      	subs	r3, r2, r3
 801b662:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b664:	4b33      	ldr	r3, [pc, #204]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d037      	beq.n	801b6dc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b66c:	4b31      	ldr	r3, [pc, #196]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b672:	69fb      	ldr	r3, [r7, #28]
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	68fa      	ldr	r2, [r7, #12]
 801b678:	429a      	cmp	r2, r3
 801b67a:	d206      	bcs.n	801b68a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b67c:	69fb      	ldr	r3, [r7, #28]
 801b67e:	681a      	ldr	r2, [r3, #0]
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	1ad2      	subs	r2, r2, r3
 801b684:	69fb      	ldr	r3, [r7, #28]
 801b686:	601a      	str	r2, [r3, #0]
 801b688:	e002      	b.n	801b690 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b68a:	69fb      	ldr	r3, [r7, #28]
 801b68c:	2200      	movs	r2, #0
 801b68e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b690:	69fb      	ldr	r3, [r7, #28]
 801b692:	695b      	ldr	r3, [r3, #20]
 801b694:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b696:	69fb      	ldr	r3, [r7, #28]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d1ea      	bne.n	801b672 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b69c:	e01e      	b.n	801b6dc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b69e:	4b25      	ldr	r3, [pc, #148]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b6a4:	4b23      	ldr	r3, [pc, #140]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	695b      	ldr	r3, [r3, #20]
 801b6aa:	4a22      	ldr	r2, [pc, #136]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b6ac:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b6ae:	69fb      	ldr	r3, [r7, #28]
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b6b4:	69fb      	ldr	r3, [r7, #28]
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b6ba:	69fb      	ldr	r3, [r7, #28]
 801b6bc:	68db      	ldr	r3, [r3, #12]
 801b6be:	69fa      	ldr	r2, [r7, #28]
 801b6c0:	6912      	ldr	r2, [r2, #16]
 801b6c2:	4610      	mov	r0, r2
 801b6c4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b6c6:	69fb      	ldr	r3, [r7, #28]
 801b6c8:	7adb      	ldrb	r3, [r3, #11]
 801b6ca:	2b01      	cmp	r3, #1
 801b6cc:	d106      	bne.n	801b6dc <UTIL_TIMER_IRQ_Handler+0xa4>
 801b6ce:	69fb      	ldr	r3, [r7, #28]
 801b6d0:	7a9b      	ldrb	r3, [r3, #10]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d102      	bne.n	801b6dc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b6d6:	69f8      	ldr	r0, [r7, #28]
 801b6d8:	f7ff fea6 	bl	801b428 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b6dc:	4b15      	ldr	r3, [pc, #84]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d00d      	beq.n	801b700 <UTIL_TIMER_IRQ_Handler+0xc8>
 801b6e4:	4b13      	ldr	r3, [pc, #76]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d0d7      	beq.n	801b69e <UTIL_TIMER_IRQ_Handler+0x66>
 801b6ee:	4b11      	ldr	r3, [pc, #68]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	681c      	ldr	r4, [r3, #0]
 801b6f4:	4b0e      	ldr	r3, [pc, #56]	; (801b730 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b6f6:	699b      	ldr	r3, [r3, #24]
 801b6f8:	4798      	blx	r3
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	429c      	cmp	r4, r3
 801b6fe:	d3ce      	bcc.n	801b69e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b700:	4b0c      	ldr	r3, [pc, #48]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d009      	beq.n	801b71c <UTIL_TIMER_IRQ_Handler+0xe4>
 801b708:	4b0a      	ldr	r3, [pc, #40]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	7a1b      	ldrb	r3, [r3, #8]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d104      	bne.n	801b71c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b712:	4b08      	ldr	r3, [pc, #32]	; (801b734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	4618      	mov	r0, r3
 801b718:	f000 f858 	bl	801b7cc <TimerSetTimeout>
 801b71c:	69bb      	ldr	r3, [r7, #24]
 801b71e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	f383 8810 	msr	PRIMASK, r3
}
 801b726:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b728:	bf00      	nop
 801b72a:	3724      	adds	r7, #36	; 0x24
 801b72c:	46bd      	mov	sp, r7
 801b72e:	bd90      	pop	{r4, r7, pc}
 801b730:	0801c7c0 	.word	0x0801c7c0
 801b734:	20001bf4 	.word	0x20001bf4

0801b738 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b73e:	4b06      	ldr	r3, [pc, #24]	; (801b758 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b740:	69db      	ldr	r3, [r3, #28]
 801b742:	4798      	blx	r3
 801b744:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b746:	4b04      	ldr	r3, [pc, #16]	; (801b758 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b74a:	6878      	ldr	r0, [r7, #4]
 801b74c:	4798      	blx	r3
 801b74e:	4603      	mov	r3, r0
}
 801b750:	4618      	mov	r0, r3
 801b752:	3708      	adds	r7, #8
 801b754:	46bd      	mov	sp, r7
 801b756:	bd80      	pop	{r7, pc}
 801b758:	0801c7c0 	.word	0x0801c7c0

0801b75c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b764:	4b0a      	ldr	r3, [pc, #40]	; (801b790 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b766:	69db      	ldr	r3, [r3, #28]
 801b768:	4798      	blx	r3
 801b76a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b76c:	4b08      	ldr	r3, [pc, #32]	; (801b790 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b770:	6878      	ldr	r0, [r7, #4]
 801b772:	4798      	blx	r3
 801b774:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b776:	4b06      	ldr	r3, [pc, #24]	; (801b790 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b77a:	68f9      	ldr	r1, [r7, #12]
 801b77c:	68ba      	ldr	r2, [r7, #8]
 801b77e:	1a8a      	subs	r2, r1, r2
 801b780:	4610      	mov	r0, r2
 801b782:	4798      	blx	r3
 801b784:	4603      	mov	r3, r0
}
 801b786:	4618      	mov	r0, r3
 801b788:	3710      	adds	r7, #16
 801b78a:	46bd      	mov	sp, r7
 801b78c:	bd80      	pop	{r7, pc}
 801b78e:	bf00      	nop
 801b790:	0801c7c0 	.word	0x0801c7c0

0801b794 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b794:	b480      	push	{r7}
 801b796:	b085      	sub	sp, #20
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b79c:	4b0a      	ldr	r3, [pc, #40]	; (801b7c8 <TimerExists+0x34>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b7a2:	e008      	b.n	801b7b6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b7a4:	68fa      	ldr	r2, [r7, #12]
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d101      	bne.n	801b7b0 <TimerExists+0x1c>
    {
      return true;
 801b7ac:	2301      	movs	r3, #1
 801b7ae:	e006      	b.n	801b7be <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	695b      	ldr	r3, [r3, #20]
 801b7b4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d1f3      	bne.n	801b7a4 <TimerExists+0x10>
  }
  return false;
 801b7bc:	2300      	movs	r3, #0
}
 801b7be:	4618      	mov	r0, r3
 801b7c0:	3714      	adds	r7, #20
 801b7c2:	46bd      	mov	sp, r7
 801b7c4:	bc80      	pop	{r7}
 801b7c6:	4770      	bx	lr
 801b7c8:	20001bf4 	.word	0x20001bf4

0801b7cc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b7cc:	b590      	push	{r4, r7, lr}
 801b7ce:	b085      	sub	sp, #20
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b7d4:	4b11      	ldr	r3, [pc, #68]	; (801b81c <TimerSetTimeout+0x50>)
 801b7d6:	6a1b      	ldr	r3, [r3, #32]
 801b7d8:	4798      	blx	r3
 801b7da:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	2201      	movs	r2, #1
 801b7e0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	681c      	ldr	r4, [r3, #0]
 801b7e6:	4b0d      	ldr	r3, [pc, #52]	; (801b81c <TimerSetTimeout+0x50>)
 801b7e8:	699b      	ldr	r3, [r3, #24]
 801b7ea:	4798      	blx	r3
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	4413      	add	r3, r2
 801b7f2:	429c      	cmp	r4, r3
 801b7f4:	d207      	bcs.n	801b806 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b7f6:	4b09      	ldr	r3, [pc, #36]	; (801b81c <TimerSetTimeout+0x50>)
 801b7f8:	699b      	ldr	r3, [r3, #24]
 801b7fa:	4798      	blx	r3
 801b7fc:	4602      	mov	r2, r0
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	441a      	add	r2, r3
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b806:	4b05      	ldr	r3, [pc, #20]	; (801b81c <TimerSetTimeout+0x50>)
 801b808:	689b      	ldr	r3, [r3, #8]
 801b80a:	687a      	ldr	r2, [r7, #4]
 801b80c:	6812      	ldr	r2, [r2, #0]
 801b80e:	4610      	mov	r0, r2
 801b810:	4798      	blx	r3
}
 801b812:	bf00      	nop
 801b814:	3714      	adds	r7, #20
 801b816:	46bd      	mov	sp, r7
 801b818:	bd90      	pop	{r4, r7, pc}
 801b81a:	bf00      	nop
 801b81c:	0801c7c0 	.word	0x0801c7c0

0801b820 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b820:	b480      	push	{r7}
 801b822:	b085      	sub	sp, #20
 801b824:	af00      	add	r7, sp, #0
 801b826:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b828:	4b14      	ldr	r3, [pc, #80]	; (801b87c <TimerInsertTimer+0x5c>)
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b82e:	4b13      	ldr	r3, [pc, #76]	; (801b87c <TimerInsertTimer+0x5c>)
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	695b      	ldr	r3, [r3, #20]
 801b834:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b836:	e012      	b.n	801b85e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681a      	ldr	r2, [r3, #0]
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	429a      	cmp	r2, r3
 801b842:	d905      	bls.n	801b850 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b848:	68bb      	ldr	r3, [r7, #8]
 801b84a:	695b      	ldr	r3, [r3, #20]
 801b84c:	60bb      	str	r3, [r7, #8]
 801b84e:	e006      	b.n	801b85e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	687a      	ldr	r2, [r7, #4]
 801b854:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	68ba      	ldr	r2, [r7, #8]
 801b85a:	615a      	str	r2, [r3, #20]
        return;
 801b85c:	e009      	b.n	801b872 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	695b      	ldr	r3, [r3, #20]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d1e8      	bne.n	801b838 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	687a      	ldr	r2, [r7, #4]
 801b86a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	2200      	movs	r2, #0
 801b870:	615a      	str	r2, [r3, #20]
}
 801b872:	3714      	adds	r7, #20
 801b874:	46bd      	mov	sp, r7
 801b876:	bc80      	pop	{r7}
 801b878:	4770      	bx	lr
 801b87a:	bf00      	nop
 801b87c:	20001bf4 	.word	0x20001bf4

0801b880 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b084      	sub	sp, #16
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b888:	4b0b      	ldr	r3, [pc, #44]	; (801b8b8 <TimerInsertNewHeadTimer+0x38>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	2b00      	cmp	r3, #0
 801b892:	d002      	beq.n	801b89a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	2200      	movs	r2, #0
 801b898:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	68fa      	ldr	r2, [r7, #12]
 801b89e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b8a0:	4a05      	ldr	r2, [pc, #20]	; (801b8b8 <TimerInsertNewHeadTimer+0x38>)
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b8a6:	4b04      	ldr	r3, [pc, #16]	; (801b8b8 <TimerInsertNewHeadTimer+0x38>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f7ff ff8e 	bl	801b7cc <TimerSetTimeout>
}
 801b8b0:	bf00      	nop
 801b8b2:	3710      	adds	r7, #16
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	bd80      	pop	{r7, pc}
 801b8b8:	20001bf4 	.word	0x20001bf4

0801b8bc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b8c0:	2218      	movs	r2, #24
 801b8c2:	2100      	movs	r1, #0
 801b8c4:	4807      	ldr	r0, [pc, #28]	; (801b8e4 <UTIL_ADV_TRACE_Init+0x28>)
 801b8c6:	f7fe fffa 	bl	801a8be <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b8ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b8ce:	2100      	movs	r1, #0
 801b8d0:	4805      	ldr	r0, [pc, #20]	; (801b8e8 <UTIL_ADV_TRACE_Init+0x2c>)
 801b8d2:	f7fe fff4 	bl	801a8be <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b8d6:	4b05      	ldr	r3, [pc, #20]	; (801b8ec <UTIL_ADV_TRACE_Init+0x30>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	4805      	ldr	r0, [pc, #20]	; (801b8f0 <UTIL_ADV_TRACE_Init+0x34>)
 801b8dc:	4798      	blx	r3
 801b8de:	4603      	mov	r3, r0
}
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	bd80      	pop	{r7, pc}
 801b8e4:	20001bf8 	.word	0x20001bf8
 801b8e8:	20001c10 	.word	0x20001c10
 801b8ec:	0801c800 	.word	0x0801c800
 801b8f0:	0801bb5d 	.word	0x0801bb5d

0801b8f4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b8f4:	b480      	push	{r7}
 801b8f6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b8f8:	4b06      	ldr	r3, [pc, #24]	; (801b914 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b8fa:	8a5a      	ldrh	r2, [r3, #18]
 801b8fc:	4b05      	ldr	r3, [pc, #20]	; (801b914 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b8fe:	8a1b      	ldrh	r3, [r3, #16]
 801b900:	429a      	cmp	r2, r3
 801b902:	d101      	bne.n	801b908 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b904:	2301      	movs	r3, #1
 801b906:	e000      	b.n	801b90a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b908:	2300      	movs	r3, #0
}
 801b90a:	4618      	mov	r0, r3
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bc80      	pop	{r7}
 801b910:	4770      	bx	lr
 801b912:	bf00      	nop
 801b914:	20001bf8 	.word	0x20001bf8

0801b918 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b918:	b408      	push	{r3}
 801b91a:	b580      	push	{r7, lr}
 801b91c:	b08d      	sub	sp, #52	; 0x34
 801b91e:	af00      	add	r7, sp, #0
 801b920:	60f8      	str	r0, [r7, #12]
 801b922:	60b9      	str	r1, [r7, #8]
 801b924:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b926:	2300      	movs	r3, #0
 801b928:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b92a:	2300      	movs	r3, #0
 801b92c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b92e:	4b37      	ldr	r3, [pc, #220]	; (801ba0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b930:	7a1b      	ldrb	r3, [r3, #8]
 801b932:	461a      	mov	r2, r3
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	4293      	cmp	r3, r2
 801b938:	d902      	bls.n	801b940 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b93a:	f06f 0304 	mvn.w	r3, #4
 801b93e:	e05e      	b.n	801b9fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b940:	4b32      	ldr	r3, [pc, #200]	; (801ba0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b942:	68da      	ldr	r2, [r3, #12]
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	4013      	ands	r3, r2
 801b948:	68ba      	ldr	r2, [r7, #8]
 801b94a:	429a      	cmp	r2, r3
 801b94c:	d002      	beq.n	801b954 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b94e:	f06f 0305 	mvn.w	r3, #5
 801b952:	e054      	b.n	801b9fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b954:	4b2d      	ldr	r3, [pc, #180]	; (801ba0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b956:	685b      	ldr	r3, [r3, #4]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d00a      	beq.n	801b972 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d007      	beq.n	801b972 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b962:	4b2a      	ldr	r3, [pc, #168]	; (801ba0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	f107 0116 	add.w	r1, r7, #22
 801b96a:	f107 0218 	add.w	r2, r7, #24
 801b96e:	4610      	mov	r0, r2
 801b970:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b972:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b976:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b97a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b97c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b980:	4823      	ldr	r0, [pc, #140]	; (801ba10 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b982:	f7ff fa29 	bl	801add8 <tiny_vsnprintf_like>
 801b986:	4603      	mov	r3, r0
 801b988:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801b98a:	f000 f9f1 	bl	801bd70 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b98e:	8afa      	ldrh	r2, [r7, #22]
 801b990:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b992:	4413      	add	r3, r2
 801b994:	b29b      	uxth	r3, r3
 801b996:	f107 0214 	add.w	r2, r7, #20
 801b99a:	4611      	mov	r1, r2
 801b99c:	4618      	mov	r0, r3
 801b99e:	f000 f969 	bl	801bc74 <TRACE_AllocateBufer>
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b9a8:	d025      	beq.n	801b9f6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801b9ae:	e00e      	b.n	801b9ce <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b9b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b9b2:	8aba      	ldrh	r2, [r7, #20]
 801b9b4:	3330      	adds	r3, #48	; 0x30
 801b9b6:	443b      	add	r3, r7
 801b9b8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b9bc:	4b15      	ldr	r3, [pc, #84]	; (801ba14 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b9be:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b9c0:	8abb      	ldrh	r3, [r7, #20]
 801b9c2:	3301      	adds	r3, #1
 801b9c4:	b29b      	uxth	r3, r3
 801b9c6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b9c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b9ca:	3301      	adds	r3, #1
 801b9cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801b9ce:	8afb      	ldrh	r3, [r7, #22]
 801b9d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d3ec      	bcc.n	801b9b0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b9d6:	8abb      	ldrh	r3, [r7, #20]
 801b9d8:	461a      	mov	r2, r3
 801b9da:	4b0e      	ldr	r3, [pc, #56]	; (801ba14 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b9dc:	18d0      	adds	r0, r2, r3
 801b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b9e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b9e6:	f7ff f9f7 	bl	801add8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b9ea:	f000 f9df 	bl	801bdac <TRACE_UnLock>

    return TRACE_Send();
 801b9ee:	f000 f831 	bl	801ba54 <TRACE_Send>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	e003      	b.n	801b9fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b9f6:	f000 f9d9 	bl	801bdac <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b9fa:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b9fe:	4618      	mov	r0, r3
 801ba00:	3734      	adds	r7, #52	; 0x34
 801ba02:	46bd      	mov	sp, r7
 801ba04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ba08:	b001      	add	sp, #4
 801ba0a:	4770      	bx	lr
 801ba0c:	20001bf8 	.word	0x20001bf8
 801ba10:	20002010 	.word	0x20002010
 801ba14:	20001c10 	.word	0x20001c10

0801ba18 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ba18:	b480      	push	{r7}
 801ba1a:	b083      	sub	sp, #12
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ba20:	4a03      	ldr	r2, [pc, #12]	; (801ba30 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	6053      	str	r3, [r2, #4]
}
 801ba26:	bf00      	nop
 801ba28:	370c      	adds	r7, #12
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	bc80      	pop	{r7}
 801ba2e:	4770      	bx	lr
 801ba30:	20001bf8 	.word	0x20001bf8

0801ba34 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ba34:	b480      	push	{r7}
 801ba36:	b083      	sub	sp, #12
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	4603      	mov	r3, r0
 801ba3c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ba3e:	4a04      	ldr	r2, [pc, #16]	; (801ba50 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ba40:	79fb      	ldrb	r3, [r7, #7]
 801ba42:	7213      	strb	r3, [r2, #8]
}
 801ba44:	bf00      	nop
 801ba46:	370c      	adds	r7, #12
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bc80      	pop	{r7}
 801ba4c:	4770      	bx	lr
 801ba4e:	bf00      	nop
 801ba50:	20001bf8 	.word	0x20001bf8

0801ba54 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b088      	sub	sp, #32
 801ba58:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba62:	f3ef 8310 	mrs	r3, PRIMASK
 801ba66:	613b      	str	r3, [r7, #16]
  return(result);
 801ba68:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ba6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba6c:	b672      	cpsid	i
}
 801ba6e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801ba70:	f000 f9ba 	bl	801bde8 <TRACE_IsLocked>
 801ba74:	4603      	mov	r3, r0
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d15d      	bne.n	801bb36 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801ba7a:	f000 f979 	bl	801bd70 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801ba7e:	4b34      	ldr	r3, [pc, #208]	; (801bb50 <TRACE_Send+0xfc>)
 801ba80:	8a1a      	ldrh	r2, [r3, #16]
 801ba82:	4b33      	ldr	r3, [pc, #204]	; (801bb50 <TRACE_Send+0xfc>)
 801ba84:	8a5b      	ldrh	r3, [r3, #18]
 801ba86:	429a      	cmp	r2, r3
 801ba88:	d04d      	beq.n	801bb26 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ba8a:	4b31      	ldr	r3, [pc, #196]	; (801bb50 <TRACE_Send+0xfc>)
 801ba8c:	789b      	ldrb	r3, [r3, #2]
 801ba8e:	2b01      	cmp	r3, #1
 801ba90:	d117      	bne.n	801bac2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ba92:	4b2f      	ldr	r3, [pc, #188]	; (801bb50 <TRACE_Send+0xfc>)
 801ba94:	881a      	ldrh	r2, [r3, #0]
 801ba96:	4b2e      	ldr	r3, [pc, #184]	; (801bb50 <TRACE_Send+0xfc>)
 801ba98:	8a1b      	ldrh	r3, [r3, #16]
 801ba9a:	1ad3      	subs	r3, r2, r3
 801ba9c:	b29a      	uxth	r2, r3
 801ba9e:	4b2c      	ldr	r3, [pc, #176]	; (801bb50 <TRACE_Send+0xfc>)
 801baa0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801baa2:	4b2b      	ldr	r3, [pc, #172]	; (801bb50 <TRACE_Send+0xfc>)
 801baa4:	2202      	movs	r2, #2
 801baa6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801baa8:	4b29      	ldr	r3, [pc, #164]	; (801bb50 <TRACE_Send+0xfc>)
 801baaa:	2200      	movs	r2, #0
 801baac:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801baae:	4b28      	ldr	r3, [pc, #160]	; (801bb50 <TRACE_Send+0xfc>)
 801bab0:	8a9b      	ldrh	r3, [r3, #20]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d105      	bne.n	801bac2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bab6:	4b26      	ldr	r3, [pc, #152]	; (801bb50 <TRACE_Send+0xfc>)
 801bab8:	2200      	movs	r2, #0
 801baba:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801babc:	4b24      	ldr	r3, [pc, #144]	; (801bb50 <TRACE_Send+0xfc>)
 801babe:	2200      	movs	r2, #0
 801bac0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bac2:	4b23      	ldr	r3, [pc, #140]	; (801bb50 <TRACE_Send+0xfc>)
 801bac4:	789b      	ldrb	r3, [r3, #2]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d115      	bne.n	801baf6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801baca:	4b21      	ldr	r3, [pc, #132]	; (801bb50 <TRACE_Send+0xfc>)
 801bacc:	8a5a      	ldrh	r2, [r3, #18]
 801bace:	4b20      	ldr	r3, [pc, #128]	; (801bb50 <TRACE_Send+0xfc>)
 801bad0:	8a1b      	ldrh	r3, [r3, #16]
 801bad2:	429a      	cmp	r2, r3
 801bad4:	d908      	bls.n	801bae8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bad6:	4b1e      	ldr	r3, [pc, #120]	; (801bb50 <TRACE_Send+0xfc>)
 801bad8:	8a5a      	ldrh	r2, [r3, #18]
 801bada:	4b1d      	ldr	r3, [pc, #116]	; (801bb50 <TRACE_Send+0xfc>)
 801badc:	8a1b      	ldrh	r3, [r3, #16]
 801bade:	1ad3      	subs	r3, r2, r3
 801bae0:	b29a      	uxth	r2, r3
 801bae2:	4b1b      	ldr	r3, [pc, #108]	; (801bb50 <TRACE_Send+0xfc>)
 801bae4:	829a      	strh	r2, [r3, #20]
 801bae6:	e006      	b.n	801baf6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bae8:	4b19      	ldr	r3, [pc, #100]	; (801bb50 <TRACE_Send+0xfc>)
 801baea:	8a1b      	ldrh	r3, [r3, #16]
 801baec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801baf0:	b29a      	uxth	r2, r3
 801baf2:	4b17      	ldr	r3, [pc, #92]	; (801bb50 <TRACE_Send+0xfc>)
 801baf4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801baf6:	4b16      	ldr	r3, [pc, #88]	; (801bb50 <TRACE_Send+0xfc>)
 801baf8:	8a1b      	ldrh	r3, [r3, #16]
 801bafa:	461a      	mov	r2, r3
 801bafc:	4b15      	ldr	r3, [pc, #84]	; (801bb54 <TRACE_Send+0x100>)
 801bafe:	4413      	add	r3, r2
 801bb00:	61bb      	str	r3, [r7, #24]
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	f383 8810 	msr	PRIMASK, r3
}
 801bb0c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801bb0e:	f7e6 f95b 	bl	8001dc8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bb12:	4b11      	ldr	r3, [pc, #68]	; (801bb58 <TRACE_Send+0x104>)
 801bb14:	68db      	ldr	r3, [r3, #12]
 801bb16:	4a0e      	ldr	r2, [pc, #56]	; (801bb50 <TRACE_Send+0xfc>)
 801bb18:	8a92      	ldrh	r2, [r2, #20]
 801bb1a:	4611      	mov	r1, r2
 801bb1c:	69b8      	ldr	r0, [r7, #24]
 801bb1e:	4798      	blx	r3
 801bb20:	4603      	mov	r3, r0
 801bb22:	77fb      	strb	r3, [r7, #31]
 801bb24:	e00d      	b.n	801bb42 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801bb26:	f000 f941 	bl	801bdac <TRACE_UnLock>
 801bb2a:	697b      	ldr	r3, [r7, #20]
 801bb2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	f383 8810 	msr	PRIMASK, r3
}
 801bb34:	e005      	b.n	801bb42 <TRACE_Send+0xee>
 801bb36:	697b      	ldr	r3, [r7, #20]
 801bb38:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	f383 8810 	msr	PRIMASK, r3
}
 801bb40:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801bb42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bb46:	4618      	mov	r0, r3
 801bb48:	3720      	adds	r7, #32
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd80      	pop	{r7, pc}
 801bb4e:	bf00      	nop
 801bb50:	20001bf8 	.word	0x20001bf8
 801bb54:	20001c10 	.word	0x20001c10
 801bb58:	0801c800 	.word	0x0801c800

0801bb5c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b088      	sub	sp, #32
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801bb64:	2300      	movs	r3, #0
 801bb66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb68:	f3ef 8310 	mrs	r3, PRIMASK
 801bb6c:	617b      	str	r3, [r7, #20]
  return(result);
 801bb6e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bb70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb72:	b672      	cpsid	i
}
 801bb74:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801bb76:	4b3c      	ldr	r3, [pc, #240]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bb78:	789b      	ldrb	r3, [r3, #2]
 801bb7a:	2b02      	cmp	r3, #2
 801bb7c:	d106      	bne.n	801bb8c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bb7e:	4b3a      	ldr	r3, [pc, #232]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bb80:	2200      	movs	r2, #0
 801bb82:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bb84:	4b38      	ldr	r3, [pc, #224]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bb86:	2200      	movs	r2, #0
 801bb88:	821a      	strh	r2, [r3, #16]
 801bb8a:	e00a      	b.n	801bba2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bb8c:	4b36      	ldr	r3, [pc, #216]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bb8e:	8a1a      	ldrh	r2, [r3, #16]
 801bb90:	4b35      	ldr	r3, [pc, #212]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bb92:	8a9b      	ldrh	r3, [r3, #20]
 801bb94:	4413      	add	r3, r2
 801bb96:	b29b      	uxth	r3, r3
 801bb98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bb9c:	b29a      	uxth	r2, r3
 801bb9e:	4b32      	ldr	r3, [pc, #200]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bba0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801bba2:	4b31      	ldr	r3, [pc, #196]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bba4:	8a1a      	ldrh	r2, [r3, #16]
 801bba6:	4b30      	ldr	r3, [pc, #192]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bba8:	8a5b      	ldrh	r3, [r3, #18]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d04d      	beq.n	801bc4a <TRACE_TxCpltCallback+0xee>
 801bbae:	4b2e      	ldr	r3, [pc, #184]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbb0:	8adb      	ldrh	r3, [r3, #22]
 801bbb2:	2b01      	cmp	r3, #1
 801bbb4:	d149      	bne.n	801bc4a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bbb6:	4b2c      	ldr	r3, [pc, #176]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbb8:	789b      	ldrb	r3, [r3, #2]
 801bbba:	2b01      	cmp	r3, #1
 801bbbc:	d117      	bne.n	801bbee <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801bbbe:	4b2a      	ldr	r3, [pc, #168]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbc0:	881a      	ldrh	r2, [r3, #0]
 801bbc2:	4b29      	ldr	r3, [pc, #164]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbc4:	8a1b      	ldrh	r3, [r3, #16]
 801bbc6:	1ad3      	subs	r3, r2, r3
 801bbc8:	b29a      	uxth	r2, r3
 801bbca:	4b27      	ldr	r3, [pc, #156]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbcc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bbce:	4b26      	ldr	r3, [pc, #152]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbd0:	2202      	movs	r2, #2
 801bbd2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bbd4:	4b24      	ldr	r3, [pc, #144]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bbda:	4b23      	ldr	r3, [pc, #140]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbdc:	8a9b      	ldrh	r3, [r3, #20]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d105      	bne.n	801bbee <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bbe2:	4b21      	ldr	r3, [pc, #132]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bbe8:	4b1f      	ldr	r3, [pc, #124]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbea:	2200      	movs	r2, #0
 801bbec:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bbee:	4b1e      	ldr	r3, [pc, #120]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbf0:	789b      	ldrb	r3, [r3, #2]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d115      	bne.n	801bc22 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bbf6:	4b1c      	ldr	r3, [pc, #112]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbf8:	8a5a      	ldrh	r2, [r3, #18]
 801bbfa:	4b1b      	ldr	r3, [pc, #108]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bbfc:	8a1b      	ldrh	r3, [r3, #16]
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	d908      	bls.n	801bc14 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bc02:	4b19      	ldr	r3, [pc, #100]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc04:	8a5a      	ldrh	r2, [r3, #18]
 801bc06:	4b18      	ldr	r3, [pc, #96]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc08:	8a1b      	ldrh	r3, [r3, #16]
 801bc0a:	1ad3      	subs	r3, r2, r3
 801bc0c:	b29a      	uxth	r2, r3
 801bc0e:	4b16      	ldr	r3, [pc, #88]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc10:	829a      	strh	r2, [r3, #20]
 801bc12:	e006      	b.n	801bc22 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bc14:	4b14      	ldr	r3, [pc, #80]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc16:	8a1b      	ldrh	r3, [r3, #16]
 801bc18:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801bc1c:	b29a      	uxth	r2, r3
 801bc1e:	4b12      	ldr	r3, [pc, #72]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc20:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bc22:	4b11      	ldr	r3, [pc, #68]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc24:	8a1b      	ldrh	r3, [r3, #16]
 801bc26:	461a      	mov	r2, r3
 801bc28:	4b10      	ldr	r3, [pc, #64]	; (801bc6c <TRACE_TxCpltCallback+0x110>)
 801bc2a:	4413      	add	r3, r2
 801bc2c:	61fb      	str	r3, [r7, #28]
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc32:	693b      	ldr	r3, [r7, #16]
 801bc34:	f383 8810 	msr	PRIMASK, r3
}
 801bc38:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bc3a:	4b0d      	ldr	r3, [pc, #52]	; (801bc70 <TRACE_TxCpltCallback+0x114>)
 801bc3c:	68db      	ldr	r3, [r3, #12]
 801bc3e:	4a0a      	ldr	r2, [pc, #40]	; (801bc68 <TRACE_TxCpltCallback+0x10c>)
 801bc40:	8a92      	ldrh	r2, [r2, #20]
 801bc42:	4611      	mov	r1, r2
 801bc44:	69f8      	ldr	r0, [r7, #28]
 801bc46:	4798      	blx	r3
 801bc48:	e00a      	b.n	801bc60 <TRACE_TxCpltCallback+0x104>
 801bc4a:	69bb      	ldr	r3, [r7, #24]
 801bc4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	f383 8810 	msr	PRIMASK, r3
}
 801bc54:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801bc56:	f7e6 f8bf 	bl	8001dd8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801bc5a:	f000 f8a7 	bl	801bdac <TRACE_UnLock>
  }
}
 801bc5e:	bf00      	nop
 801bc60:	bf00      	nop
 801bc62:	3720      	adds	r7, #32
 801bc64:	46bd      	mov	sp, r7
 801bc66:	bd80      	pop	{r7, pc}
 801bc68:	20001bf8 	.word	0x20001bf8
 801bc6c:	20001c10 	.word	0x20001c10
 801bc70:	0801c800 	.word	0x0801c800

0801bc74 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bc74:	b480      	push	{r7}
 801bc76:	b087      	sub	sp, #28
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	6039      	str	r1, [r7, #0]
 801bc7e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801bc80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bc84:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc86:	f3ef 8310 	mrs	r3, PRIMASK
 801bc8a:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc8c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bc8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc90:	b672      	cpsid	i
}
 801bc92:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bc94:	4b35      	ldr	r3, [pc, #212]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bc96:	8a5a      	ldrh	r2, [r3, #18]
 801bc98:	4b34      	ldr	r3, [pc, #208]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bc9a:	8a1b      	ldrh	r3, [r3, #16]
 801bc9c:	429a      	cmp	r2, r3
 801bc9e:	d11b      	bne.n	801bcd8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bca0:	4b32      	ldr	r3, [pc, #200]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bca2:	8a5b      	ldrh	r3, [r3, #18]
 801bca4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801bca8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bcaa:	88fa      	ldrh	r2, [r7, #6]
 801bcac:	8afb      	ldrh	r3, [r7, #22]
 801bcae:	429a      	cmp	r2, r3
 801bcb0:	d33a      	bcc.n	801bd28 <TRACE_AllocateBufer+0xb4>
 801bcb2:	4b2e      	ldr	r3, [pc, #184]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcb4:	8a1b      	ldrh	r3, [r3, #16]
 801bcb6:	88fa      	ldrh	r2, [r7, #6]
 801bcb8:	429a      	cmp	r2, r3
 801bcba:	d235      	bcs.n	801bd28 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bcbc:	4b2b      	ldr	r3, [pc, #172]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcbe:	2201      	movs	r2, #1
 801bcc0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bcc2:	4b2a      	ldr	r3, [pc, #168]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcc4:	8a5a      	ldrh	r2, [r3, #18]
 801bcc6:	4b29      	ldr	r3, [pc, #164]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcc8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bcca:	4b28      	ldr	r3, [pc, #160]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bccc:	8a1b      	ldrh	r3, [r3, #16]
 801bcce:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bcd0:	4b26      	ldr	r3, [pc, #152]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	825a      	strh	r2, [r3, #18]
 801bcd6:	e027      	b.n	801bd28 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bcd8:	4b24      	ldr	r3, [pc, #144]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcda:	8a5a      	ldrh	r2, [r3, #18]
 801bcdc:	4b23      	ldr	r3, [pc, #140]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcde:	8a1b      	ldrh	r3, [r3, #16]
 801bce0:	429a      	cmp	r2, r3
 801bce2:	d91b      	bls.n	801bd1c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bce4:	4b21      	ldr	r3, [pc, #132]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bce6:	8a5b      	ldrh	r3, [r3, #18]
 801bce8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801bcec:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bcee:	88fa      	ldrh	r2, [r7, #6]
 801bcf0:	8afb      	ldrh	r3, [r7, #22]
 801bcf2:	429a      	cmp	r2, r3
 801bcf4:	d318      	bcc.n	801bd28 <TRACE_AllocateBufer+0xb4>
 801bcf6:	4b1d      	ldr	r3, [pc, #116]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bcf8:	8a1b      	ldrh	r3, [r3, #16]
 801bcfa:	88fa      	ldrh	r2, [r7, #6]
 801bcfc:	429a      	cmp	r2, r3
 801bcfe:	d213      	bcs.n	801bd28 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bd00:	4b1a      	ldr	r3, [pc, #104]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd02:	2201      	movs	r2, #1
 801bd04:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bd06:	4b19      	ldr	r3, [pc, #100]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd08:	8a5a      	ldrh	r2, [r3, #18]
 801bd0a:	4b18      	ldr	r3, [pc, #96]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd0c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bd0e:	4b17      	ldr	r3, [pc, #92]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd10:	8a1b      	ldrh	r3, [r3, #16]
 801bd12:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bd14:	4b15      	ldr	r3, [pc, #84]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd16:	2200      	movs	r2, #0
 801bd18:	825a      	strh	r2, [r3, #18]
 801bd1a:	e005      	b.n	801bd28 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bd1c:	4b13      	ldr	r3, [pc, #76]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd1e:	8a1a      	ldrh	r2, [r3, #16]
 801bd20:	4b12      	ldr	r3, [pc, #72]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd22:	8a5b      	ldrh	r3, [r3, #18]
 801bd24:	1ad3      	subs	r3, r2, r3
 801bd26:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801bd28:	8afa      	ldrh	r2, [r7, #22]
 801bd2a:	88fb      	ldrh	r3, [r7, #6]
 801bd2c:	429a      	cmp	r2, r3
 801bd2e:	d90f      	bls.n	801bd50 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bd30:	4b0e      	ldr	r3, [pc, #56]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd32:	8a5a      	ldrh	r2, [r3, #18]
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bd38:	4b0c      	ldr	r3, [pc, #48]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd3a:	8a5a      	ldrh	r2, [r3, #18]
 801bd3c:	88fb      	ldrh	r3, [r7, #6]
 801bd3e:	4413      	add	r3, r2
 801bd40:	b29b      	uxth	r3, r3
 801bd42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bd46:	b29a      	uxth	r2, r3
 801bd48:	4b08      	ldr	r3, [pc, #32]	; (801bd6c <TRACE_AllocateBufer+0xf8>)
 801bd4a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	82bb      	strh	r3, [r7, #20]
 801bd50:	693b      	ldr	r3, [r7, #16]
 801bd52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd54:	68bb      	ldr	r3, [r7, #8]
 801bd56:	f383 8810 	msr	PRIMASK, r3
}
 801bd5a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801bd5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801bd60:	4618      	mov	r0, r3
 801bd62:	371c      	adds	r7, #28
 801bd64:	46bd      	mov	sp, r7
 801bd66:	bc80      	pop	{r7}
 801bd68:	4770      	bx	lr
 801bd6a:	bf00      	nop
 801bd6c:	20001bf8 	.word	0x20001bf8

0801bd70 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801bd70:	b480      	push	{r7}
 801bd72:	b085      	sub	sp, #20
 801bd74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd76:	f3ef 8310 	mrs	r3, PRIMASK
 801bd7a:	607b      	str	r3, [r7, #4]
  return(result);
 801bd7c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bd7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd80:	b672      	cpsid	i
}
 801bd82:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801bd84:	4b08      	ldr	r3, [pc, #32]	; (801bda8 <TRACE_Lock+0x38>)
 801bd86:	8adb      	ldrh	r3, [r3, #22]
 801bd88:	3301      	adds	r3, #1
 801bd8a:	b29a      	uxth	r2, r3
 801bd8c:	4b06      	ldr	r3, [pc, #24]	; (801bda8 <TRACE_Lock+0x38>)
 801bd8e:	82da      	strh	r2, [r3, #22]
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd94:	68bb      	ldr	r3, [r7, #8]
 801bd96:	f383 8810 	msr	PRIMASK, r3
}
 801bd9a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bd9c:	bf00      	nop
 801bd9e:	3714      	adds	r7, #20
 801bda0:	46bd      	mov	sp, r7
 801bda2:	bc80      	pop	{r7}
 801bda4:	4770      	bx	lr
 801bda6:	bf00      	nop
 801bda8:	20001bf8 	.word	0x20001bf8

0801bdac <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801bdac:	b480      	push	{r7}
 801bdae:	b085      	sub	sp, #20
 801bdb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdb2:	f3ef 8310 	mrs	r3, PRIMASK
 801bdb6:	607b      	str	r3, [r7, #4]
  return(result);
 801bdb8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bdba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdbc:	b672      	cpsid	i
}
 801bdbe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801bdc0:	4b08      	ldr	r3, [pc, #32]	; (801bde4 <TRACE_UnLock+0x38>)
 801bdc2:	8adb      	ldrh	r3, [r3, #22]
 801bdc4:	3b01      	subs	r3, #1
 801bdc6:	b29a      	uxth	r2, r3
 801bdc8:	4b06      	ldr	r3, [pc, #24]	; (801bde4 <TRACE_UnLock+0x38>)
 801bdca:	82da      	strh	r2, [r3, #22]
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdd0:	68bb      	ldr	r3, [r7, #8]
 801bdd2:	f383 8810 	msr	PRIMASK, r3
}
 801bdd6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bdd8:	bf00      	nop
 801bdda:	3714      	adds	r7, #20
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bc80      	pop	{r7}
 801bde0:	4770      	bx	lr
 801bde2:	bf00      	nop
 801bde4:	20001bf8 	.word	0x20001bf8

0801bde8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bde8:	b480      	push	{r7}
 801bdea:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bdec:	4b05      	ldr	r3, [pc, #20]	; (801be04 <TRACE_IsLocked+0x1c>)
 801bdee:	8adb      	ldrh	r3, [r3, #22]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	bf14      	ite	ne
 801bdf4:	2301      	movne	r3, #1
 801bdf6:	2300      	moveq	r3, #0
 801bdf8:	b2db      	uxtb	r3, r3
}
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	46bd      	mov	sp, r7
 801bdfe:	bc80      	pop	{r7}
 801be00:	4770      	bx	lr
 801be02:	bf00      	nop
 801be04:	20001bf8 	.word	0x20001bf8

0801be08 <memset>:
 801be08:	4402      	add	r2, r0
 801be0a:	4603      	mov	r3, r0
 801be0c:	4293      	cmp	r3, r2
 801be0e:	d100      	bne.n	801be12 <memset+0xa>
 801be10:	4770      	bx	lr
 801be12:	f803 1b01 	strb.w	r1, [r3], #1
 801be16:	e7f9      	b.n	801be0c <memset+0x4>

0801be18 <__libc_init_array>:
 801be18:	b570      	push	{r4, r5, r6, lr}
 801be1a:	4d0d      	ldr	r5, [pc, #52]	; (801be50 <__libc_init_array+0x38>)
 801be1c:	4c0d      	ldr	r4, [pc, #52]	; (801be54 <__libc_init_array+0x3c>)
 801be1e:	1b64      	subs	r4, r4, r5
 801be20:	10a4      	asrs	r4, r4, #2
 801be22:	2600      	movs	r6, #0
 801be24:	42a6      	cmp	r6, r4
 801be26:	d109      	bne.n	801be3c <__libc_init_array+0x24>
 801be28:	4d0b      	ldr	r5, [pc, #44]	; (801be58 <__libc_init_array+0x40>)
 801be2a:	4c0c      	ldr	r4, [pc, #48]	; (801be5c <__libc_init_array+0x44>)
 801be2c:	f000 f898 	bl	801bf60 <_init>
 801be30:	1b64      	subs	r4, r4, r5
 801be32:	10a4      	asrs	r4, r4, #2
 801be34:	2600      	movs	r6, #0
 801be36:	42a6      	cmp	r6, r4
 801be38:	d105      	bne.n	801be46 <__libc_init_array+0x2e>
 801be3a:	bd70      	pop	{r4, r5, r6, pc}
 801be3c:	f855 3b04 	ldr.w	r3, [r5], #4
 801be40:	4798      	blx	r3
 801be42:	3601      	adds	r6, #1
 801be44:	e7ee      	b.n	801be24 <__libc_init_array+0xc>
 801be46:	f855 3b04 	ldr.w	r3, [r5], #4
 801be4a:	4798      	blx	r3
 801be4c:	3601      	adds	r6, #1
 801be4e:	e7f2      	b.n	801be36 <__libc_init_array+0x1e>
 801be50:	0801cdfc 	.word	0x0801cdfc
 801be54:	0801cdfc 	.word	0x0801cdfc
 801be58:	0801cdfc 	.word	0x0801cdfc
 801be5c:	0801ce00 	.word	0x0801ce00

0801be60 <floor>:
 801be60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801be6c:	2e13      	cmp	r6, #19
 801be6e:	460b      	mov	r3, r1
 801be70:	4607      	mov	r7, r0
 801be72:	460c      	mov	r4, r1
 801be74:	4605      	mov	r5, r0
 801be76:	dc32      	bgt.n	801bede <floor+0x7e>
 801be78:	2e00      	cmp	r6, #0
 801be7a:	da14      	bge.n	801bea6 <floor+0x46>
 801be7c:	a334      	add	r3, pc, #208	; (adr r3, 801bf50 <floor+0xf0>)
 801be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be82:	f7e4 f987 	bl	8000194 <__adddf3>
 801be86:	2200      	movs	r2, #0
 801be88:	2300      	movs	r3, #0
 801be8a:	f7e4 fbb7 	bl	80005fc <__aeabi_dcmpgt>
 801be8e:	b138      	cbz	r0, 801bea0 <floor+0x40>
 801be90:	2c00      	cmp	r4, #0
 801be92:	da56      	bge.n	801bf42 <floor+0xe2>
 801be94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801be98:	4325      	orrs	r5, r4
 801be9a:	d055      	beq.n	801bf48 <floor+0xe8>
 801be9c:	4c2e      	ldr	r4, [pc, #184]	; (801bf58 <floor+0xf8>)
 801be9e:	2500      	movs	r5, #0
 801bea0:	4623      	mov	r3, r4
 801bea2:	462f      	mov	r7, r5
 801bea4:	e025      	b.n	801bef2 <floor+0x92>
 801bea6:	4a2d      	ldr	r2, [pc, #180]	; (801bf5c <floor+0xfc>)
 801bea8:	fa42 f806 	asr.w	r8, r2, r6
 801beac:	ea01 0208 	and.w	r2, r1, r8
 801beb0:	4302      	orrs	r2, r0
 801beb2:	d01e      	beq.n	801bef2 <floor+0x92>
 801beb4:	a326      	add	r3, pc, #152	; (adr r3, 801bf50 <floor+0xf0>)
 801beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beba:	f7e4 f96b 	bl	8000194 <__adddf3>
 801bebe:	2200      	movs	r2, #0
 801bec0:	2300      	movs	r3, #0
 801bec2:	f7e4 fb9b 	bl	80005fc <__aeabi_dcmpgt>
 801bec6:	2800      	cmp	r0, #0
 801bec8:	d0ea      	beq.n	801bea0 <floor+0x40>
 801beca:	2c00      	cmp	r4, #0
 801becc:	bfbe      	ittt	lt
 801bece:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801bed2:	4133      	asrlt	r3, r6
 801bed4:	18e4      	addlt	r4, r4, r3
 801bed6:	ea24 0408 	bic.w	r4, r4, r8
 801beda:	2500      	movs	r5, #0
 801bedc:	e7e0      	b.n	801bea0 <floor+0x40>
 801bede:	2e33      	cmp	r6, #51	; 0x33
 801bee0:	dd0b      	ble.n	801befa <floor+0x9a>
 801bee2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bee6:	d104      	bne.n	801bef2 <floor+0x92>
 801bee8:	4602      	mov	r2, r0
 801beea:	f7e4 f953 	bl	8000194 <__adddf3>
 801beee:	4607      	mov	r7, r0
 801bef0:	460b      	mov	r3, r1
 801bef2:	4638      	mov	r0, r7
 801bef4:	4619      	mov	r1, r3
 801bef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801befa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801befe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bf02:	fa28 f802 	lsr.w	r8, r8, r2
 801bf06:	ea10 0f08 	tst.w	r0, r8
 801bf0a:	d0f2      	beq.n	801bef2 <floor+0x92>
 801bf0c:	a310      	add	r3, pc, #64	; (adr r3, 801bf50 <floor+0xf0>)
 801bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf12:	f7e4 f93f 	bl	8000194 <__adddf3>
 801bf16:	2200      	movs	r2, #0
 801bf18:	2300      	movs	r3, #0
 801bf1a:	f7e4 fb6f 	bl	80005fc <__aeabi_dcmpgt>
 801bf1e:	2800      	cmp	r0, #0
 801bf20:	d0be      	beq.n	801bea0 <floor+0x40>
 801bf22:	2c00      	cmp	r4, #0
 801bf24:	da0a      	bge.n	801bf3c <floor+0xdc>
 801bf26:	2e14      	cmp	r6, #20
 801bf28:	d101      	bne.n	801bf2e <floor+0xce>
 801bf2a:	3401      	adds	r4, #1
 801bf2c:	e006      	b.n	801bf3c <floor+0xdc>
 801bf2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801bf32:	2301      	movs	r3, #1
 801bf34:	40b3      	lsls	r3, r6
 801bf36:	441d      	add	r5, r3
 801bf38:	42af      	cmp	r7, r5
 801bf3a:	d8f6      	bhi.n	801bf2a <floor+0xca>
 801bf3c:	ea25 0508 	bic.w	r5, r5, r8
 801bf40:	e7ae      	b.n	801bea0 <floor+0x40>
 801bf42:	2500      	movs	r5, #0
 801bf44:	462c      	mov	r4, r5
 801bf46:	e7ab      	b.n	801bea0 <floor+0x40>
 801bf48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801bf4c:	e7a8      	b.n	801bea0 <floor+0x40>
 801bf4e:	bf00      	nop
 801bf50:	8800759c 	.word	0x8800759c
 801bf54:	7e37e43c 	.word	0x7e37e43c
 801bf58:	bff00000 	.word	0xbff00000
 801bf5c:	000fffff 	.word	0x000fffff

0801bf60 <_init>:
 801bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf62:	bf00      	nop
 801bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf66:	bc08      	pop	{r3}
 801bf68:	469e      	mov	lr, r3
 801bf6a:	4770      	bx	lr

0801bf6c <_fini>:
 801bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf6e:	bf00      	nop
 801bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf72:	bc08      	pop	{r3}
 801bf74:	469e      	mov	lr, r3
 801bf76:	4770      	bx	lr
